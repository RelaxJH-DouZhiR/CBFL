project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/chrono/GJChronology,18,356,        if ((base = getBase()) != null) {,0.05556,0,0,0
org/joda/time/chrono/GJChronology,18,364,            instant = iGregorianChronology.getDateTimeMillis,0.05556,1,1,1
org/joda/time/field/FieldUtils,18,233,            throw new IllegalFieldValueException,0.05556,0,1,0
org/joda/time/DateMidnight,18,343,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);",0.03333,0,-1,0
org/joda/time/IllegalFieldValueException,18,53,"            buf.append(""must be in the range ["")",0.01961,0,-1,0
org/joda/time/IllegalFieldValueException,18,50,        } else if (upperBound == null) {,0.01563,0,-1,0
org/joda/time/IllegalFieldValueException,18,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,109,        iDateTimeFieldType = fieldType;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,110,        iDurationFieldType = null;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,111,        iFieldName = fieldType.getName();,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,112,        iNumberValue = value;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,113,        iStringValue = null;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,114,        iLowerBound = lowerBound;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,115,        iUpperBound = upperBound;,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,116,        iMessage = super.getMessage();,0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,117,    },0.01471,0,-1,0
org/joda/time/IllegalFieldValueException,18,41,        StringBuffer buf = new StringBuffer(),0.01282,0,-1,0
org/joda/time/IllegalFieldValueException,18,44,        if (lowerBound == null) {,0.01282,0,-1,0
org/joda/time/IllegalFieldValueException,18,59,        if (explain != null) {,0.01282,0,-1,0
org/joda/time/IllegalFieldValueException,18,63,        return buf.toString();,0.01282,0,-1,0
org/joda/time/DateTimeFieldType,18,378,        return iName;,0.00833,0,-1,0
org/joda/time/chrono/GJChronology,18,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.00541,0,-1,0
org/joda/time/chrono/GJChronology,18,194,            cutoverInstant = gregorianCutover.toInstant();,0.00129,0,-1,0
org/joda/time/Instant,18,144,        return this;,0.00129,0,-1,0
org/joda/time/chrono/JulianChronology,18,224,            leapYears = (relativeYear + 3) >> 2;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,489,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.00104,1,-1,1
org/joda/time/chrono/GJChronology,18,490,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,491,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,492,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,493,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,494,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,495,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,496,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,497,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,498,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,500,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,131,            instant = iChronology.getYearMillis(year + 1);,0.00104,0,-1,0
org/joda/time/field/BaseDateTimeField,18,886,        long newInstant = roundFloor(instant);,0.00104,0,-1,0
org/joda/time/field/BaseDateTimeField,18,887,        if (newInstant != instant) {,0.00104,0,-1,0
org/joda/time/field/BaseDateTimeField,18,888,"            instant = add(newInstant, 1);",0.00104,0,-1,0
org/joda/time/field/BaseDateTimeField,18,890,        return instant;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,922,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,923,        },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,933,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,934,        },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,944,        {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,945,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,946,            if (durationField == null) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,947,"                durationField = new LinkedDurationField(iDurationField, this);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,949,            iDurationField = durationField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,950,        },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,600,"            this(julianField, gregorianField, cutoverMillis, false);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,601,        },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,610,"                     long cutoverMillis, boolean convertByWeekyear) {",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,611,            super(gregorianField.getType());,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,612,            iJulianField = julianField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,613,            iGregorianField = gregorianField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,614,            iCutover = cutoverMillis;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,615,            iConvertByWeekyear = convertByWeekyear;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,618,            iDurationField = gregorianField.getDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,620,            DurationField rangeField = gregorianField.getRangeDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,621,            if (rangeField == null) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,622,                rangeField = julianField.getRangeDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,624,            iRangeDurationField = rangeField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,625,        },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,752,            return iDurationField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,272,    },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,83,        return to.getDateTimeMillis,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,189,        zone = DateTimeUtils.getZone(zone);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,191,        if (gregorianCutover == null) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,200,        if (chronos == null) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,201,            chronos = new ArrayList<GJChronology>(2);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,202,"            cCache.put(zone, chronos);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,214,        if (zone == DateTimeZone.UTC) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,215,            chrono = new GJChronology,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,228,        chronos.add(chrono);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,230,        return chrono;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,453,        Object[] params = (Object[])getParam();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,455,        JulianChronology julian = (JulianChronology)params[0];,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,456,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,457,        Instant cutoverInstant = (Instant)params[2];,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,458,        iCutoverMillis = cutoverInstant.getMillis();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,460,        iJulianChronology = julian;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,461,        iGregorianChronology = gregorian;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,462,        iCutoverInstant = cutoverInstant;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,464,        if (getBase() != null) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,468,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,473,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,479,        fields.copyFieldsFrom(gregorian);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,485,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,505,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,514,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,515,            fields.dayOfYear = new CutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,520,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,521,            fields.weekOfWeekyear = new CutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,529,            fields.year = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,531,            fields.years = fields.year.getDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,532,            fields.yearOfEra = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,534,            fields.yearOfCentury = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,537,            fields.centuryOfEra = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,539,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,541,            fields.monthOfYear = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,543,            fields.months = fields.monthOfYear.getDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,545,            fields.weekyear = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,547,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,549,            fields.weekyears = fields.weekyear.getDurationField();,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,555,            CutoverField cf = new CutoverField,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,557,            cf.iRangeDurationField = fields.months;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,558,            fields.dayOfMonth = cf;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,560,    },0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,563,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,1071,"            super(durationField, durationField.getType());",0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,1072,            iField = dateTimeField;,0.00104,0,-1,0
org/joda/time/chrono/GJChronology,18,1073,        },0.00104,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,127,        int year = get(instant);,0.00104,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.00104,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,129,        if (instant != yearStartMillis) {,0.00104,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,133,        return instant;,0.00104,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,72,        if (years == 0) {,0.00104,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,75,"        return set(instant, get(instant) + years);",0.00104,0,-1,0
org/joda/time/chrono/BasicChronology,18,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.00104,0,-1,0
org/joda/time/field/SkipDateTimeField,18,80,        int value = super.get(millis);,0.00104,0,-1,0
org/joda/time/field/SkipDateTimeField,18,81,        if (value <= iSkip) {,0.00104,0,-1,0
org/joda/time/field/SkipDateTimeField,18,84,        return value;,0.00104,0,-1,0
org/joda/time/chrono/JulianChronology,18,211,        return (year & 3) == 0;,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,219,        int relativeYear = year - 1968;,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,221,        if (relativeYear <= 0) {,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,253,        return MILLIS_PER_YEAR / 2;,0.00103,0,-1,0
org/joda/time/chrono/JulianChronology,18,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,133,        int thisWeekyear = get( instant );,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,134,        if ( thisWeekyear == year ) {,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,155,        if ( setToWeek > maxOutWeeks ) {,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,162,        long workInstant = instant; // Get a copy,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,168,"        workInstant = iChronology.setYear( workInstant, year );",0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,173,        int workWoyYear = get( workInstant );,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,179,        if ( workWoyYear < year ) {,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,181,        } else if ( workWoyYear > year ) {,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,204,        return workInstant;,0.00103,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,96,        return iField.get(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,60,        return iChronology.getWeekyear(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,493,        int year = getYear(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,494,"        int week = getWeekOfWeekyear(instant, year);",0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,495,        if (week == 1) {,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,185,        return iMinDaysInFirstWeek;,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,344,            return jan1millis + (8 - jan1dayOfWeek),0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.00103,0,-1,0
org/joda/time/chrono/BasicChronology,18,539,            if (daysSince19700101 < -3) {,0.00103,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,163,        return getMaximumValue(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,236,        if (wow > 1) {,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,239,        return instant;,0.00103,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.00103,0,-1,0
org/joda/time/field/BaseDateTimeField,18,792,        return getMaximumValue();,0.00103,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,103,        return DateTimeConstants.MONDAY;,0.00102,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,112,        return DateTimeConstants.SUNDAY;,0.00102,0,-1,0
org/joda/time/DateTimeUtils,18,272,        return zone;,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.00102,0,-1,0
org/joda/time/DateTimeUtils,18,269,        if (zone == null) {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,339,        long jan1millis = getYearMillis(year);,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,517,        if (instant < firstWeekMillis1) {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,521,        if (instant >= firstWeekMillis2) {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.00102,0,-1,0
org/joda/time/chrono/JulianChronology,18,50,public final class JulianChronology extends BasicGJChronology {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,153,        if ((base = getBase()) != null) {,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,157,        FieldUtils.verifyValueBounds,0.00102,0,-1,0
org/joda/time/chrono/BasicChronology,18,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.00102,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,95,            instant += 1;,0.00102,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.00102,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.00101,0,-1,0
org/joda/time/chrono/BasicChronology,18,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.00101,0,-1,0
org/joda/time/Instant,18,118,        super();,0.00099,0,-1,0
org/joda/time/Instant,18,119,        iMillis = instant;,0.00099,0,-1,0
org/joda/time/Instant,18,120,    },0.00099,0,-1,0
org/joda/time/Instant,18,256,        return iMillis;,0.00098,0,-1,0
org/joda/time/chrono/JulianChronology,18,162,"        super(base, param, minDaysInFirstWeek);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,163,    },0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,75,    },0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,114,"        return getInstance(zone, 4);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,125,        if (zone == null) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,129,        synchronized (cCache) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,130,            JulianChronology[] chronos = cCache.get(zone);,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,131,            if (chronos == null) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,132,                chronos = new JulianChronology[7];,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,133,"                cCache.put(zone, chronos);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,140,            },0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,141,            if (chrono == null) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,142,                if (zone == DateTimeZone.UTC) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,151,        },0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,152,        return chrono;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,241,        return MIN_YEAR;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,245,        return MAX_YEAR;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,249,        return MILLIS_PER_YEAR;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,257,        return MILLIS_PER_MONTH;,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,265,        if (getBase() == null) {,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,266,            super.assemble(fields);,0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.00096,0,-1,0
org/joda/time/chrono/JulianChronology,18,271,    },0.00096,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,224,        return iChronology.getMinYear();,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,54,"        this(chronology, field, 0);",0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,55,    },0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,196,        return iField.getRangeDurationField();,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,65,        super(field);,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,66,        iChronology = chronology;,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,67,        int min = super.getMinimumValue();,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,68,        if (min < skip) {,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,69,            iMinValue = min - 1;,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,75,        iSkip = skip;,0.00087,0,-1,0
org/joda/time/field/SkipDateTimeField,18,76,    },0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,212,        return iField.getMinimumValue();,0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,52,"        this(field, null);",0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,53,    },0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,62,        super();,0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,63,        if (field == null) {,0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,66,        iField = field;,0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,67,        iType = (type == null ? field.getType() : type);,0.00087,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,68,    },0.00087,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,92,        if (instant >= 0) {,0.00085,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,115,        return iChronology.getMinYear();,0.00084,0,-1,0
org/joda/time/chrono/BasicChronology,18,167,        if ((base = getBase()) != null) {,0.00082,0,-1,0
org/joda/time/chrono/BasicChronology,18,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.00082,0,-1,0
org/joda/time/chrono/BasicChronology,18,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.00082,0,-1,0
org/joda/time/chrono/BasicChronology,18,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.00082,0,-1,0
org/joda/time/chrono/BasicChronology,18,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.00082,0,-1,0
org/joda/time/chrono/BasicChronology,18,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.00082,0,-1,0
org/joda/time/chrono/GregorianChronology,18,213,                leapYears--;,0.00081,0,-1,0
org/joda/time/chrono/BasicChronology,18,435,"        return getMonthOfYear(millis, getYear(millis));",0.00078,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,72,        return iChronology.getMonthOfYear(instant);,0.00078,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,56,        return iChronology.getDayOfWeek(instant);,0.00075,0,-1,0
org/joda/time/chrono/BasicChronology,18,534,        if (instant >= 0) {,0.00075,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.00071,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,80,        return instant + (value - get(instant)) * iUnitMillis;,0.00071,0,-1,0
org/joda/time/base/BaseDateTime,18,252,        super();,0.00071,0,-1,0
org/joda/time/base/BaseDateTime,18,253,        iChronology = checkChronology(chronology);,0.00071,0,-1,0
org/joda/time/base/BaseDateTime,18,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,175,        int thisYear = getYear(instant);,0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,177,        int millisOfDay = getMillisOfDay(instant);,0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,196,        instant += millisOfDay;,0.00071,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,198,        return instant;,0.00071,0,-1,0
org/joda/time/chrono/BasicChronology,18,485,        long yearStart = getYearMillis(year);,0.00071,0,-1,0
org/joda/time/chrono/BasicChronology,18,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00071,0,-1,0
org/joda/time/chrono/BasicChronology,18,551,        if (instant >= 0) {,0.0007,0,-1,0
org/joda/time/field/FieldUtils,18,219,    },0.00069,0,-1,0
org/joda/time/field/FieldUtils,18,214,        if ((value < lowerBound) || (value > upperBound)) {,0.00069,0,-1,0
org/joda/time/chrono/BasicChronology,18,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.00068,0,-1,0
org/joda/time/chrono/BasicChronology,18,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.00068,0,-1,0
org/joda/time/chrono/BasicChronology,18,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.00068,0,-1,0
org/joda/time/chrono/BasicChronology,18,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.00068,0,-1,0
org/joda/time/chrono/BasicChronology,18,682,        return getMaxMonth();,0.00068,0,-1,0
org/joda/time/field/FieldUtils,18,237,    },0.00068,0,-1,0
org/joda/time/field/FieldUtils,18,232,        if ((value < lowerBound) || (value > upperBound)) {,0.00068,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.00066,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,79,        if (instant >= 0) {,0.00066,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00065,0,-1,0
org/joda/time/chrono/BasicChronology,18,448,        int year = getYear(millis);,0.00065,0,-1,0
org/joda/time/chrono/BasicChronology,18,449,"        int month = getMonthOfYear(millis, year);",0.00065,0,-1,0
org/joda/time/chrono/BasicChronology,18,450,"        return getDayOfMonth(millis, year, month);",0.00065,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,47,        return iChronology.getDayOfMonth(instant);,0.00065,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,120,        if (isLeapYear(year)) {,0.00065,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,54,        return iChronology.getYear(instant);,0.00065,0,-1,0
org/joda/time/chrono/BasicChronology,18,468,        long dateMillis = getYearMillis(year);,0.00064,0,-1,0
org/joda/time/chrono/BasicChronology,18,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.00064,0,-1,0
org/joda/time/chrono/BasicChronology,18,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00064,0,-1,0
org/joda/time/chrono/GregorianChronology,18,221,        return MIN_YEAR;,0.00064,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.00064,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,93,        return,0.00064,0,-1,0
org/joda/time/chrono/GregorianChronology,18,233,        return MILLIS_PER_YEAR / 2;,0.00064,0,-1,0
org/joda/time/chrono/GregorianChronology,18,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.00064,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,139,        if (isLeapYear(year)) {,0.00064,0,-1,0
org/joda/time/chrono/BasicChronology,18,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,401,        if (i2 < 0) {,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,404,        int year = (int) (i2 / unitMillis);,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,406,        long yearStart = getYearMillis(year);,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,407,        long diff = instant - yearStart;,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,409,        if (diff < 0) {,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,18,428,        return year;,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,202,        int leapYears = year / 100;,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,203,        if (year < 0) {,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,212,            if (isLeapYear(year)) {,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.00063,0,-1,0
org/joda/time/chrono/GregorianChronology,18,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.00062,0,-1,0
org/joda/time/chrono/BasicChronology,18,385,        long millis = getYearMillis(year);,0.00061,0,-1,0
org/joda/time/chrono/BasicChronology,18,386,"        millis += getTotalMillisByYearMonth(year, month);",0.00061,0,-1,0
org/joda/time/chrono/BasicChronology,18,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00061,0,-1,0
org/joda/time/base/BaseDateTime,18,270,        return DateTimeUtils.getChronology(chronology);,0.0006,0,-1,0
org/joda/time/base/AbstractDateTime,18,51,        super();,0.0006,0,-1,0
org/joda/time/base/AbstractDateTime,18,52,    },0.0006,0,-1,0
org/joda/time/chrono/BasicChronology,18,360,        return getYearInfo(year).iFirstDayMillis;,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,739,        if (info == null || info.iYear != year) {,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,743,        return info;,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,770,"        YearInfo(int year, long firstDayMillis) {",0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,771,            iYear = year;,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,772,            iFirstDayMillis = firstDayMillis;,0.00059,0,-1,0
org/joda/time/chrono/BasicChronology,18,773,        },0.00059,0,-1,0
org/joda/time/base/AbstractInstant,18,61,        super();,0.00058,0,-1,0
org/joda/time/base/AbstractInstant,18,62,    },0.00058,0,-1,0
org/joda/time/DateTimeUtils,18,255,        return chrono;,0.00053,0,-1,0
org/joda/time/DateTimeUtils,18,82,        checkPermission();,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,84,    },0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,414,        FixedMillisProvider(long fixedMillis) {,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,415,            iMillis = fixedMillis;,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,416,        },0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,68,        checkPermission();,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,70,    },0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,129,        SecurityManager sm = System.getSecurityManager();,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,130,        if (sm != null) {,0.00051,0,-1,0
org/joda/time/DateTimeUtils,18,133,    },0.00051,0,-1,0
org/joda/time/DateTimeZone,18,174,        SecurityManager sm = System.getSecurityManager();,0.0005,0,-1,0
org/joda/time/DateTimeZone,18,175,        if (sm != null) {,0.0005,0,-1,0
org/joda/time/DateTimeZone,18,178,        if (zone == null) {,0.0005,0,-1,0
org/joda/time/DateTimeZone,18,181,        synchronized(DateTimeZone.class) {,0.0005,0,-1,0
org/joda/time/DateTimeZone,18,182,            cDefault = zone;,0.0005,0,-1,0
org/joda/time/DateTimeZone,18,183,        },0.0005,0,-1,0
org/joda/time/DateTimeZone,18,184,    },0.0005,0,-1,0
org/joda/time/DateTimeUtils,18,252,        if (chrono == null) {,0.00047,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00046,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,131,        return null;,0.00046,0,-1,0
org/joda/time/chrono/AssembledChronology,18,315,        return iParam;,0.00046,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,56,        return iChronology.years();,0.00046,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,90,        return iField.getRangeDurationField();,0.00046,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,139,        return iRangeField;,0.00046,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,208,        return null;,0.00046,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,58,        return iChronology.weekyears();,0.00046,0,-1,0
org/joda/time/field/BaseDurationField,18,55,        return iType;,0.00046,0,-1,0
org/joda/time/DateTimeZone,18,147,                        },0.00046,0,-1,0
org/joda/time/DateTimeZone,18,133,        DateTimeZone zone = cDefault;,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,134,        if (zone == null) {,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,135,            synchronized(DateTimeZone.class) {,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,136,                zone = cDefault;,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,137,                if (zone == null) {,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,138,                    DateTimeZone temp = null;,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,141,"                            String id = System.getProperty(""user.timezone"");",0.00045,0,-1,0
org/joda/time/DateTimeZone,18,142,                            if (id != null) {  // null check avoids stack overflow,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,143,                                temp = forID(id);,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,148,                        if (temp == null) {,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,153,                    },0.00045,0,-1,0
org/joda/time/DateTimeZone,18,154,                    if (temp == null) {,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,157,                    cDefault = zone = temp;,0.00045,0,-1,0
org/joda/time/DateTimeZone,18,159,            },0.00045,0,-1,0
org/joda/time/DateTimeZone,18,161,        return zone;,0.00045,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,122,        return iRangeField;,0.00045,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,309,        return iChronology.years();,0.00045,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,51,        return iChronology.months();,0.00045,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,95,        return null;,0.00045,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,141,        return iUnitField;,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,45,public final class GregorianChronology extends BasicGJChronology {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,148,"        super(base, param, minDaysInFirstWeek);",0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,149,    },0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,72,    },0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,100,"        return getInstance(zone, 4);",0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,111,        if (zone == null) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,115,        synchronized (cCache) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,117,            if (chronos == null) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,118,                chronos = new GregorianChronology[7];,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,119,"                cCache.put(zone, chronos);",0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,126,            },0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,127,            if (chrono == null) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,128,                if (zone == DateTimeZone.UTC) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,137,        },0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,138,        return chrono;,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,191,        if (getBase() == null) {,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,192,            super.assemble(fields);,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,194,    },0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,225,        return MAX_YEAR;,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,229,        return MILLIS_PER_YEAR;,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,18,237,        return MILLIS_PER_MONTH;,0.00045,0,-1,0
org/joda/time/chrono/BasicChronology,18,691,        return 12;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,75,"        super(base, param, minDaysInFirstWeek);",0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,76,    },0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,56,        long minSum = 0;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,57,        long maxSum = 0;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,58,        for (int i = 0; i < 11; i++) {,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,61,            minSum += millis;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,66,            maxSum += millis;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00045,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,69,    },0.00045,0,-1,0
org/joda/time/chrono/AssembledChronology,18,156,        return iMillis;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,160,        return iMillisOfSecond;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,164,        return iMillisOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,168,        return iSeconds;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,172,        return iSecondOfMinute;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,176,        return iSecondOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,180,        return iMinutes;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,184,        return iMinuteOfHour;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,188,        return iMinuteOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,192,        return iHours;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,196,        return iHourOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,200,        return iClockhourOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,204,        return iHalfdays;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,208,        return iHourOfHalfday;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,212,        return iClockhourOfHalfday;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,216,        return iHalfdayOfDay;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,220,        return iDays;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,224,        return iDayOfWeek;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,228,        return iDayOfMonth;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,232,        return iDayOfYear;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,236,        return iWeeks;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,240,        return iWeekOfWeekyear;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,244,        return iWeekyears;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,248,        return iWeekyear;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,252,        return iWeekyearOfCentury;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,256,        return iMonths;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,260,        return iMonthOfYear;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,264,        return iYears;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,272,        return iYearOfEra;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,276,        return iYearOfCentury;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,280,        return iCenturies;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,284,        return iCenturyOfEra;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,288,        return iEras;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,292,        return iEra;,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,92,        return false;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,445,                if (isSupported(f = chrono.millis())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,446,                    millis = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,448,                if (isSupported(f = chrono.seconds())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,449,                    seconds = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,451,                if (isSupported(f = chrono.minutes())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,452,                    minutes = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,454,                if (isSupported(f = chrono.hours())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,455,                    hours = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,457,                if (isSupported(f = chrono.halfdays())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,458,                    halfdays = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,460,                if (isSupported(f = chrono.days())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,461,                    days = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,463,                if (isSupported(f = chrono.weeks())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,464,                    weeks = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,466,                if (isSupported(f = chrono.weekyears())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,467,                    weekyears = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,469,                if (isSupported(f = chrono.months())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,470,                    months = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,472,                if (isSupported(f = chrono.years())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,473,                    years = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,475,                if (isSupported(f = chrono.centuries())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,476,                    centuries = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,478,                if (isSupported(f = chrono.eras())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,486,                    millisOfSecond = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,489,                    millisOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,492,                    secondOfMinute = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,495,                    secondOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,498,                    minuteOfHour = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,501,                    minuteOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,504,                    hourOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,507,                    clockhourOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,510,                    hourOfHalfday = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,513,                    clockhourOfHalfday = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,516,                    halfdayOfDay = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,519,                    dayOfWeek = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,522,                    dayOfMonth = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,525,                    dayOfYear = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,528,                    weekOfWeekyear = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,530,                if (isSupported(f = chrono.weekyear())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,531,                    weekyear = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,534,                    weekyearOfCentury = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,537,                    monthOfYear = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,539,                if (isSupported(f = chrono.year())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,540,                    year = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,543,                    yearOfEra = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,546,                    yearOfCentury = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,549,                    centuryOfEra = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,551,                if (isSupported(f = chrono.era())) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,552,                    era = f;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,555,        },0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,558,            return field == null ? false : field.isSupported();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,562,            return field == null ? false : field.isSupported();,0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,62,        return true;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,164,        return MILLIS_OF_SECOND_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,173,        return MILLIS_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,182,        return SECOND_OF_MINUTE_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,191,        return SECOND_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,209,        return MINUTE_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,218,        return HOUR_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,236,        return HOUR_OF_HALFDAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,254,        return HALFDAY_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,264,        return DAY_OF_WEEK_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,282,        return DAY_OF_YEAR_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,300,        return WEEKYEAR_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,318,        return MONTH_OF_YEAR_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,336,        return YEAR_OF_ERA_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,345,        return YEAR_OF_CENTURY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,354,        return CENTURY_OF_ERA_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,363,        return ERA_TYPE;,0.00044,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,100,        iBase = base;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,101,        iParam = param;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,102,        setFields();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,103,    },0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,268,        return iYear;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,308,        return iBase;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,319,        Fields fields = new Fields();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,320,        if (iBase != null) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,323,        assemble(fields);,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,369,        if (iBase == null) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,370,            flags = 0;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,385,        iBaseFlags = flags;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,386,    },0.00044,0,-1,0
org/joda/time/chrono/BaseChronology,18,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,53,            field = cCache.get(type);,0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,50,        super();,0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,51,        if (type == null) {,0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,54,        iType = type;,0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,55,    },0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,58,        return iType;,0.00044,0,-1,0
org/joda/time/field/BaseDateTimeField,18,69,        return true;,0.00044,0,-1,0
org/joda/time/field/BaseDurationField,18,47,        super();,0.00044,0,-1,0
org/joda/time/field/BaseDurationField,18,48,        if (type == null) {,0.00044,0,-1,0
org/joda/time/field/BaseDurationField,18,51,        iType = type;,0.00044,0,-1,0
org/joda/time/field/BaseDurationField,18,52,    },0.00044,0,-1,0
org/joda/time/field/BaseDurationField,18,66,        return true;,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,436,        Fields() {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,18,437,        },0.00044,0,-1,0
org/joda/time/field/DecoratedDurationField,18,52,        super(type);,0.00044,0,-1,0
org/joda/time/field/DecoratedDurationField,18,53,        if (field == null) {,0.00044,0,-1,0
org/joda/time/field/DecoratedDurationField,18,56,        if (!field.isSupported()) {,0.00044,0,-1,0
org/joda/time/field/DecoratedDurationField,18,59,        iField = field;,0.00044,0,-1,0
org/joda/time/field/DecoratedDurationField,18,60,    },0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,42,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,43,    },0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,48,        super(type);,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,50,        if (!unit.isPrecise()) {,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,54,        iUnitMillis = unit.getUnitMillis();,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,55,        if (iUnitMillis < 1) {,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,59,        iUnitField = unit;,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,60,    },0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,150,        return 0;,0.00044,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,154,        return iUnitMillis;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,131,"        super(base, param);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,139,    },0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,76,        cMillisField = MillisDurationField.INSTANCE;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,77,        cSecondsField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,79,        cMinutesField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,81,        cHoursField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,83,        cHalfdaysField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,85,        cDaysField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,87,        cWeeksField = new PreciseDurationField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,93,        cMillisOfDayField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,99,        cSecondOfDayField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,108,        cHourOfDayField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,120,        cHalfdayOfDayField = new HalfdayField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,121,    },0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,241,        fields.millis = cMillisField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,242,        fields.seconds = cSecondsField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,243,        fields.minutes = cMinutesField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,244,        fields.hours = cHoursField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,245,        fields.halfdays = cHalfdaysField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,246,        fields.days = cDaysField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,247,        fields.weeks = cWeeksField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,249,        fields.millisOfSecond = cMillisOfSecondField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,250,        fields.millisOfDay = cMillisOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,252,        fields.secondOfDay = cSecondOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,253,        fields.minuteOfHour = cMinuteOfHourField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,254,        fields.minuteOfDay = cMinuteOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,255,        fields.hourOfDay = cHourOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,264,        fields.year = new BasicYearDateTimeField(this);,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,268,        DateTimeField field = new OffsetDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,270,        fields.centuryOfEra = new DividedDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,273,        field = new RemainderDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,278,        fields.era = new GJEraDateTimeField(this);,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,286,        field = new RemainderDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,294,        fields.years = fields.year.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,296,        fields.months = fields.monthOfYear.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,297,        fields.weekyears = fields.weekyear.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,298,    },0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,50,abstract class BasicChronology extends AssembledChronology {,0.00044,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00044,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,52,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,53,        iMax = iChronology.getMaxMonth();,0.00044,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,54,        iLeapMonth = leapMonth;,0.00044,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,55,    },0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,55,        super(type);,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,56,        iUnitMillis = unitMillis;,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,58,    },0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,137,        return iDurationField;,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,151,        LinkedDurationField(DurationFieldType type) {,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,152,            super(type);,0.00044,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,153,        },0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,42,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,43,    },0.00044,0,-1,0
org/joda/time/field/PreciseDurationField,18,43,        super(type);,0.00044,0,-1,0
org/joda/time/field/PreciseDurationField,18,44,        iUnitMillis = unitMillis;,0.00044,0,-1,0
org/joda/time/field/PreciseDurationField,18,45,    },0.00044,0,-1,0
org/joda/time/field/PreciseDurationField,18,54,        return true;,0.00044,0,-1,0
org/joda/time/field/PreciseDurationField,18,63,        return iUnitMillis;,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,57,"        super(type, unit);",0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,59,        if (!range.isPrecise()) {,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,63,        long rangeMillis = range.getUnitMillis();,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,65,        if (iRange < 2) {,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,69,        iRangeField = range;,0.00044,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,70,    },0.00044,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,45,"        super(field, type);",0.00044,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,46,        if (field.getMinimumValue() != 0) {,0.00044,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,49,    },0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,54,        super(type);,0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,55,        if (field == null) {,0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,58,        if (!field.isSupported()) {,0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,61,        iField = field;,0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,62,    },0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,70,        return iField;,0.00044,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,86,        return iField.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,18,751,        },0.00044,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00044,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,46,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,47,    },0.00044,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,119,        return iChronology.getMaxYear();,0.00044,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00044,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,41,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,42,    },0.00044,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,93,        return 1;,0.00044,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,97,        return getWrappedField().getMaximumValue();,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,47,    },0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,59,    },0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,73,"        super(field, type);",0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,75,        if (offset == 0) {,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,79,        iOffset = offset;,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,82,            iMin = field.getMinimumValue() + offset;,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,87,            iMax = field.getMaximumValue() + offset;,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,91,    },0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,174,        return iMin;,0.00044,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,183,        return iMax;,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,56,"        super(field, type);",0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,58,        if (divisor < 2) {,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,62,        DurationField unitField = field.getDurationField();,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,63,        if (unitField == null) {,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,66,            iDurationField = new ScaledDurationField(,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,70,        iDivisor = divisor;,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,72,        int i = field.getMinimumValue();,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,75,        int j = field.getMaximumValue();,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,78,        iMin = min;,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,79,        iMax = max;,0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,80,    },0.00044,0,-1,0
org/joda/time/field/DividedDateTimeField,18,182,        return iDurationField;,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,52,"        super(field, type);",0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,54,        if (divisor < 2) {,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,58,        DurationField rangeField = field.getDurationField();,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,59,        if (rangeField == null) {,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,62,            iRangeField = new ScaledDurationField(,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,66,        iDivisor = divisor;,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,67,    },0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,76,"        this(dividedField, dividedField.getType());",0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,77,    },0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,87,"        super(dividedField.getWrappedField(), type);",0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,88,        iDivisor = dividedField.iDivisor;,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,89,        iRangeField = dividedField.iDurationField;,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,90,    },0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,148,        return 0;,0.00044,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,158,        return iDivisor - 1;,0.00044,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,46,        super(DateTimeFieldType.era());,0.00044,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,47,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,48,    },0.00044,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00044,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,46,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,47,    },0.00044,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,37,"        super(chronology, 2);",0.00044,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,38,    },0.00044,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00044,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,45,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,46,    },0.00044,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00044,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,43,        iChronology = chronology;,0.00044,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,44,    },0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,452,            return iUnitType;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,457,            return iRangeType;,0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,44,        super();,0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,45,    },0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,71,        return true;,0.00044,0,-1,0
org/joda/time/field/MillisDurationField,18,80,        return 1;,0.00044,0,-1,0
org/joda/time/field/ScaledDurationField,18,47,"        super(field, type);",0.00044,0,-1,0
org/joda/time/field/ScaledDurationField,18,48,        if (scalar == 0 || scalar == 1) {,0.00044,0,-1,0
org/joda/time/field/ScaledDurationField,18,51,        iScalar = scalar;,0.00044,0,-1,0
org/joda/time/field/ScaledDurationField,18,52,    },0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,200,        return MINUTE_OF_HOUR_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,273,        return DAY_OF_MONTH_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,327,        return YEAR_TYPE;,0.00044,0,-1,0
org/joda/time/DurationField,18,30,public abstract class DurationField implements Comparable<DurationField> {,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,71,        iType = type;,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,72,    },0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,49,        if (cCache == null) {,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,51,            field = null;,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,55,        if (field == null) {,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,56,            field = new UnsupportedDurationField(type);,0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,57,"            cCache.put(type, field);",0.00044,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,59,        return field;,0.00044,0,-1,0
org/joda/time/DateTimeField,18,33,public abstract class DateTimeField {,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,278,            return iOrdinal;,0.00044,0,-1,0
org/joda/time/Chronology,18,63,public abstract class Chronology {,0.00044,0,-1,0
org/joda/time/chrono/BaseChronology,18,54,        super();,0.00044,0,-1,0
org/joda/time/chrono/BaseChronology,18,55,    },0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,153,        super();,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,154,        iName = name;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,155,    },0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,141,        return HALFDAYS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,169,        return WEEKYEARS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,196,        return CENTURIES_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,205,        return ERAS_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,444,            super(name);,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,445,            iOrdinal = ordinal;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,446,            iUnitType = unitType;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,447,            iRangeType = rangeType;,0.00044,0,-1,0
org/joda/time/DateTimeFieldType,18,448,        },0.00044,0,-1,0
org/joda/time/DurationFieldType,18,105,        return MILLIS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,178,        return MONTHS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,187,        return YEARS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,160,        return WEEKS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,114,        return SECONDS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,123,        return MINUTES_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,132,        return HOURS_TYPE;,0.00044,0,-1,0
org/joda/time/DurationFieldType,18,151,        return DAYS_TYPE;,0.00044,0,-1,0
org/joda/time/DateTimeUtils,18,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.00043,0,-1,0
org/joda/time/DateTimeUtils,18,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00043,0,-1,0
org/joda/time/DateTimeUtils,18,393,    static class SystemMillisProvider implements MillisProvider {,0.00043,0,-1,0
org/joda/time/DurationFieldType,18,94,        super();,0.00042,0,-1,0
org/joda/time/DurationFieldType,18,95,        iName = name;,0.00042,0,-1,0
org/joda/time/DurationFieldType,18,96,    },0.00042,0,-1,0
org/joda/time/DurationFieldType,18,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00042,0,-1,0
org/joda/time/DurationFieldType,18,259,            super(name);,0.00042,0,-1,0
org/joda/time/DurationFieldType,18,260,            iOrdinal = ordinal;,0.00042,0,-1,0
org/joda/time/DurationFieldType,18,261,        },0.00042,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,748,            iOfYear = ofYear;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,749,            iNameKey = nameKey;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,750,            iSaveMillis = saveMillis;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,751,        },0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,504,        {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,509,            iMode = mode;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,510,            iMonthOfYear = monthOfYear;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,511,            iDayOfMonth = dayOfMonth;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,512,            iDayOfWeek = dayOfWeek;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,513,            iAdvance = advanceDayOfWeek;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,514,            iMillisOfDay = millisOfDay;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,515,        },0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,482,"            return new OfYear((char)in.readUnsignedByte(),",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,95,        if (in instanceof DataInput) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,110,        switch (in.readUnsignedByte()) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,183,        int v = in.readUnsignedByte();,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,184,        switch (v >> 6) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,187,            v = (v << (32 - 6)) >> (32 - 6);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,188,            return v * (30 * 60000L);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,192,            v = (v << (32 - 6)) >> (32 - 30);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,193,            v |= (in.readUnsignedByte()) << 16;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,194,            v |= (in.readUnsignedByte()) << 8;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,195,            v |= (in.readUnsignedByte());,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,196,            return v * 60000L;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,201,            w |= (in.readUnsignedByte()) << 24;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,202,            w |= (in.readUnsignedByte()) << 16;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,203,            w |= (in.readUnsignedByte()) << 8;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,204,            w |= (in.readUnsignedByte());,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,205,            return w * 1000L;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,209,            return in.readLong();,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,212,            return zone;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1500,            super(id);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1501,            iTransitions = transitions;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1502,            iWallOffsets = wallOffsets;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1503,            iStandardOffsets = standardOffsets;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1504,            iNameKeys = nameKeys;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1505,            iTailZone = tailZone;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1506,        },0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1341,            int poolSize = in.readUnsignedShort();,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1342,            String[] pool = new String[poolSize];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1343,            for (int i=0; i<poolSize; i++) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1344,                pool[i] = in.readUTF();,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1347,            int size = in.readInt();,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1348,            long[] transitions = new long[size];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1349,            int[] wallOffsets = new int[size];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1350,            int[] standardOffsets = new int[size];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1351,            String[] nameKeys = new String[size];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1353,            for (int i=0; i<size; i++) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1354,                transitions[i] = readMillis(in);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1355,                wallOffsets[i] = (int)readMillis(in);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1356,                standardOffsets[i] = (int)readMillis(in);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1359,                    if (poolSize < 256) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1360,                        index = in.readUnsignedByte();,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1364,                    nameKeys[i] = pool[index];,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1367,                },0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1370,            DSTZone tailZone = null;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1371,            if (in.readBoolean()) {,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1372,"                tailZone = DSTZone.readFrom(in, id);",0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1375,            return new PrecalculatedZone,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,87,        super(zone.getID());,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,88,        iZone = zone;,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,89,        iInfoCache = new Info[cInfoCacheMask + 1];,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,90,    },0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,42,        },0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,45,        if (i == null) {,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,48,            cacheSize = 512; // (1 << 9),0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,61,        cInfoCacheMask = cacheSize - 1;,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,62,    },0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,68,        if (zone instanceof CachedDateTimeZone) {,0.0004,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,71,        return new CachedDateTimeZone(zone);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1176,            super(id);,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1177,            iStandardOffset = standardOffset;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1178,            iStartRecurrence = startRecurrence;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1179,            iEndRecurrence = endRecurrence;,0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1180,        },0.0004,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,147,            return loadZoneData(id);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,224,        InputStream in = null;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,226,            in = openResource(id);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,229,            return tz;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,236,                if (in != null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,237,                    in.close();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,240,            },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,204,        if (id == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,207,"        if (id.equals(""UTC"")) {",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,210,        DateTimeZone zone = cProvider.getZone(id);,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,211,        if (zone != null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,706,        return iID;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,689,    protected DateTimeZone(String id) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,690,        if (id == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,693,        iID = id;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,694,    },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,115,        setProvider0(null);,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,116,        setNameProvider0(null);,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,117,    },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,415,        if (provider == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,416,            provider = getDefaultProvider();,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,418,        Set<String> ids = provider.getAvailableIDs();,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,419,        if (ids == null || ids.size() == 0) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,423,"        if (!ids.contains(""UTC"")) {",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,429,        cProvider = provider;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,430,        cAvailableIDs = ids;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,431,    },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,443,        Provider provider = null;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,446,            String providerClass =,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,448,            if (providerClass != null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,458,        },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,460,        if (provider == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,466,            },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,469,        if (provider == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,473,        return provider;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,514,        if (nameProvider == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,515,            nameProvider = getDefaultNameProvider();,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,517,        cNameProvider = nameProvider;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,518,    },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,529,        NameProvider nameProvider = null;,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.0004,0,-1,0
org/joda/time/DateTimeZone,18,532,            if (providerClass != null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,542,        },0.0004,0,-1,0
org/joda/time/DateTimeZone,18,544,        if (nameProvider == null) {,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,545,            nameProvider = new DefaultNameProvider();,0.0004,0,-1,0
org/joda/time/DateTimeZone,18,548,        return nameProvider;,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,38,        super(id);,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,39,        iNameKey = nameKey;,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,40,        iWallOffset = wallOffset;,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,41,        iStandardOffset = standardOffset;,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,42,    },0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,88,        if (this == obj) {,0.0004,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,89,            return true;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,82,"        this(resourcePath, null, false);",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,83,    },0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,106,    {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,107,        if (resourcePath == null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,110,"        if (!resourcePath.endsWith(""/"")) {",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,111,            resourcePath += '/';,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,114,        iFileDir = null;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,115,        iResourcePath = resourcePath;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,117,        if (loader == null && !favorSystemLoader) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,118,            loader = getClass().getClassLoader();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,121,        iLoader = loader;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,124,    },0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,136,        if (id == null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,140,        Object obj = iZoneInfoMap.get(id);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,141,        if (obj == null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,145,        if (id.equals(obj)) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,150,        if (obj instanceof SoftReference<?>) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,153,            DateTimeZone tz = ref.get();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,154,            if (tz != null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,155,                return tz;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,196,        if (iFileDir != null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,199,            String path = iResourcePath.concat(name);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,200,            if (iLoader != null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,201,                in = iLoader.getResourceAsStream(path);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,205,            if (in == null) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,214,        return in;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,253,        DataInputStream din = new DataInputStream(in);,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,255,"            readZoneInfoMap(din, map);",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,258,                din.close();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,260,            },0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,263,        return map;,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,274,        int size = din.readUnsignedShort();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,275,        String[] pool = new String[size];,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,276,        for (int i=0; i<size; i++) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,277,            pool[i] = din.readUTF().intern();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,281,        size = din.readUnsignedShort();,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,282,        for (int i=0; i<size; i++) {,0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,287,            },0.0004,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,289,    },0.0004,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,39,    public DefaultNameProvider() {,0.0004,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.0004,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,40,    },0.0004,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,99,        return new HashMap(7);,0.0004,0,-1,0
org/joda/time/DateTimeUtils,18,438,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,439,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,440,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,18,447,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,43,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,44,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,18,56,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,97,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,98,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,103,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,18,116,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,119,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,120,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,121,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,18,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,146,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,147,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,149,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,164,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,165,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,167,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,168,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,169,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,171,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,187,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,188,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,189,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,190,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,191,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,193,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,194,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,196,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,211,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,212,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,214,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,215,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,216,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,218,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,234,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,235,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,236,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,238,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,253,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,270,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,286,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,287,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,289,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,303,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,304,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,306,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,334,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,337,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,338,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,339,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,340,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,342,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,345,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,347,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,18,367,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,368,        	return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,18,328,    },0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/DurationFieldType,18,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,243,        return getName();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,475,    },0.0,0,-1,0
org/joda/time/DateTimeZone,18,691,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,145,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,149,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,18,151,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,155,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,18,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,205,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,208,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,18,215,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,216,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,217,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,219,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,220,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,254,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,255,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,260,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,263,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,271,        },0.0,0,-1,0
org/joda/time/DateTimeZone,18,269,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,270,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,272,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,282,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,283,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,302,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,303,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,305,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,306,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,18,307,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,311,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,312,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,313,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,314,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,316,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,317,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,319,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,320,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,324,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,325,            convId = zone.getDisplayName();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,18,327,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,328,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,329,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,330,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,332,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,333,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,349,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,350,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,352,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,18,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,357,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,358,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,359,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,360,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,18,365,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,374,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,387,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,401,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,402,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,18,405,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,406,    },0.0,0,-1,0
org/joda/time/DateTimeZone,18,420,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,18,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,454,                },0.0,0,-1,0
org/joda/time/DateTimeZone,18,451,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,452,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,456,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,463,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,464,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,470,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,486,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,500,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,501,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,18,504,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,505,    },0.0,0,-1,0
org/joda/time/DateTimeZone,18,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,538,                },0.0,0,-1,0
org/joda/time/DateTimeZone,18,535,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,536,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,540,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,559,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,18,560,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,562,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,18,563,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,564,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,565,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,566,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,567,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,568,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,569,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,18,571,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,572,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,18,574,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,575,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,18,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,579,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,582,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,583,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,585,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,586,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,587,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,588,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,591,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,592,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,593,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,595,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,596,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,598,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,604,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,631,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,632,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,633,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,18,635,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,18,636,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,644,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,18,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,647,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,648,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,652,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,18,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,655,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,656,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,659,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,18,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,661,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,670,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,18,675,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,729,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,744,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,745,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,747,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,748,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,749,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,752,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,753,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,755,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,18,769,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,784,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,785,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,787,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,788,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,789,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,792,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,793,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,795,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,18,813,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,18,816,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,18,844,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,882,        final int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,884,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,885,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,887,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,890,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,894,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,896,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,897,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,899,            },0.0,0,-1,0
org/joda/time/DateTimeZone,18,900,        } else if (offsetLocal >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,901,            long prev = previousTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,902,            if (prev < instantAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,903,                int offsetPrev = getOffset(prev);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,904,                int diff = offsetPrev - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,905,                if (instantAdjusted - prev <= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,906,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,910,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,924,        int offset = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,925,        long instantLocal = instantUTC + offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,930,        return instantLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,951,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,952,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,954,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,955,            return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,957,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,974,        int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,976,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,978,        if (offsetLocal != offset) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,982,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,985,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,986,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,988,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,989,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,990,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,992,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,994,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,-1,0
org/joda/time/DateTimeZone,18,1003,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1009,        long instantUTC = instantLocal - offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,18,1014,        return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1028,        if (newZone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1029,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1031,        if (newZone == this) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1032,            return oldInstant;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1034,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,1145,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1146,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1149,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1150,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1151,        } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1152,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1164,        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1165,        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1166,        if (before == after) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1167,            return instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1169,        long local = convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1170,"        return convertLocalToUTC(local, false, earlierOrLater ? after : before);",0.0,0,-1,0
org/joda/time/DateTimeZone,18,1210,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1227,        return 57 + getID().hashCode();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1235,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1245,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,18,98,        return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1528,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1530,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1533,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1534,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1535,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1536,                    return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1540,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1541,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1570,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1573,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1574,                return transitions[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1576,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1577,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1587,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1589,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1595,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1596,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1605,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1611,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1613,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,95,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,96,        iInfoCache = new Info[cInfoCacheMask + 1];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,97,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,103,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,107,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,111,        return getInfo(instant).getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,115,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,119,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,123,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,127,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,131,        return iZone.hashCode();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,135,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,136,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,138,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,139,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,141,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,148,        int period = (int)(millis >> 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,149,        Info[] cache = iInfoCache;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,150,        int index = period & cInfoCacheMask;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,151,        Info info = cache[index];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,153,            info = createInfo(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,154,            cache[index] = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,156,        return info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,160,        long periodStart = millis & (0xffffffffL << 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,161,"        Info info = new Info(iZone, periodStart);",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,163,        long end = periodStart | 0xffffffffL;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,164,        Info chain = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,166,            long next = iZone.nextTransition(periodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,167,            if (next == periodStart || next > end) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,168,                break;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,170,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,172,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,174,        return info;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,18,873,            return next;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,122,"        super(base, null);",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,123,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,68,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,77,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,96,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,100,        ISOChronology chrono = cFastCache[index];,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,101,        if (chrono != null && chrono.getZone() == zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,104,        synchronized (cCache) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,105,            chrono = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,106,            if (chrono == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,108,"                cCache.put(zone, chrono);",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,110,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,111,        cFastCache[index] = chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,112,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,133,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,171,            fields.centuryOfEra = new DividedDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,180,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,190,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,208,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,107,        if ((base = iBase) != null) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,108,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,321,            fields.copyFieldsFrom(iBase);,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,372,            flags = ,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,132,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,18,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,206,                StringBuffer buf = new StringBuffer(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,239,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,230,        } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,231,            uncaughtException(e);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,259,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,285,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,18,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/JodaTimePermission,18,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,18,58,    },0.0,0,-1,0
org/joda/time/DateTimeZone,18,604,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,606,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,609,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,612,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,615,                return getClass().getName();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,188,"        Info(DateTimeZone zone, long periodStart) {",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,185,        private int iOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,186,        private int iStandardOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,189,            iPeriodStart = periodStart;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,190,            iZoneRef = zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,191,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,194,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,195,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,196,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,198,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,200,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,205,                if (iOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,208,                return iOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,210,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,215,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,218,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,18,220,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,18,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/DurationField,18,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,18,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,18,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,18,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,18,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,18,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,218,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,18,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,18,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,1229,            super();,0.0,0,-1,0
org/joda/time/DateMidnight,18,1230,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateMidnight,18,1231,            iField = field;,0.0,0,-1,0
org/joda/time/DateMidnight,18,1232,        },0.0,0,-1,0
org/joda/time/DateMidnight,18,1238,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,1239,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateMidnight,18,1240,        },0.0,0,-1,0
org/joda/time/DateMidnight,18,1246,            iInstant = (DateMidnight) oos.readObject();,0.0,0,-1,0
org/joda/time/DateMidnight,18,1247,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateMidnight,18,1248,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateMidnight,18,1249,        },0.0,0,-1,0
org/joda/time/DateMidnight,18,1258,            return iField;,0.0,0,-1,0
org/joda/time/DateMidnight,18,1267,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateMidnight,18,1277,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateMidnight,18,1286,            return iInstant;,0.0,0,-1,0
org/joda/time/DateMidnight,18,1303,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1319,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1337,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1354,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1371,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1387,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateMidnight,18,1407,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateMidnight,18,1420,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateMidnight,18,1430,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateMidnight,18,1439,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateMidnight,18,1449,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateMidnight,18,1459,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateMidnight,18,1469,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateMidnight,18,157,        super();,0.0,0,-1,0
org/joda/time/DateMidnight,18,158,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,171,        super(zone);,0.0,0,-1,0
org/joda/time/DateMidnight,18,172,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,186,        super(chronology);,0.0,0,-1,0
org/joda/time/DateMidnight,18,187,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,198,        super(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,199,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,212,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateMidnight,18,213,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,227,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/DateMidnight,18,228,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,249,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateMidnight,18,250,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,274,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateMidnight,18,275,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,296,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateMidnight,18,297,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,310,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0);",0.0,0,-1,0
org/joda/time/DateMidnight,18,311,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,326,"        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, zone);",0.0,0,-1,0
org/joda/time/DateMidnight,18,327,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,344,    },0.0,0,-1,0
org/joda/time/DateMidnight,18,88,        return new DateMidnight();,0.0,0,-1,0
org/joda/time/DateMidnight,18,101,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,104,        return new DateMidnight(zone);,0.0,0,-1,0
org/joda/time/DateMidnight,18,117,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,118,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,120,        return new DateMidnight(chronology);,0.0,0,-1,0
org/joda/time/DateMidnight,18,134,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateMidnight,18,145,        return formatter.parseDateTime(str).toDateMidnight();,0.0,0,-1,0
org/joda/time/DateMidnight,18,354,        return chronology.dayOfMonth().roundFloor(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,369,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateMidnight,18,370,"        newMillis = checkInstant(newMillis, chrono);",0.0,0,-1,0
org/joda/time/DateMidnight,18,371,"        return (newMillis == getMillis() ? this : new DateMidnight(newMillis, chrono));",0.0,0,-1,0
org/joda/time/DateMidnight,18,396,"        return (newChronology == getChronology() ? this : new DateMidnight(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateMidnight,18,408,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateMidnight,18,409,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateMidnight,18,410,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,411,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,414,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateMidnight,18,415,"        return new DateMidnight(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateMidnight,18,432,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,433,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,435,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateMidnight,18,458,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,459,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,461,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateMidnight,18,462,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,484,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,485,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,487,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,488,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,490,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateMidnight,18,491,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,506,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,507,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,509,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateMidnight,18,510,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,524,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,525,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,527,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateMidnight,18,546,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,547,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,549,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateMidnight,18,550,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,564,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,577,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,594,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,615,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,616,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,618,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateMidnight,18,619,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,639,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,640,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,642,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateMidnight,18,643,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,663,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,664,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,666,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateMidnight,18,667,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,687,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,688,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,690,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateMidnight,18,691,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,705,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,718,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,735,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,756,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,757,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,759,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateMidnight,18,760,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,780,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,781,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,783,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateMidnight,18,784,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,804,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,805,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,807,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateMidnight,18,808,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,828,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,829,            return this;,0.0,0,-1,0
org/joda/time/DateMidnight,18,831,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateMidnight,18,832,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateMidnight,18,844,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,845,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,847,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateMidnight,18,848,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateMidnight,18,849,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateMidnight,18,851,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateMidnight,18,864,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateMidnight,18,875,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateMidnight,18,888,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateMidnight,18,889,        long start = getMillis();,0.0,0,-1,0
org/joda/time/DateMidnight,18,890,"        long end = DurationFieldType.days().getField(chrono).add(start, 1);",0.0,0,-1,0
org/joda/time/DateMidnight,18,891,"        return new Interval(start, end, chrono);",0.0,0,-1,0
org/joda/time/DateMidnight,18,908,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateMidnight,18,924,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateMidnight,18,940,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateMidnight,18,956,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateMidnight,18,972,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateMidnight,18,994,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1010,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1031,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1047,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1063,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1079,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateMidnight,18,1090,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1099,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1108,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1117,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1126,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1135,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1144,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1153,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1162,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1171,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateMidnight,18,1180,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,225,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,256,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,257,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,284,        return instant;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,295,        return iMillis;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,304,        return iChronology;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,18,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,18,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,259,        if (this == readableInstant) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,260,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,18,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,82,"        super(base, zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,83,    },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,56,        if (base == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,59,        base = base.withUTC();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,60,        if (base == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,63,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,66,"        return new ZonedChronology(base, zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,86,        return (DateTimeZone)getParam();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,90,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,94,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,95,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,97,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,98,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,100,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,101,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,119,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,139,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,140,        int offset = zone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,141,        instant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,142,        if (offset != zone.getOffset(instant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,143,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,147,        return instant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,157,"        fields.eras = convertField(fields.eras, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,158,"        fields.centuries = convertField(fields.centuries, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,159,"        fields.years = convertField(fields.years, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,160,"        fields.months = convertField(fields.months, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,162,"        fields.weeks = convertField(fields.weeks, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,163,"        fields.days = convertField(fields.days, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,166,"        fields.hours = convertField(fields.hours, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,167,"        fields.minutes = convertField(fields.minutes, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,168,"        fields.seconds = convertField(fields.seconds, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,169,"        fields.millis = convertField(fields.millis, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,173,"        fields.year = convertField(fields.year, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,177,"        fields.era = convertField(fields.era, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,197,    },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,200,        if (field == null || !field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,201,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,203,        if (converted.containsKey(field)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,204,            return (DurationField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,207,"        converted.put(field, zonedField);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,208,        return zonedField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,212,        if (field == null || !field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,213,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,215,        if (converted.containsKey(field)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,216,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,218,        ZonedDateTimeField zonedField =,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,223,"        converted.put(field, zonedField);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,224,        return zonedField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,237,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,238,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,241,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,244,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,389,            super(field.getType());,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,390,            if (!field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,393,            iField = field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,394,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,395,            iDurationField = durationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,396,            iTimeField = useTimeArithmetic(durationField);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,397,            iRangeDurationField = rangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,398,            iLeapDurationField = leapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,399,        },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,402,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,407,            return iField.get(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,412,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,429,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,430,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,432,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,435,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,441,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,442,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,444,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,447,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,453,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,454,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,456,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,466,"            localInstant = iField.set(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,468,            if (get(result) != value) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,474,            return result;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,486,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,493,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,499,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,503,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,508,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,513,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,517,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,521,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,522,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,523,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,524,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,533,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,534,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,536,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,546,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,550,            return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,555,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,559,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,563,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,567,            return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,572,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,576,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,580,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,584,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,592,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,593,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,598,            return offset;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,726,        return null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,18,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,284,            super(field.getType());,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,285,            if (!field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,286,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,288,            iField = field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,289,            iTimeField = useTimeArithmetic(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,290,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,291,        },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,298,            return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,318,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,319,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,324,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,325,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,331,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,338,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,344,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,345,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,350,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,355,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,360,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,18,364,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,18,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,18,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,953,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,954,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,955,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,957,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,958,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,962,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,963,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,965,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,966,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,970,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,974,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,975,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,976,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,978,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,979,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,983,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,984,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,986,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,987,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,991,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,995,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,996,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,997,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1001,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1002,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1004,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1005,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1009,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1010,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1015,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1016,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1017,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1021,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1022,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1024,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1025,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1029,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1030,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1045,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1046,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1048,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1053,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1054,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1056,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,628,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,632,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,633,                return iGregorianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,635,                return iJulianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,640,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,641,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,643,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,648,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,652,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,653,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,655,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,660,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,664,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,668,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,674,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,675,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,677,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,678,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,679,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,680,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,682,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,683,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,685,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,690,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,694,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,698,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,699,"                instant = iGregorianField.set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,700,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,702,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,703,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,706,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,707,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,712,"                instant = iJulianField.set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,713,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,715,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,716,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,719,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,720,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,725,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,729,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,730,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,731,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,733,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,734,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,739,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,740,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,742,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,743,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,748,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,756,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,760,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,761,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,763,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,768,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,769,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,771,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,776,            return iGregorianField.getLeapDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,783,            return iJulianField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,787,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,791,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,795,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,796,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,799,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,803,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,804,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,805,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,808,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,814,            return iGregorianField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,818,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,819,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,822,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,826,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,827,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,828,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,831,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,835,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,836,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,840,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,841,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,842,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,843,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,844,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,845,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,848,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,852,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,853,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,854,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,856,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,857,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,861,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,863,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,867,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,868,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,870,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,871,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,873,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,874,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,878,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,882,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,887,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,892,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,893,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,895,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,900,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,901,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,903,                return gregorianToJulianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,282,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,99,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,173,"        return getInstance(zone, gregorianCutover, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,192,            cutoverInstant = DEFAULT_CUTOVER;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,204,            for (int i=chronos.size(); --i>=0; ) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,205,                chrono = chronos.get(i);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,209,                    return chrono;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,221,            chrono = new GJChronology,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,247,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,248,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,250,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,293,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,294,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,296,        return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,307,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,317,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,318,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,320,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,321,            return this;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,331,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,336,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,338,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,340,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,342,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,344,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,347,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,357,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,367,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,369,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,372,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,374,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,377,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,385,        return iCutoverInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,394,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,405,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,415,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,427,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,428,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,429,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,430,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,432,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,433,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,435,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,436,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,438,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,440,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,443,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,444,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,445,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,447,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,449,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,465,            return;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,469,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,567,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,571,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,575,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,74,public final class GJChronology extends AssembledChronology {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1076,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1080,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1084,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,18,1088,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,69,        return iField;,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,18,101,        return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,18,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,93,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,126,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,18,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,143,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,146,        return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,196,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,217,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,218,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,219,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,220,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,221,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,223,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,224,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,225,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,226,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,227,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,230,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,233,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,234,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,307,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,348,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,371,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,372,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,373,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,402,            i2 = i2 - unitMillis + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,410,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,414,            if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,420,            yearStart += oneYear;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,422,            if (yearStart <= instant) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,424,                year++;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,458,"        int month = getMonthOfYear(millis, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,459,"        return getDayOfMonth(millis, year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,497,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,500,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,518,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,522,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,565,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,575,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,590,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,209,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,210,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,214,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,215,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,237,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,241,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,250,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,254,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,256,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,265,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,267,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,270,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,271,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,274,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,294,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,298,        if (thisDom > maxDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,300,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,314,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,315,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,318,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,323,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,328,        return iChronology.days();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,333,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,338,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,343,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,344,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,345,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,350,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,18,358,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,160,            return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,18,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,55,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,18,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,78,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,79,            if (year == 0) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,83,            year++;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,85,        return year;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,18,229,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,180,            if (isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,18,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,133,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,142,        long millis = iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,143,        int hash = (int) (millis ^ (millis >>> 32));,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,144,        hash += getType().hashCode();,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,18,145,        return hash;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,112,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,131,        return iRange - 1;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,18,143,        return iRange;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,101,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,18,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,82,"        return iField.set(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,18,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,18,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,58,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,61,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,63,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,82,        FieldUtils.verifyValueBounds,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,84,"        return iChronology.setYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,111,        return iChronology.days();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,123,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,18,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,18,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,153,"        return super.set(instant, value - iOffset);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,165,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,18,216,        return iOffset;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,18,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,18,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,18,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,94,        return iChronology.weeks();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,18,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,18,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,220,        return iChronology.weeks();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,228,        return iChronology.getMaxYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,18,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,79,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,18,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,82,            value--;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,89,        if (value <= iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,90,            if (value == iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,91,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,94,            value++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,96,"        return super.set(millis, value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,100,        return iMinValue;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,18,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,64,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,76,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,80,        return iType;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,84,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,88,        return iField.isSupported();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,92,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,100,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,104,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,108,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,112,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,116,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,120,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,124,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,132,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,136,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,140,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,144,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,156,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,172,"        return iField.set(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,176,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,180,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,184,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,192,        return iField.getDurationField();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,200,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,204,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,208,        return iField.getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,216,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,220,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,224,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,228,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,232,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,236,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,240,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,244,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,248,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,252,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,256,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,260,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,264,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,268,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,272,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,18,276,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,81,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,18,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,-1,0
org/joda/time/Instant,18,108,        super();,0.0,0,-1,0
org/joda/time/Instant,18,109,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,18,110,    },0.0,0,-1,0
org/joda/time/Instant,18,132,        super();,0.0,0,-1,0
org/joda/time/Instant,18,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,18,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,18,135,    },0.0,0,-1,0
org/joda/time/Instant,18,73,        return new Instant();,0.0,0,-1,0
org/joda/time/Instant,18,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,18,98,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,18,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,18,171,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,18,172,            return this;,0.0,0,-1,0
org/joda/time/Instant,18,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,18,175,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,18,189,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,18,190,            return this;,0.0,0,-1,0
org/joda/time/Instant,18,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,18,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,18,219,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,18,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,18,246,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,18,268,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,18,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,18,315,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,18,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,18,361,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,216,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,217,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,218,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,221,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,225,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,226,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,18,232,        },0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,475,            return iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,480,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,482,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,492,                    return chronology.year();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,496,                    return chronology.monthOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,498,                    return chronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,516,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,520,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,522,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,524,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,18,590,                    return this;,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,423,            return iMillis;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1261,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1262,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1263,        },0.0,0,-1,0
org/joda/time/DateTimeZone,18,1266,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1267,        },0.0,0,-1,0
org/joda/time/DateTimeZone,18,1270,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,18,1271,        },0.0,0,-1,0
org/joda/time/DateTimeZone,18,1274,            return forID(iID);,0.0,0,-1,0
org/joda/time/DateTimeUtils,18,399,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,18,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,18,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,282,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DurationFieldType,18,284,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,18,286,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,292,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,294,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,298,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,18,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,18,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,18,348,                    return this;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,49,        return DurationFieldType.millis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,155,        return (int) getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,18,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,109,        return getWrappedField().getUnitMillis() * iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,138,        return false;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,147,        long scalar = iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,149,        hash += getType().hashCode();,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,150,        hash += getWrappedField().hashCode();,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,18,151,        return hash;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,18,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,18,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,64,        int sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,70,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,121,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,124,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,137,        switch (scalar) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,139,            return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,141,            return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,143,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,145,        long total = val1 * scalar;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,146,        if (total / scalar != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,147,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,150,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,162,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,163,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,165,        if (val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,166,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,168,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,169,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,170,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,173,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,185,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,18,199,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,18,200,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,215,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,249,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,250,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,254,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,18,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,18,289,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,290,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,18,293,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,294,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,296,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,297,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,300,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,302,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,303,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,305,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,318,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,319,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,321,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,322,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,18,324,        return object1.equals(object2);,0.0,0,-1,0
