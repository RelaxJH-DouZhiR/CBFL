project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/joda/time/chrono/GJChronology,6,975,"                instant = iGregorianField.add(instant, value);",4.0,1,,1,0.0013182663702430383,0.998681733629757
org/joda/time/chrono/GJChronology,6,976,                if (instant < iCutover) {,4.0,1,,1,0.004172762294067254,0.9958272377059323
org/joda/time/chrono/GJChronology,6,978,                    if (instant + iGapDuration < iCutover) {,4.0,0,,0,0.006760228122807548,0.9932397718771921
org/joda/time/chrono/GJChronology,6,979,                        instant = gregorianToJulian(instant);,4.0,1,,1,0.0027565286872972806,0.997243471312702
org/joda/time/chrono/GJChronology,6,339,            instant = iJulianChronology.getDateTimeMillis,1.6,0,-1,0
org/joda/time/chrono/GJChronology,6,341,            if (instant >= iCutoverMillis) {,1.6,0,-1,0
org/joda/time/LocalDate,6,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",1.33333,0,-1,0
org/joda/time/IllegalFieldValueException,6,314,        return iMessage;,1.33333,0,-1,0
org/joda/time/LocalDate,6,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,1.0,0,-1,0
org/joda/time/LocalDate,6,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,1.0,0,-1,0
org/joda/time/LocalDate,6,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",1.0,0,-1,0
org/joda/time/LocalDate,6,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",1.0,0,-1,0
org/joda/time/LocalDate,6,1763,"        return new Property(this, getChronology().weekyear());",1.0,0,-1,0
org/joda/time/LocalDate,6,1894,            super();,1.0,0,-1,0
org/joda/time/LocalDate,6,1895,            iInstant = instant;,1.0,0,-1,0
org/joda/time/LocalDate,6,1896,            iField = field;,1.0,0,-1,0
org/joda/time/LocalDate,6,1897,        },1.0,0,-1,0
org/joda/time/chrono/GJChronology,6,922,                return gregorianToJulianByWeekyear(instant);,0.8,0,-1,0
org/joda/time/chrono/GJChronology,6,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.8,0,-1,0
org/joda/time/chrono/GJChronology,6,596,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.8,0,-1,0
org/joda/time/field/SkipDateTimeField,6,90,            if (value == iSkip) {,0.8,0,-1,0
org/joda/time/chrono/GJChronology,6,330,        if ((base = getBase()) != null) {,0.61538,0,-1,0
org/joda/time/chrono/GJChronology,6,335,        long instant = iGregorianChronology.getDateTimeMillis,0.61538,0,-1,0
org/joda/time/chrono/GJChronology,6,337,        if (instant < iCutoverMillis) {,0.61538,0,-1,0
org/joda/time/chrono/GJChronology,6,346,        return instant;,0.61538,0,-1,0
org/joda/time/chrono/GJChronology,6,974,            if (instant >= iCutover) {,0.57143,0,-1,0
org/joda/time/LocalDate,6,1819,        return ISODateTimeFormat.date().print(this);,0.36364,0,-1,0
org/joda/time/LocalDate,6,1202,        if (years == 0) {,0.33333,0,-1,0
org/joda/time/LocalDate,6,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.33333,0,-1,0
org/joda/time/IllegalFieldValueException,6,46,"                buf.append(""is not supported"");",0.26667,0,-1,0
org/joda/time/LocalDate,6,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0.26471,0,-1,0
org/joda/time/LocalDate,6,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",0.26471,0,-1,0
org/joda/time/chrono/BasicChronology,6,506,        } else if (week > 51) {,0.26471,0,-1,0
org/joda/time/chrono/JulianChronology,6,80,                throw new IllegalFieldValueException,0.25,0,-1,0
org/joda/time/field/SkipDateTimeField,6,94,            value++;,0.25,0,-1,0
org/joda/time/LocalDate,6,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0.23529,0,-1,0
org/joda/time/LocalDate,6,552,        if (fieldType == null) {,0.22222,0,-1,0
org/joda/time/LocalDate,6,555,        if (isSupported(fieldType) == false) {,0.22222,0,-1,0
org/joda/time/LocalDate,6,577,            return type.getField(getChronology()).isSupported();,0.19048,0,-1,0
org/joda/time/chrono/BasicChronology,6,357,            return jan1millis - (jan1dayOfWeek - 1),0.1875,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,79,        return 1;,0.18182,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.18182,0,-1,0
org/joda/time/LocalDate,6,455,        super();,0.1773,0,-1,0
org/joda/time/LocalDate,6,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.1773,0,-1,0
org/joda/time/LocalDate,6,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0.1773,0,-1,0
org/joda/time/LocalDate,6,458,        iChronology = chronology;,0.1773,0,-1,0
org/joda/time/LocalDate,6,459,        iLocalMillis = instant;,0.1773,0,-1,0
org/joda/time/LocalDate,6,460,    },0.1773,0,-1,0
org/joda/time/chrono/GJChronology,6,882,                instant = iJulianField.roundFloor(instant);,0.17647,0,-1,0
org/joda/time/LocalDate,6,570,        if (type == null) {,0.17391,0,-1,0
org/joda/time/LocalDate,6,573,        DurationFieldType durType = type.getDurationType();,0.17391,0,-1,0
org/joda/time/LocalDate,6,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0.17391,0,-1,0
org/joda/time/LocalDate,6,610,        return iLocalMillis;,0.17241,0,-1,0
org/joda/time/chrono/GJChronology,6,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.16667,0,-1,0
org/joda/time/chrono/GJChronology,6,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.16667,0,-1,0
org/joda/time/chrono/GJChronology,6,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.16667,0,-1,0
org/joda/time/chrono/GJChronology,6,100,        return newInstant;,0.16667,0,-1,0
org/joda/time/field/SkipDateTimeField,6,91,                throw new IllegalFieldValueException,0.16667,0,-1,0
org/joda/time/LocalDate,6,619,        return iChronology;,0.15823,0,-1,0
org/joda/time/chrono/BasicChronology,6,509,            return year;,0.14815,0,-1,0
org/joda/time/IllegalFieldValueException,6,45,            if (upperBound == null) {,0.13333,0,-1,0
org/joda/time/chrono/GJChronology,6,992,            return instant;,0.13333,0,-1,0
org/joda/time/chrono/GJChronology,6,1099,"            return iField.add(instant, value);",0.13333,0,-1,0
org/joda/time/chrono/GJChronology,6,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.12563,0,-1,0
org/joda/time/LocalDate,6,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0.12255,0,-1,0
org/joda/time/LocalDate,6,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0.12255,0,-1,0
org/joda/time/LocalDate,6,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0.12255,0,-1,0
org/joda/time/LocalDate,6,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0.12255,0,-1,0
org/joda/time/LocalDate,6,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0.12255,0,-1,0
org/joda/time/LocalDate,6,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0.12255,0,-1,0
org/joda/time/LocalDate,6,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0.12255,0,-1,0
org/joda/time/LocalDate,6,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0.12255,0,-1,0
org/joda/time/LocalDate,6,106,    },0.12255,0,-1,0
org/joda/time/chrono/GJChronology,6,873,            if (instant >= iCutover) {,0.11688,0,-1,0
org/joda/time/chrono/GJChronology,6,884,            return instant;,0.11688,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,54,        return iChronology.getWeekOfWeekyear(instant);,0.11111,0,-1,0
org/joda/time/chrono/GJChronology,6,418,            return true;,0.10811,0,-1,0
org/joda/time/chrono/GJChronology,6,417,        if (this == obj) {,0.10256,0,-1,0
org/joda/time/base/AbstractInstant,6,137,        return new Instant(getMillis());,0.1,0,-1,0
org/joda/time/LocalDate,6,335,"    public LocalDate(long instant, Chronology chronology) {",0.1,0,-1,0
org/joda/time/LocalDate,6,336,        chronology = DateTimeUtils.getChronology(chronology);,0.1,0,-1,0
org/joda/time/LocalDate,6,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0.1,0,-1,0
org/joda/time/LocalDate,6,339,        chronology = chronology.withUTC();,0.1,0,-1,0
org/joda/time/LocalDate,6,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0.1,0,-1,0
org/joda/time/LocalDate,6,341,        iChronology = chronology;,0.1,0,-1,0
org/joda/time/LocalDate,6,342,    },0.1,0,-1,0
org/joda/time/field/SkipDateTimeField,6,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.09524,0,-1,0
org/joda/time/field/SkipDateTimeField,6,89,        if (value <= iSkip) {,0.09524,0,-1,0
org/joda/time/chrono/GJChronology,6,654,                return iGregorianField.get(instant);,0.08333,0,-1,0
org/joda/time/LocalDate,6,1206,        return withLocalMillis(instant);,0.07692,0,-1,0
org/joda/time/DateTimeZone,6,1058,            return oldInstant;,0.07377,0,-1,0
org/joda/time/chrono/BasicChronology,6,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.06667,0,-1,0
org/joda/time/LocalDate,6,728,        zone = DateTimeUtils.getZone(zone);,0.05882,0,-1,0
org/joda/time/LocalDate,6,729,        Chronology chrono = getChronology().withZone(zone);,0.05882,0,-1,0
org/joda/time/LocalDate,6,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,0.05882,0,-1,0
org/joda/time/LocalDate,6,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",0.05882,0,-1,0
org/joda/time/LocalDate,6,732,        instant = chrono.dayOfMonth().roundFloor(instant);,0.05882,0,-1,0
org/joda/time/LocalDate,6,733,"        return new DateTime(instant, chrono);",0.05882,0,-1,0
org/joda/time/LocalDate,6,638,                return iLocalMillis == other.iLocalMillis;,0.05634,0,-1,0
org/joda/time/IllegalFieldValueException,6,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,109,        iDateTimeFieldType = fieldType;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,110,        iDurationFieldType = null;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,111,        iFieldName = fieldType.getName();,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,112,        iNumberValue = value;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,113,        iStringValue = null;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,114,        iLowerBound = lowerBound;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,115,        iUpperBound = upperBound;,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,116,        iMessage = super.getMessage();,0.05556,0,-1,0
org/joda/time/IllegalFieldValueException,6,117,    },0.05556,0,-1,0
org/joda/time/chrono/BasicChronology,6,531,            return 1;,0.05556,0,-1,0
org/joda/time/base/BaseLocal,6,47,        super();,0.05519,0,-1,0
org/joda/time/base/BaseLocal,6,48,    },0.05519,0,-1,0
org/joda/time/LocalDate,6,632,        if (this == partial) {,0.05479,0,-1,0
org/joda/time/LocalDate,6,635,        if (partial instanceof LocalDate) {,0.05479,0,-1,0
org/joda/time/LocalDate,6,636,            LocalDate other = (LocalDate) partial;,0.05479,0,-1,0
org/joda/time/LocalDate,6,637,            if (iChronology.equals(other.iChronology)) {,0.05479,0,-1,0
org/joda/time/chrono/JulianChronology,6,226,            leapYears = relativeYear >> 2;,0.05,0,-1,0
org/joda/time/chrono/JulianChronology,6,228,            if (!isLeapYear(year)) {,0.05,0,-1,0
org/joda/time/chrono/JulianChronology,6,229,                leapYears++;,0.05,0,-1,0
org/joda/time/IllegalFieldValueException,6,41,        StringBuilder buf = new StringBuilder(),0.04878,0,-1,0
org/joda/time/IllegalFieldValueException,6,44,        if (lowerBound == null) {,0.04878,0,-1,0
org/joda/time/IllegalFieldValueException,6,59,        if (explain != null) {,0.04878,0,-1,0
org/joda/time/IllegalFieldValueException,6,63,        return buf.toString();,0.04878,0,-1,0
org/joda/time/DateTimeZone,6,1054,        if (newZone == null) {,0.04327,0,-1,0
org/joda/time/DateTimeZone,6,1057,        if (newZone == this) {,0.04327,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,188,                if (isLeapYear(year)) {,0.04318,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,190,                    dayOfYear++;,0.03863,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,55,        super();,0.03704,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,56,    },0.03704,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,180,            if (isLeapYear(thisYear)) {,0.03551,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.03279,0,-1,0
org/joda/time/DateTimeFieldType,6,378,        return iName;,0.03226,0,-1,0
org/joda/time/Instant,6,144,        return this;,0.03045,0,-1,0
org/joda/time/chrono/GJChronology,6,195,            cutoverInstant = gregorianCutover.toInstant();,0.03045,0,-1,0
org/joda/time/base/AbstractPartial,6,54,        super();,0.027,0,-1,0
org/joda/time/base/AbstractPartial,6,55,    },0.027,0,-1,0
org/joda/time/chrono/GregorianChronology,6,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.02629,0,-1,0
org/joda/time/chrono/JulianChronology,6,224,            leapYears = (relativeYear + 3) >> 2;,0.0252,0,-1,0
org/joda/time/chrono/GJChronology,6,510,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,511,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,512,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,513,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,514,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,515,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,516,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,517,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,518,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,519,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.02518,0,-1,0
org/joda/time/chrono/GJChronology,6,521,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.02518,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,131,            instant = iChronology.getYearMillis(year + 1);,0.02518,0,-1,0
org/joda/time/field/BaseDateTimeField,6,886,        long newInstant = roundFloor(instant);,0.02515,0,-1,0
org/joda/time/field/BaseDateTimeField,6,887,        if (newInstant != instant) {,0.02515,0,-1,0
org/joda/time/field/BaseDateTimeField,6,888,"            instant = add(newInstant, 1);",0.02515,0,-1,0
org/joda/time/field/BaseDateTimeField,6,890,        return instant;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,943,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,944,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,954,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,955,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,965,        {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,966,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,967,            if (durationField == null) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,968,"                durationField = new LinkedDurationField(iDurationField, this);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,970,            iDurationField = durationField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,971,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,621,"            this(julianField, gregorianField, cutoverMillis, false);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,622,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,631,"                     long cutoverMillis, boolean convertByWeekyear) {",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,632,            super(gregorianField.getType());,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,633,            iJulianField = julianField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,634,            iGregorianField = gregorianField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,635,            iCutover = cutoverMillis;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,636,            iConvertByWeekyear = convertByWeekyear;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,639,            iDurationField = gregorianField.getDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,641,            DurationField rangeField = gregorianField.getRangeDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,642,            if (rangeField == null) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,643,                rangeField = julianField.getRangeDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,645,            iRangeDurationField = rangeField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,646,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,773,            return iDurationField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,270,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,271,    },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,84,        return to.getDateTimeMillis,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,190,        zone = DateTimeUtils.getZone(zone);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,192,        if (gregorianCutover == null) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,199,        synchronized (cCache) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,200,            ArrayList<GJChronology> chronos = cCache.get(zone);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,201,            if (chronos == null) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,202,                chronos = new ArrayList<GJChronology>(2);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,203,"                cCache.put(zone, chronos);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,214,            if (zone == DateTimeZone.UTC) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,215,                chrono = new GJChronology,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,227,            chronos.add(chrono);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,228,        },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,229,        return chrono;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,474,        Object[] params = (Object[])getParam();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,476,        JulianChronology julian = (JulianChronology)params[0];,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,477,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,478,        Instant cutoverInstant = (Instant)params[2];,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,479,        iCutoverMillis = cutoverInstant.getMillis();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,481,        iJulianChronology = julian;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,482,        iGregorianChronology = gregorian;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,483,        iCutoverInstant = cutoverInstant;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,485,        if (getBase() != null) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,489,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,494,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,500,        fields.copyFieldsFrom(gregorian);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,506,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,526,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,535,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,536,            fields.dayOfYear = new CutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,541,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,542,            fields.weekOfWeekyear = new CutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,550,            fields.year = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,552,            fields.years = fields.year.getDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,553,            fields.yearOfEra = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,555,            fields.yearOfCentury = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,558,            fields.centuryOfEra = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,560,            fields.centuries = fields.centuryOfEra.getDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,562,            fields.monthOfYear = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,564,            fields.months = fields.monthOfYear.getDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,566,            fields.weekyear = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,568,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,570,            fields.weekyears = fields.weekyear.getDurationField();,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,576,            CutoverField cf = new CutoverField,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,578,            cf.iRangeDurationField = fields.months;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,579,            fields.dayOfMonth = cf;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,581,    },0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,584,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,1094,"            super(durationField, durationField.getType());",0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,1095,            iField = dateTimeField;,0.02515,0,-1,0
org/joda/time/chrono/GJChronology,6,1096,        },0.02515,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,127,        int year = get(instant);,0.02515,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.02515,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,129,        if (instant != yearStartMillis) {,0.02515,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,133,        return instant;,0.02515,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,72,        if (years == 0) {,0.02515,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,75,"        return set(instant, get(instant) + years);",0.02515,0,-1,0
org/joda/time/chrono/BasicChronology,6,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0251,0,-1,0
org/joda/time/field/SkipDateTimeField,6,80,        int value = super.get(millis);,0.0251,0,-1,0
org/joda/time/field/SkipDateTimeField,6,81,        if (value <= iSkip) {,0.0251,0,-1,0
org/joda/time/field/SkipDateTimeField,6,84,        return value;,0.0251,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,133,        int thisWeekyear = get( instant );,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,134,        if ( thisWeekyear == year ) {,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,155,        if ( setToWeek > maxOutWeeks ) {,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,162,        long workInstant = instant; // Get a copy,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,168,"        workInstant = iChronology.setYear( workInstant, year );",0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,173,        int workWoyYear = get( workInstant );,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,179,        if ( workWoyYear < year ) {,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,181,        } else if ( workWoyYear > year ) {,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.02508,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,204,        return workInstant;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,211,        return (year & 3) == 0;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,219,        int relativeYear = year - 1968;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,221,        if (relativeYear <= 0) {,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,253,        return MILLIS_PER_YEAR / 2;,0.02508,0,-1,0
org/joda/time/chrono/JulianChronology,6,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.02508,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,96,        return iField.get(instant);,0.02508,0,-1,0
org/joda/time/chrono/BasicChronology,6,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.02505,0,-1,0
org/joda/time/chrono/BasicChronology,6,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.02505,0,-1,0
org/joda/time/chrono/BasicChronology,6,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.02505,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,60,        return iChronology.getWeekyear(instant);,0.02505,0,-1,0
org/joda/time/chrono/BasicChronology,6,502,        int year = getYear(instant);,0.02503,0,-1,0
org/joda/time/chrono/BasicChronology,6,503,"        int week = getWeekOfWeekyear(instant, year);",0.02503,0,-1,0
org/joda/time/chrono/BasicChronology,6,504,        if (week == 1) {,0.02503,0,-1,0
org/joda/time/chrono/BasicChronology,6,185,        return iMinDaysInFirstWeek;,0.025,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.025,0,-1,0
org/joda/time/chrono/BasicChronology,6,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.02495,0,-1,0
org/joda/time/chrono/BasicChronology,6,353,            return jan1millis + (8 - jan1dayOfWeek),0.02493,0,-1,0
org/joda/time/chrono/BasicChronology,6,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0249,0,-1,0
org/joda/time/chrono/BasicChronology,6,548,            if (daysSince19700101 < -3) {,0.0249,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,163,        return getMaximumValue(instant);,0.0249,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0249,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0249,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,236,        if (wow > 1) {,0.0249,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,239,        return instant;,0.0249,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0249,0,-1,0
org/joda/time/field/BaseDateTimeField,6,792,        return getMaximumValue();,0.02488,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,103,        return DateTimeConstants.MONDAY;,0.02485,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,112,        return DateTimeConstants.SUNDAY;,0.02485,0,-1,0
org/joda/time/DateTimeUtils,6,302,        return zone;,0.02483,0,-1,0
org/joda/time/chrono/BasicChronology,6,517,"        return getWeekOfWeekyear(instant, getYear(instant));",0.02483,0,-1,0
org/joda/time/DateTimeUtils,6,299,        if (zone == null) {,0.0248,0,-1,0
org/joda/time/chrono/BasicChronology,6,348,        long jan1millis = getYearMillis(year);,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,349,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,351,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,525,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,526,        if (instant < firstWeekMillis1) {,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,529,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,530,        if (instant >= firstWeekMillis2) {,0.02478,0,-1,0
org/joda/time/chrono/BasicChronology,6,533,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.02478,0,-1,0
org/joda/time/chrono/JulianChronology,6,50,public final class JulianChronology extends BasicGJChronology {,0.02475,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,95,            instant += 1;,0.02468,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.02468,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.02456,0,-1,0
org/joda/time/chrono/BasicChronology,6,153,        if ((base = getBase()) != null) {,0.02451,0,-1,0
org/joda/time/chrono/BasicChronology,6,157,        FieldUtils.verifyValueBounds,0.02451,0,-1,0
org/joda/time/chrono/BasicChronology,6,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.02451,0,-1,0
org/joda/time/chrono/BasicChronology,6,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.02439,0,-1,0
org/joda/time/field/SkipDateTimeField,6,96,"        return super.set(millis, value);",0.02439,0,-1,0
org/joda/time/Instant,6,118,        super();,0.02404,0,-1,0
org/joda/time/Instant,6,119,        iMillis = instant;,0.02404,0,-1,0
org/joda/time/Instant,6,120,    },0.02404,0,-1,0
org/joda/time/Instant,6,256,        return iMillis;,0.02376,0,-1,0
org/joda/time/chrono/JulianChronology,6,162,"        super(base, param, minDaysInFirstWeek);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,163,    },0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,75,    },0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,114,"        return getInstance(zone, 4);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,125,        if (zone == null) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,129,        synchronized (cCache) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,130,            JulianChronology[] chronos = cCache.get(zone);,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,131,            if (chronos == null) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,132,                chronos = new JulianChronology[7];,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,133,"                cCache.put(zone, chronos);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,140,            },0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,141,            if (chrono == null) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,142,                if (zone == DateTimeZone.UTC) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,151,        },0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,152,        return chrono;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,241,        return MIN_YEAR;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,245,        return MAX_YEAR;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,249,        return MILLIS_PER_YEAR;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,257,        return MILLIS_PER_MONTH;,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,265,        if (getBase() == null) {,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,266,            super.assemble(fields);,0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.02336,0,-1,0
org/joda/time/chrono/JulianChronology,6,271,    },0.02336,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,224,        return iChronology.getMinYear();,0.02111,0,-1,0
org/joda/time/field/SkipDateTimeField,6,54,"        this(chronology, field, 0);",0.02111,0,-1,0
org/joda/time/field/SkipDateTimeField,6,55,    },0.02111,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,196,        return iField.getRangeDurationField();,0.02111,0,-1,0
org/joda/time/field/SkipDateTimeField,6,65,        super(field);,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,66,        iChronology = chronology;,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,67,        int min = super.getMinimumValue();,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,68,        if (min < skip) {,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,69,            iMinValue = min - 1;,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,75,        iSkip = skip;,0.0211,0,-1,0
org/joda/time/field/SkipDateTimeField,6,76,    },0.0211,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,212,        return iField.getMinimumValue();,0.0211,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,52,"        this(field, null);",0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,53,    },0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,62,        super();,0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,63,        if (field == null) {,0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,66,        iField = field;,0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,67,        iType = (type == null ? field.getType() : type);,0.02106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,68,    },0.02106,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,92,        if (instant >= 0) {,0.02063,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,115,        return iChronology.getMinYear();,0.02034,0,-1,0
org/joda/time/chrono/GJChronology,6,306,        return withZone(DateTimeZone.UTC);,0.0197,0,-1,0
org/joda/time/chrono/GJChronology,6,316,        if (zone == null) {,0.0197,0,-1,0
org/joda/time/chrono/GJChronology,6,319,        if (zone == getZone()) {,0.0197,0,-1,0
org/joda/time/chrono/GJChronology,6,320,            return this;,0.0197,0,-1,0
org/joda/time/chrono/GJChronology,6,292,        if ((base = getBase()) != null) {,0.01963,0,-1,0
org/joda/time/chrono/GJChronology,6,295,        return DateTimeZone.UTC;,0.01963,0,-1,0
org/joda/time/chrono/GregorianChronology,6,213,                leapYears--;,0.01941,0,-1,0
org/joda/time/chrono/BasicChronology,6,444,"        return getMonthOfYear(millis, getYear(millis));",0.01862,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,72,        return iChronology.getMonthOfYear(instant);,0.01862,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.01822,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,56,        return iChronology.getDayOfWeek(instant);,0.0182,0,-1,0
org/joda/time/chrono/BasicChronology,6,543,        if (instant >= 0) {,0.01809,0,-1,0
org/joda/time/chrono/JulianChronology,6,79,            if (year == 0) {,0.01717,0,-1,0
org/joda/time/chrono/JulianChronology,6,83,            year++;,0.01717,0,-1,0
org/joda/time/chrono/GJChronology,6,921,            if (iConvertByWeekyear) {,0.01713,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.01712,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,80,        return instant + (value - get(instant)) * iUnitMillis;,0.01712,0,-1,0
org/joda/time/chrono/GJChronology,6,75,public final class GJChronology extends AssembledChronology {,0.01709,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,175,        int thisYear = getYear(instant);,0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,177,        int millisOfDay = getMillisOfDay(instant);,0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,196,        instant += millisOfDay;,0.01706,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,198,        return instant;,0.01706,0,-1,0
org/joda/time/chrono/BasicChronology,6,494,        long yearStart = getYearMillis(year);,0.01705,0,-1,0
org/joda/time/chrono/BasicChronology,6,495,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.01705,0,-1,0
org/joda/time/chrono/JulianChronology,6,78,        if (year <= 0) {,0.01693,0,-1,0
org/joda/time/chrono/JulianChronology,6,85,        return year;,0.01693,0,-1,0
org/joda/time/chrono/JulianChronology,6,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.01693,0,-1,0
org/joda/time/chrono/BasicChronology,6,560,        if (instant >= 0) {,0.0168,0,-1,0
org/joda/time/field/FieldUtils,6,222,    },0.01656,0,-1,0
org/joda/time/field/FieldUtils,6,217,        if ((value < lowerBound) || (value > upperBound)) {,0.01655,0,-1,0
org/joda/time/chrono/BasicChronology,6,614,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.01633,0,-1,0
org/joda/time/chrono/BasicChronology,6,615,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.01633,0,-1,0
org/joda/time/chrono/BasicChronology,6,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.01631,0,-1,0
org/joda/time/chrono/BasicChronology,6,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.01631,0,-1,0
org/joda/time/chrono/BasicChronology,6,691,        return getMaxMonth();,0.01631,0,-1,0
org/joda/time/field/FieldUtils,6,240,    },0.01631,0,-1,0
org/joda/time/field/FieldUtils,6,235,        if ((value < lowerBound) || (value > upperBound)) {,0.0163,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,79,        if (instant >= 0) {,0.01595,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.01592,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.01555,0,-1,0
org/joda/time/chrono/BasicChronology,6,457,        int year = getYear(millis);,0.01553,0,-1,0
org/joda/time/chrono/BasicChronology,6,458,"        int month = getMonthOfYear(millis, year);",0.01553,0,-1,0
org/joda/time/chrono/BasicChronology,6,459,"        return getDayOfMonth(millis, year, month);",0.01553,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,47,        return iChronology.getDayOfMonth(instant);,0.01553,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,54,        return iChronology.getYear(instant);,0.01552,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,120,        if (isLeapYear(year)) {,0.0155,0,-1,0
org/joda/time/chrono/GregorianChronology,6,221,        return MIN_YEAR;,0.0154,0,-1,0
org/joda/time/chrono/BasicChronology,6,477,        long dateMillis = getYearMillis(year);,0.01533,0,-1,0
org/joda/time/chrono/BasicChronology,6,478,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.01533,0,-1,0
org/joda/time/chrono/BasicChronology,6,479,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.01533,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.01519,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,93,        return,0.01519,0,-1,0
org/joda/time/chrono/GregorianChronology,6,233,        return MILLIS_PER_YEAR / 2;,0.01515,0,-1,0
org/joda/time/chrono/GregorianChronology,6,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.01515,0,-1,0
org/joda/time/chrono/BasicChronology,6,408,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,409,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,410,        if (i2 < 0) {,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,413,        int year = (int) (i2 / unitMillis);,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,415,        long yearStart = getYearMillis(year);,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,416,        long diff = instant - yearStart;,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,418,        if (diff < 0) {,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,420,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.01513,0,-1,0
org/joda/time/chrono/BasicChronology,6,437,        return year;,0.01513,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,139,        if (isLeapYear(year)) {,0.01512,0,-1,0
org/joda/time/chrono/GregorianChronology,6,202,        int leapYears = year / 100;,0.01499,0,-1,0
org/joda/time/chrono/GregorianChronology,6,203,        if (year < 0) {,0.01499,0,-1,0
org/joda/time/chrono/GregorianChronology,6,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.01499,0,-1,0
org/joda/time/chrono/GregorianChronology,6,212,            if (isLeapYear(year)) {,0.01499,0,-1,0
org/joda/time/chrono/GregorianChronology,6,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.01499,0,-1,0
org/joda/time/chrono/GregorianChronology,6,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.01484,0,-1,0
org/joda/time/chrono/BasicChronology,6,394,        long millis = getYearMillis(year);,0.01471,0,-1,0
org/joda/time/chrono/BasicChronology,6,395,"        millis += getTotalMillisByYearMonth(year, month);",0.01471,0,-1,0
org/joda/time/chrono/BasicChronology,6,396,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.01471,0,-1,0
org/joda/time/chrono/BasicChronology,6,369,        return getYearInfo(year).iFirstDayMillis;,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,747,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,748,        if (info == null || info.iYear != year) {,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,749,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,750,            iYearInfoCache[year & CACHE_MASK] = info;,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,752,        return info;,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,779,"        YearInfo(int year, long firstDayMillis) {",0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,780,            iYear = year;,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,781,            iFirstDayMillis = firstDayMillis;,0.01417,0,-1,0
org/joda/time/chrono/BasicChronology,6,782,        },0.01417,0,-1,0
org/joda/time/base/AbstractInstant,6,61,        super();,0.01411,0,-1,0
org/joda/time/base/AbstractInstant,6,62,    },0.01411,0,-1,0
org/joda/time/DateTimeUtils,6,285,        return chrono;,0.01267,0,-1,0
org/joda/time/chrono/BasicChronology,6,561,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.01113,0,-1,0
org/joda/time/DateTimeUtils,6,282,        if (chrono == null) {,0.01109,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.01091,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,131,        return null;,0.01091,0,-1,0
org/joda/time/chrono/AssembledChronology,6,315,        return iParam;,0.01087,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,90,        return iField.getRangeDurationField();,0.01087,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,56,        return iChronology.years();,0.01087,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,139,        return iRangeField;,0.01087,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,208,        return null;,0.01087,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,58,        return iChronology.weekyears();,0.01087,0,-1,0
org/joda/time/field/BaseDurationField,6,55,        return iType;,0.01087,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,122,        return iRangeField;,0.01085,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,95,        return null;,0.01084,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,51,        return iChronology.months();,0.01084,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,315,        return iChronology.years();,0.01084,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,141,        return iUnitField;,0.01082,0,-1,0
org/joda/time/chrono/GregorianChronology,6,45,public final class GregorianChronology extends BasicGJChronology {,0.01065,0,-1,0
org/joda/time/chrono/GregorianChronology,6,148,"        super(base, param, minDaysInFirstWeek);",0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,149,    },0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,72,    },0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,100,"        return getInstance(zone, 4);",0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,111,        if (zone == null) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,115,        synchronized (cCache) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,116,            GregorianChronology[] chronos = cCache.get(zone);,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,117,            if (chronos == null) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,118,                chronos = new GregorianChronology[7];,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,119,"                cCache.put(zone, chronos);",0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,126,            },0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,127,            if (chrono == null) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,128,                if (zone == DateTimeZone.UTC) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,137,        },0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,138,        return chrono;,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,191,        if (getBase() == null) {,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,192,            super.assemble(fields);,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,194,    },0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,225,        return MAX_YEAR;,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,229,        return MILLIS_PER_YEAR;,0.01064,0,-1,0
org/joda/time/chrono/GregorianChronology,6,237,        return MILLIS_PER_MONTH;,0.01064,0,-1,0
org/joda/time/chrono/BasicChronology,6,700,        return 12;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,75,"        super(base, param, minDaysInFirstWeek);",0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,76,    },0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,56,        long minSum = 0;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,57,        long maxSum = 0;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,58,        for (int i = 0; i < 11; i++) {,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,61,            minSum += millis;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,66,            maxSum += millis;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.01063,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,69,    },0.01063,0,-1,0
org/joda/time/chrono/AssembledChronology,6,156,        return iMillis;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,160,        return iMillisOfSecond;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,164,        return iMillisOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,168,        return iSeconds;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,172,        return iSecondOfMinute;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,176,        return iSecondOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,180,        return iMinutes;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,184,        return iMinuteOfHour;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,188,        return iMinuteOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,192,        return iHours;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,196,        return iHourOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,200,        return iClockhourOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,204,        return iHalfdays;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,208,        return iHourOfHalfday;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,212,        return iClockhourOfHalfday;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,216,        return iHalfdayOfDay;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,220,        return iDays;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,224,        return iDayOfWeek;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,228,        return iDayOfMonth;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,232,        return iDayOfYear;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,236,        return iWeeks;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,240,        return iWeekOfWeekyear;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,244,        return iWeekyears;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,248,        return iWeekyear;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,252,        return iWeekyearOfCentury;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,256,        return iMonths;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,260,        return iMonthOfYear;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,264,        return iYears;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,272,        return iYearOfEra;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,276,        return iYearOfCentury;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,280,        return iCenturies;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,284,        return iCenturyOfEra;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,288,        return iEras;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,292,        return iEra;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,445,                if (isSupported(f = chrono.millis())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,446,                    millis = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,448,                if (isSupported(f = chrono.seconds())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,449,                    seconds = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,451,                if (isSupported(f = chrono.minutes())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,452,                    minutes = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,454,                if (isSupported(f = chrono.hours())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,455,                    hours = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,457,                if (isSupported(f = chrono.halfdays())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,458,                    halfdays = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,460,                if (isSupported(f = chrono.days())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,461,                    days = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,463,                if (isSupported(f = chrono.weeks())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,464,                    weeks = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,466,                if (isSupported(f = chrono.weekyears())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,467,                    weekyears = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,469,                if (isSupported(f = chrono.months())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,470,                    months = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,472,                if (isSupported(f = chrono.years())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,473,                    years = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,475,                if (isSupported(f = chrono.centuries())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,476,                    centuries = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,478,                if (isSupported(f = chrono.eras())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,486,                    millisOfSecond = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,488,                if (isSupported(f = chrono.millisOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,489,                    millisOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,492,                    secondOfMinute = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,494,                if (isSupported(f = chrono.secondOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,495,                    secondOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,498,                    minuteOfHour = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,501,                    minuteOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,503,                if (isSupported(f = chrono.hourOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,504,                    hourOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,507,                    clockhourOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,510,                    hourOfHalfday = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,513,                    clockhourOfHalfday = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,516,                    halfdayOfDay = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,519,                    dayOfWeek = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,522,                    dayOfMonth = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,524,                if (isSupported(f = chrono.dayOfYear())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,525,                    dayOfYear = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,528,                    weekOfWeekyear = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,530,                if (isSupported(f = chrono.weekyear())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,531,                    weekyear = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,534,                    weekyearOfCentury = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,536,                if (isSupported(f = chrono.monthOfYear())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,537,                    monthOfYear = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,539,                if (isSupported(f = chrono.year())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,540,                    year = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,542,                if (isSupported(f = chrono.yearOfEra())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,543,                    yearOfEra = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,546,                    yearOfCentury = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,549,                    centuryOfEra = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,551,                if (isSupported(f = chrono.era())) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,552,                    era = f;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,555,        },0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,558,            return field == null ? false : field.isSupported();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,562,            return field == null ? false : field.isSupported();,0.01061,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,92,        return false;,0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,62,        return true;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,164,        return MILLIS_OF_SECOND_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,173,        return MILLIS_OF_DAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,182,        return SECOND_OF_MINUTE_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,191,        return SECOND_OF_DAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,209,        return MINUTE_OF_DAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,218,        return HOUR_OF_DAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,236,        return HOUR_OF_HALFDAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,254,        return HALFDAY_OF_DAY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,264,        return DAY_OF_WEEK_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,282,        return DAY_OF_YEAR_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,300,        return WEEKYEAR_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,318,        return MONTH_OF_YEAR_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,336,        return YEAR_OF_ERA_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,345,        return YEAR_OF_CENTURY_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,354,        return CENTURY_OF_ERA_TYPE;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,363,        return ERA_TYPE;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,99,"    protected AssembledChronology(Chronology base, Object param) {",0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,100,        iBase = base;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,101,        iParam = param;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,102,        setFields();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,103,    },0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,268,        return iYear;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,308,        return iBase;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,319,        Fields fields = new Fields();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,320,        if (iBase != null) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,323,        assemble(fields);,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,369,        if (iBase == null) {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,370,            flags = 0;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,385,        iBaseFlags = flags;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,386,    },0.01061,0,-1,0
org/joda/time/chrono/BaseChronology,6,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.01061,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,436,        Fields() {,0.01061,0,-1,0
org/joda/time/chrono/AssembledChronology,6,437,        },0.01061,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.01061,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,41,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,42,    },0.01061,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,93,        return 1;,0.01061,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,97,        return getWrappedField().getMaximumValue();,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,54,        super(type);,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,55,        if (field == null) {,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,58,        if (!field.isSupported()) {,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,61,        iField = field;,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,62,    },0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,70,        return iField;,0.01061,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,86,        return iField.getDurationField();,0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,50,        super();,0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,51,        if (type == null) {,0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,54,        iType = type;,0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,55,    },0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,58,        return iType;,0.01061,0,-1,0
org/joda/time/field/BaseDateTimeField,6,69,        return true;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,131,"        super(base, param);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,139,    },0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,76,        cMillisField = MillisDurationField.INSTANCE;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,77,        cSecondsField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,79,        cMinutesField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,81,        cHoursField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,83,        cHalfdaysField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,85,        cDaysField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,87,        cWeeksField = new PreciseDurationField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,90,        cMillisOfSecondField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,93,        cMillisOfDayField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,99,        cSecondOfDayField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,102,        cMinuteOfHourField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,105,        cMinuteOfDayField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,108,        cHourOfDayField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,120,        cHalfdayOfDayField = new HalfdayField();,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,121,    },0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,250,        fields.millis = cMillisField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,251,        fields.seconds = cSecondsField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,252,        fields.minutes = cMinutesField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,253,        fields.hours = cHoursField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,254,        fields.halfdays = cHalfdaysField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,255,        fields.days = cDaysField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,256,        fields.weeks = cWeeksField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,258,        fields.millisOfSecond = cMillisOfSecondField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,259,        fields.millisOfDay = cMillisOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,260,        fields.secondOfMinute = cSecondOfMinuteField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,261,        fields.secondOfDay = cSecondOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,262,        fields.minuteOfHour = cMinuteOfHourField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,263,        fields.minuteOfDay = cMinuteOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,264,        fields.hourOfDay = cHourOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,265,        fields.hourOfHalfday = cHourOfHalfdayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,266,        fields.clockhourOfDay = cClockhourOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,268,        fields.halfdayOfDay = cHalfdayOfDayField;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,273,        fields.year = new BasicYearDateTimeField(this);,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,277,        DateTimeField field = new OffsetDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,279,        fields.centuryOfEra = new DividedDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,282,        field = new RemainderDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,284,        fields.yearOfCentury = new OffsetDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,287,        fields.era = new GJEraDateTimeField(this);,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,288,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,289,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,290,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,291,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,292,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,293,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,295,        field = new RemainderDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,297,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,303,        fields.years = fields.year.getDurationField();,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,304,        fields.centuries = fields.centuryOfEra.getDurationField();,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,305,        fields.months = fields.monthOfYear.getDurationField();,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,306,        fields.weekyears = fields.weekyear.getDurationField();,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,307,    },0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,50,abstract class BasicChronology extends AssembledChronology {,0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,42,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,43,    },0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,48,        super(type);,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,50,        if (!unit.isPrecise()) {,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,54,        iUnitMillis = unit.getUnitMillis();,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,55,        if (iUnitMillis < 1) {,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,59,        iUnitField = unit;,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,60,    },0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,150,        return 0;,0.01061,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,154,        return iUnitMillis;,0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.01061,0,-1,0
org/joda/time/chrono/BasicChronology,6,760,        },0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,57,"        super(type, unit);",0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,59,        if (!range.isPrecise()) {,0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,63,        long rangeMillis = range.getUnitMillis();,0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,65,        if (iRange < 2) {,0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,69,        iRangeField = range;,0.01061,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,70,    },0.01061,0,-1,0
org/joda/time/field/DecoratedDurationField,6,52,        super(type);,0.01061,0,-1,0
org/joda/time/field/DecoratedDurationField,6,53,        if (field == null) {,0.01061,0,-1,0
org/joda/time/field/DecoratedDurationField,6,56,        if (!field.isSupported()) {,0.01061,0,-1,0
org/joda/time/field/DecoratedDurationField,6,59,        iField = field;,0.01061,0,-1,0
org/joda/time/field/DecoratedDurationField,6,60,    },0.01061,0,-1,0
org/joda/time/field/BaseDurationField,6,47,        super();,0.01061,0,-1,0
org/joda/time/field/BaseDurationField,6,48,        if (type == null) {,0.01061,0,-1,0
org/joda/time/field/BaseDurationField,6,51,        iType = type;,0.01061,0,-1,0
org/joda/time/field/BaseDurationField,6,52,    },0.01061,0,-1,0
org/joda/time/field/BaseDurationField,6,66,        return true;,0.01061,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,46,        super(DateTimeFieldType.era());,0.01061,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,47,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,48,    },0.01061,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,53,            field = cCache.get(type);,0.01061,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.01061,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,46,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,47,    },0.01061,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,119,        return iChronology.getMaxYear();,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,55,        super(type);,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,56,        iUnitMillis = unitMillis;,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,58,    },0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,137,        return iDurationField;,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,151,        LinkedDurationField(DurationFieldType type) {,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,152,            super(type);,0.01061,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,153,        },0.01061,0,-1,0
org/joda/time/field/PreciseDurationField,6,43,        super(type);,0.01061,0,-1,0
org/joda/time/field/PreciseDurationField,6,44,        iUnitMillis = unitMillis;,0.01061,0,-1,0
org/joda/time/field/PreciseDurationField,6,45,    },0.01061,0,-1,0
org/joda/time/field/PreciseDurationField,6,54,        return true;,0.01061,0,-1,0
org/joda/time/field/PreciseDurationField,6,63,        return iUnitMillis;,0.01061,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,45,"        super(field, type);",0.01061,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,46,        if (field.getMinimumValue() != 0) {,0.01061,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,49,    },0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,47,    },0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,59,    },0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,73,"        super(field, type);",0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,75,        if (offset == 0) {,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,79,        iOffset = offset;,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,82,            iMin = field.getMinimumValue() + offset;,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,87,            iMax = field.getMaximumValue() + offset;,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,91,    },0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,174,        return iMin;,0.01061,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,183,        return iMax;,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,56,"        super(field, type);",0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,58,        if (divisor < 2) {,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,62,        DurationField unitField = field.getDurationField();,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,63,        if (unitField == null) {,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,66,            iDurationField = new ScaledDurationField(,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,70,        iDivisor = divisor;,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,72,        int i = field.getMinimumValue();,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,75,        int j = field.getMaximumValue();,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,78,        iMin = min;,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,79,        iMax = max;,0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,80,    },0.01061,0,-1,0
org/joda/time/field/DividedDateTimeField,6,182,        return iDurationField;,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,52,"        super(field, type);",0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,54,        if (divisor < 2) {,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,58,        DurationField rangeField = field.getDurationField();,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,59,        if (rangeField == null) {,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,62,            iRangeField = new ScaledDurationField(,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,66,        iDivisor = divisor;,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,67,    },0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,76,"        this(dividedField, dividedField.getType());",0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,77,    },0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,87,"        super(dividedField.getWrappedField(), type);",0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,88,        iDivisor = dividedField.iDivisor;,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,89,        iRangeField = dividedField.iDurationField;,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,90,    },0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,148,        return 0;,0.01061,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,158,        return iDivisor - 1;,0.01061,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.01061,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,46,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,47,    },0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,42,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,43,    },0.01061,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,37,"        super(chronology, 2);",0.01061,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,38,    },0.01061,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.01061,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,52,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,53,        iMax = iChronology.getMaxMonth();,0.01061,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,54,        iLeapMonth = leapMonth;,0.01061,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,55,    },0.01061,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.01061,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,45,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,46,    },0.01061,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.01061,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,43,        iChronology = chronology;,0.01061,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,44,    },0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,452,            return iUnitType;,0.01061,0,-1,0
org/joda/time/DateTimeFieldType,6,457,            return iRangeType;,0.01061,0,-1,0
org/joda/time/field/ScaledDurationField,6,47,"        super(field, type);",0.01061,0,-1,0
org/joda/time/field/ScaledDurationField,6,48,        if (scalar == 0 || scalar == 1) {,0.01061,0,-1,0
org/joda/time/field/ScaledDurationField,6,51,        iScalar = scalar;,0.01061,0,-1,0
org/joda/time/field/ScaledDurationField,6,52,    },0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,44,        super();,0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,45,    },0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,71,        return true;,0.01061,0,-1,0
org/joda/time/field/MillisDurationField,6,80,        return 1;,0.01061,0,-1,0
org/joda/time/DateTimeField,6,33,public abstract class DateTimeField {,0.0106,0,-1,0
org/joda/time/DurationField,6,30,public abstract class DurationField implements Comparable<DurationField> {,0.0106,0,-1,0
org/joda/time/DateTimeFieldType,6,200,        return MINUTE_OF_HOUR_TYPE;,0.0106,0,-1,0
org/joda/time/DateTimeFieldType,6,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.0106,0,-1,0
org/joda/time/DateTimeFieldType,6,273,        return DAY_OF_MONTH_TYPE;,0.0106,0,-1,0
org/joda/time/DateTimeFieldType,6,327,        return YEAR_TYPE;,0.0106,0,-1,0
org/joda/time/DurationFieldType,6,278,            return (1 << iOrdinal);,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,70,    private UnsupportedDurationField(DurationFieldType type) {,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,71,        iType = type;,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,72,    },0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,49,        if (cCache == null) {,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,51,            field = null;,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,55,        if (field == null) {,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,56,            field = new UnsupportedDurationField(type);,0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,57,"            cCache.put(type, field);",0.0106,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,59,        return field;,0.0106,0,-1,0
org/joda/time/Chronology,6,63,public abstract class Chronology {,0.0106,0,-1,0
org/joda/time/chrono/BaseChronology,6,54,        super();,0.0106,0,-1,0
org/joda/time/chrono/BaseChronology,6,55,    },0.0106,0,-1,0
org/joda/time/DateTimeFieldType,6,153,        super();,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,154,        iName = name;,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,155,    },0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.01059,0,-1,0
org/joda/time/DurationFieldType,6,141,        return HALFDAYS_TYPE;,0.01059,0,-1,0
org/joda/time/DurationFieldType,6,169,        return WEEKYEARS_TYPE;,0.01059,0,-1,0
org/joda/time/DurationFieldType,6,196,        return CENTURIES_TYPE;,0.01059,0,-1,0
org/joda/time/DurationFieldType,6,205,        return ERAS_TYPE;,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,444,            super(name);,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,445,            iOrdinal = ordinal;,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,446,            iUnitType = unitType;,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,447,            iRangeType = rangeType;,0.01059,0,-1,0
org/joda/time/DateTimeFieldType,6,448,        },0.01059,0,-1,0
org/joda/time/DurationFieldType,6,105,        return MILLIS_TYPE;,0.01056,0,-1,0
org/joda/time/DurationFieldType,6,178,        return MONTHS_TYPE;,0.01049,0,-1,0
org/joda/time/DurationFieldType,6,187,        return YEARS_TYPE;,0.01049,0,-1,0
org/joda/time/DurationFieldType,6,160,        return WEEKS_TYPE;,0.01046,0,-1,0
org/joda/time/DurationFieldType,6,114,        return SECONDS_TYPE;,0.01044,0,-1,0
org/joda/time/DurationFieldType,6,123,        return MINUTES_TYPE;,0.01044,0,-1,0
org/joda/time/DurationFieldType,6,132,        return HOURS_TYPE;,0.01044,0,-1,0
org/joda/time/DurationFieldType,6,151,        return DAYS_TYPE;,0.01044,0,-1,0
org/joda/time/DateTimeUtils,6,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,48,"        map.put(""UT"", DateTimeZone.UTC);",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,49,"        map.put(""UTC"", DateTimeZone.UTC);",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,50,"        map.put(""GMT"", DateTimeZone.UTC);",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,51,"        put(map, ""EST"", ""America/New_York"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,52,"        put(map, ""EDT"", ""America/New_York"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,53,"        put(map, ""CST"", ""America/Chicago"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,54,"        put(map, ""CDT"", ""America/Chicago"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,55,"        put(map, ""MST"", ""America/Denver"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,56,"        put(map, ""MDT"", ""America/Denver"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,59,        cZoneNames = Collections.unmodifiableMap(map);,0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,60,    },0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,63,"            map.put(name, DateTimeZone.forID(id));",0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,66,        },0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,67,    },0.01034,0,-1,0
org/joda/time/DateTimeUtils,6,524,    static class SystemMillisProvider implements MillisProvider {,0.01034,0,-1,0
org/joda/time/DurationFieldType,6,94,        super();,0.00996,0,-1,0
org/joda/time/DurationFieldType,6,95,        iName = name;,0.00996,0,-1,0
org/joda/time/DurationFieldType,6,96,    },0.00996,0,-1,0
org/joda/time/DurationFieldType,6,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00996,0,-1,0
org/joda/time/DurationFieldType,6,259,            super(name);,0.00996,0,-1,0
org/joda/time/DurationFieldType,6,260,            iOrdinal = ordinal;,0.00996,0,-1,0
org/joda/time/DurationFieldType,6,261,        },0.00996,0,-1,0
org/joda/time/field/SkipDateTimeField,6,82,            value--;,0.00973,0,-1,0
org/joda/time/DateTimeZone,6,205,        if (id == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,208,"        if (id.equals(""UTC"")) {",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,211,        DateTimeZone zone = cProvider.getZone(id);,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,212,        if (zone != null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,213,            return zone;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,504,        {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,509,            iMode = mode;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,510,            iMonthOfYear = monthOfYear;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,511,            iDayOfMonth = dayOfMonth;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,512,            iDayOfWeek = dayOfWeek;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,513,            iAdvance = advanceDayOfWeek;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,514,            iMillisOfDay = millisOfDay;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,515,        },0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1176,            super(id);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1177,            iStandardOffset = standardOffset;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1178,            iStartRecurrence = startRecurrence;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1179,            iEndRecurrence = endRecurrence;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1180,        },0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1500,            super(id);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1501,            iTransitions = transitions;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1502,            iWallOffsets = wallOffsets;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1503,            iStandardOffsets = standardOffsets;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1504,            iNameKeys = nameKeys;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1505,            iTailZone = tailZone;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1506,        },0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1341,            int poolSize = in.readUnsignedShort();,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1342,            String[] pool = new String[poolSize];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1343,            for (int i=0; i<poolSize; i++) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1344,                pool[i] = in.readUTF();,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1347,            int size = in.readInt();,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1348,            long[] transitions = new long[size];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1349,            int[] wallOffsets = new int[size];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1350,            int[] standardOffsets = new int[size];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1351,            String[] nameKeys = new String[size];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1353,            for (int i=0; i<size; i++) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1354,                transitions[i] = readMillis(in);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1355,                wallOffsets[i] = (int)readMillis(in);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1356,                standardOffsets[i] = (int)readMillis(in);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1359,                    if (poolSize < 256) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1360,                        index = in.readUnsignedByte();,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1364,                    nameKeys[i] = pool[index];,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1367,                },0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1370,            DSTZone tailZone = null;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1371,            if (in.readBoolean()) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1375,            return new PrecalculatedZone,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,95,        if (in instanceof DataInput) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,110,        switch (in.readUnsignedByte()) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,183,        int v = in.readUnsignedByte();,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,184,        switch (v >> 6) {,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,188,            return v * (30 * 60000L);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,193,            v |= (in.readUnsignedByte()) << 16;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,194,            v |= (in.readUnsignedByte()) << 8;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,195,            v |= (in.readUnsignedByte());,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,196,            return v * 60000L;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,201,            w |= (in.readUnsignedByte()) << 24;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,202,            w |= (in.readUnsignedByte()) << 16;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,203,            w |= (in.readUnsignedByte()) << 8;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,204,            w |= (in.readUnsignedByte());,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,205,            return w * 1000L;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,209,            return in.readLong();,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,87,        super(zone.getID());,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,88,        iZone = zone;,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,89,    },0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,42,        },0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,45,        if (i == null) {,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,48,            cacheSize = 512; // (1 << 9),0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,61,        cInfoCacheMask = cacheSize - 1;,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,62,    },0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,68,        if (zone instanceof CachedDateTimeZone) {,0.00964,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,71,        return new CachedDateTimeZone(zone);,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,748,            iOfYear = ofYear;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,749,            iNameKey = nameKey;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,750,            iSaveMillis = saveMillis;,0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,751,        },0.00964,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,147,            return loadZoneData(id);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,224,        InputStream in = null;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,226,            in = openResource(id);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,229,            return tz;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,236,                if (in != null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,237,                    in.close();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,240,            },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,717,    protected DateTimeZone(String id) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,718,        if (id == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,721,        iID = id;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,722,    },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,116,        setProvider0(null);,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,117,        setNameProvider0(null);,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,118,    },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,443,        if (provider == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,444,            provider = getDefaultProvider();,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,446,        Set<String> ids = provider.getAvailableIDs();,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,447,        if (ids == null || ids.size() == 0) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,451,"        if (!ids.contains(""UTC"")) {",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,457,        cProvider = provider;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,458,        cAvailableIDs = ids;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,459,    },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,471,        Provider provider = null;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,474,            String providerClass =,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,476,            if (providerClass != null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,486,        },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,488,        if (provider == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,490,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,494,            },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,497,        if (provider == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,501,        return provider;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,542,        if (nameProvider == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,543,            nameProvider = getDefaultNameProvider();,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,545,        cNameProvider = nameProvider;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,546,    },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,557,        NameProvider nameProvider = null;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,559,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00964,0,-1,0
org/joda/time/DateTimeZone,6,560,            if (providerClass != null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,570,        },0.00964,0,-1,0
org/joda/time/DateTimeZone,6,572,        if (nameProvider == null) {,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,573,            nameProvider = new DefaultNameProvider();,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,576,        return nameProvider;,0.00964,0,-1,0
org/joda/time/DateTimeZone,6,734,        return iID;,0.00964,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,39,    public DefaultNameProvider() {,0.00964,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00964,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,40,    },0.00964,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,99,        return new HashMap(7);,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,38,        super(id);,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,39,        iNameKey = nameKey;,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,40,        iWallOffset = wallOffset;,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,41,        iStandardOffset = standardOffset;,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,42,    },0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,88,        if (this == obj) {,0.00964,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,89,            return true;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,82,"        this(resourcePath, null, false);",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,83,    },0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,106,    {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,107,        if (resourcePath == null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,110,"        if (!resourcePath.endsWith(""/"")) {",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,111,            resourcePath += '/';,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,114,        iFileDir = null;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,115,        iResourcePath = resourcePath;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,117,        if (loader == null && !favorSystemLoader) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,118,            loader = getClass().getClassLoader();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,121,        iLoader = loader;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,124,    },0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,136,        if (id == null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,140,        Object obj = iZoneInfoMap.get(id);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,141,        if (obj == null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,145,        if (id.equals(obj)) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,150,        if (obj instanceof SoftReference<?>) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,153,            DateTimeZone tz = ref.get();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,154,            if (tz != null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,155,                return tz;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,196,        if (iFileDir != null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,199,            String path = iResourcePath.concat(name);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,200,            if (iLoader != null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,201,                in = iLoader.getResourceAsStream(path);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,205,            if (in == null) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,214,        return in;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,253,        DataInputStream din = new DataInputStream(in);,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,255,"            readZoneInfoMap(din, map);",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,258,                din.close();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,260,            },0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,263,        return map;,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,274,        int size = din.readUnsignedShort();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,275,        String[] pool = new String[size];,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,276,        for (int i=0; i<size; i++) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,277,            pool[i] = din.readUTF().intern();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,281,        size = din.readUnsignedShort();,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,282,        for (int i=0; i<size; i++) {,0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,287,            },0.00964,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,289,    },0.00964,0,-1,0
org/joda/time/chrono/GJChronology,6,653,            if (instant >= iCutover) {,0.00957,0,-1,0
org/joda/time/chrono/BasicChronology,6,411,            i2 = i2 - unitMillis + 1;,0.00946,0,-1,0
org/joda/time/chrono/AssembledChronology,6,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0087,0,-1,0
org/joda/time/chrono/AssembledChronology,6,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.00862,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,61,        int thisYear = get(instant);,0.00685,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.00685,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,63,"        return set(instant, newYear);",0.00685,0,-1,0
org/joda/time/DateTimeFieldType,6,498,                    return chronology.dayOfMonth();,0.00685,0,-1,0
org/joda/time/chrono/BasicChronology,6,544,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.00672,0,-1,0
org/joda/time/chrono/BasicChronology,6,553,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.00672,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,58,        if (years == 0) {,0.00671,0,-1,0
org/joda/time/field/FieldUtils,6,70,        return sum;,0.00641,0,-1,0
org/joda/time/field/FieldUtils,6,64,        int sum = val1 + val2;,0.00639,0,-1,0
org/joda/time/field/FieldUtils,6,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.00639,0,-1,0
org/joda/time/DateTimeFieldType,6,492,                    return chronology.year();,0.0063,0,-1,0
org/joda/time/DateTimeFieldType,6,496,                    return chronology.monthOfYear();,0.00628,0,-1,0
org/joda/time/chrono/ISOChronology,6,147,            return this;,0.00559,0,-1,0
org/joda/time/DateTimeFieldType,6,480,            chronology = DateTimeUtils.getChronology(chronology);,0.00471,0,-1,0
org/joda/time/DateTimeFieldType,6,482,            switch (iOrdinal) {,0.00471,0,-1,0
org/joda/time/base/AbstractInstant,6,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0045,0,-1,0
org/joda/time/base/AbstractInstant,6,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0045,0,-1,0
org/joda/time/base/AbstractInstant,6,266,        return,0.0045,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,228,        return iChronology.getMaxYear();,0.00431,0,-1,0
org/joda/time/chrono/GJChronology,6,924,                return gregorianToJulianByYear(instant);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,6,588,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,6,656,                return iJulianField.get(instant);,0.00427,0,-1,0
org/joda/time/chrono/GJChronology,6,733,"                instant = iJulianField.set(instant, value);",0.00427,0,-1,0
org/joda/time/chrono/GJChronology,6,734,                if (instant >= iCutover) {,0.00427,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,228,        return iField.getMaximumValue();,0.00426,0,-1,0
org/joda/time/chrono/GJChronology,6,719,            if (instant >= iCutover) {,0.00426,0,-1,0
org/joda/time/chrono/GJChronology,6,746,            return instant;,0.00426,0,-1,0
org/joda/time/chrono/ISOChronology,6,143,        if (zone == null) {,0.00413,0,-1,0
org/joda/time/chrono/ISOChronology,6,146,        if (zone == getZone()) {,0.00413,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,49,        return iWallOffset;,0.00329,0,-1,0
org/joda/time/DateTime,6,220,"        super(instant, chronology);",0.00292,0,-1,0
org/joda/time/DateTime,6,221,    },0.00292,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,82,        FieldUtils.verifyValueBounds,0.00281,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,84,"        return iChronology.setYear(instant, year);",0.00281,0,-1,0
org/joda/time/base/BaseDateTime,6,124,        super();,0.00176,0,-1,0
org/joda/time/base/BaseDateTime,6,125,        iChronology = checkChronology(chronology);,0.00176,0,-1,0
org/joda/time/base/BaseDateTime,6,126,"        iMillis = checkInstant(instant, iChronology);",0.00176,0,-1,0
org/joda/time/base/BaseDateTime,6,127,    },0.00176,0,-1,0
org/joda/time/DateTimeZone,6,1002,        int offsetLocal = getOffset(instantLocal);,0.00127,0,-1,0
org/joda/time/DateTimeZone,6,1004,        int offset = getOffset(instantLocal - offsetLocal);,0.00127,0,-1,0
org/joda/time/DateTimeZone,6,1006,        if (offsetLocal != offset) {,0.00127,0,-1,0
org/joda/time/DateTimeZone,6,1035,        long instantUTC = instantLocal - offset;,0.00127,0,-1,0
org/joda/time/DateTimeZone,6,1037,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.00127,0,-1,0
org/joda/time/DateTimeZone,6,1040,        return instantUTC;,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,6,205,                for (int i = chronos.size(); --i >= 0;) {,0.00126,0,-1,0
org/joda/time/chrono/GJChronology,6,206,                    chrono = chronos.get(i);,0.00126,0,-1,0
org/joda/time/chrono/GJChronology,6,207,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.00126,0,-1,0
org/joda/time/chrono/GJChronology,6,396,        return iCutoverInstant;,0.00126,0,-1,0
org/joda/time/chrono/GJChronology,6,405,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.00126,0,-1,0
org/joda/time/base/AbstractInstant,6,259,        if (this == readableInstant) {,0.00118,0,-1,0
org/joda/time/chrono/GJChronology,6,174,"        return getInstance(zone, gregorianCutover, 4);",0.00108,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,172,"        return iField.set(instant, value);",0.00107,0,-1,0
org/joda/time/base/BaseDateTime,6,295,        return iMillis;,0.00097,0,-1,0
org/joda/time/chrono/AssembledChronology,6,107,        if ((base = iBase) != null) {,0.00072,0,-1,0
org/joda/time/chrono/AssembledChronology,6,108,            return base.getZone();,0.00072,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.00072,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,112,        return instant + (value - get(instant)) * iUnitMillis;,0.00072,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,131,        return iRange - 1;,0.00069,0,-1,0
org/joda/time/chrono/ISOChronology,6,77,        return INSTANCE_UTC;,0.00064,0,-1,0
org/joda/time/base/BaseDateTime,6,284,        return instant;,0.00061,0,-1,0
org/joda/time/base/BaseDateTime,6,270,        return DateTimeUtils.getChronology(chronology);,0.00059,0,-1,0
org/joda/time/base/AbstractDateTime,6,51,        super();,0.00059,0,-1,0
org/joda/time/base/AbstractDateTime,6,52,    },0.00059,0,-1,0
org/joda/time/chrono/ISOChronology,6,133,        return INSTANCE_UTC;,0.00047,0,-1,0
org/joda/time/chrono/ISOChronology,6,122,"        super(base, null);",0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,123,    },0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,68,    },0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00044,0,-1,0
org/joda/time/chrono/ISOChronology,6,180,    },0.00044,0,-1,0
org/joda/time/chrono/GregorianChronology,6,81,        return INSTANCE_UTC;,0.00044,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00044,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,47,    },0.00044,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00044,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,87,        return 0;,0.00044,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,91,        return getWrappedField().getMaximumValue();,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,6,146,        return DateTimeZone.UTC;,0.00044,0,-1,0
org/joda/time/chrono/BasicChronology,6,143,        if ((base = getBase()) != null) {,0.00044,0,-1,0
org/joda/time/chrono/AssembledChronology,6,321,            fields.copyFieldsFrom(iBase);,0.00043,0,-1,0
org/joda/time/chrono/AssembledChronology,6,372,            flags = ,0.00043,0,-1,0
org/joda/time/DateTime,6,2047,            super();,0.0,0,-1,0
org/joda/time/DateTime,6,2048,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateTime,6,2049,            iField = field;,0.0,0,-1,0
org/joda/time/DateTime,6,2050,        },0.0,0,-1,0
org/joda/time/DateTime,6,2056,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateTime,6,2057,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateTime,6,2058,        },0.0,0,-1,0
org/joda/time/DateTime,6,2064,            iInstant = (DateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,6,2065,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,6,2066,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateTime,6,2067,        },0.0,0,-1,0
org/joda/time/DateTime,6,2076,            return iField;,0.0,0,-1,0
org/joda/time/DateTime,6,2085,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateTime,6,2095,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateTime,6,2104,            return iInstant;,0.0,0,-1,0
org/joda/time/DateTime,6,2121,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,6,2137,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,6,2155,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,6,2172,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,6,2189,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateTime,6,2205,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateTime,6,2233,                return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateTime,6,2234,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,6,2235,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,6,2237,                    long beforeGap = getChronology().getZone().previousTransition(getMillis() + DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,6,2238,"                    return new DateTime(beforeGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,2240,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,6,2262,                return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateTime,6,2263,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,6,2264,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,6,2266,                    long afterGap = getChronology().getZone().nextTransition(getMillis() - DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,6,2267,"                    return new DateTime(afterGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,2269,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,6,2280,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,6,2289,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,6,2299,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,6,2309,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,6,2320,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,72,        return getField().getType();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,81,        return getField().getName();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,101,        throw new UnsupportedOperationException(,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,120,        return getField().get(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,136,        return Integer.toString(get());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,151,        return getAsText(null);,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,167,"        return getField().getAsText(getMillis(), locale);",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,182,        return getAsShortText(null);,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,198,"        return getField().getAsShortText(getMillis(), locale);",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,213,        if (instant == null) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,214,"            return getField().getDifference(getMillis(), DateTimeUtils.currentTimeMillis());",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,216,"        return getField().getDifference(getMillis(), instant.getMillis());",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,230,        if (instant == null) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,231,"            return getField().getDifferenceAsLong(getMillis(), DateTimeUtils.currentTimeMillis());",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,233,"        return getField().getDifferenceAsLong(getMillis(), instant.getMillis());",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,244,        return getField().getDurationField();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,254,        return getField().getRangeDurationField();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,264,        return getField().isLeap(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,274,        return getField().getLeapAmount(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,282,        return getField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,293,        return getField().getMinimumValue();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,303,        return getField().getMinimumValue(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,313,        return getField().getMaximumValue();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,323,        return getField().getMaximumValue(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,334,        return getField().getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,345,        return getField().getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,356,        return getField().remainder(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,370,        DateTimeField field = getField();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,371,        long start = field.roundFloor(getMillis());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,372,"        long end = field.add(start, 1);",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,373,"        Interval interval = new Interval(start, end);",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,374,        return interval;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,391,        if (instant == null) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,392,"            throw new IllegalArgumentException(""The instant must not be null"");",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,394,        int thisValue = get();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,395,        int otherValue = instant.get(getFieldType());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,396,        if (thisValue < otherValue) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,397,            return -1;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,398,        } else if (thisValue > otherValue) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,399,            return 1;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,401,            return 0;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,420,        if (partial == null) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,421,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,423,        int thisValue = get();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,424,        int otherValue = partial.get(getFieldType());,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,425,        if (thisValue < otherValue) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,426,            return -1;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,427,        } else if (thisValue > otherValue) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,428,            return 1;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,430,            return 0;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,442,        if (this == object) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,443,            return true;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,445,        if (object instanceof AbstractReadableInstantFieldProperty == false) {,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,446,            return false;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,448,        AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,449,        return ,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,461,        return get() * 17 + getFieldType().hashCode() + getChronology().hashCode();,0.0,0,-1,0
org/joda/time/field/AbstractReadableInstantFieldProperty,6,471,"        return ""Property["" + getName() + ""]"";",0.0,0,-1,0
org/joda/time/DateTime,6,155,        super();,0.0,0,-1,0
org/joda/time/DateTime,6,156,    },0.0,0,-1,0
org/joda/time/DateTime,6,168,        super(zone);,0.0,0,-1,0
org/joda/time/DateTime,6,169,    },0.0,0,-1,0
org/joda/time/DateTime,6,182,        super(chronology);,0.0,0,-1,0
org/joda/time/DateTime,6,183,    },0.0,0,-1,0
org/joda/time/DateTime,6,193,        super(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,194,    },0.0,0,-1,0
org/joda/time/DateTime,6,206,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,6,207,    },0.0,0,-1,0
org/joda/time/DateTime,6,241,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateTime,6,242,    },0.0,0,-1,0
org/joda/time/DateTime,6,265,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,6,266,    },0.0,0,-1,0
org/joda/time/DateTime,6,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateTime,6,287,    },0.0,0,-1,0
org/joda/time/DateTime,6,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,-1,0
org/joda/time/DateTime,6,308,    },0.0,0,-1,0
org/joda/time/DateTime,6,331,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,333,    },0.0,0,-1,0
org/joda/time/DateTime,6,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,359,    },0.0,0,-1,0
org/joda/time/DateTime,6,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,-1,0
org/joda/time/DateTime,6,382,    },0.0,0,-1,0
org/joda/time/DateTime,6,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,409,    },0.0,0,-1,0
org/joda/time/DateTime,6,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,437,    },0.0,0,-1,0
org/joda/time/DateTime,6,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,6,461,    },0.0,0,-1,0
org/joda/time/DateTime,6,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,489,    },0.0,0,-1,0
org/joda/time/DateTime,6,516,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,6,518,    },0.0,0,-1,0
org/joda/time/DateTime,6,89,        return new DateTime();,0.0,0,-1,0
org/joda/time/DateTime,6,101,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,6,104,        return new DateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,6,116,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,6,119,        return new DateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,6,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateTime,6,144,        return formatter.parseDateTime(str);,0.0,0,-1,0
org/joda/time/DateTime,6,527,        return this;,0.0,0,-1,0
org/joda/time/DateTime,6,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,-1,0
org/joda/time/DateTime,6,538,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,540,        return super.toDateTimeISO();,0.0,0,-1,0
org/joda/time/DateTime,6,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/DateTime,6,551,        if (getZone() == zone) {,0.0,0,-1,0
org/joda/time/DateTime,6,552,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,554,        return super.toDateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,6,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTime,6,565,        if (getChronology() == chronology) {,0.0,0,-1,0
org/joda/time/DateTime,6,566,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,568,        return super.toDateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,6,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/DateTime,6,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/DateTime,6,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateTime,6,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,-1,0
org/joda/time/DateTime,6,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateTime,6,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateTime,6,641,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateTime,6,642,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateTime,6,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateTime,6,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.0,0,-1,0
org/joda/time/DateTime,6,666,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,6,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.0,0,-1,0
org/joda/time/DateTime,6,686,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,6,709,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,6,710,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,6,711,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/DateTime,6,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/DateTime,6,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/DateTime,6,714,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,737,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,6,738,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,6,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/DateTime,6,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/DateTime,6,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/DateTime,6,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,6,743,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,-1,0
org/joda/time/DateTime,6,776,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,777,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateTime,6,802,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,6,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateTime,6,806,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,828,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,6,831,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,832,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateTime,6,835,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,851,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateTime,6,854,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,869,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,6,890,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,891,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,6,894,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,909,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,6,923,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,6,949,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateTime,6,976,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,977,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,6,980,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1006,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1007,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,6,1010,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1032,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1033,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,6,1036,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1067,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1068,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,6,1071,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1098,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1099,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,6,1102,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1125,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1126,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,6,1129,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1152,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1153,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,6,1156,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1178,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1179,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,6,1182,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1197,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,6,1211,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,6,1238,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateTime,6,1265,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1266,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,6,1269,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1295,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1296,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,6,1299,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1321,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1322,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,6,1325,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1356,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1357,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,6,1360,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1388,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1389,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,6,1392,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1415,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1416,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,6,1419,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1442,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1443,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,6,1446,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1469,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,6,1470,            return this;,0.0,0,-1,0
org/joda/time/DateTime,6,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,6,1473,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,6,1485,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTime,6,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,6,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateTime,6,1489,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateTime,6,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateTime,6,1492,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateTime,6,1505,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1517,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1529,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1540,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1551,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1562,"        return new LocalTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,6,1579,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateTime,6,1595,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateTime,6,1611,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateTime,6,1627,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateTime,6,1643,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateTime,6,1665,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateTime,6,1681,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateTime,6,1702,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateTime,6,1718,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateTime,6,1734,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateTime,6,1750,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateTime,6,1767,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,-1,0
org/joda/time/DateTime,6,1783,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,-1,0
org/joda/time/DateTime,6,1799,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,-1,0
org/joda/time/DateTime,6,1815,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,6,1831,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,6,1842,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateTime,6,1851,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateTime,6,1860,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateTime,6,1869,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateTime,6,1878,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateTime,6,1887,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateTime,6,1896,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateTime,6,1905,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateTime,6,1914,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateTime,6,1923,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateTime,6,1932,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/DateTime,6,1943,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/DateTime,6,1952,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/DateTime,6,1961,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/DateTime,6,1970,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/DateTime,6,1979,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/DateTime,6,1988,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/DateTime,6,1997,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,225,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,252,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,253,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,256,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,257,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,304,        return iChronology;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,6,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,6,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,260,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,6,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/DurationField,6,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,6,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,6,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,6,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,6,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,6,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,73,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,74,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,64,        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,86,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,98,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,100,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,112,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,114,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,127,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,128,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,133,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,146,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,149,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,150,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,151,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,159,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,160,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,163,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,176,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,177,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,179,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,194,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,195,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,197,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,198,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,199,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,201,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,217,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,218,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,219,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,220,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,221,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,223,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,224,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,226,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,241,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,242,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,244,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,245,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,246,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,248,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,264,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,265,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,266,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,268,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,283,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,300,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,316,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,317,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,319,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,333,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,334,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,336,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,364,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,367,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,368,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,369,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,370,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,371,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,372,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,375,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,377,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,397,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,398,            return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,427,        return cZoneNames;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,439,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,-1,0
org/joda/time/DateTimeUtils,6,440,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,466,        double epochDay = epochMillis / 86400000d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,467,        return epochDay + 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,486,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,499,        double epochDay = julianDay - 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,500,        return (long) (epochDay * 86400000d);,0.0,0,-1,0
org/joda/time/JodaTimePermission,6,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,6,58,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,96,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,100,        ISOChronology chrono = cFastCache[index];,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,101,        if (chrono != null && chrono.getZone() == zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,104,        synchronized (cCache) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,105,            chrono = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,106,            if (chrono == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,108,"                cCache.put(zone, chrono);",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,110,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,111,        cFastCache[index] = chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,112,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,191,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,192,            return true;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,194,        if (obj instanceof ISOChronology) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,195,            ISOChronology chrono = (ISOChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,196,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,198,        return false;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,217,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,132,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,6,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeZone,6,719,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,134,        DateTimeZone zone = cDefault;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,135,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,136,            synchronized(DateTimeZone.class) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,137,                zone = cDefault;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,138,                if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,139,                    DateTimeZone temp = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,142,"                            String id = System.getProperty(""user.timezone"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,143,                            if (id != null) {  // null check avoids stack overflow,0.0,0,-1,0
org/joda/time/DateTimeZone,6,144,                                temp = forID(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,148,                        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,146,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,149,                        if (temp == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,6,154,                    },0.0,0,-1,0
org/joda/time/DateTimeZone,6,152,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,155,                    if (temp == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,156,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,158,                    cDefault = zone = temp;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,160,            },0.0,0,-1,0
org/joda/time/DateTimeZone,6,162,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,175,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,176,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,6,179,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,182,        synchronized(DateTimeZone.class) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,183,            cDefault = zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,184,        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,185,    },0.0,0,-1,0
org/joda/time/DateTimeZone,6,206,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,209,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,6,216,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,217,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,218,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,220,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,221,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,274,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,279,        if (minutesOffset < -59 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,282,        if (hoursOffset > 0 && minutesOffset < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,285,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,287,            int hoursInMinutes = hoursOffset * 60;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,288,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,291,                minutesOffset = hoursInMinutes + minutesOffset;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,296,        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,294,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,295,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,297,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,310,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,311,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,330,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,331,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,333,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,334,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,6,335,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,339,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,340,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,341,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,342,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,344,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,345,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,347,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,348,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,352,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,353,            convId = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,6,355,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,356,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,357,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,358,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,360,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,361,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,377,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,378,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,380,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,6,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,385,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,386,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,387,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,388,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,6,393,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,402,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,415,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,429,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,430,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,6,433,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,434,    },0.0,0,-1,0
org/joda/time/DateTimeZone,6,448,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,6,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,478,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,482,                },0.0,0,-1,0
org/joda/time/DateTimeZone,6,479,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,480,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,481,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,484,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,491,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,492,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,493,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,498,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,514,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,528,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,529,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,530,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,6,532,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,533,    },0.0,0,-1,0
org/joda/time/DateTimeZone,6,562,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,566,                },0.0,0,-1,0
org/joda/time/DateTimeZone,6,563,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,564,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,565,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,568,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,587,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,6,588,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,590,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,6,591,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,592,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,593,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,594,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,595,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,596,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,597,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,598,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,6,599,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,600,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,601,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,6,602,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,603,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,604,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,6,605,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,606,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,607,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,608,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,609,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,610,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,611,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,612,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,613,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,614,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,615,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,616,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,617,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,618,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,619,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,620,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,621,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,622,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,623,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,624,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,626,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,632,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,646,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,659,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,660,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,661,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,6,663,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,6,664,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,667,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,668,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,669,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,671,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,672,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,6,673,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,674,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,675,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,676,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,679,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,680,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,6,681,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,682,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,683,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,684,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,687,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,6,688,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,689,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,698,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,699,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,6,703,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,757,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,772,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,773,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,775,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,776,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,777,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,779,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,780,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,781,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,783,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,6,797,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,812,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,813,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,815,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,816,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,817,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,819,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,820,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,821,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,823,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,6,841,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,842,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,6,844,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,6,872,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,910,        final int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,912,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,913,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,915,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,918,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,922,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,923,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,924,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,925,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,927,            },0.0,0,-1,0
org/joda/time/DateTimeZone,6,928,        } else if (offsetLocal >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,929,            long prev = previousTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,930,            if (prev < instantAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,931,                int offsetPrev = getOffset(prev);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,932,                int diff = offsetPrev - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,933,                if (instantAdjusted - prev <= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,934,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,938,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,952,        int offset = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,953,        long instantLocal = instantUTC + offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,955,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,956,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,958,        return instantLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,979,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,980,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,981,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,982,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,983,            return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,985,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1010,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1012,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1013,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1014,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1016,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1017,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1018,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1020,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1022,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1024,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1029,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1038,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1055,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1060,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1061,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1171,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1172,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1175,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1176,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1177,        } catch (IllegalInstantException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1178,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1193,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1194,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1195,        long offsetBefore = getOffset(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1196,        long offsetAfter = getOffset(instantAfter);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1197,        if (offsetBefore <= offsetAfter) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1198,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1202,        long diff = offsetBefore - offsetAfter;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1203,        long transition = nextTransition(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1204,        long overlapStart = transition - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1205,        long overlapEnd = transition + diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1206,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1207,          return instant;  // not an overlap,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1211,        long afterStart = instant - overlapStart;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1212,        if (afterStart >= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1214,          return earlierOrLater ? instant : instant - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1217,          return earlierOrLater ? instant + diff : instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1259,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1276,        return 57 + getID().hashCode();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1284,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1294,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,530,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,569,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,570,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,571,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,578,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,545,        FixedMillisProvider(long fixedMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,546,            iMillis = fixedMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,6,547,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,6,554,            return iMillis;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,79,"        return getField(index, getChronology()).getType();",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,90,        DateTimeFieldType[] result = new DateTimeFieldType[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,91,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,92,            result[i] = getFieldType(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,94,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,105,"        return getField(index, getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,116,        DateTimeField[] result = new DateTimeField[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,117,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,118,            result[i] = getField(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,120,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,132,        int[] result = new int[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,133,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,134,            result[i] = getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,136,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,150,        return getValue(indexOfSupported(type));,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,160,        return (indexOf(type) != -1);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,170,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,171,            if (getFieldType(i) == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,172,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,175,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,187,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,188,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,191,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,203,            if (getFieldType(i).getDurationType() == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,204,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,207,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,219,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,220,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,223,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,240,        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,241,        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,242,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,243,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,255,        if (this == partial) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,256,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,258,        if (partial instanceof ReadablePartial == false) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,259,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,261,        ReadablePartial other = (ReadablePartial) partial;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,262,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,265,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,266,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,267,                return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,270,"        return FieldUtils.equals(getChronology(), other.getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,280,        int total = 157;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,281,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,282,            total = 23 * total + getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,283,            total = 23 * total + getFieldType(i).hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,285,        total += getChronology().hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,286,        return total;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,311,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,312,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,314,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,317,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,318,            if (getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,323,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,324,            if (getValue(i) > other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,325,                return 1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,327,            if (getValue(i) < other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,328,                return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,331,        return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,350,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,351,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,353,        return compareTo(partial) > 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,372,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,373,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,375,        return compareTo(partial) < 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,394,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,395,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,397,        return compareTo(partial) == 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,409,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,410,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,412,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,6,46,public abstract class AbstractPartial,0.0,0,-1,0
org/joda/time/LocalDate,6,267,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,6,268,    },0.0,0,-1,0
org/joda/time/LocalDate,6,281,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,6,282,    },0.0,0,-1,0
org/joda/time/LocalDate,6,295,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDate,6,296,    },0.0,0,-1,0
org/joda/time/LocalDate,6,308,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,6,309,    },0.0,0,-1,0
org/joda/time/LocalDate,6,322,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,6,323,    },0.0,0,-1,0
org/joda/time/LocalDate,6,363,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDate,6,364,    },0.0,0,-1,0
org/joda/time/LocalDate,6,384,"    public LocalDate(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDate,6,385,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,386,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDate,6,387,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,6,388,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,6,389,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,6,390,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,6,391,    },0.0,0,-1,0
org/joda/time/LocalDate,6,414,"    public LocalDate(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDate,6,415,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,416,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDate,6,417,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,6,418,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,6,419,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,6,420,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,6,421,    },0.0,0,-1,0
org/joda/time/LocalDate,6,436,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,6,437,    },0.0,0,-1,0
org/joda/time/LocalDate,6,124,        return new LocalDate();,0.0,0,-1,0
org/joda/time/LocalDate,6,136,        if (zone == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,137,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,139,        return new LocalDate(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,151,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,152,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,154,        return new LocalDate(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,6,168,"        return parse(str, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,6,179,        return formatter.parseLocalDate(str);,0.0,0,-1,0
org/joda/time/LocalDate,6,207,        if (calendar == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,208,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,210,        int era = calendar.get(Calendar.ERA);,0.0,0,-1,0
org/joda/time/LocalDate,6,211,        int yearOfEra = calendar.get(Calendar.YEAR);,0.0,0,-1,0
org/joda/time/LocalDate,6,212,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,6,241,        if (date == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,242,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,244,        if (date.getTime() < 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,246,            GregorianCalendar cal = new GregorianCalendar();,0.0,0,-1,0
org/joda/time/LocalDate,6,247,            cal.setTime(date);,0.0,0,-1,0
org/joda/time/LocalDate,6,248,            return fromCalendarFields(cal);,0.0,0,-1,0
org/joda/time/LocalDate,6,250,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,6,467,        if (iChronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,468,"            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,6,470,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,6,471,"            return new LocalDate(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDate,6,473,        return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,486,        return 3;,0.0,0,-1,0
org/joda/time/LocalDate,6,499,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,6,501,                return chrono.year();,0.0,0,-1,0
org/joda/time/LocalDate,6,503,                return chrono.monthOfYear();,0.0,0,-1,0
org/joda/time/LocalDate,6,505,                return chrono.dayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,6,507,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,6,524,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,6,526,                return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,528,                return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,530,                return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,532,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,6,553,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,556,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,6,571,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,6,579,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,6,590,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,591,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,6,593,        DurationField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,6,594,        if (DATE_DURATION_TYPES.contains(type) ||,0.0,0,-1,0
org/joda/time/LocalDate,6,596,            return field.isSupported();,0.0,0,-1,0
org/joda/time/LocalDate,6,598,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,6,633,            return true;,0.0,0,-1,0
org/joda/time/LocalDate,6,641,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDate,6,651,        int hash = iHash;,0.0,0,-1,0
org/joda/time/LocalDate,6,652,        if (hash == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,653,            hash = iHash = super.hashCode();,0.0,0,-1,0
org/joda/time/LocalDate,6,655,        return hash;,0.0,0,-1,0
org/joda/time/LocalDate,6,676,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDate,6,677,            return 0;,0.0,0,-1,0
org/joda/time/LocalDate,6,679,        if (partial instanceof LocalDate) {,0.0,0,-1,0
org/joda/time/LocalDate,6,680,            LocalDate other = (LocalDate) partial;,0.0,0,-1,0
org/joda/time/LocalDate,6,681,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDate,6,682,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDate,6,687,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDate,6,706,        return toDateTimeAtStartOfDay(null);,0.0,0,-1,0
org/joda/time/LocalDate,6,753,        return toDateTimeAtMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,6,776,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,777,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,778,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,6,795,        return toDateTimeAtCurrentTime(null);,0.0,0,-1,0
org/joda/time/LocalDate,6,815,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,816,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,817,        long instantMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,6,818,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/LocalDate,6,819,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,6,842,        return toDateMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,6,865,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,866,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,867,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);",0.0,0,-1,0
org/joda/time/LocalDate,6,888,        if (time == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,889,"            throw new IllegalArgumentException(""The time must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,891,        if (getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,6,892,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,6,894,        long localMillis = getLocalMillis() + time.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,6,895,"        return new LocalDateTime(localMillis, getChronology());",0.0,0,-1,0
org/joda/time/LocalDate,6,917,"        return toDateTime(time, null);",0.0,0,-1,0
org/joda/time/LocalDate,6,939,        if (time != null && getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,6,940,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,6,942,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,943,        long instant = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,6,944,"        instant = chrono.set(this, instant);",0.0,0,-1,0
org/joda/time/LocalDate,6,945,        if (time != null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,946,"            instant = chrono.set(time, instant);",0.0,0,-1,0
org/joda/time/LocalDate,6,948,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,6,964,        return toInterval(null);,0.0,0,-1,0
org/joda/time/LocalDate,6,979,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,980,        DateTime start = toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,981,        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,6,982,"        return new Interval(start, end);",0.0,0,-1,0
org/joda/time/LocalDate,6,1003,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,6,1004,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);",0.0,0,-1,0
org/joda/time/LocalDate,6,1005,        LocalDate check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,6,1006,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1009,            while (check.equals(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1010,                date.setTime(date.getTime() + 3600000);,0.0,0,-1,0
org/joda/time/LocalDate,6,1011,                check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,6,1014,            while (date.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1015,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDate,6,1018,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDate,6,1019,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1021,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDate,6,1022,            if (earlier.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1023,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDate,6,1026,        return date;,0.0,0,-1,0
org/joda/time/LocalDate,6,1060,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1061,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1063,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDate,6,1085,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1086,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1088,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1089,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1091,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDate,6,1092,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1114,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1115,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1117,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1118,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1120,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1121,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1123,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDate,6,1124,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1147,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1148,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1150,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,6,1151,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,6,1152,        for (int i = 0; i < period.size(); i++) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1153,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);",0.0,0,-1,0
org/joda/time/LocalDate,6,1154,            DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/LocalDate,6,1155,            if (isSupported(type)) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1156,"                instant = type.getField(chrono).add(instant, value);",0.0,0,-1,0
org/joda/time/LocalDate,6,1159,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1180,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDate,6,1203,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1228,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1229,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1231,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,6,1232,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1251,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1252,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1254,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,6,1255,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1274,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1275,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1277,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,6,1278,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1299,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDate,6,1321,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1322,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1324,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,6,1325,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1347,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1348,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1350,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,6,1351,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1370,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1371,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1373,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,6,1374,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1393,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1394,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1396,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,6,1397,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1410,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1411,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1413,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1414,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,6,1416,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,6,1426,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1435,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1444,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1453,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1462,        return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1477,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1486,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1509,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1520,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,6,1547,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDate,6,1562,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,6,1577,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,6,1592,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDate,6,1607,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDate,6,1628,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDate,6,1643,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,6,1678,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,6,1693,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDate,6,1718,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDate,6,1727,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,6,1736,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDate,6,1745,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,6,1754,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDate,6,1772,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,6,1781,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDate,6,1790,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,6,1799,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDate,6,1808,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDate,6,1829,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1830,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,6,1832,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,6,1843,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,6,1844,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,6,1846,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,6,82,public final class LocalDate,0.0,0,-1,0
org/joda/time/DurationFieldType,6,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,243,        return getName();,0.0,0,-1,0
org/joda/time/Instant,6,108,        super();,0.0,0,-1,0
org/joda/time/Instant,6,109,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,6,110,    },0.0,0,-1,0
org/joda/time/Instant,6,132,        super();,0.0,0,-1,0
org/joda/time/Instant,6,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,6,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,6,135,    },0.0,0,-1,0
org/joda/time/Instant,6,73,        return new Instant();,0.0,0,-1,0
org/joda/time/Instant,6,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,6,98,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,6,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,6,171,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,6,172,            return this;,0.0,0,-1,0
org/joda/time/Instant,6,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,6,175,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,6,189,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,6,190,            return this;,0.0,0,-1,0
org/joda/time/Instant,6,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,6,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,6,219,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,6,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,6,246,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,6,268,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,6,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,6,315,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,6,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,6,361,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,6,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,180,"        Info(DateTimeZone zone, long periodStart) {",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,177,        private int iOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,181,            iPeriodStart = periodStart;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,182,            iZoneRef = zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,183,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,187,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,190,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,192,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,197,                if (iOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,200,                return iOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,202,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,210,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,6,98,        return false;,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,53,        super(message);,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,54,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,6,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,-1,0
org/joda/time/IllegalInstantException,6,64,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,6,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,-1,0
org/joda/time/IllegalInstantException,6,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,-1,0
org/joda/time/IllegalInstantException,6,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,-1,0
org/joda/time/IllegalInstantException,6,80,        if (ex instanceof IllegalInstantException) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,81,            return true;,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,84,            return isIllegalInstant(ex.getCause());,0.0,0,-1,0
org/joda/time/IllegalInstantException,6,86,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,632,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,634,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,637,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,640,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,643,                return getClass().getName();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,873,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1528,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1530,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1533,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1534,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1535,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1536,                    return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1540,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1541,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1570,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1573,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1574,                return transitions[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1576,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1577,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1587,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1589,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1595,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1596,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1605,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1611,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1613,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,475,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,95,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,99,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,103,        return getInfo(instant).getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,111,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,115,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,119,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,123,        return iZone.hashCode();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,128,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,133,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,140,        int period = (int)(millis >> 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,141,        Info[] cache = iInfoCache;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,142,        int index = period & cInfoCacheMask;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,143,        Info info = cache[index];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,145,            info = createInfo(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,146,            cache[index] = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,148,        return info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,152,        long periodStart = millis & (0xffffffffL << 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,153,"        Info info = new Info(iZone, periodStart);",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,155,        long end = periodStart | 0xffffffffL;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,156,        Info chain = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,158,            long next = iZone.nextTransition(periodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,159,            if (next == periodStart || next > end) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,160,                break;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,162,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,164,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,6,166,        return info;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,6,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,206,                StringBuilder buf = new StringBuilder(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,239,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,230,        } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,231,            uncaughtException(ex);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,259,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,285,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,6,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/DateTimeZone,6,1310,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1311,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1312,        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,1315,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1316,        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,1319,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,6,1320,        },0.0,0,-1,0
org/joda/time/DateTimeZone,6,1323,            return forID(iID);,0.0,0,-1,0
org/joda/time/DurationFieldType,6,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,6,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,6,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,282,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DurationFieldType,6,284,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,6,286,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,292,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,294,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,298,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,6,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,6,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,6,348,                    return this;,0.0,0,-1,0
org/joda/time/LocalDate,6,1903,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDate,6,1904,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDate,6,1905,        },0.0,0,-1,0
org/joda/time/LocalDate,6,1911,            iInstant = (LocalDate) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,6,1912,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,6,1913,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,6,1914,        },0.0,0,-1,0
org/joda/time/LocalDate,6,1923,            return iField;,0.0,0,-1,0
org/joda/time/LocalDate,6,1932,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,6,1942,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,6,1951,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDate,6,1980,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,6,1994,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,6,2008,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDate,6,2021,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDate,6,2040,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDate,6,2052,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDate,6,2067,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,6,2081,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,6,2091,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,6,2101,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,6,2112,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,6,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,6,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,82,"        return iField.set(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,6,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,726,        return null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,6,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,6,328,    },0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,167,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,197,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,198,            return true;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,200,        if (obj != null && getClass() == obj.getClass()) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,201,            BasicChronology chrono = (BasicChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,205,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,226,        StringBuilder sb = new StringBuilder(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,227,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,228,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,229,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,230,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,232,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,233,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,234,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,235,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,236,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,238,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,239,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,240,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,242,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,243,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,316,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,326,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,380,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,381,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,382,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,419,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,423,            if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,424,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,426,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,429,            yearStart += oneYear;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,431,            if (yearStart <= instant) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,433,                year++;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,467,"        int month = getMonthOfYear(millis, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,468,"        return getDayOfMonth(millis, year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,486,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,527,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,574,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,584,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,586,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,599,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,6,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,93,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,126,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,6,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,763,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,6,771,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,6,143,        return iRange;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,983,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,984,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,986,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,988,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,996,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,997,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,998,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1000,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1001,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1005,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1006,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1008,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1010,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1014,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1018,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1019,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1020,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1024,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1025,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1027,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1028,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1032,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1033,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1038,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1039,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1040,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1044,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1045,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1047,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1048,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1052,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1053,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1068,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1069,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1071,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1076,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1077,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1079,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,649,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,661,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,662,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,664,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,669,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,673,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,674,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,676,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,681,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,685,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,689,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,695,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,696,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,698,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,699,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,700,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,701,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,703,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,704,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,706,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,711,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,715,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,720,"                instant = iGregorianField.set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,721,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,723,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,724,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,727,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,728,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,736,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,737,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,740,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,741,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,750,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,751,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,752,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,754,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,755,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,760,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,761,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,763,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,764,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,769,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,777,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,781,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,782,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,784,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,789,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,790,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,792,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,797,            return iGregorianField.getLeapDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,804,            return iJulianField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,808,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,812,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,816,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,817,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,820,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,824,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,825,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,826,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,829,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,835,            return iGregorianField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,839,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,840,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,843,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,847,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,848,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,849,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,852,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,856,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,857,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,861,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,862,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,863,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,864,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,865,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,866,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,869,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,874,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,875,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,877,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,878,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,888,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,889,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,891,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,892,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,894,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,895,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,899,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,903,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,908,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,913,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,914,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,916,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,280,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,281,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,140,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,156,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,193,            cutoverInstant = DEFAULT_CUTOVER;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,210,                        return chrono;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,220,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,221,                chrono = new GJChronology,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,246,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,247,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,249,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,251,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,287,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,293,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,317,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,322,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,331,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,343,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,355,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,356,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,364,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,377,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,367,        } catch (IllegalFieldValueException ex) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,368,            if (monthOfYear != 2 || dayOfMonth != 29) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,369,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,371,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,374,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,375,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,378,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,380,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,383,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,385,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,388,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,420,        if (obj instanceof GJChronology) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,421,            GJChronology chrono = (GJChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,422,            return iCutoverMillis == chrono.iCutoverMillis &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,426,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,436,"        return ""GJ"".hashCode() * 11 + getZone().hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,448,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,449,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,450,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,451,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,453,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,454,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,456,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,457,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,459,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,461,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,464,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,465,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,466,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,468,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,470,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,486,            return;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,490,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,592,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1103,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1107,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,6,1111,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,69,        return iField;,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,6,101,        return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,6,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,6,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,218,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,6,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,386,            super(field.getType());,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,387,            if (!field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,388,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,390,            iField = field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,391,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,392,            iDurationField = durationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,393,            iTimeField = useTimeArithmetic(durationField);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,394,            iRangeDurationField = rangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,395,            iLeapDurationField = leapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,396,        },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,399,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,403,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,404,            return iField.get(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,408,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,409,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,413,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,414,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,418,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,422,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,426,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,427,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,428,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,429,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,431,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,432,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,433,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,438,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,439,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,440,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,441,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,443,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,444,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,445,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,450,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,451,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,452,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,453,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,455,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,456,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,457,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,462,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,463,"            localInstant = iField.set(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,465,            if (get(result) != value) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,466,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,467,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,468,                ex.initCause(cause);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,469,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,471,            return result;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,476,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,477,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,478,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,482,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,483,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,489,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,490,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,496,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,500,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,504,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,505,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,509,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,510,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,514,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,518,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,519,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,520,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,521,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,523,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,524,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,525,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,530,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,531,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,532,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,533,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,535,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,536,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,537,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,542,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,543,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,547,            return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,551,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,552,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,556,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,560,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,564,            return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,568,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,569,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,573,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,577,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,581,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,585,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,589,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,590,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,592,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,593,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,595,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,81,"        super(base, zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,82,    },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,55,        if (base == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,58,        base = base.withUTC();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,59,        if (base == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,62,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,65,"        return new ZonedChronology(base, zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,85,        return (DateTimeZone)getParam();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,89,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,93,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,94,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,96,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,97,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,99,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,100,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,102,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,109,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,118,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,128,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,138,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,139,        int offset = zone.getOffsetFromLocal(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,140,        localInstant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,141,        if (offset != zone.getOffset(localInstant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,142,"            throw new IllegalInstantException(localInstant, zone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,144,        return localInstant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,154,"        fields.eras = convertField(fields.eras, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,155,"        fields.centuries = convertField(fields.centuries, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,156,"        fields.years = convertField(fields.years, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,157,"        fields.months = convertField(fields.months, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,159,"        fields.weeks = convertField(fields.weeks, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,160,"        fields.days = convertField(fields.days, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,163,"        fields.hours = convertField(fields.hours, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,164,"        fields.minutes = convertField(fields.minutes, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,165,"        fields.seconds = convertField(fields.seconds, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,166,"        fields.millis = convertField(fields.millis, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,170,"        fields.year = convertField(fields.year, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,174,"        fields.era = convertField(fields.era, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,180,"        fields.weekyear = convertField(fields.weekyear, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,194,    },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,197,        if (field == null || !field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,198,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,200,        if (converted.containsKey(field)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,201,            return (DurationField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,204,"        converted.put(field, zonedField);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,205,        return zonedField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,209,        if (field == null || !field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,210,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,212,        if (converted.containsKey(field)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,213,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,215,        ZonedDateTimeField zonedField =,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,220,"        converted.put(field, zonedField);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,221,        return zonedField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,234,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,235,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,237,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,238,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,240,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,241,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,111,        return iChronology.days();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,123,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,6,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,160,            return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,6,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,6,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,6,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,6,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,133,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,142,        long millis = iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,143,        int hash = (int) (millis ^ (millis >>> 32));,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,144,        hash += getType().hashCode();,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,6,145,        return hash;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,101,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,6,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,153,"        return super.set(instant, value - iOffset);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,165,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,6,216,        return iOffset;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,6,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,6,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,94,        return iChronology.weeks();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,6,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,55,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,6,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,6,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,209,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,211,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,212,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,213,"            return set(partial, 0, values, newMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,215,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,216,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,220,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,221,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,223,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,243,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,244,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,247,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,256,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,260,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,262,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,271,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,273,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,276,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,277,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,280,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,300,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,304,        if (thisDom > maxDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,306,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,320,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,321,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,324,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,329,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,334,        return iChronology.days();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,339,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,344,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,349,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,350,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,351,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,356,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,6,364,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,220,        return iChronology.weeks();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,6,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,6,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,281,            super(field.getType());,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,282,            if (!field.isSupported()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,283,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,285,            iField = field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,286,            iTimeField = useTimeArithmetic(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,287,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,288,        },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,295,            return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,299,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,307,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,311,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,315,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,316,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,321,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,322,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,327,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,328,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,334,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,335,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,341,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,342,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,347,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,351,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,352,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,357,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,6,361,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,50,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,51,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,55,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,59,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,81,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,83,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,95,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,99,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,103,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,6,110,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,6,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,6,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,6,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,6,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,6,100,        return iMinValue;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,6,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,64,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,76,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,80,        return iType;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,84,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,88,        return iField.isSupported();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,92,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,100,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,104,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,108,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,112,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,116,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,120,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,124,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,132,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,136,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,140,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,144,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,156,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,176,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,180,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,184,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,192,        return iField.getDurationField();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,200,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,204,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,208,        return iField.getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,216,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,220,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,224,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,232,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,236,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,240,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,244,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,248,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,252,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,256,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,260,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,264,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,268,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,272,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,6,276,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,225,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,226,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,227,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,230,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,234,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,235,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,240,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,6,241,        },0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,475,            return (1 << iOrdinal);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,516,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,520,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,522,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,524,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,6,590,                    return this;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,6,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,123,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,136,        switch (val2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,141,                return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,143,                return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,145,                return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,147,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,148,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,151,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,163,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,164,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,166,        if (val1 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,167,            return val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,169,        if (val1 == 0 || val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,170,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,172,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,176,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,188,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,202,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,203,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,218,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,236,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,252,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,253,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,257,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,6,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,292,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,293,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,6,296,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,297,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,299,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,300,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,303,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,305,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,306,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,308,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,321,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,322,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,324,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,325,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,6,327,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,109,        return getWrappedField().getUnitMillis() * iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,138,        return false;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,147,        long scalar = iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,149,        hash += getType().hashCode();,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,150,        hash += getWrappedField().hashCode();,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,6,151,        return hash;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,49,        return DurationFieldType.millis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,155,        return (int) getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,6,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
