project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/joda/time/MutableDateTime,3,785,"            setMillis(getChronology().hours().add(getMillis(), hours));",2.77778,1,,1,0.0006120074587922448,0.9993879925412089
org/joda/time/MutableDateTime,3,786,    },2.77778,1,,1,0.001794302858921467,0.9982056971410779
org/joda/time/DateTimeZone,3,931,                    return offsetPrev;,0.92593,0,-1,0
org/joda/time/chrono/ZonedChronology,3,351,            int offset = this.iZone.getOffsetFromLocal(instant);,0.45455,0,-1,0
org/joda/time/chrono/ZonedChronology,3,352,            long diff = instant - offset;,0.45455,0,-1,0
org/joda/time/chrono/ZonedChronology,3,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.45455,0,-1,0
org/joda/time/chrono/ZonedChronology,3,357,            return offset;,0.45455,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,60,            return instant;,0.44444,0,-1,0
org/joda/time/MutableDateTime,3,351,"        super(year, monthOfYear, dayOfMonth,",0.43103,0,-1,0
org/joda/time/MutableDateTime,3,353,    },0.43103,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,183,"            return ImpreciseDateTimeField.this.add(instant, value);",0.40909,0,-1,0
org/joda/time/chrono/ZonedChronology,3,315,            int offset = getOffsetToAdd(instant);,0.26042,0,-1,0
org/joda/time/chrono/ZonedChronology,3,316,"            instant = iField.add(instant + offset, value);",0.26042,0,-1,0
org/joda/time/chrono/ZonedChronology,3,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.26042,0,-1,0
org/joda/time/MutableDateTime,3,1229,        return ISODateTimeFormat.dateTime().print(this);,0.2551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,202,            return iNextInfo.getOffset(millis);,0.24038,0,-1,0
org/joda/time/chrono/ZonedChronology,3,341,            int offset = this.iZone.getOffset(instant);,0.22523,0,-1,0
org/joda/time/chrono/ZonedChronology,3,342,            long sum = instant + offset;,0.22523,0,-1,0
org/joda/time/chrono/ZonedChronology,3,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.22523,0,-1,0
org/joda/time/chrono/ZonedChronology,3,347,            return offset;,0.22523,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,190,                    dayOfYear++;,0.19685,0,-1,0
org/joda/time/MutableDateTime,3,639,"            setMillis(type.getField(getChronology()).add(getMillis(), amount));",0.16667,0,-1,0
org/joda/time/MutableDateTime,3,640,    },0.16667,0,-1,0
org/joda/time/MutableDateTime,3,660,"            setMillis(getChronology().years().add(getMillis(), years));",0.16667,1,-1,1
org/joda/time/MutableDateTime,3,661,    },0.16667,1,-1,1
org/joda/time/MutableDateTime,3,702,"            setMillis(getChronology().months().add(getMillis(), months));",0.16667,1,-1,1
org/joda/time/MutableDateTime,3,703,    },0.16667,1,-1,1
org/joda/time/MutableDateTime,3,723,"            setMillis(getChronology().weeks().add(getMillis(), weeks));",0.16667,1,-1,1
org/joda/time/MutableDateTime,3,724,    },0.16667,1,-1,1
org/joda/time/MutableDateTime,3,764,"            setMillis(getChronology().days().add(getMillis(), days));",0.16667,1,-1,1
org/joda/time/MutableDateTime,3,765,    },0.16667,1,-1,1
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,94,            return instant; // the easy case,0.16667,0,-1,0
org/joda/time/MutableDateTime,3,456,                break;,0.1634,0,-1,0
org/joda/time/MutableDateTime,3,454,        switch (iRoundingMode) {,0.15723,0,-1,0
org/joda/time/MutableDateTime,3,473,        super.setMillis(instant);,0.15723,0,-1,0
org/joda/time/MutableDateTime,3,474,    },0.15723,0,-1,0
org/joda/time/base/BaseDateTime,3,317,"        iMillis = checkInstant(instant, iChronology);",0.15723,0,-1,0
org/joda/time/base/BaseDateTime,3,318,    },0.15723,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2158,                buf.append('+');,0.14368,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1962,                if (buf != null) {,0.13298,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1963,                    while (--minDigits >= 0) {,0.13298,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1964,                        buf.append('0');,0.13298,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1971,                return;,0.13298,0,-1,0
org/joda/time/MutableDateTime,3,636,        if (type == null) {,0.125,0,-1,0
org/joda/time/base/BaseDateTime,3,225,    },0.11161,0,-1,0
org/joda/time/base/BaseDateTime,3,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.11062,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.10638,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2183,            if (displayOffset == 0 && iMinFields <= 2) {,0.10638,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2184,                return;,0.10638,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2176,                buf.append(':');,0.10593,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2157,            if (displayOffset >= 0) {,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2166,            if (iMaxFields == 1) {,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2175,            if (iShowSeparators) {,0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.10549,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2179,            if (iMaxFields == 2) {,0.10549,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,593,            } else if (iMode == 's') {,0.10163,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,596,                offset = 0;,0.10163,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,591,            if (iMode == 'w') {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,600,            instant += offset;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,609,            if (iDayOfWeek == 0) {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,615,"                prev = setDayOfWeek(chrono, prev);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,616,                if (prev >= instant) {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,625,            return prev - offset;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,691,"                prev = setDayOfMonth(chrono, prev);",0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,701,            },0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,702,            return prev;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1244,            instant++;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1246,            int standardOffset = iStandardOffset;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1247,            Recurrence startRecurrence = iStartRecurrence;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1248,            Recurrence endRecurrence = iEndRecurrence;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1253,                start = startRecurrence.previous,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1255,                if (instant < 0 && start > 0) {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1265,            },0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1268,                end = endRecurrence.previous,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1270,                if (instant < 0 && end > 0) {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1280,            },0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1282,            return ((start > end) ? start : end) - 1;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1609,                long prev = iTailZone.previousTransition(instant);,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1610,                if (prev < instant) {,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1611,                    return prev;,0.10121,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.10121,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,725,        return Constants.dt;,0.0947,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1913,"                printTo(buf, null, instant, chrono);",0.09434,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1916,            },0.09434,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1917,        },0.09434,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1608,            if (iTailZone != null) {,0.09363,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2150,            if (displayZone == null) {,0.09294,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.09294,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2667,                locale = Locale.getDefault();,0.09058,0,-1,0
org/joda/time/format/FormatUtils,3,68,            for (; size > 2; size--) {,0.09058,0,-1,0
org/joda/time/format/FormatUtils,3,74,            int d = ((value + 1) * 13421772) >> 27;,0.09058,0,-1,0
org/joda/time/format/FormatUtils,3,75,            buf.append((char) (d + '0'));,0.09058,0,-1,0
org/joda/time/format/FormatUtils,3,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.09058,0,-1,0
org/joda/time/format/FormatUtils,3,78,        } else {,0.09058,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,128,            return instant % iUnitMillis;,0.08993,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1946,            DateTimeField field = iFieldType.getField(chrono);,0.08961,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1947,            int minDigits = iMinDigits;,0.08961,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1951,                fraction = field.remainder(instant);,0.08961,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1959,            },0.08961,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1961,            if (fraction == 0) {,0.08961,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,127,        if (instant >= 0) {,0.08929,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1590,            long[] transitions = iTransitions;,0.08834,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1591,"            int i = Arrays.binarySearch(transitions, instant);",0.08834,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1592,            if (i >= 0) {,0.08834,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1598,            i = ~i;,0.08834,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1599,            if (i < transitions.length) {,0.08834,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,119,        return iZone.previousTransition(instant);,0.08834,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1475,                DateTimeField field = iFieldType.getField(chrono);,0.08651,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0.08651,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1479,            },0.08651,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1480,        },0.08651,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2660,            DateTimePrinter[] elements = iPrinters;,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2661,            if (elements == null) {,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2665,            if (locale == null) {,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2670,            int len = elements.length;,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2671,            for (int i = 0; i < len; i++) {,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2674,        },0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1218,            buf.append(iValue);,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1219,        },0.08591,0,-1,0
org/joda/time/DateTimeFieldType,3,522,                    return chronology.secondOfDay();,0.08591,0,-1,0
org/joda/time/format/DateTimeFormatter,3,592,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.08532,0,-1,0
org/joda/time/format/DateTimeFormatter,3,593,"        printTo(buf, instant);",0.08532,0,-1,0
org/joda/time/format/DateTimeFormatter,3,594,        return buf.toString();,0.08532,0,-1,0
org/joda/time/format/DateTimeFormatter,3,469,        long millis = DateTimeUtils.getInstantMillis(instant);,0.08503,0,-1,0
org/joda/time/format/DateTimeFormatter,3,470,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.08503,0,-1,0
org/joda/time/format/DateTimeFormatter,3,471,"        printTo(buf, millis, chrono);",0.08503,0,-1,0
org/joda/time/format/DateTimeFormatter,3,472,    },0.08503,0,-1,0
org/joda/time/format/DateTimeFormatter,3,628,        DateTimePrinter printer = requirePrinter();,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,629,        chrono = selectChronology(chrono);,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,632,        DateTimeZone zone = chrono.getZone();,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,633,        int offset = zone.getOffset(instant);,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,634,        long adjustedInstant = instant + offset;,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,635,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,641,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.08418,0,-1,0
org/joda/time/format/DateTimeFormatter,3,642,    },0.08418,0,-1,0
org/joda/time/DateTimeZone,3,926,            long prev = previousTransition(instantAdjusted);,0.08389,0,-1,0
org/joda/time/DateTimeZone,3,927,            if (prev < instantAdjusted) {,0.08389,0,-1,0
org/joda/time/DateTimeZone,3,928,                int offsetPrev = getOffset(prev);,0.08389,0,-1,0
org/joda/time/DateTimeZone,3,929,                int diff = offsetPrev - offsetLocal;,0.08389,0,-1,0
org/joda/time/DateTimeZone,3,930,                if (instantAdjusted - prev <= diff) {,0.08389,0,-1,0
org/joda/time/format/FormatUtils,3,83,                digits = 4;,0.08224,0,-1,0
org/joda/time/format/FormatUtils,3,80,            if (value < 1000) {,0.08197,0,-1,0
org/joda/time/format/FormatUtils,3,82,            } else if (value < 10000) {,0.08197,0,-1,0
org/joda/time/format/FormatUtils,3,87,            for (; size > digits; size--) {,0.08197,0,-1,0
org/joda/time/format/FormatUtils,3,90,            buf.append(Integer.toString(value));,0.08197,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.07692,0,-1,0
org/joda/time/DateTimeUtils,3,199,        Chronology chrono = instant.getChronology();,0.07669,0,-1,0
org/joda/time/DateTimeUtils,3,200,        if (chrono == null) {,0.07669,0,-1,0
org/joda/time/DateTimeUtils,3,203,        return chrono;,0.07669,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,188,                if (isLeapYear(year)) {,0.07645,0,-1,0
org/joda/time/DateTimeUtils,3,196,        if (instant == null) {,0.0753,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.07508,0,-1,0
org/joda/time/format/FormatUtils,3,63,            for (; size > 1; size--) {,0.07418,0,-1,0
org/joda/time/format/FormatUtils,3,64,                buf.append('0');,0.07418,0,-1,0
org/joda/time/format/FormatUtils,3,66,            buf.append((char)(value + '0'));,0.07418,0,-1,0
org/joda/time/DateTimeUtils,3,181,        return instant.getMillis();,0.07184,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,551,            } else if (iMode == 's') {,0.07163,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,554,                offset = 0;,0.07163,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,726,                        daysToAdd -= 7;,0.07163,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.07143,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.07143,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.07143,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,725,                    if (daysToAdd > 0) {,0.07143,0,-1,0
org/joda/time/chrono/ZonedChronology,3,144,        return localInstant;,0.07102,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1307,            int standardOffset = iStandardOffset;,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1308,            Recurrence startRecurrence = iStartRecurrence;,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1309,            Recurrence endRecurrence = iEndRecurrence;,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1314,                start = startRecurrence.next,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1322,            },0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1325,                end = endRecurrence.next,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1333,            },0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1335,            return (start > end) ? startRecurrence : endRecurrence;,0.07022,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1546,            return iTailZone.getOffset(instant);,0.07022,0,-1,0
org/joda/time/chrono/ZonedChronology,3,138,        DateTimeZone zone = getZone();,0.07022,0,-1,0
org/joda/time/chrono/ZonedChronology,3,139,        int offset = zone.getOffsetFromLocal(localInstant);,0.07022,0,-1,0
org/joda/time/chrono/ZonedChronology,3,140,        localInstant -= offset;,0.07022,0,-1,0
org/joda/time/chrono/ZonedChronology,3,141,        if (offset != zone.getOffset(localInstant)) {,0.07022,0,-1,0
org/joda/time/chrono/ZonedChronology,3,118,        return localToUTC(getBase().getDateTimeMillis,0.07003,0,-1,0
org/joda/time/DateTimeUtils,3,178,        if (instant == null) {,0.06983,0,-1,0
org/joda/time/format/FormatUtils,3,67,        } else if (value < 100) {,0.06983,0,-1,0
org/joda/time/DateTimeFieldType,3,524,                    return chronology.secondOfMinute();,0.06944,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,162,            periodStart = next;,0.06887,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.06887,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,164,        },0.06887,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2654,            return iPrintedLengthEstimate;,0.06887,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,115,            yearToUse = thisYear + (monthToUse / iMax);,0.0672,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,116,            monthToUse = (monthToUse % iMax) + 1;,0.0672,0,-1,0
org/joda/time/format/DateTimeFormatter,3,667,        DateTimePrinter printer = iPrinter;,0.06702,0,-1,0
org/joda/time/format/DateTimeFormatter,3,668,        if (printer == null) {,0.06702,0,-1,0
org/joda/time/format/DateTimeFormatter,3,671,        return printer;,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,93,        if (months == 0) {,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,99,        long timePart = iChronology.getMillisOfDay(instant);,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,104,        int thisYear = iChronology.getYear(instant);,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,113,        int monthToUse = thisMonth - 1 + months;,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,114,        if (monthToUse >= 0) {,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,139,        if (dayToUse > maxDay) {,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,145,        long datePart =,0.06702,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,147,        return datePart + timePart;,0.06702,0,-1,0
org/joda/time/DateTimeZone,3,925,        } else if (offsetLocal >= 0) {,0.06614,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1202,            int standardOffset = iStandardOffset;,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1203,            Recurrence startRecurrence = iStartRecurrence;,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1204,            Recurrence endRecurrence = iEndRecurrence;,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1209,                start = startRecurrence.next,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1211,                if (instant > 0 && start < 0) {,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1221,            },0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1224,                end = endRecurrence.next,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1226,                if (instant > 0 && end < 0) {,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1236,            },0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1238,            return (start > end) ? end : start;,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1582,            long end = transitions[transitions.length - 1];,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1583,            if (instant < end) {,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1586,            return iTailZone.nextTransition(instant);,0.06596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,573,"                next = setDayOfWeek(chrono, next);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,574,                if (next <= instant) {,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,575,"                    next = chrono.year().add(next, 1);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,577,"                    next = setDayOfMonthNext(chrono, next);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,578,"                    next = setDayOfWeek(chrono, next);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,719,            if (daysToAdd != 0) {,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,720,                if (iAdvance) {,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,731,            return instant;,0.06579,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,549,            if (iMode == 'w') {,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,558,            instant += offset;,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,563,"            next = chrono.millisOfDay().set(next, 0);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,565,"            next = setDayOfMonthNext(chrono, next);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,567,            if (iDayOfWeek == 0) {,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,583,            return next - offset;,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,672,"                next = setDayOfMonth(chrono, next);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,682,            },0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,683,            return next;,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,706,            if (iDayOfMonth >= 0) {,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,713,            return instant;,0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.06562,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,776,            return iSaveMillis;,0.06562,0,-1,0
org/joda/time/field/BaseDateTimeField,3,253,"        return getDurationField().add(instant, value);",0.06562,0,-1,0
org/joda/time/format/FormatUtils,3,50,        if (value < 0) {,0.06494,0,-1,0
org/joda/time/format/FormatUtils,3,62,        if (value < 10) {,0.06494,0,-1,0
org/joda/time/format/FormatUtils,3,92,    },0.06494,0,-1,0
org/joda/time/field/MillisDurationField,3,117,"        return FieldUtils.safeAdd(instant, value);",0.06427,0,-1,0
org/joda/time/format/DateTimeFormatter,3,951,        chrono = DateTimeUtils.getChronology(chrono);,0.06394,0,-1,0
org/joda/time/format/DateTimeFormatter,3,952,        if (iChrono != null) {,0.06394,0,-1,0
org/joda/time/format/DateTimeFormatter,3,955,        if (iZone != null) {,0.06394,0,-1,0
org/joda/time/format/DateTimeFormatter,3,958,        return chrono;,0.06394,0,-1,0
org/joda/time/DateTimeZone,3,907,        final int offsetLocal = getOffset(instantLocal);,0.06361,0,-1,0
org/joda/time/DateTimeZone,3,909,        final long instantAdjusted = instantLocal - offsetLocal;,0.06361,0,-1,0
org/joda/time/DateTimeZone,3,910,        final int offsetAdjusted = getOffset(instantAdjusted);,0.06361,0,-1,0
org/joda/time/DateTimeZone,3,912,        if (offsetLocal != offsetAdjusted) {,0.06361,0,-1,0
org/joda/time/format/FormatUtils,3,31,    private static final double LOG_10 = Math.log(10);,0.06297,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,59,        if (years == 0) {,0.06188,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,62,        int thisYear = get(instant);,0.06188,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.06188,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,64,"        return set(instant, newYear);",0.06188,0,-1,0
org/joda/time/field/FieldUtils,3,64,        int sum = val1 + val2;,0.06188,0,-1,0
org/joda/time/field/FieldUtils,3,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.06188,0,-1,0
org/joda/time/field/FieldUtils,3,70,        return sum;,0.06188,0,-1,0
org/joda/time/chrono/BasicChronology,3,543,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.06068,0,-1,0
org/joda/time/chrono/BasicChronology,3,552,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.06068,0,-1,0
org/joda/time/DateTimeFieldType,3,520,                    return chronology.minuteOfHour();,0.05938,0,-1,0
org/joda/time/DateTimeFieldType,3,516,                    return chronology.hourOfDay();,0.05855,0,-1,0
org/joda/time/DateTimeFieldType,3,498,                    return chronology.dayOfMonth();,0.05841,0,-1,0
org/joda/time/format/DateTimeFormatter,3,164,        return iPrinter;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatter,3,182,        return iParser;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2730,            return iParsedLengthEstimate;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2778,            if (array != null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2779,                for (int i=0; i<array.length; i++) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2780,                    list.add(array[i]);,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2783,        },0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,153,        Object f = getFormatter();,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,154,        if (isParser(f)) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,155,            return (DateTimeParser) f;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,217,        if (formatter == null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,257,        checkParser(parser);,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,258,"        return append0(null, parser);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,305,        if (printer != null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,308,        if (parsers == null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,311,        int length = parsers.length;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,312,        if (length == 1) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,321,        for (i = 0; i < length - 1; i++) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,326,        copyOfParsers[i] = parsers[i];,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,328,"        return append0(printer, new MatchingParser(copyOfParsers));",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,345,        checkParser(parser);,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,347,"        return append0(null, new MatchingParser(parsers));",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,357,        if (parser == null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,360,    },0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,383,        iFormatter = null;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,384,        iElementPairs.add(printer);,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,385,        iElementPairs.add(parser);,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,386,        return this;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,464,        if (fieldType == null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,467,        if (numDigits <= 0) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,470,"        return append0(new FixedNumber(fieldType, numDigits, false));",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1150,                    f = parser;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1171,        return false;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2794,            super();,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2795,            iParsers = parsers;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2796,            int est = 0;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2797,            for (int i=parsers.length; --i>=0 ;) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2798,                DateTimeParser parser = parsers[i];,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2799,                if (parser != null) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2800,                    int len = parser.estimateParsedLength();,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2801,                    if (len > est) {,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2802,                        est = len;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2805,            },0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2806,            iParsedLengthEstimate = est;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2807,        },0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2810,            return iParsedLengthEstimate;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1522,"            super(fieldType, numDigits, signed, numDigits);",0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1523,        },0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1136,    static final class Constants {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1138,"            ye = yearElement(),  // year element (yyyy)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1139,"            mye = monthElement(), // monthOfYear element (-MM)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1140,"            dme = dayOfMonthElement(), // dayOfMonth element (-dd)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1141,"            we = weekyearElement(),  // weekyear element (xxxx)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1142,"            wwe = weekElement(), // weekOfWeekyear element (-ww)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1143,"            dwe = dayOfWeekElement(), // dayOfWeek element (-ee)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1144,"            dye = dayOfYearElement(), // dayOfYear element (-DDD)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1145,"            hde = hourElement(), // hourOfDay element (HH)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1146,"            mhe = minuteElement(), // minuteOfHour element (:mm)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1147,"            sme = secondElement(), // secondOfMinute element (:ss)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1148,"            fse = fractionElement(), // fractionOfSecond element (.SSSSSSSSS)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1149,"            ze = offsetElement(),  // zone offset element",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1150,"            lte = literalTElement(), // literal 'T' element",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1153,"            ym = yearMonth(),  // year month",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1154,"            ymd = yearMonthDay(), // year month day",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1157,"            ww = weekyearWeek(),  // weekyear week",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1158,"            wwd = weekyearWeekDay(), // weekyear week day",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1161,"            hm = hourMinute(),   // hour minute",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1162,"            hms = hourMinuteSecond(),  // hour minute second",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1163,"            hmsl = hourMinuteSecondMillis(), // hour minute second millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1164,"            hmsf = hourMinuteSecondFraction(), // hour minute second fraction",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1166,"            dh = dateHour(),    // date hour",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1167,"            dhm = dateHourMinute(),   // date hour minute",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1168,"            dhms = dateHourMinuteSecond(),  // date hour minute second",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1169,"            dhmsl = dateHourMinuteSecondMillis(), // date hour minute second millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1170,"            dhmsf = dateHourMinuteSecondFraction(), // date hour minute second fraction",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1173,"            t = time(),  // time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1174,"            tx = timeNoMillis(),  // time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1175,"            tt = tTime(),  // Ttime",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1176,"            ttx = tTimeNoMillis(),  // Ttime no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1177,"            dt = dateTime(), // date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1178,"            dtx = dateTimeNoMillis(), // date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1181,"            wdt = weekDateTime(), // week date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1182,"            wdtx = weekDateTimeNoMillis(), // week date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1184,"            od = ordinalDate(),  // ordinal date (same as yd)",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1185,"            odt = ordinalDateTime(), // ordinal date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1186,"            odtx = ordinalDateTimeNoMillis(), // ordinal date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1188,"            bd = basicDate(),  // basic date",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1189,"            bt = basicTime(),  // basic time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1190,"            btx = basicTimeNoMillis(),  // basic time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1191,"            btt = basicTTime(), // basic Ttime",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1192,"            bttx = basicTTimeNoMillis(), // basic Ttime no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1193,"            bdt = basicDateTime(), // basic date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1194,"            bdtx = basicDateTimeNoMillis(), // basic date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1196,"            bod = basicOrdinalDate(),  // basic ordinal date",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1197,"            bodt = basicOrdinalDateTime(), // basic ordinal date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1198,"            bodtx = basicOrdinalDateTimeNoMillis(), // basic ordinal date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1200,"            bwd = basicWeekDate(),  // basic week date",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1201,"            bwdt = basicWeekDateTime(), // basic week date time",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1202,"            bwdtx = basicWeekDateTimeNoMillis(), // basic week date time no millis",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1204,"            dpe = dateElementParser(), // date parser element",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1205,"            tpe = timeElementParser(), // time parser element",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1206,"            dp = dateParser(),  // date parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1207,"            ldp = localDateParser(), // local date parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1208,"            tp = timeParser(),  // time parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1209,"            ltp = localTimeParser(), // local time parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1210,"            dtp = dateTimeParser(), // date time parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1211,"            dotp = dateOptionalTimeParser(), // date optional time parser",0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1212,            ldotp = localDateOptionalTimeParser(); // local date optional time parser,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1216,            if (dp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1217,                DateTimeParser tOffset = new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1220,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1229,            if (ldp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1230,                return dateElementParser().withZoneUTC();,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1236,            if (dpe == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1237,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1259,            return dpe;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1263,            if (tp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1264,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1274,            if (ltp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1275,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1284,            if (tpe == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1286,                DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1297,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1333,            return tpe;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1337,            if (dtp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1340,                DateTimeParser time = new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1345,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1353,            if (dotp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1354,                DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1359,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1368,            if (ldotp == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1369,                DateTimeParser time = new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1373,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1383,            if (t == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1384,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1389,            return t;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1393,            if (tx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1394,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1399,            return tx;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1403,            if (tt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1404,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1409,            return tt;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1413,            if (ttx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1414,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1419,            return ttx;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1423,            if (dt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1424,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1433,            if (dtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1434,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1443,            if (od == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1444,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1449,            return od;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1453,            if (odt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1454,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1463,            if (odtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1464,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1473,            if (wdt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1474,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1483,            if (wdtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1484,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1494,            if (bd == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1495,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1501,            return bd;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1505,            if (bt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1506,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1515,            return bt;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1519,            if (btx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1520,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1527,            return btx;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1531,            if (btt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1532,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1537,            return btt;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1541,            if (bttx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1542,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1547,            return bttx;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1551,            if (bdt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1552,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1561,            if (bdtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1562,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1571,            if (bod == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1572,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1577,            return bod;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1581,            if (bodt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1582,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1591,            if (bodtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1592,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1601,            if (bwd == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1602,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1609,            return bwd;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1613,            if (bwdt == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1614,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1623,            if (bwdtx == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1624,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1634,            if (ym == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1635,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1644,            if (ymd == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1645,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1655,            if (ww == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1656,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1665,            if (wwd == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1666,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1676,            if (hm == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1677,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1682,            return hm;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1686,            if (hms == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1687,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1693,            return hms;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1697,            if (hmsl == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1698,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1706,            return hmsl;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1710,            if (hmsf == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1711,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1718,            return hmsf;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1722,            if (dh == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1723,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1733,            if (dhm == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1734,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1744,            if (dhms == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1745,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1755,            if (dhmsl == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1756,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1766,            if (dhmsf == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1767,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1778,            if (ye == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1779,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1783,            return ye;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1787,            if (mye == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1788,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1793,            return mye;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1797,            if (dme == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1798,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1803,            return dme;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1807,            if (we == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1808,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1812,            return we;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1816,            if (wwe == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1817,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1822,            return wwe;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1826,            if (dwe == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1827,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1832,            return dwe;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1836,            if (dye == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1837,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1842,            return dye;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1846,            if (lte == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1847,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1851,            return lte;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1855,            if (hde == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1856,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1860,            return hde;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1864,            if (mhe == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1865,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1870,            return mhe;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1874,            if (sme == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1875,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1880,            return sme;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1884,            if (fse == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1885,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1892,            return fse;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1896,            if (ze == null) {,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1897,                return new DateTimeFormatterBuilder(),0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1901,            return ze;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,662,        return yearMonthDay();,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,784,        return Constants.wwd;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,995,        return Constants.ymd;,0.0576,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1033,        return Constants.hde;,0.0576,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2623,                iPrinters = null;,0.05734,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2624,                iPrintedLengthEstimate = 0;,0.05734,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0.05734,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2139,                est += iMinFields - 1;,0.05734,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1299,            return iValue.length();,0.05721,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,408,        if (text == null) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,411,        switch (text.length()) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,417,                return append0(new StringLiteral(text));,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,570,        if (fieldType == null) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,573,        if (maxDigits < minDigits) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,576,        if (minDigits < 0 || maxDigits <= 0) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2137,            int est = 1 + iMinFields << 1;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2138,            if (iShowSeparators) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2144,            return est;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2274,            return estimatePrintedLength();,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1895,            super();,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1896,            iFieldType = fieldType;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1898,            if (maxDigits > 18) {,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1901,            iMinDigits = minDigits;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1902,            iMaxDigits = maxDigits;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1903,        },0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1906,            return iMaxDigits;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2064,            return iMaxDigits;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1270,            super();,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1271,            iValue = value;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1272,        },0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1275,            return iValue.length();,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1401,"            super(fieldType, maxParsedDigits, signed);",0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1402,        },0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1405,            return iMaxParsedDigits;,0.05708,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0.05695,0,-1,0
org/joda/time/field/PreciseDurationField,3,104,        long addition = value * iUnitMillis;  // safe,0.05669,0,-1,0
org/joda/time/field/PreciseDurationField,3,105,"        return FieldUtils.safeAdd(instant, addition);",0.05669,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0.05631,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1091,        return append0(new TimeZoneOffset,0.05618,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,180,            if (isLeapYear(thisYear)) {,0.05618,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2121,            super();,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2124,            iShowSeparators = showSeparators;,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2125,            if (minFields <= 0 || maxFields < minFields) {,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2128,            if (minFields > 4) {,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2132,            iMinFields = minFields;,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2133,            iMaxFields = maxFields;,0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2134,        },0.05568,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1142,                Object printer = iElementPairs.get(0);,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1143,                Object parser = iElementPairs.get(1);,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1145,                if (printer != null) {,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1146,                    if (printer == parser || parser == null) {,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1147,                        f = printer;,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1169,            return true;,0.05543,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1179,            return true;,0.05543,0,-1,0
org/joda/time/DateTimeFieldType,3,492,                    return chronology.year();,0.05507,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,486,        if (fieldType == null) {,0.05459,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,489,        if (maxDigits < minDigits) {,0.05459,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,492,        if (minDigits < 0 || maxDigits <= 0) {,0.05459,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,495,        if (minDigits <= 1) {,0.05459,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0.05459,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0.05459,0,-1,0
org/joda/time/DateTimeFieldType,3,496,                    return chronology.monthOfYear();,0.05447,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0.05435,0,-1,0
org/joda/time/format/DateTimeFormatter,3,310,        return withZone(DateTimeZone.UTC);,0.05423,0,-1,0
org/joda/time/format/DateTimeFormatter,3,330,        if (iZone == zone) {,0.05423,0,-1,0
org/joda/time/format/DateTimeFormatter,3,333,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.05423,0,-1,0
org/joda/time/chrono/AssembledChronology,3,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.05308,0,-1,0
org/joda/time/format/DateTimeFormatter,3,137,        super();,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,138,        iPrinter = printer;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,139,        iParser = parser;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,140,        iLocale = locale;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,141,        iOffsetParsed = offsetParsed;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,142,        iChrono = chrono;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,143,        iZone = zone;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,144,        iPivotYear = pivotYear;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,145,        iDefaultYear = defaultYear;,0.05263,0,-1,0
org/joda/time/format/DateTimeFormatter,3,146,    },0.05263,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0.05208,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0.05208,0,-1,0
org/joda/time/field/FieldUtils,3,82,        long sum = val1 + val2;,0.05112,0,-1,0
org/joda/time/field/FieldUtils,3,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.05112,0,-1,0
org/joda/time/field/FieldUtils,3,88,        return sum;,0.05112,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,434,        if (fieldType == null) {,0.0498,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,437,        if (maxDigits < minDigits) {,0.0498,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,440,        if (minDigits < 0 || maxDigits <= 0) {,0.0498,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,443,        if (minDigits <= 1) {,0.0498,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0.0498,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1468,            return iMaxParsedDigits;,0.0496,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1326,            return iMaxParsedDigits;,0.0496,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1463,"            super(fieldType, maxParsedDigits, signed);",0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1464,            iMinPrintedDigits = minPrintedDigits;,0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1465,        },0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1319,            super();,0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1320,            iFieldType = fieldType;,0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1321,            iMaxParsedDigits = maxParsedDigits;,0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1322,            iSigned = signed;,0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1323,        },0.0495,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2626,                int size = printerList.size();,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2627,                iPrinters = new DateTimePrinter[size];,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2628,                int printEst = 0;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2629,                for (int i=0; i<size; i++) {,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2631,                    printEst += printer.estimatePrintedLength();,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2632,                    iPrinters[i] = printer;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2634,                iPrintedLengthEstimate = printEst;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2641,                int size = parserList.size();,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2642,                iParsers = new DateTimeParser[size];,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2643,                int parseEst = 0;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2644,                for (int i=0; i<size; i++) {,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2646,                    parseEst += parser.estimateParsedLength();,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2647,                    iParsers[i] = parser;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2649,                iParsedLengthEstimate = parseEst;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2761,                Object element = elementPairs.get(i);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2762,                if (element instanceof Composite) {,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2765,                    printerList.add(element);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2768,                element = elementPairs.get(i + 1);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2769,                if (element instanceof Composite) {,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2772,                    parserList.add(element);,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1212,            return 1;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1236,            return 1;,0.04941,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,397,        return append0(new CharacterLiteral(c));,0.04931,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1207,            super();,0.04931,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1208,            iValue = value;,0.04931,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1209,        },0.04931,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2615,            super();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2617,            List<Object> printerList = new ArrayList<Object>();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2618,            List<Object> parserList = new ArrayList<Object>();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2620,"            decompose(elementPairs, printerList, parserList);",0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2651,        },0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2747,            return iPrinters != null;,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2751,            return iParsers != null;,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2759,            int size = elementPairs.size();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2760,            for (int i=0; i<size; i+=2) {,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2775,        },0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1155,                f = new Composite(iElementPairs);,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1167,                return ((Composite)f).isPrinter();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1177,                return ((Composite)f).isParser();,0.04921,0,-1,0
org/joda/time/format/DateTimeFormatter,3,118,        super();,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,119,        iPrinter = printer;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,120,        iParser = parser;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,121,        iLocale = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,122,        iOffsetParsed = false;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,123,        iChrono = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,124,        iZone = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,125,        iPivotYear = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,126,        iDefaultYear = 2000;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatter,3,127,    },0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,105,        Object f = getFormatter();,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,106,        DateTimePrinter printer = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,107,        if (isPrinter(f)) {,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,108,            printer = (DateTimePrinter) f;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,110,        DateTimeParser parser = null;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,111,        if (isParser(f)) {,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,112,            parser = (DateTimeParser) f;,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,114,        if (printer != null || parser != null) {,0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,115,"            return new DateTimeFormatter(printer, parser);",0.0478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,374,        iFormatter = null;,0.04771,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,376,        iElementPairs.add(element);,0.04771,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,377,        iElementPairs.add(element);,0.04771,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,378,        return this;,0.04771,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1138,        Object f = iFormatter;,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1140,        if (f == null) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1141,            if (iElementPairs.size() == 2) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1154,            if (f == null) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1158,            iFormatter = f;,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1161,        return f;,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1165,        if (f instanceof DateTimePrinter) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1166,            if (f instanceof Composite) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1175,        if (f instanceof DateTimeParser) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1176,            if (f instanceof Composite) {,0.04762,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,84,        super();,0.04753,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,85,        iElementPairs = new ArrayList<Object>();,0.04753,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,86,    },0.04753,0,-1,0
org/joda/time/DateTimeFieldType,3,480,            chronology = DateTimeUtils.getChronology(chronology);,0.04318,0,-1,0
org/joda/time/DateTimeFieldType,3,482,            switch (iOrdinal) {,0.04318,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,81,            return (int) ((instant / getUnitMillis()) % iRange);,0.04013,0,-1,0
org/joda/time/base/BaseDateTime,3,304,        return iChronology;,0.039,0,-1,0
org/joda/time/base/BaseDateTime,3,295,        return iMillis;,0.03201,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1543,            if (iTailZone == null) {,0.03181,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1579,            if (iTailZone == null) {,0.03079,0,-1,0
org/joda/time/chrono/AssembledChronology,3,107,        if ((base = iBase) != null) {,0.02969,0,-1,0
org/joda/time/chrono/AssembledChronology,3,108,            return base.getZone();,0.02969,0,-1,0
org/joda/time/chrono/GregorianChronology,3,213,                leapYears--;,0.02854,0,-1,0
org/joda/time/chrono/ISOChronology,3,77,        return INSTANCE_UTC;,0.02677,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,57,        return iChronology.getDayOfWeek(instant);,0.02646,0,-1,0
org/joda/time/chrono/BasicChronology,3,542,        if (instant >= 0) {,0.0264,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.02604,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,113,        return instant + (value - get(instant)) * iUnitMillis;,0.02604,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,0.02599,0,-1,0
org/joda/time/chrono/BasicChronology,3,466,"        int month = getMonthOfYear(millis, year);",0.02599,0,-1,0
org/joda/time/chrono/BasicChronology,3,467,"        return getDayOfMonth(millis, year, month);",0.02599,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,56,        return 1;,0.02599,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,97,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,301,        int thisYear = iChronology.getYear(instant);,0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,304,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,305,        if (thisDom > maxDom) {,0.02599,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,310,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.02599,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,132,        return iRange - 1;,0.02596,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,83,        FieldUtils.verifyValueBounds,0.02591,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,85,"        return iChronology.setYear(instant, year);",0.02591,0,-1,0
org/joda/time/chrono/BasicChronology,3,560,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.02585,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,79,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.02583,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,81,        return instant + (value - get(instant)) * iUnitMillis;,0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,175,        int thisYear = getYear(instant);,0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,177,        int millisOfDay = getMillisOfDay(instant);,0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,196,        instant += millisOfDay;,0.02583,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,198,        return instant;,0.02583,0,-1,0
org/joda/time/chrono/BasicChronology,3,493,        long yearStart = getYearMillis(year);,0.02577,0,-1,0
org/joda/time/chrono/BasicChronology,3,494,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.02577,0,-1,0
org/joda/time/chrono/BasicChronology,3,559,        if (instant >= 0) {,0.02577,0,-1,0
org/joda/time/field/FieldUtils,3,233,        if ((value < lowerBound) || (value > upperBound)) {,0.02523,0,-1,0
org/joda/time/field/FieldUtils,3,238,    },0.02523,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,160,                break;,0.0251,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1536,            i = ~i;,0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1537,            if (i < transitions.length) {,0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1573,            long[] transitions = iTransitions;,0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1574,"            int i = Arrays.binarySearch(transitions, instant);",0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1575,            i = (i >= 0) ? (i + 1) : ~i;,0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1576,            if (i < transitions.length) {,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,103,        return getInfo(instant).getOffset(instant);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,140,        int period = (int)(millis >> 32);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,141,        Info[] cache = iInfoCache;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,142,        int index = period & cInfoCacheMask;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,143,        Info info = cache[index];,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,145,            info = createInfo(millis);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,146,            cache[index] = info;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,148,        return info;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,152,        long periodStart = millis & (0xffffffffL << 32);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,153,"        Info info = new Info(iZone, periodStart);",0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,155,        long end = periodStart | 0xffffffffL;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,156,        Info chain = info;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,158,            long next = iZone.nextTransition(periodStart);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,159,            if (next == periodStart || next > end) {,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,166,        return info;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,180,"        Info(DateTimeZone zone, long periodStart) {",0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,177,        private int iOffset = Integer.MIN_VALUE;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,181,            iPeriodStart = periodStart;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,182,            iZoneRef = zone;,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,183,        },0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,197,                if (iOffset == Integer.MIN_VALUE) {,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.025,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,200,                return iOffset;,0.025,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1531,            long[] transitions = iTransitions;,0.02498,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1532,"            int i = Arrays.binarySearch(transitions, instant);",0.02498,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1533,            if (i >= 0) {,0.02498,0,-1,0
org/joda/time/chrono/AssembledChronology,3,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.02488,0,-1,0
org/joda/time/chrono/BasicChronology,3,443,"        return getMonthOfYear(millis, getYear(millis));",0.0248,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,73,        return iChronology.getMonthOfYear(instant);,0.0248,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.02392,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,80,        if (instant >= 0) {,0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,167,        if ((base = getBase()) != null) {,0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.02356,0,-1,0
org/joda/time/chrono/BasicChronology,3,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.02356,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.02352,0,-1,0
org/joda/time/chrono/ISOChronology,3,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.02328,0,-1,0
org/joda/time/chrono/ISOChronology,3,108,"                cCache.put(zone, chrono);",0.02328,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,120,        if (isLeapYear(year)) {,0.02323,0,-1,0
org/joda/time/chrono/GregorianChronology,3,221,        return MIN_YEAR;,0.02319,0,-1,0
org/joda/time/chrono/ISOChronology,3,96,        if (zone == null) {,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,100,        ISOChronology chrono = cFastCache[index];,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,101,        if (chrono != null && chrono.getZone() == zone) {,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,104,        synchronized (cCache) {,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,105,            chrono = cCache.get(zone);,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,106,            if (chrono == null) {,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,110,        },0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,111,        cFastCache[index] = chrono;,0.02317,0,-1,0
org/joda/time/chrono/ISOChronology,3,112,        return chrono;,0.02317,0,-1,0
org/joda/time/chrono/BasicChronology,3,456,        int year = getYear(millis);,0.02317,0,-1,0
org/joda/time/chrono/BasicChronology,3,457,"        int month = getMonthOfYear(millis, year);",0.02317,0,-1,0
org/joda/time/chrono/BasicChronology,3,458,"        return getDayOfMonth(millis, year, month);",0.02317,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,48,        return iChronology.getDayOfMonth(instant);,0.02317,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.02315,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,93,        return,0.02315,0,-1,0
org/joda/time/chrono/BasicChronology,3,476,        long dateMillis = getYearMillis(year);,0.02315,0,-1,0
org/joda/time/chrono/BasicChronology,3,477,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.02315,0,-1,0
org/joda/time/chrono/BasicChronology,3,478,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.02315,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,55,        return iChronology.getYear(instant);,0.02315,0,-1,0
org/joda/time/base/BaseDateTime,3,256,"        iMillis = checkInstant(instant, iChronology);",0.02311,0,-1,0
org/joda/time/base/BaseDateTime,3,257,    },0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,407,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,408,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,409,        if (i2 < 0) {,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,412,        int year = (int) (i2 / unitMillis);,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,414,        long yearStart = getYearMillis(year);,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,415,        long diff = instant - yearStart;,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,417,        if (diff < 0) {,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,419,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.02311,0,-1,0
org/joda/time/chrono/BasicChronology,3,436,        return year;,0.02311,0,-1,0
org/joda/time/chrono/GregorianChronology,3,233,        return MILLIS_PER_YEAR / 2;,0.02311,0,-1,0
org/joda/time/chrono/GregorianChronology,3,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.02311,0,-1,0
org/joda/time/base/BaseDateTime,3,252,        super();,0.02302,0,-1,0
org/joda/time/base/BaseDateTime,3,253,        iChronology = checkChronology(chronology);,0.02302,0,-1,0
org/joda/time/base/BaseDateTime,3,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.02302,0,-1,0
org/joda/time/chrono/BasicChronology,3,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.02287,0,-1,0
org/joda/time/chrono/BasicChronology,3,614,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.02287,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,139,        if (isLeapYear(year)) {,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,202,        int leapYears = year / 100;,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,203,        if (year < 0) {,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,212,            if (isLeapYear(year)) {,0.02285,0,-1,0
org/joda/time/chrono/GregorianChronology,3,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.02285,0,-1,0
org/joda/time/chrono/BasicChronology,3,611,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.02283,0,-1,0
org/joda/time/chrono/BasicChronology,3,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.02283,0,-1,0
org/joda/time/chrono/BasicChronology,3,690,        return getMaxMonth();,0.02283,0,-1,0
org/joda/time/field/FieldUtils,3,251,        if ((value < lowerBound) || (value > upperBound)) {,0.02283,0,-1,0
org/joda/time/field/FieldUtils,3,256,    },0.02283,0,-1,0
org/joda/time/DurationFieldType,3,292,                    return chronology.years();,0.02273,0,-1,0
org/joda/time/DateTimeUtils,3,547,        FixedMillisProvider(long fixedMillis) {,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,548,            iMillis = fixedMillis;,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,549,        },0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,100,        checkPermission();,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,102,    },0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,114,        checkPermission();,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,116,    },0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,161,        SecurityManager sm = System.getSecurityManager();,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,162,        if (sm != null) {,0.02187,0,-1,0
org/joda/time/DateTimeUtils,3,165,    },0.02187,0,-1,0
org/joda/time/chrono/BasicChronology,3,393,        long millis = getYearMillis(year);,0.02178,0,-1,0
org/joda/time/chrono/BasicChronology,3,394,"        millis += getTotalMillisByYearMonth(year, month);",0.02178,0,-1,0
org/joda/time/chrono/BasicChronology,3,395,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.02178,0,-1,0
org/joda/time/DateTimeZone,3,175,        SecurityManager sm = System.getSecurityManager();,0.02163,0,-1,0
org/joda/time/DateTimeZone,3,176,        if (sm != null) {,0.02163,0,-1,0
org/joda/time/DateTimeZone,3,179,        if (zone == null) {,0.02163,0,-1,0
org/joda/time/DateTimeZone,3,182,        synchronized(DateTimeZone.class) {,0.02163,0,-1,0
org/joda/time/DateTimeZone,3,183,            cDefault = zone;,0.02163,0,-1,0
org/joda/time/DateTimeZone,3,184,        },0.02163,0,-1,0
org/joda/time/DateTimeZone,3,185,    },0.02163,0,-1,0
org/joda/time/chrono/BasicChronology,3,368,        return getYearInfo(year).iFirstDayMillis;,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,746,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,747,        if (info == null || info.iYear != year) {,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,748,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,749,            iYearInfoCache[year & CACHE_MASK] = info;,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,751,        return info;,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,779,"        YearInfo(int year, long firstDayMillis) {",0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,780,            iYear = year;,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,781,            iFirstDayMillis = firstDayMillis;,0.02146,0,-1,0
org/joda/time/chrono/BasicChronology,3,782,        },0.02146,0,-1,0
org/joda/time/chrono/ISOChronology,3,133,        return INSTANCE_UTC;,0.02119,0,-1,0
org/joda/time/DateTimeZone,3,148,                        },0.02113,0,-1,0
org/joda/time/DateTimeZone,3,134,        DateTimeZone zone = cDefault;,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,135,        if (zone == null) {,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,136,            synchronized(DateTimeZone.class) {,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,137,                zone = cDefault;,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,138,                if (zone == null) {,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,139,                    DateTimeZone temp = null;,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,142,"                            String id = System.getProperty(""user.timezone"");",0.02111,0,-1,0
org/joda/time/DateTimeZone,3,143,                            if (id != null) {  // null check avoids stack overflow,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,144,                                temp = forID(id);,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,149,                        if (temp == null) {,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,154,                    },0.02111,0,-1,0
org/joda/time/DateTimeZone,3,155,                    if (temp == null) {,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,158,                    cDefault = zone = temp;,0.02111,0,-1,0
org/joda/time/DateTimeZone,3,160,            },0.02111,0,-1,0
org/joda/time/DateTimeZone,3,162,        return zone;,0.02111,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,123,        return iZone.hashCode();,0.02068,0,-1,0
org/joda/time/base/BaseDateTime,3,284,        return instant;,0.02056,0,-1,0
org/joda/time/base/BaseDateTime,3,270,        return DateTimeUtils.getChronology(chronology);,0.02042,0,-1,0
org/joda/time/base/AbstractDateTime,3,51,        super();,0.02037,0,-1,0
org/joda/time/base/AbstractDateTime,3,52,    },0.02037,0,-1,0
org/joda/time/field/DividedDateTimeField,3,129,            return iRangeDurationField;,0.02029,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,57,        return iChronology.years();,0.02002,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,59,        return iChronology.weekyears();,0.02002,0,-1,0
org/joda/time/DateTimeZone,3,1273,        return 57 + getID().hashCode();,0.01998,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,218,        return 0;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,281,            super(field.getType());,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,282,            if (!field.isSupported()) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,285,            iField = field;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,286,            iTimeField = useTimeArithmetic(field);,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,287,            iZone = zone;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,288,        },0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,295,            return iField.getUnitMillis();,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,81,"        super(base, zone);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,82,    },0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,55,        if (base == null) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,58,        base = base.withUTC();,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,59,        if (base == null) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,62,        if (zone == null) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,65,"        return new ZonedChronology(base, zone);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,85,        return (DateTimeZone)getParam();,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,154,"        fields.eras = convertField(fields.eras, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,155,"        fields.centuries = convertField(fields.centuries, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,156,"        fields.years = convertField(fields.years, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,157,"        fields.months = convertField(fields.months, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,159,"        fields.weeks = convertField(fields.weeks, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,160,"        fields.days = convertField(fields.days, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,163,"        fields.hours = convertField(fields.hours, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,164,"        fields.minutes = convertField(fields.minutes, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,165,"        fields.seconds = convertField(fields.seconds, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,166,"        fields.millis = convertField(fields.millis, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,170,"        fields.year = convertField(fields.year, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,174,"        fields.era = convertField(fields.era, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,180,"        fields.weekyear = convertField(fields.weekyear, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,194,    },0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,197,        if (field == null || !field.isSupported()) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,198,            return field;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,200,        if (converted.containsKey(field)) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,201,            return (DurationField)converted.get(field);,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,204,"        converted.put(field, zonedField);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,205,        return zonedField;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,209,        if (field == null || !field.isSupported()) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,212,        if (converted.containsKey(field)) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,215,        ZonedDateTimeField zonedField =,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,220,"        converted.put(field, zonedField);",0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,221,        return zonedField;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,404,            super(field.getType());,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,405,            if (!field.isSupported()) {,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,408,            iField = field;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,409,            iZone = zone;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,410,            iDurationField = durationField;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,411,            iTimeField = useTimeArithmetic(durationField);,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,412,            iRangeDurationField = rangeDurationField;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,413,            iLeapDurationField = leapDurationField;,0.01998,0,-1,0
org/joda/time/chrono/ZonedChronology,3,414,        },0.01998,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.01998,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,132,        return null;,0.01998,0,-1,0
org/joda/time/field/ScaledDurationField,3,109,        return getWrappedField().getUnitMillis() * iScalar;,0.01998,0,-1,0
org/joda/time/chrono/AssembledChronology,3,315,        return iParam;,0.01997,0,-1,0
org/joda/time/field/BaseDateTimeField,3,726,        return null;,0.01997,0,-1,0
org/joda/time/field/BaseDurationField,3,55,        return iType;,0.01997,0,-1,0
org/joda/time/field/DividedDateTimeField,3,128,        if (iRangeDurationField != null) {,0.01997,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,173,        return iDurationField;,0.01997,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,180,        return iRangeField;,0.01997,0,-1,0
org/joda/time/field/PreciseDurationField,3,142,        long millis = iUnitMillis;,0.01997,0,-1,0
org/joda/time/field/PreciseDurationField,3,143,        int hash = (int) (millis ^ (millis >>> 32));,0.01997,0,-1,0
org/joda/time/field/PreciseDurationField,3,144,        hash += getType().hashCode();,0.01997,0,-1,0
org/joda/time/field/PreciseDurationField,3,145,        return hash;,0.01997,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,102,        return getWrappedField().getLeapDurationField();,0.01997,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,112,        return iChronology.days();,0.01997,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,95,        return iChronology.weeks();,0.01997,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,335,        return iChronology.days();,0.01997,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,209,        return null;,0.01997,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,221,        return iChronology.weeks();,0.01997,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,161,            return iUnitMillis;,0.01997,0,-1,0
org/joda/time/field/ScaledDurationField,3,147,        long scalar = iScalar;,0.01997,0,-1,0
org/joda/time/field/ScaledDurationField,3,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.01997,0,-1,0
org/joda/time/field/ScaledDurationField,3,149,        hash += getType().hashCode();,0.01997,0,-1,0
org/joda/time/field/ScaledDurationField,3,150,        hash += getWrappedField().hashCode();,0.01997,0,-1,0
org/joda/time/field/ScaledDurationField,3,151,        return hash;,0.01997,0,-1,0
org/joda/time/field/DecoratedDurationField,3,69,        return iField;,0.01997,0,-1,0
org/joda/time/field/MillisDurationField,3,49,        return DurationFieldType.millis();,0.01997,0,-1,0
org/joda/time/field/MillisDurationField,3,155,        return (int) getUnitMillis();,0.01997,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,123,        return iRangeField;,0.01995,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,52,        return iChronology.months();,0.01995,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,96,        return null;,0.01995,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,316,        return iChronology.years();,0.01995,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,142,        return iUnitField;,0.0199,0,-1,0
org/joda/time/base/AbstractInstant,3,61,        super();,0.01987,0,-1,0
org/joda/time/base/AbstractInstant,3,62,    },0.01987,0,-1,0
org/joda/time/DateTimeUtils,3,287,        return chrono;,0.01984,0,-1,0
org/joda/time/chrono/ISOChronology,3,122,"        super(base, null);",0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,123,    },0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,68,    },0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,171,            fields.centuryOfEra = new DividedDateTimeField(,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,173,            fields.centuries = fields.centuryOfEra.getDurationField();,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,175,            fields.yearOfCentury = new RemainderDateTimeField(,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,177,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.01981,0,-1,0
org/joda/time/chrono/ISOChronology,3,180,    },0.01981,0,-1,0
org/joda/time/chrono/GregorianChronology,3,81,        return INSTANCE_UTC;,0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,48,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,49,    },0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,42,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,53,        return GregorianChronology.getInstanceUTC().eras();,0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,94,        return 0;,0.01981,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,98,        return getWrappedField().getMaximumValue();,0.01981,0,-1,0
org/joda/time/DateTimeUtils,3,284,        if (chrono == null) {,0.01978,0,-1,0
org/joda/time/chrono/BasicChronology,3,146,        return DateTimeZone.UTC;,0.01976,0,-1,0
org/joda/time/chrono/BasicChronology,3,143,        if ((base = getBase()) != null) {,0.01975,0,-1,0
org/joda/time/chrono/GregorianChronology,3,45,public final class GregorianChronology extends BasicGJChronology {,0.01965,0,-1,0
org/joda/time/chrono/GregorianChronology,3,148,"        super(base, param, minDaysInFirstWeek);",0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,149,    },0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,72,    },0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,100,"        return getInstance(zone, 4);",0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,111,        if (zone == null) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,115,        synchronized (cCache) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,116,            GregorianChronology[] chronos = cCache.get(zone);,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,117,            if (chronos == null) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,118,                chronos = new GregorianChronology[7];,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,119,"                cCache.put(zone, chronos);",0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,126,            },0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,127,            if (chrono == null) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,128,                if (zone == DateTimeZone.UTC) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,137,        },0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,138,        return chrono;,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,191,        if (getBase() == null) {,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,192,            super.assemble(fields);,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,194,    },0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,225,        return MAX_YEAR;,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,229,        return MILLIS_PER_YEAR;,0.01958,0,-1,0
org/joda/time/chrono/GregorianChronology,3,237,        return MILLIS_PER_MONTH;,0.01958,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,75,"        super(base, param, minDaysInFirstWeek);",0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,76,    },0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,56,        long minSum = 0;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,57,        long maxSum = 0;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,58,        for (int i = 0; i < 11; i++) {,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,61,            minSum += millis;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,66,            maxSum += millis;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.01956,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,69,    },0.01956,0,-1,0
org/joda/time/chrono/BasicChronology,3,699,        return 12;,0.01956,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.01955,0,-1,0
org/joda/time/chrono/BaseChronology,3,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,99,"    protected AssembledChronology(Chronology base, Object param) {",0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,100,        iBase = base;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,101,        iParam = param;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,102,        setFields();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,103,    },0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,156,        return iMillis;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,160,        return iMillisOfSecond;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,164,        return iMillisOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,168,        return iSeconds;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,172,        return iSecondOfMinute;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,176,        return iSecondOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,180,        return iMinutes;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,184,        return iMinuteOfHour;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,188,        return iMinuteOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,192,        return iHours;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,196,        return iHourOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,200,        return iClockhourOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,204,        return iHalfdays;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,208,        return iHourOfHalfday;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,212,        return iClockhourOfHalfday;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,216,        return iHalfdayOfDay;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,220,        return iDays;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,224,        return iDayOfWeek;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,228,        return iDayOfMonth;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,232,        return iDayOfYear;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,236,        return iWeeks;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,240,        return iWeekOfWeekyear;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,244,        return iWeekyears;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,248,        return iWeekyear;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,252,        return iWeekyearOfCentury;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,256,        return iMonths;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,260,        return iMonthOfYear;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,264,        return iYears;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,268,        return iYear;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,272,        return iYearOfEra;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,276,        return iYearOfCentury;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,280,        return iCenturies;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,284,        return iCenturyOfEra;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,288,        return iEras;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,292,        return iEra;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,308,        return iBase;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,319,        Fields fields = new Fields();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,320,        if (iBase != null) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,321,            fields.copyFieldsFrom(iBase);,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,323,        assemble(fields);,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,369,        if (iBase == null) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,370,            flags = 0;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,372,            flags = ,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,385,        iBaseFlags = flags;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,386,    },0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,164,        return MILLIS_OF_SECOND_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,173,        return MILLIS_OF_DAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,182,        return SECOND_OF_MINUTE_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,191,        return SECOND_OF_DAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,209,        return MINUTE_OF_DAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,218,        return HOUR_OF_DAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,236,        return HOUR_OF_HALFDAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,254,        return HALFDAY_OF_DAY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,264,        return DAY_OF_WEEK_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,282,        return DAY_OF_YEAR_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,300,        return WEEKYEAR_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,318,        return MONTH_OF_YEAR_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,336,        return YEAR_OF_ERA_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,345,        return YEAR_OF_CENTURY_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,354,        return CENTURY_OF_ERA_TYPE;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,363,        return ERA_TYPE;,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,58,"        super(type, unit);",0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,60,        if (!range.isPrecise()) {,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,64,        long rangeMillis = range.getUnitMillis();,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,65,        iRange = (int)(rangeMillis / getUnitMillis());,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,66,        if (iRange < 2) {,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,70,        iRangeField = range;,0.01955,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,71,    },0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,49,        super(type);,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,51,        if (!unit.isPrecise()) {,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,55,        iUnitMillis = unit.getUnitMillis();,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,56,        if (iUnitMillis < 1) {,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,60,        iUnitField = unit;,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,61,    },0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,151,        return 0;,0.01955,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,155,        return iUnitMillis;,0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,50,        super();,0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,51,        if (type == null) {,0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,54,        iType = type;,0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,55,    },0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,58,        return iType;,0.01955,0,-1,0
org/joda/time/field/BaseDateTimeField,3,69,        return true;,0.01955,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,92,        return false;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,131,"        super(base, param);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,139,    },0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,76,        cMillisField = MillisDurationField.INSTANCE;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,77,        cSecondsField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,79,        cMinutesField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,81,        cHoursField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,83,        cHalfdaysField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,85,        cDaysField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,87,        cWeeksField = new PreciseDurationField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,90,        cMillisOfSecondField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,93,        cMillisOfDayField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,99,        cSecondOfDayField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,102,        cMinuteOfHourField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,105,        cMinuteOfDayField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,108,        cHourOfDayField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,120,        cHalfdayOfDayField = new HalfdayField();,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,121,    },0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,250,        fields.millis = cMillisField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,251,        fields.seconds = cSecondsField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,252,        fields.minutes = cMinutesField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,253,        fields.hours = cHoursField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,254,        fields.halfdays = cHalfdaysField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,255,        fields.days = cDaysField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,256,        fields.weeks = cWeeksField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,258,        fields.millisOfSecond = cMillisOfSecondField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,259,        fields.millisOfDay = cMillisOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,260,        fields.secondOfMinute = cSecondOfMinuteField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,261,        fields.secondOfDay = cSecondOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,262,        fields.minuteOfHour = cMinuteOfHourField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,263,        fields.minuteOfDay = cMinuteOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,264,        fields.hourOfDay = cHourOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,265,        fields.hourOfHalfday = cHourOfHalfdayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,266,        fields.clockhourOfDay = cClockhourOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,268,        fields.halfdayOfDay = cHalfdayOfDayField;,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,273,        fields.year = new BasicYearDateTimeField(this);,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,277,        DateTimeField field = new OffsetDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,279,        fields.centuryOfEra = new DividedDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,281,        fields.centuries = fields.centuryOfEra.getDurationField();,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,283,        field = new RemainderDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,285,        fields.yearOfCentury = new OffsetDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,288,        fields.era = new GJEraDateTimeField(this);,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,289,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,290,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,291,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,292,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,293,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,294,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,296,        field = new RemainderDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,298,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,303,        fields.years = fields.year.getDurationField();,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,304,        fields.months = fields.monthOfYear.getDurationField();,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,305,        fields.weekyears = fields.weekyear.getDurationField();,0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,306,    },0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,50,abstract class BasicChronology extends AssembledChronology {,0.01955,0,-1,0
org/joda/time/field/BaseDurationField,3,47,        super();,0.01955,0,-1,0
org/joda/time/field/BaseDurationField,3,48,        if (type == null) {,0.01955,0,-1,0
org/joda/time/field/BaseDurationField,3,51,        iType = type;,0.01955,0,-1,0
org/joda/time/field/BaseDurationField,3,52,    },0.01955,0,-1,0
org/joda/time/field/BaseDurationField,3,66,        return true;,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,58,"        this(field, field.getRangeDurationField(), type, divisor);",0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,59,    },0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,72,"        super(field, type);",0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,73,        if (divisor < 2) {,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,76,        DurationField unitField = field.getDurationField();,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,77,        if (unitField == null) {,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,80,            iDurationField = new ScaledDurationField(,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,83,        iRangeDurationField = rangeField;,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,84,        iDivisor = divisor;,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,85,        int i = field.getMinimumValue();,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,86,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,87,        int j = field.getMaximumValue();,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,88,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,89,        iMin = min;,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,90,        iMax = max;,0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,91,    },0.01955,0,-1,0
org/joda/time/field/DividedDateTimeField,3,211,        return iDurationField;,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,55,        super(type);,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,56,        if (field == null) {,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,59,        if (!field.isSupported()) {,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,62,        iField = field;,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,63,    },0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,71,        return iField;,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,87,        return iField.getDurationField();,0.01955,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,91,        return iField.getRangeDurationField();,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,82,"        super(field, type);",0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,83,        if (divisor < 2) {,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,86,        iRangeField = rangeField;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,87,        iDurationField = field.getDurationField();,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,88,        iDivisor = divisor;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,89,    },0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,98,"        this(dividedField, dividedField.getType());",0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,99,    },0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,109,"        this(dividedField, dividedField.getWrappedField().getDurationField(), type);",0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,110,    },0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,122,"        super(dividedField.getWrappedField(), type);",0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,123,        iDivisor = dividedField.iDivisor;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,124,        iDurationField = durationField;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,125,        iRangeField = dividedField.iDurationField;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,126,    },0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,189,        return 0;,0.01955,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,199,        return iDivisor - 1;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,436,        Fields() {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,437,        },0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,445,                if (isSupported(f = chrono.millis())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,446,                    millis = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,448,                if (isSupported(f = chrono.seconds())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,449,                    seconds = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,451,                if (isSupported(f = chrono.minutes())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,452,                    minutes = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,454,                if (isSupported(f = chrono.hours())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,455,                    hours = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,457,                if (isSupported(f = chrono.halfdays())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,458,                    halfdays = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,460,                if (isSupported(f = chrono.days())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,461,                    days = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,463,                if (isSupported(f = chrono.weeks())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,464,                    weeks = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,466,                if (isSupported(f = chrono.weekyears())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,467,                    weekyears = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,469,                if (isSupported(f = chrono.months())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,470,                    months = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,472,                if (isSupported(f = chrono.years())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,473,                    years = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,475,                if (isSupported(f = chrono.centuries())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,476,                    centuries = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,478,                if (isSupported(f = chrono.eras())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,486,                    millisOfSecond = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,488,                if (isSupported(f = chrono.millisOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,489,                    millisOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,492,                    secondOfMinute = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,494,                if (isSupported(f = chrono.secondOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,495,                    secondOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,498,                    minuteOfHour = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,501,                    minuteOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,503,                if (isSupported(f = chrono.hourOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,504,                    hourOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,507,                    clockhourOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,510,                    hourOfHalfday = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,513,                    clockhourOfHalfday = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,516,                    halfdayOfDay = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,519,                    dayOfWeek = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,522,                    dayOfMonth = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,524,                if (isSupported(f = chrono.dayOfYear())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,525,                    dayOfYear = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,528,                    weekOfWeekyear = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,530,                if (isSupported(f = chrono.weekyear())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,531,                    weekyear = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,534,                    weekyearOfCentury = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,536,                if (isSupported(f = chrono.monthOfYear())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,537,                    monthOfYear = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,539,                if (isSupported(f = chrono.year())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,540,                    year = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,542,                if (isSupported(f = chrono.yearOfEra())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,543,                    yearOfEra = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,546,                    yearOfCentury = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,549,                    centuryOfEra = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,551,                if (isSupported(f = chrono.era())) {,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,552,                    era = f;,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,555,        },0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,558,            return field == null ? false : field.isSupported();,0.01955,0,-1,0
org/joda/time/chrono/AssembledChronology,3,562,            return field == null ? false : field.isSupported();,0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,42,"        super(DateTimeFieldType.dayOfYear(), days);",0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,43,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,44,    },0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,42,"        super(DateTimeFieldType.dayOfMonth(), days);",0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,43,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,44,    },0.01955,0,-1,0
org/joda/time/field/PreciseDurationField,3,43,        super(type);,0.01955,0,-1,0
org/joda/time/field/PreciseDurationField,3,44,        iUnitMillis = unitMillis;,0.01955,0,-1,0
org/joda/time/field/PreciseDurationField,3,45,    },0.01955,0,-1,0
org/joda/time/field/PreciseDurationField,3,54,        return true;,0.01955,0,-1,0
org/joda/time/field/PreciseDurationField,3,63,        return iUnitMillis;,0.01955,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,46,"        super(field, type);",0.01955,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,47,        if (field.getMinimumValue() != 0) {,0.01955,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,50,    },0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.01955,0,-1,0
org/joda/time/chrono/BasicChronology,3,760,        },0.01955,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,46,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.01955,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,47,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,48,    },0.01955,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,120,        return iChronology.getMaxYear();,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,56,        super(type);,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,57,        iUnitMillis = unitMillis;,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,58,        iDurationField = new LinkedDurationField(type.getDurationType());,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,59,    },0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,138,        return iDurationField;,0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,42,"        super(yearField, DateTimeFieldType.yearOfEra());",0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,43,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,44,    },0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,48,        return iChronology.eras();,0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,100,        return 1;,0.01955,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,104,        return getWrappedField().getMaximumValue();,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,47,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,48,    },0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,59,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,60,    },0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,74,"        super(field, type);",0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,76,        if (offset == 0) {,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,80,        iOffset = offset;,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,82,        if (minValue < (field.getMinimumValue() + offset)) {,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,83,            iMin = field.getMinimumValue() + offset;,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,87,        if (maxValue > (field.getMaximumValue() + offset)) {,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,88,            iMax = field.getMaximumValue() + offset;,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,92,    },0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,175,        return iMin;,0.01955,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,184,        return iMax;,0.01955,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,47,        super(DateTimeFieldType.era());,0.01955,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,48,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,49,    },0.01955,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,46,"        super(DateTimeFieldType.dayOfWeek(), days);",0.01955,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,47,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,48,    },0.01955,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,38,"        super(chronology, 2);",0.01955,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,39,    },0.01955,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,52,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.01955,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,53,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,54,        iMax = iChronology.getMaxMonth();,0.01955,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,55,        iLeapMonth = leapMonth;,0.01955,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,56,    },0.01955,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,45,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.01955,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,46,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,47,    },0.01955,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,43,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.01955,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,44,        iChronology = chronology;,0.01955,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,45,    },0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,152,        LinkedDurationField(DurationFieldType type) {,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,153,            super(type);,0.01955,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,154,        },0.01955,0,-1,0
org/joda/time/field/ScaledDurationField,3,47,"        super(field, type);",0.01955,0,-1,0
org/joda/time/field/ScaledDurationField,3,48,        if (scalar == 0 || scalar == 1) {,0.01955,0,-1,0
org/joda/time/field/ScaledDurationField,3,51,        iScalar = scalar;,0.01955,0,-1,0
org/joda/time/field/ScaledDurationField,3,52,    },0.01955,0,-1,0
org/joda/time/field/DecoratedDurationField,3,52,        super(type);,0.01955,0,-1,0
org/joda/time/field/DecoratedDurationField,3,53,        if (field == null) {,0.01955,0,-1,0
org/joda/time/field/DecoratedDurationField,3,56,        if (!field.isSupported()) {,0.01955,0,-1,0
org/joda/time/field/DecoratedDurationField,3,59,        iField = field;,0.01955,0,-1,0
org/joda/time/field/DecoratedDurationField,3,60,    },0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,44,        super();,0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,45,    },0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,62,        return true;,0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,71,        return true;,0.01955,0,-1,0
org/joda/time/field/MillisDurationField,3,80,        return 1;,0.01955,0,-1,0
org/joda/time/DateTimeFieldType,3,452,            return iUnitType;,0.01955,0,-1,0
org/joda/time/DurationFieldType,3,278,            return (1 << iOrdinal);,0.01953,0,-1,0
org/joda/time/DurationField,3,30,public abstract class DurationField implements Comparable<DurationField> {,0.01953,0,-1,0
org/joda/time/DateTimeField,3,33,public abstract class DateTimeField {,0.01953,0,-1,0
org/joda/time/DateTimeFieldType,3,200,        return MINUTE_OF_HOUR_TYPE;,0.01953,0,-1,0
org/joda/time/DateTimeFieldType,3,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.01953,0,-1,0
org/joda/time/DateTimeFieldType,3,273,        return DAY_OF_MONTH_TYPE;,0.01953,0,-1,0
org/joda/time/DateTimeFieldType,3,327,        return YEAR_TYPE;,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,70,    private UnsupportedDurationField(DurationFieldType type) {,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,71,        iType = type;,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,72,    },0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,49,        if (cCache == null) {,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,51,            field = null;,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,53,            field = cCache.get(type);,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,55,        if (field == null) {,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,56,            field = new UnsupportedDurationField(type);,0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,57,"            cCache.put(type, field);",0.01953,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,59,        return field;,0.01953,0,-1,0
org/joda/time/Chronology,3,63,public abstract class Chronology {,0.01952,0,-1,0
org/joda/time/chrono/BaseChronology,3,54,        super();,0.01952,0,-1,0
org/joda/time/chrono/BaseChronology,3,55,    },0.01952,0,-1,0
org/joda/time/DurationFieldType,3,141,        return HALFDAYS_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,160,        return WEEKS_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,169,        return WEEKYEARS_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,178,        return MONTHS_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,187,        return YEARS_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,196,        return CENTURIES_TYPE;,0.0195,0,-1,0
org/joda/time/DurationFieldType,3,205,        return ERAS_TYPE;,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,153,        super();,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,154,        iName = name;,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,155,    },0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,444,            super(name);,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,445,            iOrdinal = ordinal;,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,446,            iUnitType = unitType;,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,447,            iRangeType = rangeType;,0.0195,0,-1,0
org/joda/time/DateTimeFieldType,3,448,        },0.0195,0,-1,0
org/joda/time/DurationFieldType,3,259,            super(name);,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,260,            iOrdinal = ordinal;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,261,        },0.01949,0,-1,0
org/joda/time/DurationFieldType,3,94,        super();,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,95,        iName = name;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,96,    },0.01949,0,-1,0
org/joda/time/DurationFieldType,3,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.01949,0,-1,0
org/joda/time/DurationFieldType,3,105,        return MILLIS_TYPE;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,114,        return SECONDS_TYPE;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,123,        return MINUTES_TYPE;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,132,        return HOURS_TYPE;,0.01949,0,-1,0
org/joda/time/DurationFieldType,3,151,        return DAYS_TYPE;,0.01949,0,-1,0
org/joda/time/DateTimeUtils,3,41,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,43,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,49,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,50,"        map.put(""UT"", DateTimeZone.UTC);",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,51,"        map.put(""UTC"", DateTimeZone.UTC);",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,52,"        map.put(""GMT"", DateTimeZone.UTC);",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,53,"        put(map, ""EST"", ""America/New_York"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,54,"        put(map, ""EDT"", ""America/New_York"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,55,"        put(map, ""CST"", ""America/Chicago"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,56,"        put(map, ""CDT"", ""America/Chicago"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,57,"        put(map, ""MST"", ""America/Denver"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,58,"        put(map, ""MDT"", ""America/Denver"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,59,"        put(map, ""PST"", ""America/Los_Angeles"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,60,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,61,        cZoneNames = Collections.unmodifiableMap(map);,0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,62,    },0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,65,"            map.put(name, DateTimeZone.forID(id));",0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,68,        },0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,69,    },0.01925,0,-1,0
org/joda/time/DateTimeUtils,3,526,    static class SystemMillisProvider implements MillisProvider {,0.01925,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,38,        super(id);,0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,39,        iNameKey = nameKey;,0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,40,        iWallOffset = wallOffset;,0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,41,        iStandardOffset = standardOffset;,0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,42,    },0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,88,        if (this == obj) {,0.0192,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,89,            return true;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,714,    protected DateTimeZone(String id) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,715,        if (id == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,718,        iID = id;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,719,    },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,116,        setProvider0(null);,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,117,        setNameProvider0(null);,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,118,    },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,205,        if (id == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,208,"        if (id.equals(""UTC"")) {",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,211,        DateTimeZone zone = cProvider.getZone(id);,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,212,        if (zone != null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,213,            return zone;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,443,        if (provider == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,444,            provider = getDefaultProvider();,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,446,        Set<String> ids = provider.getAvailableIDs();,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,447,        if (ids == null || ids.size() == 0) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,451,"        if (!ids.contains(""UTC"")) {",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,457,        cProvider = provider;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,458,        cAvailableIDs = ids;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,459,    },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,471,        Provider provider = null;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,474,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,475,            if (providerClass != null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,484,        },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,486,        if (provider == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,488,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,491,            },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,494,        if (provider == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,498,        return provider;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,539,        if (nameProvider == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,540,            nameProvider = getDefaultNameProvider();,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,542,        cNameProvider = nameProvider;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,543,    },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,554,        NameProvider nameProvider = null;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.0192,0,-1,0
org/joda/time/DateTimeZone,3,557,            if (providerClass != null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,566,        },0.0192,0,-1,0
org/joda/time/DateTimeZone,3,568,        if (nameProvider == null) {,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,569,            nameProvider = new DefaultNameProvider();,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,572,        return nameProvider;,0.0192,0,-1,0
org/joda/time/DateTimeZone,3,731,        return iID;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,504,        {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,509,            iMode = mode;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,510,            iMonthOfYear = monthOfYear;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,511,            iDayOfMonth = dayOfMonth;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,512,            iDayOfWeek = dayOfWeek;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,513,            iAdvance = advanceDayOfWeek;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,514,            iMillisOfDay = millisOfDay;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,515,        },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,482,"            return new OfYear((char)in.readUnsignedByte(),",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1179,            super(id);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1180,            iStandardOffset = standardOffset;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1181,            iStartRecurrence = startRecurrence;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1182,            iEndRecurrence = endRecurrence;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1183,        },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1169,"            return new DSTZone(id, (int)readMillis(in), ",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,95,        if (in instanceof DataInput) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,110,        switch (in.readUnsignedByte()) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,183,        int v = in.readUnsignedByte();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,184,        switch (v >> 6) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,187,            v = (v << (32 - 6)) >> (32 - 6);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,188,            return v * (30 * 60000L);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,192,            v = (v << (32 - 6)) >> (32 - 30);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,193,            v |= (in.readUnsignedByte()) << 16;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,194,            v |= (in.readUnsignedByte()) << 8;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,195,            v |= (in.readUnsignedByte());,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,196,            return v * 60000L;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,201,            w |= (in.readUnsignedByte()) << 24;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,202,            w |= (in.readUnsignedByte()) << 16;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,203,            w |= (in.readUnsignedByte()) << 8;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,204,            w |= (in.readUnsignedByte());,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,205,            return w * 1000L;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,209,            return in.readLong();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1503,            super(id);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1504,            iTransitions = transitions;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1505,            iWallOffsets = wallOffsets;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1506,            iStandardOffsets = standardOffsets;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1507,            iNameKeys = nameKeys;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1508,            iTailZone = tailZone;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1509,        },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1344,            int poolSize = in.readUnsignedShort();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1345,            String[] pool = new String[poolSize];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1346,            for (int i=0; i<poolSize; i++) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1347,                pool[i] = in.readUTF();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1350,            int size = in.readInt();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1351,            long[] transitions = new long[size];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1352,            int[] wallOffsets = new int[size];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1353,            int[] standardOffsets = new int[size];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1354,            String[] nameKeys = new String[size];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1356,            for (int i=0; i<size; i++) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1357,                transitions[i] = readMillis(in);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1358,                wallOffsets[i] = (int)readMillis(in);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1359,                standardOffsets[i] = (int)readMillis(in);,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1362,                    if (poolSize < 256) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1363,                        index = in.readUnsignedByte();,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1367,                    nameKeys[i] = pool[index];,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1370,                },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1373,            DSTZone tailZone = null;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1374,            if (in.readBoolean()) {,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1375,"                tailZone = DSTZone.readFrom(in, id);",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1378,            return new PrecalculatedZone,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,87,        super(zone.getID());,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,84,    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,88,        iZone = zone;,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,89,    },0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,42,        },0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,45,        if (i == null) {,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,48,            cacheSize = 512; // (1 << 9),0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,61,        cInfoCacheMask = cacheSize - 1;,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,62,    },0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,68,        if (zone instanceof CachedDateTimeZone) {,0.0192,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,71,        return new CachedDateTimeZone(zone);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,82,"        this(resourcePath, null, false);",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,83,    },0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,106,    {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,107,        if (resourcePath == null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,110,"        if (!resourcePath.endsWith(""/"")) {",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,111,            resourcePath += '/';,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,114,        iFileDir = null;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,115,        iResourcePath = resourcePath;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,117,        if (loader == null && !favorSystemLoader) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,118,            loader = getClass().getClassLoader();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,121,        iLoader = loader;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,124,    },0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,135,        if (id == null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,139,        Object obj = iZoneInfoMap.get(id);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,140,        if (obj == null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,144,        if (id.equals(obj)) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,146,            return loadZoneData(id);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,149,        if (obj instanceof SoftReference<?>) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,151,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,152,            DateTimeZone tz = ref.get();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,153,            if (tz != null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,154,                return tz;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,173,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,195,        if (iFileDir != null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,198,            String path = iResourcePath.concat(name);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,199,            if (iLoader != null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,200,                in = iLoader.getResourceAsStream(path);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,204,            if (in == null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,213,        return in;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,223,        InputStream in = null;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,225,            in = openResource(id);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,226,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,227,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,228,            return tz;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,235,                if (in != null) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,236,                    in.close();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,239,            },0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,251,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,252,        DataInputStream din = new DataInputStream(in);,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,254,"            readZoneInfoMap(din, map);",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,257,                din.close();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,259,            },0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,261,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,262,        return map;,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,273,        int size = din.readUnsignedShort();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,274,        String[] pool = new String[size];,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,275,        for (int i=0; i<size; i++) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,276,            pool[i] = din.readUTF().intern();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,280,        size = din.readUnsignedShort();,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,281,        for (int i=0; i<size; i++) {,0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,283,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,286,            },0.0192,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,288,    },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,748,            iOfYear = ofYear;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,749,            iNameKey = nameKey;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,750,            iSaveMillis = saveMillis;,0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,751,        },0.0192,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.0192,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,39,    public DefaultNameProvider() {,0.0192,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.0192,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,40,    },0.0192,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,99,        return new HashMap(7);,0.0192,0,-1,0
org/joda/time/DurationFieldType,3,282,            chronology = DateTimeUtils.getChronology(chronology);,0.00389,0,-1,0
org/joda/time/DurationFieldType,3,284,            switch (iOrdinal) {,0.00389,0,-1,0
org/joda/time/DateTimeUtils,3,556,            return iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,75,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,76,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,3,66,        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,88,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,129,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,130,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,131,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,133,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,135,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,3,148,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,149,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,151,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,152,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,153,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,3,163,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,179,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,197,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,201,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,219,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,220,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,221,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,222,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,223,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,225,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,226,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,228,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,243,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,244,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,246,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,247,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,248,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,250,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,266,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,267,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,268,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,270,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,285,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,301,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,302,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,304,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,318,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,319,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,321,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,335,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,336,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,338,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,366,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,367,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,369,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,370,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,371,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,372,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,373,                if (loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,374,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,377,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,379,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,397,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,398,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,399,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,400,            return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,429,        return cZoneNames;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,441,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,442,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,3,468,        double epochDay = epochMillis / 86400000d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,469,        return epochDay + 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,488,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,501,        double epochDay = julianDay - 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,502,        return (long) (epochDay * 86400000d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,571,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,572,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,3,573,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,3,580,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,885,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,886,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,887,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,888,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,889,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,890,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,892,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,893,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,894,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,895,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,896,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,897,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,900,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,901,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,902,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,903,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,904,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,905,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,908,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,912,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,916,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,920,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,924,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,931,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,932,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,934,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,3,98,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,716,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,146,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,3,152,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,156,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,3,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,206,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,209,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,3,216,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,217,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,218,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,220,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,221,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,274,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,279,        if (minutesOffset < -59 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,282,        if (hoursOffset > 0 && minutesOffset < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,285,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,287,            int hoursInMinutes = hoursOffset * 60;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,288,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,291,                minutesOffset = hoursInMinutes + minutesOffset;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,296,        },0.0,0,-1,0
org/joda/time/DateTimeZone,3,294,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,295,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,297,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,310,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,311,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,330,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,331,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,333,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,334,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,3,335,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,339,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,340,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,341,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,342,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,344,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,345,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,347,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,348,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,352,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,353,            convId = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,3,355,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,356,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,357,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,358,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,360,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,361,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,377,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,378,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,380,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,3,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,385,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,386,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,387,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,388,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,3,393,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,402,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,415,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,429,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,430,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,3,433,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,434,    },0.0,0,-1,0
org/joda/time/DateTimeZone,3,448,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,3,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,477,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,480,                },0.0,0,-1,0
org/joda/time/DateTimeZone,3,478,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,479,                    throw new RuntimeException(ex);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,482,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,489,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,490,                ex.printStackTrace();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,495,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,511,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,525,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,526,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,3,529,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,530,    },0.0,0,-1,0
org/joda/time/DateTimeZone,3,559,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,562,                },0.0,0,-1,0
org/joda/time/DateTimeZone,3,560,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,561,                    throw new RuntimeException(ex);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,564,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,583,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,3,584,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,586,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,3,587,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,588,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,589,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,590,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,591,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,592,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,593,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,594,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,3,595,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,596,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,597,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,3,598,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,599,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,600,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,3,601,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,602,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,603,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,604,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,605,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,606,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,607,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,608,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,609,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,610,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,611,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,612,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,613,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,614,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,615,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,616,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,617,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,618,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,619,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,620,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,622,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,628,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,656,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,657,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,658,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,3,660,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,3,661,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,669,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,3,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,672,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,673,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,676,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,677,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,3,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,679,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,680,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,681,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,684,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,3,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,686,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,695,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,3,700,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,754,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,769,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,770,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,772,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,773,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,774,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,777,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,778,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,780,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,3,794,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,809,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,810,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,812,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,813,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,814,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,816,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,817,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,818,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,820,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,3,838,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,839,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,3,841,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,3,869,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,915,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,919,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,920,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,921,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,922,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,924,            },0.0,0,-1,0
org/joda/time/DateTimeZone,3,935,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,949,        int offset = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,950,        long instantLocal = instantUTC + offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,955,        return instantLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,976,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,977,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,979,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,980,            return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,982,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,999,        int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1001,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1003,        if (offsetLocal != offset) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1007,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1009,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1010,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1011,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1013,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1014,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1015,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1017,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1019,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1021,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,-1,0
org/joda/time/DateTimeZone,3,1026,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1032,        long instantUTC = instantLocal - offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,3,1037,        return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1051,        if (newZone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1052,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1054,        if (newZone == this) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1055,            return oldInstant;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1057,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,3,1168,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1169,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1172,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1173,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1174,        } catch (IllegalInstantException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1175,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1190,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1191,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1192,        long offsetBefore = getOffset(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1193,        long offsetAfter = getOffset(instantAfter);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1194,        if (offsetBefore <= offsetAfter) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,-1,0
org/joda/time/DateTimeZone,3,1199,        long diff = offsetBefore - offsetAfter;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1200,        long transition = nextTransition(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1201,        long overlapStart = transition - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1202,        long overlapEnd = transition + diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1203,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1204,          return instant;  // not an overlap,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1208,        long afterStart = instant - overlapStart;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1209,        if (afterStart >= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1211,          return earlierOrLater ? instant : instant - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1214,          return earlierOrLater ? instant + diff : instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1256,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1281,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1291,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/JodaTimePermission,3,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,3,58,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,3,53,        super(message);,0.0,0,-1,0
org/joda/time/IllegalInstantException,3,54,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,3,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,-1,0
org/joda/time/IllegalInstantException,3,64,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,3,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,-1,0
org/joda/time/IllegalInstantException,3,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,-1,0
org/joda/time/IllegalInstantException,3,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,-1,0
org/joda/time/IllegalInstantException,3,80,        if (ex instanceof IllegalInstantException) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,3,81,            return true;,0.0,0,-1,0
org/joda/time/IllegalInstantException,3,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,3,84,            return isIllegalInstant(ex.getCause());,0.0,0,-1,0
org/joda/time/IllegalInstantException,3,86,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,628,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,631,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,634,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,637,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,640,                return getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,132,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,3,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,155,        return (iPrinter != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,173,        return (iParser != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,198,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,199,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,201,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,212,        return iLocale;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,231,        if (iOffsetParsed == true) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,232,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,234,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,245,        return iOffsetParsed;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,266,        if (iChrono == chrono) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,267,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,269,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,279,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,290,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,331,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,343,        return iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,377,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,378,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,380,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,414,        return withPivotYear(Integer.valueOf(pivotYear));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,424,      return iPivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,447,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,458,      return iDefaultYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,481,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,482,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,483,"        printTo(out, millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,484,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,494,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,495,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,506,"        printTo(buf, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,507,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,517,"        printTo(out, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,518,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,529,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,530,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,543,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,544,        if (partial == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,545,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,547,"        printer.printTo(buf, partial, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,548,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,560,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,561,        if (partial == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,562,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,564,"        printer.printTo(out, partial, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,565,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,578,        appendable.append(print(partial));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,579,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,607,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,608,"        printTo(buf, instant);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,609,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,622,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,623,"        printTo(buf, partial);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,624,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,637,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,638,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,639,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,645,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,646,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,649,        DateTimeZone zone = chrono.getZone();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,650,        int offset = zone.getOffset(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,651,        long adjustedInstant = instant + offset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,652,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,654,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,655,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,656,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,658,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,659,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,669,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,709,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,710,        if (instant == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,711,"            throw new IllegalArgumentException(""Instant must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,714,        long instantMillis = instant.getMillis();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,715,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,716,        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,717,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,718,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,720,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,722,"        int newPos = parser.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,723,"        instant.setMillis(bucket.computeMillis(false, text));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,724,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,725,            int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,726,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,727,            chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,728,        } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,729,            chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,731,        instant.setChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,732,        if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,733,            instant.setZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,735,        return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,751,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,753,        Chronology chrono = selectChronology(iChrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,754,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,755,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,756,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,757,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,758,"                return bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,761,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,763,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,781,        return parseLocalDateTime(text).toLocalDate();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,799,        return parseLocalDateTime(text).toLocalTime();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,817,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,819,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,820,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,821,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,822,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,823,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,824,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,825,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,826,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,827,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,828,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,829,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,830,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,832,"                return new LocalDateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,835,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,837,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,858,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,860,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,861,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,862,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,863,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,864,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,865,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,866,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,867,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,868,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,869,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,870,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,871,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,873,"                DateTime dt = new DateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,874,                if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,875,                    dt = dt.withZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,877,                return dt;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,880,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,882,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,903,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,905,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,906,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,907,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,908,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,909,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,910,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,911,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,912,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,913,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,914,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,915,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,916,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,918,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,919,                if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,920,                    dt.setZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,922,                return dt;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,925,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,927,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,936,        DateTimeParser parser = iParser;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,937,        if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,938,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,940,        return parser;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,953,            chrono = iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,3,956,            chrono = chrono.withZone(iZone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,965,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,966,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,967,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,968,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,973,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,974,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,975,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,976,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,977,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,978,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,979,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,980,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,950,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,951,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,952,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,984,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,988,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,989,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,992,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,993,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,994,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,997,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,998,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1000,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1003,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1004,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1005,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1014,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1016,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1021,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1027,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1028,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1029,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1032,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1033,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1035,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1036,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1037,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1040,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1041,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1045,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1046,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1047,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1048,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1050,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1052,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1056,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1064,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1066,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1069,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1070,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1085,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1088,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1089,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1091,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1092,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1093,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1094,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1095,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1096,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1097,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1101,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1103,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1104,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1106,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1108,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1109,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1113,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1114,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1118,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1119,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1121,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1123,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1127,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1134,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1135,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1137,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1144,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1145,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1146,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1147,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1157,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1161,            return null;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,191,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,192,            return true;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,194,        if (obj instanceof ISOChronology) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,195,            ISOChronology chrono = (ISOChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,196,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,198,        return false;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,217,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,391,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,824,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,828,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,833,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,837,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,841,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,845,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,847,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,848,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,851,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,852,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,854,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,857,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,859,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,862,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,865,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,867,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,868,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,869,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,871,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,875,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1186,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1194,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1198,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1213,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1215,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1218,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1220,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1228,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1230,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1233,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1235,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1257,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1259,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1262,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1264,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1272,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1274,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1277,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1279,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1286,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1287,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1289,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1290,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1291,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1297,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1301,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1302,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1303,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1304,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1316,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1319,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1321,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1327,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1330,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1332,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,475,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1365,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1368,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1369,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1392,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1393,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1394,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1397,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1398,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1399,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1400,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1402,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1403,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1404,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1406,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1407,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1410,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1411,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1412,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1413,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1415,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1420,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1421,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1422,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1423,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1424,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1425,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1429,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1431,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1432,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1433,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1434,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1435,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1436,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1437,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1438,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1439,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1446,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1447,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1448,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1451,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1452,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1453,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1454,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1455,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1460,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1461,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1463,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1464,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1467,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1468,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1474,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1483,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1512,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1513,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1514,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1515,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1517,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1518,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1519,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1520,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1522,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1524,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1525,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1527,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1534,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1538,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1539,                    return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1541,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1544,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1550,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1551,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1552,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1553,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1555,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1556,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1557,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1558,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1560,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1562,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1563,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1565,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1569,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1577,                return transitions[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1580,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1584,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1593,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1594,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1596,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1600,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1601,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1602,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1603,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1606,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1614,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1615,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1616,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1618,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1622,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1623,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1625,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1626,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1627,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1637,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1641,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1644,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1645,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1646,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1649,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1650,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1651,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1653,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1654,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1655,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1656,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1660,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1661,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1662,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1665,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1667,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1668,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1669,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1670,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1673,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1674,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1675,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1676,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1677,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1679,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1681,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1686,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1687,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1688,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1690,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1693,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1694,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1696,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1697,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1698,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1703,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1704,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1706,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1707,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1708,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1709,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1710,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1714,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1715,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1716,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1717,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1724,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,1728,            return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,95,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,99,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,111,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,115,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,128,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,133,        return false;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,136,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,141,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,157,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,161,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,182,        ex.printStackTrace();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,183,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,196,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,202,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,205,                StringBuilder buf = new StringBuilder(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,210,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,238,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,229,        } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,230,            uncaughtException(ex);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,231,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,232,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,234,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,258,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,260,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,256,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,284,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,3,285,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,3,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,187,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,190,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,192,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,210,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,3,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,3,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/DurationFieldType,3,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,3,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,3,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,286,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,294,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,298,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,3,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,348,                    return this;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,3,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,3,243,        return getName();,0.0,0,-1,0
org/joda/time/DurationField,3,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,3,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,3,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,3,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,3,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,3,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2638,                iParsers = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2639,                iParsedLengthEstimate = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2662,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2679,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2680,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2681,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2684,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2686,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2689,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2690,            for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2693,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2696,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2697,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2698,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2701,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2703,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2706,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2707,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2708,"                elements[i].printTo(buf, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2710,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2713,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2714,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2715,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2718,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2720,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2723,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2724,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2725,"                elements[i].printTo(out, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2727,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2734,            DateTimeParser[] elements = iParsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2735,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2736,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2739,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2740,            for (int i=0; i<len && position >= 0; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2741,"                position = elements[i].parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2743,            return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,133,        Object f = getFormatter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,134,        if (isPrinter(f)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,135,            return (DateTimePrinter) f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,137,"        throw new UnsupportedOperationException(""Printing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,168,        return isFormatter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,178,        return isPrinter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,188,        return isParser(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,197,        iFormatter = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,198,        iElementPairs.clear();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,199,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,218,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,238,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,239,"        return append0(printer, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,276,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,277,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,278,"        return append0(printer, parser);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,306,            checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,309,"            throw new IllegalArgumentException(""No parsers supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,313,            if (parsers[0] == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,314,"                throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,316,"            return append0(printer, parsers[0]);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,323,"                throw new IllegalArgumentException(""Incomplete parser array"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,358,"            throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,368,        if (printer == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,369,"            throw new IllegalArgumentException(""No printer supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,371,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,409,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,413,                return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,415,                return append0(new CharacterLiteral(text.charAt(0)));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,435,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,438,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,441,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,465,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,487,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,490,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,493,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,516,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,517,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,519,        if (numDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,522,"        return append0(new FixedNumber(fieldType, numDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,534,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,535,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,537,"        return append0(new TextField(fieldType, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,549,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,550,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,552,"        return append0(new TextField(fieldType, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,571,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,574,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,577,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,851,"        return appendTwoDigitYear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,891,"        return appendTwoDigitWeekyear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,955,        return appendText(DateTimeFieldType.halfdayOfDay());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,965,        return appendText(DateTimeFieldType.dayOfWeek());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,987,        return appendText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,997,        return appendShortText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1007,        return appendText(DateTimeFieldType.era());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1032,"        return append0(pp, pp);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1058,"        return append0(pp, pp);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1118,        return append0(new TimeZoneOffset,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1132,"        DateTimeFormat.appendPatternTo(this, pattern);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1133,        return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1181,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1185,        return (isPrinter(f) || isParser(f));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1189,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1190,            buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1192,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1195,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1196,            out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1198,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2814,            DateTimeParser[] parsers = iParsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2815,            int length = parsers.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2817,            final Object originalState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2818,            boolean isOptional = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2820,            int bestValidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2821,            Object bestValidState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2823,            int bestInvalidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2825,            for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2826,                DateTimeParser parser = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2827,                if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2829,                    if (bestValidPos <= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2830,                        return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2832,                    isOptional = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2833,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2835,"                int parsePos = parser.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2836,                if (parsePos >= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2837,                    if (parsePos > bestValidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2838,                        if (parsePos >= text.length() ||,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2843,                            return parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2845,                        bestValidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2846,                        bestValidState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2849,                    if (parsePos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2850,                        parsePos = ~parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2851,                        if (parsePos > bestInvalidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2852,                            bestInvalidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2856,                bucket.restoreState(originalState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2859,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2861,                if (bestValidState != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2862,                    bucket.restoreState(bestValidState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2864,                return bestValidPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2867,            return ~bestInvalidPos;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,172,        super();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,173,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,185,        super(zone);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,186,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,199,        super(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,200,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,210,        super(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,211,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,223,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,224,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,237,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,238,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,257,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,258,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,280,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,281,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,300,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,301,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,324,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,325,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,380,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/MutableDateTime,3,382,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,106,        return new MutableDateTime();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,118,        if (zone == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,119,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,121,        return new MutableDateTime(zone);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,133,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,134,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,136,        return new MutableDateTime(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,150,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,161,        return formatter.parseDateTime(str).toMutableDateTime();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,392,        return iRoundingField;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,402,        return iRoundingMode;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,418,"        setRounding(field, MutableDateTime.ROUND_FLOOR);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,419,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,436,        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,437,"            throw new IllegalArgumentException(""Illegal rounding mode: "" + mode);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,439,        iRoundingField = (mode == ROUND_NONE ? null : field);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,440,        iRoundingMode = (field == null ? ROUND_NONE : mode);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,441,        setMillis(getMillis());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,442,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,458,                instant = iRoundingField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,459,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,461,                instant = iRoundingField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,462,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,464,                instant = iRoundingField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,465,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,467,                instant = iRoundingField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,468,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,470,                instant = iRoundingField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,485,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,486,        setMillis(instantMillis);  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,3,487,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,497,"        setMillis(FieldUtils.safeAdd(getMillis(), duration));  // set via this class not super",0.0,0,-1,0
org/joda/time/MutableDateTime,3,498,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,509,"        add(duration, 1);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,510,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,522,        if (duration != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,523,"            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,525,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,536,"        add(period, 1);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,537,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,549,        if (period != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,550,"            setMillis(getChronology().add(period, getMillis(), scalar));  // set via this class not super",0.0,0,-1,0
org/joda/time/MutableDateTime,3,552,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,563,        super.setChronology(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,564,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,582,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,583,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,584,        if (chrono.getZone() != newZone) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,585,            setChronology(chrono.withZone(newZone));  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,3,587,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,601,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,602,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,603,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,604,            return;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,607,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,608,        setChronology(getChronology().withZone(newZone));  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,3,609,        setMillis(millis);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,610,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,621,        if (type == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,622,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,624,"        setMillis(type.getField(getChronology()).set(getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,625,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,637,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,650,"        setMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,651,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,671,"        setMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,672,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,681,"            setMillis(getChronology().weekyears().add(getMillis(), weekyears));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,682,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,692,"        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,693,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,713,"        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,714,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,734,"        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,735,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,744,"        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,745,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,754,"        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,755,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,775,"        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));",0.0,1,-1,1
org/joda/time/MutableDateTime,3,776,    },0.0,1,-1,1
org/joda/time/MutableDateTime,3,796,"        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));",0.0,1,-1,1
org/joda/time/MutableDateTime,3,797,    },0.0,1,-1,1
org/joda/time/MutableDateTime,3,806,"        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,807,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,816,"            setMillis(getChronology().minutes().add(getMillis(), minutes));",0.0,1,-1,1
org/joda/time/MutableDateTime,3,817,    },0.0,1,-1,1
org/joda/time/MutableDateTime,3,827,"        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,828,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,837,"        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,838,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,847,"            setMillis(getChronology().seconds().add(getMillis(), seconds));",0.0,1,-1,1
org/joda/time/MutableDateTime,3,848,    },0.0,1,-1,1
org/joda/time/MutableDateTime,3,858,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,859,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,868,"        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,869,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,880,"            setMillis(getChronology().millis().add(getMillis(), millis));",0.0,1,-1,1
org/joda/time/MutableDateTime,3,881,    },0.0,1,-1,1
org/joda/time/MutableDateTime,3,892,"        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,893,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,906,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,907,        if (instant instanceof ReadableDateTime) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,908,            ReadableDateTime rdt = (ReadableDateTime) instant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,909,            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,910,            DateTimeZone zone = instantChrono.getZone();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,911,            if (zone != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,912,"                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,915,        setDate(instantMillis);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,916,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,931,        Chronology c = getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,932,"        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,933,        setDate(instantMidnight);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,934,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,945,        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,946,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,947,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,957,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,958,        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,959,        DateTimeZone zone = instantChrono.getZone();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,960,        if (zone != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,961,"            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,963,        setTime(instantMillis);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,964,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,981,        long instant = getChronology().getDateTimeMillis(,0.0,0,-1,0
org/joda/time/MutableDateTime,3,983,        setMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,984,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,1006,        long instant = getChronology().getDateTimeMillis(,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1008,        setMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1009,    },0.0,0,-1,0
org/joda/time/MutableDateTime,3,1021,        if (type == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1022,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1024,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1025,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1026,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1028,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1037,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1046,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1055,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1064,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1073,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1082,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1091,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1100,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1109,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1120,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1131,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1141,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1150,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1159,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1168,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1177,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1186,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1195,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1205,        return (MutableDateTime) clone();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1216,            return super.clone();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1217,        } catch (CloneNotSupportedException ex) {,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1218,"            throw new InternalError(""Clone error"");",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,3,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,3,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,259,        if (this == readableInstant) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,260,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,3,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1526,"            int newPos = super.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1527,            if (newPos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1528,                return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1530,            int expectedPos = position + iMaxParsedDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1531,            if (newPos != expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1532,                if (iSigned) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1533,                    char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1534,                    if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1535,                        expectedPos++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1538,                if (newPos > expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1540,                    return ~(expectedPos + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1541,                } else if (newPos < expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1543,                    return ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1546,            return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1477,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1478,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1486,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1490,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1488,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1489,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1491,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1494,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1499,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1497,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1498,"                    appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1501,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1503,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1506,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1511,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1509,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1510,"                    printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1513,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1515,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1332,            boolean negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1333,            int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1334,            while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1335,                char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1337,                    negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1340,                    if (length + 1 >= limit || ,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1343,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1346,                    if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1347,                        length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1350,                        position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1353,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1354,                    continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1356,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1357,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1359,                length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1360,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1362,            if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1363,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1367,            if (length >= 9) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1370,"                value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1372,                int i = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1373,                if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1374,                    i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1377,                    value = text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1380,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1378,                } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1379,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1381,                position += length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1382,                while (i < position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1385,                if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1386,                    value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1390,"            bucket.saveField(iFieldType, value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1391,            return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2544,    static enum TimeZoneId,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2547,        INSTANCE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2548,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2551,            int max = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2552,            for (String id : ALL_IDS) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2553,"                max = Math.max(max, id.length());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2554,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2555,            MAX_LENGTH = max;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2556,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2559,            return MAX_LENGTH;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2566,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2571,"            out.write(displayZone != null ? displayZone.getID() : """");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2572,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2576,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2580,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2583,            return MAX_LENGTH;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2587,            String str = text.substring(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2588,            String best = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2589,            for (String id : ALL_IDS) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2590,                if (str.startsWith(id)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2591,                    if (best == null || id.length() > best.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2592,                        best = id;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2595,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2596,            if (best != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2597,                bucket.setZone(DateTimeZone.forID(best));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2598,                return position + best.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2600,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2477,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2478,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2479,            iParseLookup = parseLookup;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2480,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2483,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2490,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2495,"            out.write(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2496,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2499,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2500,"                return """";  // no zone",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2502,            switch (iType) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2504,"                    return displayZone.getName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2506,"                    return displayZone.getShortName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2508,"            return """";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2513,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2517,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2520,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2525,            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2526,            String str = text.substring(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2527,            String matched = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2528,            for (String name : parseLookup.keySet()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2529,                if (str.startsWith(name)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2530,                    if (matched == null || name.length() > matched.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2531,                        matched = name;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2534,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2535,            if (matched != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2536,                bucket.setZone(parseLookup.get(matched));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2537,                return position + matched.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2539,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2126,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2129,                minFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2130,                maxFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2142,                est = iZeroOffsetPrintText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2151,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2154,                buf.append(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2155,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2160,                buf.append('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2161,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2167,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2171,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2180,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2187,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2188,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2189,                buf.append(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2192,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2193,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2195,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2196,            if (displayOffset == 0 && iMinFields <= 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2197,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2200,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2201,                buf.append('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2204,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2209,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2210,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2212,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2213,                out.write(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2214,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2216,            if (displayOffset >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2217,                out.write('+');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2219,                out.write('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2220,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2223,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2225,            if (iMaxFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2226,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2228,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2229,            if (displayOffset == 0 && iMinFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2230,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2233,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2234,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2235,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2238,            if (iMaxFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2239,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2241,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2242,            if (displayOffset == 0 && iMinFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2243,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2246,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2247,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2248,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2251,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2252,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2254,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2255,            if (displayOffset == 0 && iMinFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2256,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2259,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2260,                out.write('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2263,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2267,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2271,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2278,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2281,            if (iZeroOffsetParseText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2282,                if (iZeroOffsetParseText.length() == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2284,                    if (limit > 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2285,                        char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2286,                        if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2287,                            break zeroOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2290,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2291,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2294,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2295,                    return position + iZeroOffsetParseText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2301,            if (limit <= 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2302,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2306,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2307,            if (c == '-') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2308,                negative = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2309,            } else if (c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2310,                negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2312,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2315,            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2316,            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2330,"            if (digitCount(text, position, 2) < 2) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2332,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2338,            if (hours > 23) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2339,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2342,            limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2343,            position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2349,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2350,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2354,                c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2355,                if (c == ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2356,                    expectSeparators = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2357,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2358,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2359,                } else if (c >= '0' && c <= '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2360,                    expectSeparators = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2367,"                int count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2368,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2369,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2370,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2372,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2376,                if (minutes > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2377,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2380,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2381,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2385,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2386,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2389,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2390,                    if (text.charAt(position) != ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2391,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2393,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2394,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2397,"                count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2398,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2399,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2400,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2402,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2406,                if (seconds > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2407,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2409,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2410,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2411,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2415,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2416,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2419,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2421,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2423,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2424,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2427,"                count = digitCount(text, position, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2428,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2429,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2430,                } else if (count < 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2432,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2435,                offset += (text.charAt(position++) - '0') * 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2436,                if (count > 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2437,                    offset += (text.charAt(position++) - '0') * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2438,                    if (count > 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2439,                        offset += text.charAt(position++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2445,            return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2453,"            int limit = Math.min(text.length() - position, amount);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2454,            amount = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2455,            for (; limit > 0; limit--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2456,                char c = text.charAt(position + amount);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2457,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2458,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2460,                amount++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2462,            return amount;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1899,                maxDigits = 18;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1914,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1922,"            printTo(null, out, instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1923,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1928,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1930,"                printTo(buf, null, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1933,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1931,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1934,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1939,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1940,"            printTo(null, out, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1941,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1952,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1953,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1954,"                    appendUnknownString(buf, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1956,"                    printUnknownString(out, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1958,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1967,                    while (--minDigits >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1968,                        out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1975,"            long[] fractionData = getFractionData(fraction, field);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1976,            long scaled = fractionData[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1977,            int maxDigits = (int) fractionData[1];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1979,            if ((scaled & 0x7fffffff) == scaled) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1980,                str = Integer.toString((int) scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1982,                str = Long.toString(scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1985,            int length = str.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1986,            int digits = maxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1987,            while (length < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1988,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1989,                    buf.append('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1991,                    out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1993,                minDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1994,                digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1997,            if (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1999,                while (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2000,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2001,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2003,                    digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2004,                    length--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2006,                if (length < str.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2007,                    if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2008,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2009,                            buf.append(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2012,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2013,                            out.write(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2016,                    return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2020,            if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2021,                buf.append(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2023,                out.write(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2025,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2028,            long rangeMillis = field.getDurationField().getUnitMillis();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2030,            int maxDigits = iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2032,                switch (maxDigits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2033,                default: scalar = 1L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2034,                case 1:  scalar = 10L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2035,                case 2:  scalar = 100L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2036,                case 3:  scalar = 1000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2037,                case 4:  scalar = 10000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2038,                case 5:  scalar = 100000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2039,                case 6:  scalar = 1000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2040,                case 7:  scalar = 10000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2041,                case 8:  scalar = 100000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2042,                case 9:  scalar = 1000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2043,                case 10: scalar = 10000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2044,                case 11: scalar = 100000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2045,                case 12: scalar = 1000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2046,                case 13: scalar = 10000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2047,                case 14: scalar = 100000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2048,                case 15: scalar = 1000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2049,                case 16: scalar = 10000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2050,                case 17: scalar = 100000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2051,                case 18: scalar = 1000000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2053,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2054,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2057,                maxDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2068,            DateTimeField field = iFieldType.getField(bucket.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2072,            long value = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2073,            long n = field.getDurationField().getUnitMillis() * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2074,            int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2075,            while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2076,                char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2077,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2078,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2080,                length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2081,                long nn = n / 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2082,                value += (c - '0') * nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2083,                n = nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2084,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2086,            value /= 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2088,            if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2089,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2092,            if (value > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2093,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2096,            DateTimeField parseField = new PreciseDateTimeField(,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2101,"            bucket.saveField(parseField, (int) value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,2103,            return position + length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1754,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1755,            iFieldType = fieldType;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1756,            iShort = isShort;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1757,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1760,            return iShort ? 6 : 20;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1767,"                buf.append(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1770,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1768,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1769,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1771,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1777,"                out.write(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1780,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1778,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1779,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1781,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1785,"                buf.append(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1788,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1786,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1787,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1789,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1793,"                out.write(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1796,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1794,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1795,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1797,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1800,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1801,            if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1802,"                return field.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1804,"                return field.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1809,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1810,                DateTimeField field = iFieldType.getField(partial.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1811,                if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1812,"                    return field.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1814,"                    return field.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1817,"                return ""\ufffd"";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1822,            return estimatePrintedLength();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1827,            Locale locale = bucket.getLocale();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1830,            Set<String> validValues = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1831,            int maxLength = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1832,            synchronized (cParseCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1834,                if (innerMap == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1836,"                    cParseCache.put(locale, innerMap);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1838,                Object[] array = innerMap.get(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1839,                if (array == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1840,                    validValues = new HashSet<String>(32);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1842,                    Property property = dt.property(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1843,                    int min = property.getMinimumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1844,                    int max = property.getMaximumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1845,                    if (max - min > 32) {  // protect against invalid fields,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1846,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1848,                    maxLength = property.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1849,                    for (int i = min; i <= max; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1850,                        property.set(i);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1851,                        validValues.add(property.getAsShortText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1852,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1853,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1854,                        validValues.add(property.getAsText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1855,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1856,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1860,"                        validValues.add(""BCE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1861,"                        validValues.add(""bce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1862,"                        validValues.add(""CE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1863,"                        validValues.add(""ce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1864,                        maxLength = 3;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1867,"                    innerMap.put(iFieldType, array);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1868,                } else {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1869,                    validValues = (Set<String>) array[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1870,                    maxLength = ((Integer) array[1]).intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1872,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1874,"            int limit = Math.min(text.length(), position + maxLength);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1875,            for (int i = limit; i > position; i--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1876,"                String match = text.substring(position, i);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1877,                if (validValues.contains(match)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1878,"                    bucket.saveField(iFieldType, match, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1879,                    return i;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1882,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1561,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1562,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1563,            iPivot = pivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1564,            iLenientParse = lenientParse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1565,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1568,            return iLenientParse ? 4 : 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1572,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1574,            if (!iLenientParse) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1575,"                limit = Math.min(2, limit);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1576,                if (limit < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1577,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1580,                boolean hasSignChar = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1581,                boolean negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1582,                int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1583,                while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1584,                    char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1585,                    if (length == 0 && (c == '-' || c == '+')) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1586,                        hasSignChar = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1587,                        negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1588,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1589,                            length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1592,                            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1593,                            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1595,                        continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1597,                    if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1598,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1600,                    length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1601,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1603,                if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1604,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1607,                if (hasSignChar || length != 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1609,                    if (length >= 9) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1612,"                        value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1614,                        int i = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1615,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1616,                            i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1619,                            value = text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1622,                        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1620,                        } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1621,                            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1623,                        position += length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1624,                        while (i < position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1625,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1627,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1628,                            value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1632,"                    bucket.saveField(iType, value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1633,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1638,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1639,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1640,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1642,            year = c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1643,            c = text.charAt(position + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1644,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1645,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1647,            year = ((year << 3) + (year << 1)) + c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1649,            int pivot = iPivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1651,            if (bucket.getPivotYear() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1652,                pivot = bucket.getPivotYear().intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1655,            int low = pivot - 50;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1658,            if (low >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1659,                t = low % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1661,                t = 99 + ((low + 1) % 100);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1664,            year += low + ((year < t) ? 100 : 0) - t;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1666,"            bucket.saveField(iType, year);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1667,            return position + 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1671,            return 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1677,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1678,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1679,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1680,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1684,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1689,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1690,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1691,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1692,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1694,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1696,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1700,                int year = iType.getField(chrono).get(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1701,                if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1702,                    year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1704,                return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1705,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1706,                return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1711,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1712,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1713,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1714,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1718,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1721,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1722,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1723,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1724,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1726,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1728,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1731,            if (partial.isSupported(iType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1733,                    int year = partial.get(iType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1734,                    if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1735,                        year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1737,                    return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1738,                } catch (RuntimeException e) {},0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1740,            return -1;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,378,        return iName;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1281,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1282,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1287,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1288,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1291,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1292,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1295,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1296,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1304,                return position + iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1306,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1412,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1416,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1414,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1415,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1417,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1423,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1427,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1425,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1426,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1428,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1431,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1436,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1434,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1435,                    buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1438,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1440,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1443,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1448,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1446,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1447,                    out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1450,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1452,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1225,            return dp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1232,            return ldp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1270,            return tp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1280,            return ltp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1349,            return dtp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1364,            return dotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1378,            return ldotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1429,            return dt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1439,            return dtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1459,            return odt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1469,            return odtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1479,            return wdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1489,            return wdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1557,            return bdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1567,            return bdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1587,            return bodt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1597,            return bodtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1619,            return bwdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1629,            return bwdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1640,            return ym;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1651,            return ymd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1661,            return ww;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1672,            return wwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1729,            return dh;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1740,            return dhm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1751,            return dhms;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1762,            return dhmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1773,            return dhmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,71,        super();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,72,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,156,        if (fields == null || fields.size() == 0) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,157,"            throw new IllegalArgumentException(""The fields must not be null or empty"");",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,159,        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,160,        int inputSize = workingFields.size();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,161,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,162,        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,164,        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,165,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,166,        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,167,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,168,        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,169,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,170,        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,171,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,172,        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,173,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,174,        } else if (workingFields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,175,            bld.append(Constants.ye);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,176,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,177,        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,178,            bld.append(Constants.we);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,179,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,181,        boolean datePresent = (workingFields.size() < inputSize);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,184,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,187,        if (bld.canBuildFormatter() == false) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,188,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,194,            fields.retainAll(workingFields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,197,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,195,        } catch (UnsupportedOperationException ex) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,198,        return bld.toFormatter();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,219,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,220,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,221,            bld.append(Constants.ye);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,222,            if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,223,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,225,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,226,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,227,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,228,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,231,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,232,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,233,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,236,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,238,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,239,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,240,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,241,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,244,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,248,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,249,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,250,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,251,            bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,252,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,254,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,255,                bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,258,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,260,        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,262,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,263,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,264,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,265,            bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,267,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,287,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,288,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,289,            bld.append(Constants.ye);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,290,            if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,292,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,293,                bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,296,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,299,        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,301,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,302,            bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,304,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,324,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,325,        if (fields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,326,            bld.append(Constants.we);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,327,            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,328,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,329,                bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,330,                bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,331,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,333,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,334,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,337,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,340,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,342,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,343,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,344,                    bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,345,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,346,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,349,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,353,        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,354,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,355,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,356,            bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,357,            if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,359,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,360,                bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,363,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,365,        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,367,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,368,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,369,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,370,            bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,372,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,396,        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,397,        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,398,        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,399,        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,400,        if (!hour && !minute && !second && !milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,401,            return;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,403,        if (hour || minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,404,            if (strictISO && reducedPrec) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,405,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,407,            if (datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,408,                bld.appendLiteral('T');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,411,        if (hour && minute && second || (hour && !second && !milli)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,414,            if (strictISO && datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,415,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,417,            if (!hour && (minute && second || (minute && !milli) || second)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,420,                if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,421,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,425,        if (hour) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,426,            bld.appendHourOfDay(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,427,        } else if (minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,428,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,430,        if (extended && hour && minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,431,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,433,        if (minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,434,            bld.appendMinuteOfHour(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,435,        } else if (second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,436,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,438,        if (extended && minute && second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,439,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,441,        if (second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,442,            bld.appendSecondOfMinute(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,443,        } else if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,444,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,446,        if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,447,            bld.appendLiteral('.');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,448,            bld.appendMillisOfSecond(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,450,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,461,        if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,462,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,464,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,475,        if (extended) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,476,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,478,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,495,        return Constants.dp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,512,        return Constants.ldp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,527,        return Constants.dpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,545,        return Constants.tp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,564,        return Constants.ltp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,580,        return Constants.tpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,604,        return Constants.dtp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,627,        return Constants.dotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,651,        return Constants.ldotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,675,        return Constants.t;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,687,        return Constants.tx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,700,        return Constants.tt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,713,        return Constants.ttx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,737,        return Constants.dtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,748,        return Constants.od;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,761,        return Constants.odt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,774,        return Constants.odtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,796,        return Constants.wdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,808,        return Constants.wdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,819,        return Constants.bd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,832,        return Constants.bt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,844,        return Constants.btx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,857,        return Constants.btt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,870,        return Constants.bttx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,882,        return Constants.bdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,894,        return Constants.bdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,905,        return Constants.bod;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,918,        return Constants.bodt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,931,        return Constants.bodtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,941,        return Constants.bwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,953,        return Constants.bwdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,965,        return Constants.bwdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,975,        return Constants.ye;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,985,        return Constants.ym;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1004,        return Constants.we;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1014,        return Constants.ww;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1024,        return Constants.wwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1043,        return Constants.hm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1053,        return Constants.hms;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1065,        return Constants.hmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1077,        return Constants.hmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1087,        return Constants.dh;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1097,        return Constants.dhm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1108,        return Constants.dhms;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1120,        return Constants.dhmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,3,1132,        return Constants.dhmsf;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,36,    private FormatUtils() {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,37,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,51,            buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,52,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,53,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,55,                for (; size > 10; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,56,                    buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,59,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,69,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,81,                digits = 3;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,88,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,105,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,106,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,107,"            appendPaddedInteger(buf, intValue, size);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,108,        } else if (size <= 19) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,109,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,111,            if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,112,                buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,113,                if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,114,                    value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,116,                    for (; size > 19; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,117,                        buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,119,"                    buf.append(""9223372036854775808"");",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,120,                    return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,124,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,125,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,127,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,129,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,144,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,145,            out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,146,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,147,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,149,                for (; size > 10; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,150,                    out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,153,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,156,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,157,            for (; size > 1; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,158,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,160,            out.write(value + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,161,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,162,            for (; size > 2; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,163,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,168,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,169,            out.write(d + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,171,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,172,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,174,            if (value < 1000) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,175,                digits = 3;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,176,            } else if (value < 10000) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,177,                digits = 4;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,181,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,182,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,184,            out.write(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,186,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,201,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,202,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,203,"            writePaddedInteger(out, intValue, size);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,204,        } else if (size <= 19) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,205,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,207,            if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,208,                out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,209,                if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,210,                    value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,212,                    for (; size > 19; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,213,                        out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,215,"                    out.write(""9223372036854775808"");",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,216,                    return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,220,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,221,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,223,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,225,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,236,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,237,            buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,238,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,239,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,242,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,245,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,246,            buf.append((char)(value + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,247,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,251,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,252,            buf.append((char) (d + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,255,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,256,            buf.append(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,258,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,269,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,270,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,271,"            appendUnpaddedInteger(buf, intValue);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,273,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,275,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,288,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,289,            out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,290,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,291,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,294,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,297,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,298,            out.write(value + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,299,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,303,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,304,            out.write(d + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,306,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,307,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,308,            out.write(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,310,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,323,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,324,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,325,"            writeUnpaddedInteger(out, intValue);",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,327,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,329,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,3,336,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,337,            if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,338,                return calculateDigitCount(-value) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,340,                return 20;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,343,        return ,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,352,        int value = text.charAt(position) - '0';,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,357,        int sampleLen = errorPos + 32;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,359,        if (text.length() <= sampleLen + 3) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,360,            sampleText = text;,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,365,        if (errorPos <= 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,366,"            return ""Invalid format: \"""" + sampleText + '""';",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,369,        if (errorPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,3,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",0.0,0,-1,0
org/joda/time/format/FormatUtils,3,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1224,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1225,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1228,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1229,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1232,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1233,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1240,            if (position >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1241,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1244,            char a = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1245,            char b = iValue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1247,            if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1248,                a = Character.toUpperCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1249,                b = Character.toUpperCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1250,                if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1251,                    a = Character.toLowerCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1252,                    b = Character.toLowerCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1253,                    if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1254,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,3,1259,            return position + 1;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,61,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,67,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,96,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,97,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,100,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,3,144,        return iRange;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,52,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,57,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,67,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,93,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,94,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,96,            instant += 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,97,            return instant - instant % iUnitMillis - iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,110,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,111,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,112,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,114,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,130,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,3,164,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,792,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,886,        long newInstant = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,887,        if (newInstant != instant) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,888,"            instant = add(newInstant, 1);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,890,        return instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,3,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/DateTimeUtils,3,532,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,3,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,3,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,109,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,110,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,111,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,112,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,113,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,114,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,115,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,116,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,117,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,41,        StringBuilder buf = new StringBuilder(),0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,44,        if (lowerBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,59,        if (explain != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,63,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,3,328,    },0.0,0,-1,0
org/joda/time/DateTimeZone,3,1307,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1308,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1309,        },0.0,0,-1,0
org/joda/time/DateTimeZone,3,1312,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1313,        },0.0,0,-1,0
org/joda/time/DateTimeZone,3,1316,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,3,1317,        },0.0,0,-1,0
org/joda/time/DateTimeZone,3,1320,            return forID(iID);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1269,            super();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1270,            iInstant = instant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1271,            iField = field;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1272,        },0.0,0,-1,0
org/joda/time/MutableDateTime,3,1278,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1279,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1280,        },0.0,0,-1,0
org/joda/time/MutableDateTime,3,1286,            iInstant = (MutableDateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1287,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1288,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1289,        },0.0,0,-1,0
org/joda/time/MutableDateTime,3,1298,            return iField;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1307,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1317,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1326,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1338,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1339,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1350,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1351,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1362,"            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1363,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1375,"            iInstant.setMillis(getField().set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1376,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1389,"            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1390,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1402,"            set(text, null);",0.0,0,-1,0
org/joda/time/MutableDateTime,3,1403,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1414,            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1415,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1425,            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1426,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1437,            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1438,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1449,            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1450,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1461,            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,3,1462,            return iInstant;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,3,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,153,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,157,        FieldUtils.verifyValueBounds,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,185,        return iMinDaysInFirstWeek;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,197,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,198,            return true;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,200,        if (obj != null && getClass() == obj.getClass()) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,201,            BasicChronology chrono = (BasicChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,205,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,226,        StringBuilder sb = new StringBuilder(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,227,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,228,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,229,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,230,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,232,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,233,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,234,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,235,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,236,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,238,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,239,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,240,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,242,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,243,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,315,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,325,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,335,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,336,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,337,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,347,        long jan1millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,348,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,350,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,352,            return jan1millis + (8 - jan1dayOfWeek),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,356,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,379,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,380,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,381,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,410,            i2 = i2 - unitMillis + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,418,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,422,            if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,423,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,428,            yearStart += oneYear;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,430,            if (yearStart <= instant) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,432,                year++;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,485,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,501,        int year = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,502,"        int week = getWeekOfWeekyear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,503,        if (week == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,504,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,505,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,506,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,508,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,516,"        return getWeekOfWeekyear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,524,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,525,        if (instant < firstWeekMillis1) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,526,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,528,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,529,        if (instant >= firstWeekMillis2) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,530,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,532,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,545,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,547,            if (daysSince19700101 < -3) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,548,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,562,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,573,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,583,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,584,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,585,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,598,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,283,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,299,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,307,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,311,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,321,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,322,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,327,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,328,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,334,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,335,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,361,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,366,            if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,367,                return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,368,            } else if (obj instanceof ZonedDurationField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,369,                ZonedDurationField other = (ZonedDurationField) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,370,                return iField.equals(other.iField) &&,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,373,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,378,            return iField.hashCode() ^ iZone.hashCode();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,3,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,89,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,93,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,94,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,96,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,97,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,99,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,100,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,102,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,109,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,128,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,142,"            throw new IllegalInstantException(localInstant, zone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,210,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,213,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,234,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,235,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,237,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,238,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,240,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,241,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,406,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,417,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,421,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,422,            return iField.get(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,426,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,427,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,431,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,432,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,436,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,440,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,444,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,445,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,446,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,447,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,449,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,450,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,451,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,456,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,457,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,458,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,459,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,461,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,462,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,463,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,468,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,469,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,470,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,471,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,473,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,474,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,475,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,480,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,481,"            localInstant = iField.set(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,483,            if (get(result) != value) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,484,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,485,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,486,                ex.initCause(cause);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,487,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,489,            return result;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,494,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,495,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,496,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,500,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,501,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,507,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,508,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,514,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,518,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,522,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,523,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,527,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,528,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,532,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,536,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,537,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,538,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,539,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,541,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,542,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,543,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,548,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,549,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,550,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,551,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,553,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,554,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,555,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,560,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,561,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,565,            return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,569,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,570,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,574,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,578,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,582,            return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,586,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,587,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,591,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,595,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,599,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,603,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,607,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,608,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,610,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,611,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,613,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,618,            if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,619,                return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,620,            } else if (obj instanceof ZonedDateTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,621,                ZonedDateTimeField other = (ZonedDateTimeField) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,622,                return iField.equals(other.iField) &&,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,627,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,3,632,            return iField.hashCode() ^ iZone.hashCode();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,3,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,74,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,78,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,101,"        this(remainderField, null, type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,102,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,113,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,114,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,115,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,116,        iRangeDurationField = rangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,117,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,118,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,119,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,120,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,121,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,122,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,123,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,124,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,131,        return super.getRangeDurationField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,141,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,142,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,143,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,145,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,158,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,170,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,182,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,186,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,190,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,202,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,203,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,204,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,220,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,229,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,233,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,234,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,238,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,247,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,251,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,252,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,3,254,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,57,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,60,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,75,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,79,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,83,"        return iField.set(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,95,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,99,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,3,103,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,54,"        super(field, type);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,56,        if (divisor < 2) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,57,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,60,        DurationField rangeField = field.getDurationField();,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,61,        if (rangeField == null) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,62,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,64,            iRangeField = new ScaledDurationField(,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,67,        iDurationField = field.getDurationField();,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,68,        iDivisor = divisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,69,    },0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,84,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,136,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,137,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,138,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,140,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,154,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,166,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,167,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,168,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,203,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,207,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,211,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,215,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,219,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,223,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,232,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,236,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,237,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,3,239,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,3,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,53,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,61,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,65,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,69,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,70,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,74,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,75,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,76,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,78,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,82,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,83,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,84,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,85,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,86,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,89,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,93,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,94,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,3,101,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,60,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,64,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,68,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,69,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,70,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,71,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,72,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,74,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,76,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,80,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,81,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,82,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,83,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,84,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,85,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,86,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,87,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,90,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,93,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,3,104,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,3,133,        return false;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,48,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,53,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,54,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,55,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,57,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,61,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,65,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,69,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,73,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,77,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,81,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,85,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,86,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,87,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,88,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,90,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,94,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,98,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,111,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,120,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,129,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,138,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,148,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,158,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,168,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,178,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,182,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,186,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,190,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,194,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,198,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,3,202,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,763,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,3,771,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,68,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,72,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,76,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,77,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,79,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,89,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,90,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,92,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,100,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,104,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,105,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,107,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,116,        return iChronology.getMinYear();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,124,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,128,        int year = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,129,        long yearStartMillis = iChronology.getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,130,        if (instant != yearStartMillis) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,132,            instant = iChronology.getYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,134,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,138,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,3,145,        return iChronology.year();,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,92,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,119,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,120,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,123,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,124,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,126,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,127,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,128,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,129,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,131,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,132,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,134,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,146,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,52,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,53,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,54,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,56,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,60,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,64,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,68,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,92,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,93,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,94,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,96,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,108,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,112,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,116,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,3,123,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,77,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,85,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,90,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,101,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,113,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,114,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,115,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,127,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,128,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,129,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,141,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,154,"        return super.set(instant, value - iOffset);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,158,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,162,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,166,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,188,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,192,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,196,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,200,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,204,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,208,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,3,217,        return iOffset;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,52,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,61,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,62,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,64,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,69,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,81,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,83,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,84,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,85,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,86,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,88,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,93,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,97,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,98,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,100,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,105,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,106,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,108,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,114,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,119,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,124,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,136,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,140,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,144,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,3,151,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,68,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,79,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,91,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,104,        return DateTimeConstants.MONDAY;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,113,        return DateTimeConstants.SUNDAY;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,123,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,133,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,3,140,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,43,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,48,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,53,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,58,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,3,63,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,60,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,118,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,119,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,120,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,122,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,123,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,125,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,127,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,128,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,140,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,152,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,153,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,154,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,159,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,161,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,162,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,165,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,166,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,167,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,168,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,170,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,171,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,172,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,173,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,174,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,176,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,177,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,178,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,182,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,185,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,189,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,190,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,192,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,193,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,194,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,195,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,198,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,200,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,207,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,208,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,210,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,212,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,213,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,214,"            return set(partial, 0, values, newMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,216,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,217,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,218,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,219,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,221,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,222,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,224,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,239,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,244,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,245,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,248,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,249,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,250,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,251,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,253,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,257,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,259,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,261,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,263,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,267,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,272,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,274,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,277,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,278,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,281,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,307,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,321,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,322,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,323,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,325,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,330,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,340,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,345,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,350,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,351,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,352,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,357,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,3,365,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,61,        return iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,73,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,74,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,76,"        return set(instant, get(instant) + years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,80,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,93,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,97,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,98,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,101,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,102,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,104,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,105,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,108,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,109,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,112,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,113,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,114,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,116,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,134,        int thisWeekyear = get( instant );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,135,        if ( thisWeekyear == year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,136,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,141,        int thisDow = iChronology.getDayOfWeek(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,156,        if ( setToWeek > maxOutWeeks ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,157,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,163,        long workInstant = instant; // Get a copy,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,169,"        workInstant = iChronology.setYear( workInstant, year );",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,174,        int workWoyYear = get( workInstant );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,180,        if ( workWoyYear < year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,181,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,182,        } else if ( workWoyYear > year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,183,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,205,        return workInstant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,213,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,217,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,225,        return iChronology.getMinYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,229,        return iChronology.getMaxYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,236,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,237,        if (wow > 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,238,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,240,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,244,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,3,251,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,55,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,71,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,76,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,80,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,84,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,88,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,89,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,93,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,94,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,95,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,97,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,101,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,102,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,103,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,104,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,105,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,108,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,112,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,3,119,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,57,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,58,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,62,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,66,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,70,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,74,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,78,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,82,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,86,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,87,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,88,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,90,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,102,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,106,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,110,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,3,117,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,157,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,165,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,170,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,175,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,179,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,187,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,191,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,3,196,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,225,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,226,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,227,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,230,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,234,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,235,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,240,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,3,241,        },0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,3,138,        return false;,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,3,101,        return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,3,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,123,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,136,        switch (val2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,141,                return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,143,                return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,145,                return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,147,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,148,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,151,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,163,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,164,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,166,        if (val1 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,167,            return val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,169,        if (val1 == 0 || val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,170,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,172,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,176,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,189,        if (dividend == Long.MIN_VALUE && divisor == -1L) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,190,"            throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,192,        return dividend / divisor;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,203,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,204,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,206,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,218,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,219,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,234,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,252,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,268,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,269,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,273,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,3,292,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,308,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,309,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,3,312,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,313,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,315,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,316,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,319,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,321,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,322,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,324,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,337,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,338,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,340,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,341,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,3,343,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,3,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,457,            return iRangeType;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,475,            return (1 << iOrdinal);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,3,590,                    return this;,0.0,0,-1,0
