project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/joda/time/Partial,2,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",1.0,0,,0,0.002475780135392542,0.9975242198646068
org/joda/time/field/UnsupportedDurationField,2,227,        return 0;,0.2,1,-1,1
org/joda/time/field/UnsupportedDurationField,2,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.2,0,-1,0
org/joda/time/Partial,2,223,                        if (loopType.getRangeDurationType() == null) {,0.2,0,-1,0
org/joda/time/DurationFieldType,2,286,                    return chronology.eras();,0.125,0,-1,0
org/joda/time/Partial,2,222,                    if (types[i - 1].getRangeDurationType() == null) {,0.07692,0,-1,0
org/joda/time/Partial,2,140,    },0.06667,0,-1,0
org/joda/time/Partial,2,162,    },0.0625,0,-1,0
org/joda/time/Partial,2,139,"        this(type, value, null);",0.05882,0,-1,0
org/joda/time/Partial,2,159,        iTypes = new DateTimeFieldType[] {type};,0.05556,0,-1,0
org/joda/time/Partial,2,160,        iValues = new int[] {value};,0.05556,0,-1,0
org/joda/time/Partial,2,161,"        chronology.validate(this, iValues);",0.05556,0,-1,0
org/joda/time/Partial,2,153,        super();,0.05,0,-1,0
org/joda/time/Partial,2,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.05,0,-1,0
org/joda/time/Partial,2,155,        iChronology = chronology;,0.05,0,-1,0
org/joda/time/Partial,2,156,        if (type == null) {,0.05,0,-1,0
org/joda/time/Partial,2,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,0.03704,0,-1,0
org/joda/time/Partial,2,435,            int[] newValues = new int[newTypes.length];,0.03704,0,-1,0
org/joda/time/Partial,2,438,            int i = 0;,0.03704,0,-1,0
org/joda/time/Partial,2,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,0.03704,0,-1,0
org/joda/time/Partial,2,440,            if (unitField.isSupported()) {,0.03704,0,-1,0
org/joda/time/Partial,2,458,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0.03704,1,-1,1
org/joda/time/Partial,2,459,"            System.arraycopy(iValues, 0, newValues, 0, i);",0.03704,0,-1,0
org/joda/time/Partial,2,460,            newTypes[i] = fieldType;,0.03704,0,-1,0
org/joda/time/Partial,2,461,            newValues[i] = value;,0.03704,0,-1,0
org/joda/time/Partial,2,462,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",0.03704,0,-1,0
org/joda/time/Partial,2,463,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",0.03704,0,-1,0
org/joda/time/Partial,2,466,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",0.03704,0,-1,0
org/joda/time/Partial,2,432,        int index = indexOf(fieldType);,0.03448,0,-1,0
org/joda/time/Partial,2,433,        if (index == -1) {,0.03448,0,-1,0
org/joda/time/Partial,2,429,        if (fieldType == null) {,0.03333,0,-1,0
org/joda/time/DateTimeFieldType,2,457,            return iRangeType;,0.01923,0,-1,0
org/joda/time/base/AbstractPartial,2,175,        return -1;,0.0137,0,-1,0
org/joda/time/Partial,2,217,                int compare = lastUnitField.compareTo(loopUnitField);,0.00719,0,-1,0
org/joda/time/Partial,2,218,                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {,0.00719,1,-1,0
org/joda/time/Partial,2,221,                } else if (compare == 0) {,0.00719,0,-1,0
org/joda/time/Partial,2,346,        return iTypes[index];,0.00694,0,-1,0
org/joda/time/Partial,2,212,        DurationField lastUnitField = null;,0.00662,0,-1,0
org/joda/time/Partial,2,213,        for (int i = 0; i < types.length; i++) {,0.00662,0,-1,0
org/joda/time/Partial,2,214,            DateTimeFieldType loopType = types[i];,0.00662,0,-1,0
org/joda/time/Partial,2,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0.00662,0,-1,0
org/joda/time/Partial,2,216,            if (i > 0) {,0.00662,0,-1,0
org/joda/time/Partial,2,245,            lastUnitField = loopUnitField;,0.00662,0,-1,0
org/joda/time/Partial,2,207,        for (int i = 0; i < types.length; i++) {,0.00658,0,-1,0
org/joda/time/Partial,2,208,            if (types[i] == null) {,0.00658,0,-1,0
org/joda/time/Partial,2,202,        if (types.length == 0) {,0.00654,0,-1,0
org/joda/time/Partial,2,199,        if (values.length != types.length) {,0.00649,0,-1,0
org/joda/time/Partial,2,196,        if (values == null) {,0.00645,0,-1,0
org/joda/time/Partial,2,335,        return iTypes[index].getField(chrono);,0.00645,0,-1,0
org/joda/time/Partial,2,190,        super();,0.00641,0,-1,0
org/joda/time/Partial,2,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.00641,0,-1,0
org/joda/time/Partial,2,192,        iChronology = chronology;,0.00641,0,-1,0
org/joda/time/Partial,2,193,        if (types == null) {,0.00641,0,-1,0
org/joda/time/Partial,2,323,        return iChronology;,0.00629,0,-1,0
org/joda/time/Partial,2,311,        return iTypes.length;,0.00625,0,-1,0
org/joda/time/base/AbstractPartial,2,170,"        for (int i = 0, isize = size(); i < isize; i++) {",0.00478,0,-1,0
org/joda/time/base/AbstractPartial,2,171,            if (getFieldType(i) == type) {,0.00478,0,-1,0
org/joda/time/DurationFieldType,2,292,                    return chronology.years();,0.00459,0,-1,0
org/joda/time/DateTimeFieldType,2,378,        return iName;,0.00342,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1544,                return iWallOffsets[i - 1];,0.002,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1580,                return instant;,0.00199,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,86,        return INSTANCE_UTC;,0.00178,0,-1,0
org/joda/time/field/BaseDateTimeField,2,818,        return getMaximumValue(instant);,0.00167,0,-1,0
org/joda/time/field/BaseDateTimeField,2,804,        return getMaximumValue();,0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,213,    },0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,199,        for (int i = 0; i < size; i++) {,0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,200,            int value = values[i];,0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,201,            DateTimeField field = partial.getField(i);,0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,202,"            if (value < field.getMinimumValue(partial, values)) {",0.00166,0,-1,0
org/joda/time/chrono/BaseChronology,2,207,"            if (value > field.getMaximumValue(partial, values)) {",0.00166,0,-1,0
org/joda/time/field/BaseDateTimeField,2,758,        return getMinimumValue();,0.00165,0,-1,0
org/joda/time/field/BaseDateTimeField,2,772,        return getMinimumValue(instant);,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,192,            if (value > field.getMaximumValue()) {,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,183,        int size = partial.size();,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,184,        for (int i = 0; i < size; i++) {,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,185,            int value = values[i];,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,186,            DateTimeField field = partial.getField(i);,0.00165,0,-1,0
org/joda/time/chrono/BaseChronology,2,187,            if (value < field.getMinimumValue()) {,0.00165,0,-1,0
org/joda/time/chrono/CopticChronology,2,89,        return INSTANCE_UTC;,0.00163,0,-1,0
org/joda/time/base/AbstractPartial,2,105,"        return getField(index, getChronology());",0.00156,0,-1,0
org/joda/time/chrono/ZonedChronology,2,632,            return iField.hashCode() ^ iZone.hashCode();,0.00134,0,-1,0
org/joda/time/chrono/ZonedChronology,2,378,            return iField.hashCode() ^ iZone.hashCode();,0.00134,0,-1,0
org/joda/time/chrono/ZonedChronology,2,532,            return iLeapDurationField;,0.00131,0,-1,0
org/joda/time/DurationFieldType,2,282,            chronology = DateTimeUtils.getChronology(chronology);,0.00128,0,-1,0
org/joda/time/DurationFieldType,2,284,            switch (iOrdinal) {,0.00128,0,-1,0
org/joda/time/base/AbstractInstant,2,260,            return true;,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,209,                for (int i = chronos.size(); --i >= 0;) {,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,210,                    chrono = chronos.get(i);,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,211,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,214,                        return chrono;,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,400,        return iCutoverInstant;,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,409,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.00127,0,-1,0
org/joda/time/chrono/GJChronology,2,284,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.00125,0,-1,0
org/joda/time/chrono/GJChronology,2,285,    },0.00125,0,-1,0
org/joda/time/chrono/GJChronology,2,224,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.00125,0,-1,0
org/joda/time/chrono/GJChronology,2,225,                chrono = new GJChronology,0.00125,0,-1,0
org/joda/time/chrono/GJChronology,2,490,            return;,0.00125,0,-1,0
org/joda/time/chrono/ZonedChronology,2,518,            return iRangeDurationField;,0.00125,0,-1,0
org/joda/time/chrono/ZonedChronology,2,514,            return iDurationField;,0.00124,0,-1,0
org/joda/time/chrono/ZonedChronology,2,565,            return iField.getMinimumValue();,0.00123,0,-1,0
org/joda/time/chrono/ZonedChronology,2,582,            return iField.getMaximumValue();,0.00123,0,-1,0
org/joda/time/chrono/GJChronology,2,310,        return withZone(DateTimeZone.UTC);,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,320,        if (zone == null) {,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,323,        if (zone == getZone()) {,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,324,            return this;,0.00122,0,-1,0
org/joda/time/chrono/ZonedChronology,2,489,            return result;,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,296,        if ((base = getBase()) != null) {,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,299,        return DateTimeZone.UTC;,0.00122,0,-1,0
org/joda/time/chrono/GJChronology,2,195,            cutoverInstant = gregorianCutover.toInstant();,0.00121,0,-1,0
org/joda/time/chrono/GJChronology,2,196,"            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));",0.00121,0,-1,0
org/joda/time/chrono/GJChronology,2,197,            if (cutoverDate.getYear() <= 0) {,0.00121,0,-1,0
org/joda/time/Instant,2,144,        return this;,0.0012,0,-1,0
org/joda/time/chrono/ZonedChronology,2,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0012,0,-1,0
org/joda/time/chrono/ZonedChronology,2,483,            if (get(result) != value) {,0.0012,0,-1,0
org/joda/time/DateTimeZone,2,982,"        return convertLocalToUTC(instantLocal, strict);",0.0012,0,-1,0
org/joda/time/DateTimeZone,2,999,        int offsetLocal = getOffset(instantLocal);,0.00119,0,-1,0
org/joda/time/DateTimeZone,2,1001,        int offset = getOffset(instantLocal - offsetLocal);,0.00119,0,-1,0
org/joda/time/DateTimeZone,2,1003,        if (offsetLocal != offset) {,0.00119,0,-1,0
org/joda/time/DateTimeZone,2,1032,        long instantUTC = instantLocal - offset;,0.00119,0,-1,0
org/joda/time/DateTimeZone,2,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.00119,0,-1,0
org/joda/time/DateTimeZone,2,1037,        return instantUTC;,0.00119,0,-1,0
org/joda/time/DateTimeFieldType,2,492,                    return chronology.year();,0.00119,0,-1,0
org/joda/time/chrono/ZonedChronology,2,480,            long localInstant = iZone.convertUTCToLocal(instant);,0.00119,0,-1,0
org/joda/time/chrono/ZonedChronology,2,481,"            localInstant = iField.set(localInstant, value);",0.00119,0,-1,0
org/joda/time/LocalDate,2,335,"    public LocalDate(long instant, Chronology chronology) {",0.00114,0,-1,0
org/joda/time/LocalDate,2,336,        chronology = DateTimeUtils.getChronology(chronology);,0.00114,0,-1,0
org/joda/time/LocalDate,2,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0.00114,0,-1,0
org/joda/time/LocalDate,2,339,        chronology = chronology.withUTC();,0.00114,0,-1,0
org/joda/time/LocalDate,2,340,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0.00114,0,-1,0
org/joda/time/LocalDate,2,341,        iChronology = chronology;,0.00114,0,-1,0
org/joda/time/LocalDate,2,342,    },0.00114,0,-1,0
org/joda/time/LocalDate,2,1462,        return getChronology().year().get(getLocalMillis());,0.00113,0,-1,0
org/joda/time/base/AbstractInstant,2,259,        if (this == readableInstant) {,0.00109,0,-1,0
org/joda/time/field/SkipDateTimeField,2,82,            value--;,0.00108,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,211,            return iRangeDurationField;,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,53,"        this(chronology, field, 0);",0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,54,    },0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,64,        super(field);,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,65,        iChronology = chronology;,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,66,        int min = super.getMinimumValue();,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,67,        if (min < skip) {,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,68,            iMinValue = min + 1;,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,74,        iSkip = skip;,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,75,    },0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,88,        if (value <= iSkip) {,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,89,            value--;,0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,91,"        return super.set(millis, value);",0.00108,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,95,        return iMinValue;,0.00108,0,-1,0
org/joda/time/LocalDate,2,610,        return iLocalMillis;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,133,"        super(base, param);",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,134,    },0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,67,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,73,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,76,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,106,        if (zone == null) {,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,110,        synchronized (cCache) {,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,111,            chrono = cCache.get(zone);,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,112,            if (chrono == null) {,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,114,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,116,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,117,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,118,"                cCache.put(zone, chrono);",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,120,        },0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,121,        return chrono;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,217,        if (getParam() == null) {,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,219,            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,222,            DateTimeField field = fields.year;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,223,            fields.year = new OffsetDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,227,            field = fields.yearOfEra;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,228,            fields.yearOfEra = new DelegatedDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,232,            field = fields.weekyear;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,233,            fields.weekyear = new OffsetDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,236,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,237,            fields.centuryOfEra = new DividedDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,239,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,241,            field = new RemainderDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,243,            fields.yearOfCentury = new OffsetDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,246,            field = new RemainderDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,248,            fields.weekyearOfCentury = new OffsetDateTimeField(,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,251,            fields.era = ERA_FIELD;,0.00108,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,253,    },0.00108,0,-1,0
org/joda/time/LocalDate,2,619,        return iChronology;,0.00108,0,-1,0
org/joda/time/chrono/GJChronology,2,174,"        return getInstance(zone, gregorianCutover, 4);",0.00108,0,-1,0
org/joda/time/chrono/GJChronology,2,823,            return iJulianField.getMinimumValue();,0.00108,0,-1,0
org/joda/time/chrono/GJChronology,2,854,            return iGregorianField.getMaximumValue();,0.00108,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.00108,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,154,"        return super.set(instant, value - iOffset);",0.00108,0,-1,0
org/joda/time/chrono/GJChronology,2,193,            cutoverInstant = DEFAULT_CUTOVER;,0.00108,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,83,"        return iField.set(instant, value);",0.00107,0,-1,0
org/joda/time/field/SkipDateTimeField,2,100,        return iMinValue;,0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,132,"        long instant = year().set(0, year);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.00107,0,-1,0
org/joda/time/chrono/BaseChronology,2,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.00107,0,-1,0
org/joda/time/chrono/AssembledChronology,2,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,742,                    if (instant + iGapDuration < iCutover) {,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,743,                        instant = gregorianToJulian(instant);,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,746,                    if (get(instant) != value) {,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,675,                return iJulianField.get(instant);,0.00107,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,229,        return iChronology.getMaxYear();,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,593,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,943,                return gregorianToJulianByYear(instant);,0.00107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,186,"        return iField.set(instant, value);",0.00107,0,-1,0
org/joda/time/chrono/JulianChronology,2,79,            if (year == 0) {,0.00107,0,-1,0
org/joda/time/chrono/JulianChronology,2,83,            year++;,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,752,"                instant = iJulianField.set(instant, value);",0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,753,                if (instant >= iCutover) {,0.00107,0,-1,0
org/joda/time/chrono/GJChronology,2,739,"                instant = iGregorianField.set(instant, value);",0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,740,                if (instant < iCutover) {,0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,940,            if (iConvertByWeekyear) {,0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,75,public final class GJChronology extends AssembledChronology {,0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,738,            if (instant >= iCutover) {,0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,765,            return instant;,0.00106,0,-1,0
org/joda/time/chrono/GJChronology,2,672,            if (instant >= iCutover) {,0.00106,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,245,        return iField.getMaximumValue();,0.00106,0,-1,0
org/joda/time/LocalDate,2,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0.00106,0,-1,0
org/joda/time/LocalDate,2,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0.00106,0,-1,0
org/joda/time/LocalDate,2,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0.00106,0,-1,0
org/joda/time/LocalDate,2,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0.00106,0,-1,0
org/joda/time/LocalDate,2,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0.00106,0,-1,0
org/joda/time/LocalDate,2,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0.00106,0,-1,0
org/joda/time/LocalDate,2,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0.00106,0,-1,0
org/joda/time/LocalDate,2,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0.00106,0,-1,0
org/joda/time/LocalDate,2,106,    },0.00106,0,-1,0
org/joda/time/DateTimeZone,2,1055,            return oldInstant;,0.00105,0,-1,0
org/joda/time/chrono/JulianChronology,2,78,        if (year <= 0) {,0.00104,0,-1,0
org/joda/time/chrono/JulianChronology,2,85,        return year;,0.00104,0,-1,0
org/joda/time/chrono/JulianChronology,2,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.00104,0,-1,0
org/joda/time/chrono/BasicChronology,2,410,            i2 = i2 - unitMillis + 1;,0.00104,0,-1,0
org/joda/time/chrono/GregorianChronology,2,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.00104,0,-1,0
org/joda/time/chrono/CopticChronology,2,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.00103,0,-1,0
org/joda/time/chrono/CopticChronology,2,146,                    chrono = new CopticChronology,0.00103,0,-1,0
org/joda/time/chrono/CopticChronology,2,184,        return INSTANCE_UTC;,0.00103,0,-1,0
org/joda/time/chrono/GJChronology,2,816,            return iGregorianField.getLeapDurationField();,0.00102,0,-1,0
org/joda/time/chrono/GJChronology,2,796,            return iRangeDurationField;,0.00102,0,-1,0
org/joda/time/chrono/LimitChronology,2,542,            return iLeapDurationField;,0.00101,0,-1,0
org/joda/time/chrono/LimitChronology,2,528,            return iRangeDurationField;,0.001,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,132,            instant = iChronology.getYearMillis(year + 1);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,514,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,515,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,516,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,517,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,518,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,519,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,520,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,521,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,522,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,523,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,525,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/LimitChronology,2,524,            return iDurationField;,0.001,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,128,        int year = get(instant);,0.001,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,129,        long yearStartMillis = iChronology.getYearMillis(year);,0.001,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,130,        if (instant != yearStartMillis) {,0.001,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,134,        return instant;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,274,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,275,    },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,106,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,109,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,84,        return to.getDateTimeMillis,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,190,        zone = DateTimeUtils.getZone(zone);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,192,        if (gregorianCutover == null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,203,        synchronized (cCache) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,204,            ArrayList<GJChronology> chronos = cCache.get(zone);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,205,            if (chronos == null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,206,                chronos = new ArrayList<GJChronology>(2);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,207,"                cCache.put(zone, chronos);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,218,            if (zone == DateTimeZone.UTC) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,219,                chrono = new GJChronology,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,231,            chronos.add(chrono);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,232,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,233,        return chrono;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,478,        Object[] params = (Object[])getParam();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,480,        JulianChronology julian = (JulianChronology)params[0];,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,481,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,482,        Instant cutoverInstant = (Instant)params[2];,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,483,        iCutoverMillis = cutoverInstant.getMillis();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,485,        iJulianChronology = julian;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,486,        iGregorianChronology = gregorian;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,487,        iCutoverInstant = cutoverInstant;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,489,        if (getBase() != null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,493,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,498,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,504,        fields.copyFieldsFrom(gregorian);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,510,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,530,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,537,            fields.year = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,539,            fields.years = fields.year.getDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,540,            fields.yearOfEra = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,543,            fields.centuryOfEra = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,545,            fields.centuries = fields.centuryOfEra.getDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,547,            fields.yearOfCentury = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,550,            fields.monthOfYear = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,552,            fields.months = fields.monthOfYear.getDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,554,            fields.weekyear = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,556,            fields.weekyears = fields.weekyear.getDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,557,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,567,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,568,            fields.dayOfYear = new CutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,573,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,574,            fields.weekOfWeekyear = new CutoverField(,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,581,            CutoverField cf = new CutoverField,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,583,            cf.iRangeDurationField = fields.months;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,584,            fields.dayOfMonth = cf;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,586,    },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,589,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1148,"            super(durationField, durationField.getType());",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1149,            iField = dateTimeField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1150,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,627,"            this(julianField, gregorianField, cutoverMillis, false);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,628,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,638,"            this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,639,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,649,"                     DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,650,            super(gregorianField.getType());,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,651,            iJulianField = julianField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,652,            iGregorianField = gregorianField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,653,            iCutover = cutoverMillis;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,654,            iConvertByWeekyear = convertByWeekyear;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,657,            iDurationField = gregorianField.getDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,658,            if (rangeField == null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,659,                rangeField = gregorianField.getRangeDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,660,                if (rangeField == null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,661,                    rangeField = julianField.getRangeDurationField();,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,664,            iRangeDurationField = rangeField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,665,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,792,            return iDurationField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,963,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,964,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,974,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,975,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,985,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,986,            iRangeDurationField = rangeDurationField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,987,        },0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,997,        {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,998,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,999,            if (durationField == null) {,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1000,"                durationField = new LinkedDurationField(iDurationField, this);",0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1002,            iDurationField = durationField;,0.001,0,-1,0
org/joda/time/chrono/GJChronology,2,1003,        },0.001,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,73,        if (years == 0) {,0.001,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,76,"        return set(instant, get(instant) + years);",0.001,0,-1,0
org/joda/time/chrono/JulianChronology,2,253,        return MILLIS_PER_YEAR / 2;,0.001,0,-1,0
org/joda/time/chrono/JulianChronology,2,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.001,0,-1,0
org/joda/time/chrono/JulianChronology,2,224,            leapYears = (relativeYear + 3) >> 2;,0.00099,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,182,        } else if ( workWoyYear > year ) {,0.00099,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,238,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.00099,0,-1,0
org/joda/time/field/BaseDateTimeField,2,886,        long newInstant = roundFloor(instant);,0.00099,0,-1,0
org/joda/time/field/BaseDateTimeField,2,887,        if (newInstant != instant) {,0.00099,0,-1,0
org/joda/time/field/BaseDateTimeField,2,888,"            instant = add(newInstant, 1);",0.00099,0,-1,0
org/joda/time/field/BaseDateTimeField,2,890,        return instant;,0.00099,0,-1,0
org/joda/time/chrono/JulianChronology,2,211,        return (year & 3) == 0;,0.00099,0,-1,0
org/joda/time/chrono/JulianChronology,2,219,        int relativeYear = year - 1968;,0.00099,0,-1,0
org/joda/time/chrono/JulianChronology,2,221,        if (relativeYear <= 0) {,0.00099,0,-1,0
org/joda/time/chrono/JulianChronology,2,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00099,0,-1,0
org/joda/time/chrono/JulianChronology,2,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.00099,0,-1,0
org/joda/time/field/SkipDateTimeField,2,80,        int value = super.get(millis);,0.00099,0,-1,0
org/joda/time/field/SkipDateTimeField,2,81,        if (value <= iSkip) {,0.00099,0,-1,0
org/joda/time/field/SkipDateTimeField,2,84,        return value;,0.00099,0,-1,0
org/joda/time/chrono/BasicChronology,2,548,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.00099,0,-1,0
org/joda/time/chrono/BasicChronology,2,504,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,545,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,547,            if (daysSince19700101 < -3) {,0.00098,0,-1,0
org/joda/time/DateTimeUtils,2,304,        return zone;,0.00098,0,-1,0
org/joda/time/DateTimeUtils,2,301,        if (zone == null) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,134,        int thisWeekyear = get( instant );,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,135,        if ( thisWeekyear == year ) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,141,        int thisDow = iChronology.getDayOfWeek(instant);,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,156,        if ( setToWeek > maxOutWeeks ) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,163,        long workInstant = instant; // Get a copy,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,169,"        workInstant = iChronology.setYear( workInstant, year );",0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,174,        int workWoyYear = get( workInstant );,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,180,        if ( workWoyYear < year ) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,205,        return workInstant;,0.00098,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,110,        return iField.get(instant);,0.00098,0,-1,0
org/joda/time/DateTimeZone,2,1051,        if (newZone == null) {,0.00098,0,-1,0
org/joda/time/DateTimeZone,2,1054,        if (newZone == this) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,236,        int wow = iChronology.getWeekOfWeekyear(instant);,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,237,        if (wow > 1) {,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,240,        return instant;,0.00098,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,335,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,336,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,337,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.00098,0,-1,0
org/joda/time/chrono/BasicChronology,2,185,        return iMinDaysInFirstWeek;,0.00097,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,96,            instant += 1;,0.00097,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,97,            return instant - instant % iUnitMillis - iUnitMillis;,0.00097,0,-1,0
org/joda/time/chrono/JulianChronology,2,50,public final class JulianChronology extends BasicGJChronology {,0.00097,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,164,        return getMaximumValue(instant);,0.00097,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,61,        return iChronology.getWeekyear(instant);,0.00097,0,-1,0
org/joda/time/chrono/BasicChronology,2,562,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,501,        int year = getYear(instant);,0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,502,"        int week = getWeekOfWeekyear(instant, year);",0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,503,        if (week == 1) {,0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,432,                year++;,0.00096,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,113,        return DateTimeConstants.SUNDAY;,0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,352,            return jan1millis + (8 - jan1dayOfWeek),0.00096,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,104,        return DateTimeConstants.MONDAY;,0.00096,0,-1,0
org/joda/time/chrono/BasicChronology,2,422,            if (isLeapYear(year)) {,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,428,            yearStart += oneYear;,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,430,            if (yearStart <= instant) {,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,516,"        return getWeekOfWeekyear(instant, getYear(instant));",0.00095,0,-1,0
org/joda/time/DateTimeZone,2,980,            return instantUTC;,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,153,        if ((base = getBase()) != null) {,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,157,        FieldUtils.verifyValueBounds,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,524,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,525,        if (instant < firstWeekMillis1) {,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,528,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,529,        if (instant >= firstWeekMillis2) {,0.00095,0,-1,0
org/joda/time/chrono/BasicChronology,2,532,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.00095,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.00094,0,-1,0
org/joda/time/chrono/BasicChronology,2,347,        long jan1millis = getYearMillis(year);,0.00094,0,-1,0
org/joda/time/chrono/BasicChronology,2,348,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.00094,0,-1,0
org/joda/time/chrono/BasicChronology,2,350,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.00094,0,-1,0
org/joda/time/chrono/CopticChronology,2,161,"        super(base, param, minDaysInFirstWeek);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,162,    },0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,79,    },0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,108,"        return getInstance(zone, 4);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,119,        if (zone == null) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,123,        synchronized (cCache) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,124,            CopticChronology[] chronos = cCache.get(zone);,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,125,            if (chronos == null) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,126,                chronos = new CopticChronology[7];,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,127,"                cCache.put(zone, chronos);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,130,                chrono = chronos[minDaysInFirstWeek - 1];,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,134,            },0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,135,            if (chrono == null) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,136,                if (zone == DateTimeZone.UTC) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,141,                    chrono = new CopticChronology,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,144,                } else {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,151,        },0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,152,        return chrono;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,209,        int relativeYear = year - 1687;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,211,        if (relativeYear <= 0) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,214,            leapYears = (relativeYear + 3) >> 2;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,223,        long millis = (relativeYear * 365L + leapYears),0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,233,        return MIN_YEAR;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,238,        return MAX_YEAR;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,248,        if (getBase() == null) {,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,249,            super.assemble(fields);,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,252,"            fields.year = new SkipDateTimeField(this, fields.year);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,255,            fields.era = ERA_FIELD;,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,257,            fields.months = fields.monthOfYear.getDurationField();,0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,259,    },0.00093,0,-1,0
org/joda/time/chrono/CopticChronology,2,51,public final class CopticChronology extends BasicFixedMonthChronology {,0.00093,0,-1,0
org/joda/time/field/BaseDateTimeField,2,792,        return getMaximumValue();,0.00093,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,59,"        super(base, param, minDaysInFirstWeek);",0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,60,    },0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,101,        return ((month - 1) * MILLIS_PER_MONTH);,0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,143,        return 13;,0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,148,        return MILLIS_PER_YEAR;,0.00092,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,158,        return MILLIS_PER_MONTH;,0.00092,0,-1,0
org/joda/time/DateTimeZone,2,976,        int offsetOriginal = getOffset(originalInstantUTC);,0.0009,0,-1,0
org/joda/time/DateTimeZone,2,977,        long instantUTC = instantLocal - offsetOriginal;,0.0009,0,-1,0
org/joda/time/DateTimeZone,2,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0009,0,-1,0
org/joda/time/DateTimeZone,2,979,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0009,0,-1,0
org/joda/time/Instant,2,118,        super();,0.0009,0,-1,0
org/joda/time/Instant,2,119,        iMillis = instant;,0.0009,0,-1,0
org/joda/time/Instant,2,120,    },0.0009,0,-1,0
org/joda/time/chrono/GregorianChronology,2,171,        return INSTANCE_UTC;,0.0009,0,-1,0
org/joda/time/chrono/ZonedChronology,2,421,            long localInstant = iZone.convertUTCToLocal(instant);,0.0009,0,-1,0
org/joda/time/chrono/ZonedChronology,2,422,            return iField.get(localInstant);,0.0009,0,-1,0
org/joda/time/Instant,2,256,        return iMillis;,0.00089,0,-1,0
org/joda/time/field/DecoratedDurationField,2,101,        return iField.getUnitMillis();,0.00086,0,-1,0
org/joda/time/base/BaseLocal,2,48,        super();,0.00085,0,-1,0
org/joda/time/base/BaseLocal,2,49,    },0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,162,"        super(base, param, minDaysInFirstWeek);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,163,    },0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,75,    },0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,114,"        return getInstance(zone, 4);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,125,        if (zone == null) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,129,        synchronized (cCache) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,130,            JulianChronology[] chronos = cCache.get(zone);,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,131,            if (chronos == null) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,132,                chronos = new JulianChronology[7];,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,133,"                cCache.put(zone, chronos);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,140,            },0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,141,            if (chrono == null) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,142,                if (zone == DateTimeZone.UTC) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,151,        },0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,152,        return chrono;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,241,        return MIN_YEAR;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,245,        return MAX_YEAR;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,249,        return MILLIS_PER_YEAR;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,257,        return MILLIS_PER_MONTH;,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,265,        if (getBase() == null) {,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,266,            super.assemble(fields);,0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.00085,0,-1,0
org/joda/time/chrono/JulianChronology,2,271,    },0.00085,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1538,                if (i > 0) {,0.00082,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1539,                    return iWallOffsets[i - 1];,0.00082,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1577,                return transitions[i];,0.00082,0,-1,0
org/joda/time/DateTimeFieldType,2,480,            chronology = DateTimeUtils.getChronology(chronology);,0.00081,0,-1,0
org/joda/time/DateTimeFieldType,2,482,            switch (iOrdinal) {,0.00081,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1543,            if (iTailZone == null) {,0.00076,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,93,        if (instant >= 0) {,0.00074,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1579,            if (iTailZone == null) {,0.00074,0,-1,0
org/joda/time/DateTimeZone,2,949,        int offset = getOffset(instantUTC);,0.00073,0,-1,0
org/joda/time/DateTimeZone,2,950,        long instantLocal = instantUTC + offset;,0.00073,0,-1,0
org/joda/time/DateTimeZone,2,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.00073,0,-1,0
org/joda/time/DateTimeZone,2,955,        return instantLocal;,0.00073,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,51,        super(DateTimeFieldType.era());,0.00071,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,52,        iEraText = text;,0.00071,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,53,    },0.00071,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00071,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,111,        return null;,0.00071,0,-1,0
org/joda/time/DateTime,2,527,        return this;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,391,        LimitDurationField(DurationField field) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,392,"            super(field, field.getType());",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,393,        },0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,99,"        super(base, null);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,101,        iLowerLimit = lowerLimit;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,102,        iUpperLimit = upperLimit;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,103,    },0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,67,        if (base == null) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,74,        if (lowerLimit != null && upperLimit != null) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,213,"        fields.eras = convertField(fields.eras, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,214,"        fields.centuries = convertField(fields.centuries, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,215,"        fields.years = convertField(fields.years, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,216,"        fields.months = convertField(fields.months, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,217,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,218,"        fields.weeks = convertField(fields.weeks, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,219,"        fields.days = convertField(fields.days, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,221,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,222,"        fields.hours = convertField(fields.hours, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,223,"        fields.minutes = convertField(fields.minutes, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,224,"        fields.seconds = convertField(fields.seconds, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,225,"        fields.millis = convertField(fields.millis, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,229,"        fields.year = convertField(fields.year, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,233,"        fields.era = convertField(fields.era, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,239,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,253,    },0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,256,        if (field == null || !field.isSupported()) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,257,            return field;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,259,        if (converted.containsKey(field)) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,260,            return (DurationField)converted.get(field);,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,262,        LimitDurationField limitField = new LimitDurationField(field);,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,263,"        converted.put(field, limitField);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,264,        return limitField;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,268,        if (field == null || !field.isSupported()) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,271,        if (converted.containsKey(field)) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,274,        LimitDateTimeField limitField =,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,279,"        converted.put(field, limitField);",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,280,        return limitField;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,454,                           DurationField leapDurationField) {,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,455,"            super(field, field.getType());",0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,456,            iDurationField = durationField;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,457,            iRangeDurationField = rangeDurationField;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,458,            iLeapDurationField = leapDurationField;,0.00071,0,-1,0
org/joda/time/chrono/LimitChronology,2,459,        },0.00071,0,-1,0
org/joda/time/DateTime,2,518,    },0.0007,0,-1,0
org/joda/time/DateTime,2,516,"        super(year, monthOfYear, dayOfMonth,",0.0007,0,-1,0
org/joda/time/DateTimeUtils,2,285,            return ISOChronology.getInstance();,0.00067,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,102,        return iField.isSupported();,0.00067,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,225,        return iField.getLeapDurationField();,0.00067,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,206,        return iField.getDurationField();,0.00067,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,94,        return iType;,0.00066,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,210,        if (iRangeDurationField != null) {,0.00064,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,213,        return iField.getRangeDurationField();,0.00064,0,-1,0
org/joda/time/base/AbstractPartial,2,54,        super();,0.00063,0,-1,0
org/joda/time/base/AbstractPartial,2,55,    },0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,54,"        this(chronology, field, 0);",0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,55,    },0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,65,        super(field);,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,66,        iChronology = chronology;,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,67,        int min = super.getMinimumValue();,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,68,        if (min < skip) {,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,69,            iMinValue = min - 1;,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,75,        iSkip = skip;,0.00063,0,-1,0
org/joda/time/field/SkipDateTimeField,2,76,    },0.00063,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,229,        return iField.getMinimumValue();,0.00063,0,-1,0
org/joda/time/chrono/BasicChronology,2,443,"        return getMonthOfYear(millis, getYear(millis));",0.00063,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,225,        return iChronology.getMinYear();,0.00063,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,54,"        this(field, null);",0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,55,    },0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,64,"        this(field, null, type);",0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,65,    },0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,75,        super();,0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,76,        if (field == null) {,0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,79,        iField = field;,0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,80,        iRangeDurationField = rangeField;,0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,81,        iType = (type == null ? field.getType() : type);,0.00062,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,82,    },0.00062,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,73,        return iChronology.getMonthOfYear(instant);,0.00062,0,-1,0
org/joda/time/chrono/GregorianChronology,2,213,                leapYears--;,0.00061,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,116,        return iChronology.getMinYear();,0.0006,0,-1,0
org/joda/time/chrono/AssembledChronology,2,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.00058,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,166,        return getWrappedField().getLeapDurationField();,0.00058,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,57,        return iChronology.getDayOfWeek(instant);,0.00057,0,-1,0
org/joda/time/field/DividedDateTimeField,2,131,        return super.getRangeDurationField();,0.00057,0,-1,0
org/joda/time/chrono/BasicChronology,2,542,        if (instant >= 0) {,0.00057,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,0.00056,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,97,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,301,        int thisYear = iChronology.getYear(instant);,0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,304,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,305,        if (thisDom > maxDom) {,0.00056,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,310,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.00056,0,-1,0
org/joda/time/chrono/BasicChronology,2,466,"        int month = getMonthOfYear(millis, year);",0.00056,0,-1,0
org/joda/time/chrono/BasicChronology,2,467,"        return getDayOfMonth(millis, year, month);",0.00056,0,-1,0
org/joda/time/chrono/BasicChronology,2,167,        if ((base = getBase()) != null) {,0.00055,0,-1,0
org/joda/time/chrono/BasicChronology,2,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.00055,0,-1,0
org/joda/time/chrono/BasicChronology,2,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.00055,0,-1,0
org/joda/time/chrono/BasicChronology,2,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.00055,0,-1,0
org/joda/time/chrono/BasicChronology,2,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.00055,0,-1,0
org/joda/time/chrono/BasicChronology,2,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.00055,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,83,        FieldUtils.verifyValueBounds,0.00055,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,85,"        return iChronology.setYear(instant, year);",0.00055,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.00054,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,113,        return instant + (value - get(instant)) * iUnitMillis;,0.00054,0,-1,0
org/joda/time/chrono/BasicChronology,2,560,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.00054,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,79,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.00054,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,81,        return instant + (value - get(instant)) * iUnitMillis;,0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,175,        int thisYear = getYear(instant);,0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,177,        int millisOfDay = getMillisOfDay(instant);,0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,196,        instant += millisOfDay;,0.00054,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,198,        return instant;,0.00054,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,56,        return 1;,0.00054,0,-1,0
org/joda/time/chrono/BasicChronology,2,493,        long yearStart = getYearMillis(year);,0.00053,0,-1,0
org/joda/time/chrono/BasicChronology,2,494,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00053,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,160,                break;,0.00053,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1536,            i = ~i;,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1537,            if (i < transitions.length) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,103,        return getInfo(instant).getOffset(instant);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,197,                if (iOffset == Integer.MIN_VALUE) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,200,                return iOffset;,0.00052,0,-1,0
org/joda/time/chrono/BasicChronology,2,559,        if (instant >= 0) {,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1531,            long[] transitions = iTransitions;,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1532,"            int i = Arrays.binarySearch(transitions, instant);",0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1533,            if (i >= 0) {,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1573,            long[] transitions = iTransitions;,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1574,"            int i = Arrays.binarySearch(transitions, instant);",0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1575,            i = (i >= 0) ? (i + 1) : ~i;,0.00052,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1576,            if (i < transitions.length) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,140,        int period = (int)(millis >> 32);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,141,        Info[] cache = iInfoCache;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,142,        int index = period & cInfoCacheMask;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,143,        Info info = cache[index];,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,145,            info = createInfo(millis);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,146,            cache[index] = info;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,148,        return info;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,152,        long periodStart = millis & (0xffffffffL << 32);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,153,"        Info info = new Info(iZone, periodStart);",0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,155,        long end = periodStart | 0xffffffffL;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,156,        Info chain = info;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,158,            long next = iZone.nextTransition(periodStart);,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,159,            if (next == periodStart || next > end) {,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,166,        return info;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,180,"        Info(DateTimeZone zone, long periodStart) {",0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,177,        private int iOffset = Integer.MIN_VALUE;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,181,            iPeriodStart = periodStart;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,182,            iZoneRef = zone;,0.00052,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,183,        },0.00052,0,-1,0
org/joda/time/base/BaseDateTime,2,256,"        iMillis = checkInstant(instant, iChronology);",0.00049,0,-1,0
org/joda/time/base/BaseDateTime,2,257,    },0.00049,0,-1,0
org/joda/time/base/BaseDateTime,2,252,        super();,0.00049,0,-1,0
org/joda/time/base/BaseDateTime,2,253,        iChronology = checkChronology(chronology);,0.00049,0,-1,0
org/joda/time/base/BaseDateTime,2,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00049,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,132,        return iRange - 1;,0.00049,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.00049,0,-1,0
org/joda/time/chrono/BasicChronology,2,456,        int year = getYear(millis);,0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,457,"        int month = getMonthOfYear(millis, year);",0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,458,"        return getDayOfMonth(millis, year, month);",0.00048,0,-1,0
org/joda/time/field/FieldUtils,2,238,    },0.00048,0,-1,0
org/joda/time/field/FieldUtils,2,233,        if ((value < lowerBound) || (value > upperBound)) {,0.00048,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,48,        return iChronology.getDayOfMonth(instant);,0.00048,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,55,        return iChronology.getYear(instant);,0.00048,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00048,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,80,        if (instant >= 0) {,0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,476,        long dateMillis = getYearMillis(year);,0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,477,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,478,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00048,0,-1,0
org/joda/time/chrono/BasicChronology,2,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,614,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.00047,0,-1,0
org/joda/time/field/FieldUtils,2,256,    },0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,611,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,690,        return getMaxMonth();,0.00047,0,-1,0
org/joda/time/field/FieldUtils,2,251,        if ((value < lowerBound) || (value > upperBound)) {,0.00047,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.00047,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,93,        return,0.00047,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,120,        if (isLeapYear(year)) {,0.00047,0,-1,0
org/joda/time/chrono/GregorianChronology,2,233,        return MILLIS_PER_YEAR / 2;,0.00047,0,-1,0
org/joda/time/chrono/GregorianChronology,2,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,407,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,408,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,409,        if (i2 < 0) {,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,412,        int year = (int) (i2 / unitMillis);,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,414,        long yearStart = getYearMillis(year);,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,415,        long diff = instant - yearStart;,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,417,        if (diff < 0) {,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,419,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.00047,0,-1,0
org/joda/time/chrono/BasicChronology,2,436,        return year;,0.00047,0,-1,0
org/joda/time/chrono/GregorianChronology,2,221,        return MIN_YEAR;,0.00046,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,139,        if (isLeapYear(year)) {,0.00046,0,-1,0
org/joda/time/chrono/ISOChronology,2,77,        return INSTANCE_UTC;,0.00046,0,-1,0
org/joda/time/chrono/GregorianChronology,2,202,        int leapYears = year / 100;,0.00046,0,-1,0
org/joda/time/chrono/GregorianChronology,2,203,        if (year < 0) {,0.00046,0,-1,0
org/joda/time/chrono/GregorianChronology,2,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.00046,0,-1,0
org/joda/time/chrono/GregorianChronology,2,212,            if (isLeapYear(year)) {,0.00046,0,-1,0
org/joda/time/chrono/GregorianChronology,2,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.00046,0,-1,0
org/joda/time/chrono/ISOChronology,2,86,        return getInstance(DateTimeZone.getDefault());,0.00045,0,-1,0
org/joda/time/chrono/GregorianChronology,2,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.00045,0,-1,0
org/joda/time/base/BaseDateTime,2,284,        return instant;,0.00044,0,-1,0
org/joda/time/base/BaseDateTime,2,270,        return DateTimeUtils.getChronology(chronology);,0.00043,0,-1,0
org/joda/time/base/AbstractDateTime,2,51,        super();,0.00043,0,-1,0
org/joda/time/base/AbstractDateTime,2,52,    },0.00043,0,-1,0
org/joda/time/chrono/BasicChronology,2,393,        long millis = getYearMillis(year);,0.00042,0,-1,0
org/joda/time/chrono/BasicChronology,2,394,"        millis += getTotalMillisByYearMonth(year, month);",0.00042,0,-1,0
org/joda/time/chrono/BasicChronology,2,395,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00042,0,-1,0
org/joda/time/chrono/BasicChronology,2,368,        return getYearInfo(year).iFirstDayMillis;,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,746,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,747,        if (info == null || info.iYear != year) {,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,748,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,749,            iYearInfoCache[year & CACHE_MASK] = info;,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,751,        return info;,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,779,"        YearInfo(int year, long firstDayMillis) {",0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,780,            iYear = year;,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,781,            iFirstDayMillis = firstDayMillis;,0.00041,0,-1,0
org/joda/time/chrono/BasicChronology,2,782,        },0.00041,0,-1,0
org/joda/time/base/AbstractInstant,2,61,        super();,0.00041,0,-1,0
org/joda/time/base/AbstractInstant,2,62,    },0.00041,0,-1,0
org/joda/time/chrono/ISOChronology,2,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00038,0,-1,0
org/joda/time/chrono/ISOChronology,2,108,"                cCache.put(zone, chrono);",0.00038,0,-1,0
org/joda/time/chrono/ISOChronology,2,96,        if (zone == null) {,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,100,        ISOChronology chrono = cFastCache[index];,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,101,        if (chrono != null && chrono.getZone() == zone) {,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,104,        synchronized (cCache) {,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,105,            chrono = cCache.get(zone);,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,106,            if (chrono == null) {,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,110,        },0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,111,        cFastCache[index] = chrono;,0.00037,0,-1,0
org/joda/time/chrono/ISOChronology,2,112,        return chrono;,0.00037,0,-1,0
org/joda/time/field/DividedDateTimeField,2,129,            return iRangeDurationField;,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,114,        checkPermission();,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,116,    },0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,547,        FixedMillisProvider(long fixedMillis) {,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,548,            iMillis = fixedMillis;,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,549,        },0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,100,        checkPermission();,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,102,    },0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,161,        SecurityManager sm = System.getSecurityManager();,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,162,        if (sm != null) {,0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,165,    },0.00035,0,-1,0
org/joda/time/DateTimeUtils,2,287,        return chrono;,0.00035,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00033,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,132,        return null;,0.00033,0,-1,0
org/joda/time/chrono/ISOChronology,2,133,        return INSTANCE_UTC;,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,175,        SecurityManager sm = System.getSecurityManager();,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,176,        if (sm != null) {,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,179,        if (zone == null) {,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,182,        synchronized(DateTimeZone.class) {,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,183,            cDefault = zone;,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,184,        },0.00033,0,-1,0
org/joda/time/DateTimeZone,2,185,    },0.00033,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,123,        return iZone.hashCode();,0.00033,0,-1,0
org/joda/time/DateTimeZone,2,1273,        return 57 + getID().hashCode();,0.00032,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,218,        return 0;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,81,"        super(base, zone);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,82,    },0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,55,        if (base == null) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,58,        base = base.withUTC();,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,59,        if (base == null) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,62,        if (zone == null) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,65,"        return new ZonedChronology(base, zone);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,85,        return (DateTimeZone)getParam();,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,154,"        fields.eras = convertField(fields.eras, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,155,"        fields.centuries = convertField(fields.centuries, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,156,"        fields.years = convertField(fields.years, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,157,"        fields.months = convertField(fields.months, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,159,"        fields.weeks = convertField(fields.weeks, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,160,"        fields.days = convertField(fields.days, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,163,"        fields.hours = convertField(fields.hours, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,164,"        fields.minutes = convertField(fields.minutes, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,165,"        fields.seconds = convertField(fields.seconds, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,166,"        fields.millis = convertField(fields.millis, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,170,"        fields.year = convertField(fields.year, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,174,"        fields.era = convertField(fields.era, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,180,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,194,    },0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,197,        if (field == null || !field.isSupported()) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,198,            return field;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,200,        if (converted.containsKey(field)) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,201,            return (DurationField)converted.get(field);,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,204,"        converted.put(field, zonedField);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,205,        return zonedField;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,209,        if (field == null || !field.isSupported()) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,212,        if (converted.containsKey(field)) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,215,        ZonedDateTimeField zonedField =,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,220,"        converted.put(field, zonedField);",0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,221,        return zonedField;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,281,            super(field.getType());,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,282,            if (!field.isSupported()) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,285,            iField = field;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,286,            iTimeField = useTimeArithmetic(field);,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,287,            iZone = zone;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,288,        },0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,295,            return iField.getUnitMillis();,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,404,            super(field.getType());,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,405,            if (!field.isSupported()) {,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,408,            iField = field;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,409,            iZone = zone;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,410,            iDurationField = durationField;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,411,            iTimeField = useTimeArithmetic(durationField);,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,412,            iRangeDurationField = rangeDurationField;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,413,            iLeapDurationField = leapDurationField;,0.00032,0,-1,0
org/joda/time/chrono/ZonedChronology,2,414,        },0.00032,0,-1,0
org/joda/time/field/ScaledDurationField,2,109,        return getWrappedField().getUnitMillis() * iScalar;,0.00032,0,-1,0
org/joda/time/chrono/AssembledChronology,2,315,        return iParam;,0.00032,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,161,            return iUnitMillis;,0.00032,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,57,        return iChronology.years();,0.00031,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,59,        return iChronology.weekyears();,0.00031,0,-1,0
org/joda/time/field/MillisDurationField,2,155,        return (int) getUnitMillis();,0.00031,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,102,        return getWrappedField().getLeapDurationField();,0.00031,0,-1,0
org/joda/time/field/ScaledDurationField,2,147,        long scalar = iScalar;,0.00031,0,-1,0
org/joda/time/field/ScaledDurationField,2,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.00031,0,-1,0
org/joda/time/field/ScaledDurationField,2,149,        hash += getType().hashCode();,0.00031,0,-1,0
org/joda/time/field/ScaledDurationField,2,150,        hash += getWrappedField().hashCode();,0.00031,0,-1,0
org/joda/time/field/ScaledDurationField,2,151,        return hash;,0.00031,0,-1,0
org/joda/time/field/PreciseDurationField,2,142,        long millis = iUnitMillis;,0.00031,0,-1,0
org/joda/time/field/PreciseDurationField,2,143,        int hash = (int) (millis ^ (millis >>> 32));,0.00031,0,-1,0
org/joda/time/field/PreciseDurationField,2,144,        hash += getType().hashCode();,0.00031,0,-1,0
org/joda/time/field/PreciseDurationField,2,145,        return hash;,0.00031,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,335,        return iChronology.days();,0.00031,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,112,        return iChronology.days();,0.00031,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,221,        return iChronology.weeks();,0.00031,0,-1,0
org/joda/time/field/MillisDurationField,2,49,        return DurationFieldType.millis();,0.00031,0,-1,0
org/joda/time/field/BaseDateTimeField,2,726,        return null;,0.00031,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,95,        return iChronology.weeks();,0.00031,0,-1,0
org/joda/time/field/DecoratedDurationField,2,69,        return iField;,0.00031,0,-1,0
org/joda/time/DateTimeUtils,2,284,        if (chrono == null) {,0.00031,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,173,        return iDurationField;,0.00031,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,180,        return iRangeField;,0.00031,0,-1,0
org/joda/time/field/DividedDateTimeField,2,128,        if (iRangeDurationField != null) {,0.00031,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,209,        return null;,0.00031,0,-1,0
org/joda/time/field/BaseDurationField,2,55,        return iType;,0.00031,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,316,        return iChronology.years();,0.00031,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,52,        return iChronology.months();,0.00031,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,96,        return null;,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,122,"        super(base, null);",0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,123,    },0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,68,    },0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,173,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,175,            fields.yearOfCentury = new RemainderDateTimeField(,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,177,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00031,0,-1,0
org/joda/time/chrono/ISOChronology,2,180,    },0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,48,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,49,    },0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,42,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,53,        return GregorianChronology.getInstanceUTC().eras();,0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,94,        return 0;,0.00031,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,98,        return getWrappedField().getMaximumValue();,0.00031,0,-1,0
org/joda/time/chrono/GregorianChronology,2,81,        return INSTANCE_UTC;,0.00031,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,123,        return iRangeField;,0.0003,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,142,        return iUnitField;,0.0003,0,-1,0
org/joda/time/chrono/BasicChronology,2,146,        return DateTimeZone.UTC;,0.0003,0,-1,0
org/joda/time/chrono/BasicChronology,2,143,        if ((base = getBase()) != null) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,45,public final class GregorianChronology extends BasicGJChronology {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,148,"        super(base, param, minDaysInFirstWeek);",0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,149,    },0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,72,    },0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,100,"        return getInstance(zone, 4);",0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,111,        if (zone == null) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,115,        synchronized (cCache) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,116,            GregorianChronology[] chronos = cCache.get(zone);,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,117,            if (chronos == null) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,118,                chronos = new GregorianChronology[7];,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,119,"                cCache.put(zone, chronos);",0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,126,            },0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,127,            if (chrono == null) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,128,                if (zone == DateTimeZone.UTC) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,137,        },0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,138,        return chrono;,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,191,        if (getBase() == null) {,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,192,            super.assemble(fields);,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,194,    },0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,225,        return MAX_YEAR;,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,229,        return MILLIS_PER_YEAR;,0.0003,0,-1,0
org/joda/time/chrono/GregorianChronology,2,237,        return MILLIS_PER_MONTH;,0.0003,0,-1,0
org/joda/time/chrono/BasicChronology,2,699,        return 12;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,75,"        super(base, param, minDaysInFirstWeek);",0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,76,    },0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,56,        long minSum = 0;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,57,        long maxSum = 0;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,58,        for (int i = 0; i < 11; i++) {,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,61,            minSum += millis;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,66,            maxSum += millis;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.0003,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,69,    },0.0003,0,-1,0
org/joda/time/chrono/AssembledChronology,2,321,            fields.copyFieldsFrom(iBase);,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,372,            flags = ,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,148,                        },0.00029,0,-1,0
org/joda/time/DateTimeZone,2,134,        DateTimeZone zone = cDefault;,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,135,        if (zone == null) {,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,136,            synchronized(DateTimeZone.class) {,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,137,                zone = cDefault;,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,138,                if (zone == null) {,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,139,                    DateTimeZone temp = null;,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,142,"                            String id = System.getProperty(""user.timezone"");",0.00029,0,-1,0
org/joda/time/DateTimeZone,2,143,                            if (id != null) {  // null check avoids stack overflow,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,144,                                temp = forID(id);,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,149,                        if (temp == null) {,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,154,                    },0.00029,0,-1,0
org/joda/time/DateTimeZone,2,155,                    if (temp == null) {,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,158,                    cDefault = zone = temp;,0.00029,0,-1,0
org/joda/time/DateTimeZone,2,160,            },0.00029,0,-1,0
org/joda/time/DateTimeZone,2,162,        return zone;,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,92,        return false;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,156,        return iMillis;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,160,        return iMillisOfSecond;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,164,        return iMillisOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,168,        return iSeconds;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,172,        return iSecondOfMinute;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,176,        return iSecondOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,180,        return iMinutes;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,184,        return iMinuteOfHour;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,188,        return iMinuteOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,192,        return iHours;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,196,        return iHourOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,200,        return iClockhourOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,204,        return iHalfdays;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,208,        return iHourOfHalfday;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,212,        return iClockhourOfHalfday;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,216,        return iHalfdayOfDay;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,220,        return iDays;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,224,        return iDayOfWeek;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,228,        return iDayOfMonth;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,232,        return iDayOfYear;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,236,        return iWeeks;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,240,        return iWeekOfWeekyear;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,244,        return iWeekyears;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,248,        return iWeekyear;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,252,        return iWeekyearOfCentury;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,256,        return iMonths;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,260,        return iMonthOfYear;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,264,        return iYears;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,272,        return iYearOfEra;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,276,        return iYearOfCentury;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,280,        return iCenturies;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,284,        return iCenturyOfEra;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,292,        return iEra;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,445,                if (isSupported(f = chrono.millis())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,446,                    millis = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,448,                if (isSupported(f = chrono.seconds())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,449,                    seconds = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,451,                if (isSupported(f = chrono.minutes())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,452,                    minutes = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,454,                if (isSupported(f = chrono.hours())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,455,                    hours = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,457,                if (isSupported(f = chrono.halfdays())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,458,                    halfdays = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,460,                if (isSupported(f = chrono.days())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,461,                    days = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,463,                if (isSupported(f = chrono.weeks())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,464,                    weeks = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,466,                if (isSupported(f = chrono.weekyears())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,467,                    weekyears = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,469,                if (isSupported(f = chrono.months())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,470,                    months = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,472,                if (isSupported(f = chrono.years())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,473,                    years = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,475,                if (isSupported(f = chrono.centuries())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,476,                    centuries = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,478,                if (isSupported(f = chrono.eras())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,486,                    millisOfSecond = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,489,                    millisOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,492,                    secondOfMinute = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,495,                    secondOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,498,                    minuteOfHour = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,501,                    minuteOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,504,                    hourOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,507,                    clockhourOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,510,                    hourOfHalfday = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,513,                    clockhourOfHalfday = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,516,                    halfdayOfDay = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,519,                    dayOfWeek = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,522,                    dayOfMonth = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,525,                    dayOfYear = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,528,                    weekOfWeekyear = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,530,                if (isSupported(f = chrono.weekyear())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,531,                    weekyear = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,534,                    weekyearOfCentury = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,537,                    monthOfYear = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,539,                if (isSupported(f = chrono.year())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,540,                    year = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,543,                    yearOfEra = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,546,                    yearOfCentury = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,549,                    centuryOfEra = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,551,                if (isSupported(f = chrono.era())) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,552,                    era = f;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,555,        },0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,558,            return field == null ? false : field.isSupported();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,562,            return field == null ? false : field.isSupported();,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,53,            field = cCache.get(type);,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,268,        return iYear;,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,56,        super(type);,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,57,        iUnitMillis = unitMillis;,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,58,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,59,    },0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,138,        return iDurationField;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,164,        return MILLIS_OF_SECOND_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,173,        return MILLIS_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,209,        return MINUTE_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,218,        return HOUR_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,236,        return HOUR_OF_HALFDAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,254,        return HALFDAY_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,264,        return DAY_OF_WEEK_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,282,        return DAY_OF_YEAR_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,300,        return WEEKYEAR_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,318,        return MONTH_OF_YEAR_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,336,        return YEAR_OF_ERA_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,345,        return YEAR_OF_CENTURY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,354,        return CENTURY_OF_ERA_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,363,        return ERA_TYPE;,0.00029,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,46,"        super(field, type);",0.00029,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,47,        if (field.getMinimumValue() != 0) {,0.00029,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,50,    },0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,55,        super(type);,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,56,        if (field == null) {,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,59,        if (!field.isSupported()) {,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,62,        iField = field;,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,63,    },0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,71,        return iField;,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,87,        return iField.getDurationField();,0.00029,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,91,        return iField.getRangeDurationField();,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,82,"        super(field, type);",0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,83,        if (divisor < 2) {,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,86,        iRangeField = rangeField;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,87,        iDurationField = field.getDurationField();,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,88,        iDivisor = divisor;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,89,    },0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,98,"        this(dividedField, dividedField.getType());",0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,99,    },0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,109,"        this(dividedField, dividedField.getWrappedField().getDurationField(), type);",0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,110,    },0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,122,"        super(dividedField.getWrappedField(), type);",0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,123,        iDivisor = dividedField.iDivisor;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,124,        iDurationField = durationField;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,125,        iRangeField = dividedField.iDurationField;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,126,    },0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,189,        return 0;,0.00029,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,199,        return iDivisor - 1;,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,58,"        this(field, field.getRangeDurationField(), type, divisor);",0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,59,    },0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,72,"        super(field, type);",0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,73,        if (divisor < 2) {,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,76,        DurationField unitField = field.getDurationField();,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,77,        if (unitField == null) {,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,80,            iDurationField = new ScaledDurationField(,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,83,        iRangeDurationField = rangeField;,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,84,        iDivisor = divisor;,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,85,        int i = field.getMinimumValue();,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,86,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,87,        int j = field.getMaximumValue();,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,88,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,89,        iMin = min;,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,90,        iMax = max;,0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,91,    },0.00029,0,-1,0
org/joda/time/field/DividedDateTimeField,2,211,        return iDurationField;,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,152,        LinkedDurationField(DurationFieldType type) {,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,153,            super(type);,0.00029,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,154,        },0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,47,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,48,    },0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,59,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,60,    },0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,74,"        super(field, type);",0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,76,        if (offset == 0) {,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,80,        iOffset = offset;,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,82,        if (minValue < (field.getMinimumValue() + offset)) {,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,83,            iMin = field.getMinimumValue() + offset;,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,87,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,88,            iMax = field.getMaximumValue() + offset;,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,92,    },0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,175,        return iMin;,0.00029,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,184,        return iMax;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,452,            return iUnitType;,0.00029,0,-1,0
org/joda/time/chrono/BaseChronology,2,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,100,        iBase = base;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,101,        iParam = param;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,102,        setFields();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,103,    },0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,288,        return iEras;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,308,        return iBase;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,319,        Fields fields = new Fields();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,320,        if (iBase != null) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,323,        assemble(fields);,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,369,        if (iBase == null) {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,370,            flags = 0;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,385,        iBaseFlags = flags;,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,386,    },0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,760,        },0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,436,        Fields() {,0.00029,0,-1,0
org/joda/time/chrono/AssembledChronology,2,437,        },0.00029,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,52,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00029,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,53,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,54,        iMax = iChronology.getMaxMonth();,0.00029,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,55,        iLeapMonth = leapMonth;,0.00029,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,56,    },0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,131,"        super(base, param);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,139,    },0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,76,        cMillisField = MillisDurationField.INSTANCE;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,77,        cSecondsField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,79,        cMinutesField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,81,        cHoursField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,83,        cHalfdaysField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,85,        cDaysField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,87,        cWeeksField = new PreciseDurationField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,93,        cMillisOfDayField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,99,        cSecondOfDayField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,108,        cHourOfDayField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,120,        cHalfdayOfDayField = new HalfdayField();,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,121,    },0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,250,        fields.millis = cMillisField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,251,        fields.seconds = cSecondsField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,252,        fields.minutes = cMinutesField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,253,        fields.hours = cHoursField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,254,        fields.halfdays = cHalfdaysField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,255,        fields.days = cDaysField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,256,        fields.weeks = cWeeksField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,258,        fields.millisOfSecond = cMillisOfSecondField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,259,        fields.millisOfDay = cMillisOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,260,        fields.secondOfMinute = cSecondOfMinuteField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,261,        fields.secondOfDay = cSecondOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,262,        fields.minuteOfHour = cMinuteOfHourField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,263,        fields.minuteOfDay = cMinuteOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,264,        fields.hourOfDay = cHourOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,265,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,266,        fields.clockhourOfDay = cClockhourOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,268,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,273,        fields.year = new BasicYearDateTimeField(this);,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,277,        DateTimeField field = new OffsetDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,279,        fields.centuryOfEra = new DividedDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,281,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,283,        field = new RemainderDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,285,        fields.yearOfCentury = new OffsetDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,288,        fields.era = new GJEraDateTimeField(this);,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,289,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,290,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,291,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,292,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,293,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,294,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,296,        field = new RemainderDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,298,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,303,        fields.years = fields.year.getDurationField();,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,304,        fields.months = fields.monthOfYear.getDurationField();,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,305,        fields.weekyears = fields.weekyear.getDurationField();,0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,306,    },0.00029,0,-1,0
org/joda/time/chrono/BasicChronology,2,50,abstract class BasicChronology extends AssembledChronology {,0.00029,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,46,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00029,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,47,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,48,    },0.00029,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,120,        return iChronology.getMaxYear();,0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,42,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,43,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,44,    },0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,48,        return iChronology.eras();,0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,100,        return 1;,0.00029,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,104,        return getWrappedField().getMaximumValue();,0.00029,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,47,        super(DateTimeFieldType.era());,0.00029,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,48,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,49,    },0.00029,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,46,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00029,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,47,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,48,    },0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,42,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,43,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,44,    },0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,42,"        super(DateTimeFieldType.dayOfYear(), days);",0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,43,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,44,    },0.00029,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,38,"        super(chronology, 2);",0.00029,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,39,    },0.00029,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,45,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00029,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,46,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,47,    },0.00029,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,43,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00029,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,44,        iChronology = chronology;,0.00029,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,45,    },0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,273,        return DAY_OF_MONTH_TYPE;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,327,        return YEAR_TYPE;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationField,2,54,        return true;,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,71,        iType = type;,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,72,    },0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,49,        if (cCache == null) {,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,51,            field = null;,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,55,        if (field == null) {,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,56,            field = new UnsupportedDurationField(type);,0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,57,"            cCache.put(type, field);",0.00029,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,59,        return field;,0.00029,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,200,        return MINUTE_OF_HOUR_TYPE;,0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,71,        return true;,0.00029,0,-1,0
org/joda/time/field/BaseDurationField,2,66,        return true;,0.00029,0,-1,0
org/joda/time/field/BaseDateTimeField,2,69,        return true;,0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,80,        return 1;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationField,2,63,        return iUnitMillis;,0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,191,        return SECOND_OF_DAY_TYPE;,0.00029,0,-1,0
org/joda/time/field/BaseDateTimeField,2,58,        return iType;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,151,        return 0;,0.00029,0,-1,0
org/joda/time/Chronology,2,63,public abstract class Chronology {,0.00029,0,-1,0
org/joda/time/chrono/BaseChronology,2,54,        super();,0.00029,0,-1,0
org/joda/time/chrono/BaseChronology,2,55,    },0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,62,        return true;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationField,2,43,        super(type);,0.00029,0,-1,0
org/joda/time/field/PreciseDurationField,2,44,        iUnitMillis = unitMillis;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationField,2,45,    },0.00029,0,-1,0
org/joda/time/field/DecoratedDurationField,2,52,        super(type);,0.00029,0,-1,0
org/joda/time/field/DecoratedDurationField,2,53,        if (field == null) {,0.00029,0,-1,0
org/joda/time/field/DecoratedDurationField,2,56,        if (!field.isSupported()) {,0.00029,0,-1,0
org/joda/time/field/DecoratedDurationField,2,59,        iField = field;,0.00029,0,-1,0
org/joda/time/field/DecoratedDurationField,2,60,    },0.00029,0,-1,0
org/joda/time/field/ScaledDurationField,2,47,"        super(field, type);",0.00029,0,-1,0
org/joda/time/field/ScaledDurationField,2,48,        if (scalar == 0 || scalar == 1) {,0.00029,0,-1,0
org/joda/time/field/ScaledDurationField,2,51,        iScalar = scalar;,0.00029,0,-1,0
org/joda/time/field/ScaledDurationField,2,52,    },0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,58,"        super(type, unit);",0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,60,        if (!range.isPrecise()) {,0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,64,        long rangeMillis = range.getUnitMillis();,0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,65,        iRange = (int)(rangeMillis / getUnitMillis());,0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,66,        if (iRange < 2) {,0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,70,        iRangeField = range;,0.00029,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,71,    },0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,155,        return iUnitMillis;,0.00029,0,-1,0
org/joda/time/DurationFieldType,2,278,            return (1 << iOrdinal);,0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,44,        super();,0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,45,    },0.00029,0,-1,0
org/joda/time/field/MillisDurationField,2,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,49,        super(type);,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,51,        if (!unit.isPrecise()) {,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,55,        iUnitMillis = unit.getUnitMillis();,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,56,        if (iUnitMillis < 1) {,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,60,        iUnitField = unit;,0.00029,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,61,    },0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,526,    static class SystemMillisProvider implements MillisProvider {,0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,41,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,43,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,49,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,50,"        map.put(""UT"", DateTimeZone.UTC);",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,51,"        map.put(""UTC"", DateTimeZone.UTC);",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,52,"        map.put(""GMT"", DateTimeZone.UTC);",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,53,"        put(map, ""EST"", ""America/New_York"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,54,"        put(map, ""EDT"", ""America/New_York"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,55,"        put(map, ""CST"", ""America/Chicago"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,56,"        put(map, ""CDT"", ""America/Chicago"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,57,"        put(map, ""MST"", ""America/Denver"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,58,"        put(map, ""MDT"", ""America/Denver"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,59,"        put(map, ""PST"", ""America/Los_Angeles"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,60,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,61,        cZoneNames = Collections.unmodifiableMap(map);,0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,62,    },0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,65,"            map.put(name, DateTimeZone.forID(id));",0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,68,        },0.00029,0,-1,0
org/joda/time/DateTimeUtils,2,69,    },0.00029,0,-1,0
org/joda/time/DateTimeFieldType,2,182,        return SECOND_OF_MINUTE_TYPE;,0.00028,0,-1,0
org/joda/time/field/BaseDateTimeField,2,50,        super();,0.00028,0,-1,0
org/joda/time/field/BaseDateTimeField,2,51,        if (type == null) {,0.00028,0,-1,0
org/joda/time/field/BaseDateTimeField,2,54,        iType = type;,0.00028,0,-1,0
org/joda/time/field/BaseDateTimeField,2,55,    },0.00028,0,-1,0
org/joda/time/DateTimeField,2,33,public abstract class DateTimeField {,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,153,        super();,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,154,        iName = name;,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,155,    },0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,141,        return HALFDAYS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,169,        return WEEKYEARS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,205,        return ERAS_TYPE;,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,444,            super(name);,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,445,            iOrdinal = ordinal;,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,446,            iUnitType = unitType;,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,447,            iRangeType = rangeType;,0.00028,0,-1,0
org/joda/time/DateTimeFieldType,2,448,        },0.00028,0,-1,0
org/joda/time/DurationFieldType,2,196,        return CENTURIES_TYPE;,0.00028,0,-1,0
org/joda/time/field/BaseDurationField,2,47,        super();,0.00028,0,-1,0
org/joda/time/field/BaseDurationField,2,48,        if (type == null) {,0.00028,0,-1,0
org/joda/time/field/BaseDurationField,2,51,        iType = type;,0.00028,0,-1,0
org/joda/time/field/BaseDurationField,2,52,    },0.00028,0,-1,0
org/joda/time/DurationField,2,30,public abstract class DurationField implements Comparable<DurationField> {,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,105,        return MILLIS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,178,        return MONTHS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,187,        return YEARS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,160,        return WEEKS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,132,        return HOURS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,151,        return DAYS_TYPE;,0.00028,0,-1,0
org/joda/time/DurationFieldType,2,114,        return SECONDS_TYPE;,0.00027,0,-1,0
org/joda/time/DurationFieldType,2,123,        return MINUTES_TYPE;,0.00027,0,-1,0
org/joda/time/DateTimeZone,2,213,            return zone;,0.00027,0,-1,0
org/joda/time/DateTimeZone,2,205,        if (id == null) {,0.00027,0,-1,0
org/joda/time/DateTimeZone,2,208,"        if (id.equals(""UTC"")) {",0.00027,0,-1,0
org/joda/time/DateTimeZone,2,211,        DateTimeZone zone = cProvider.getZone(id);,0.00027,0,-1,0
org/joda/time/DateTimeZone,2,212,        if (zone != null) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,504,        {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,509,            iMode = mode;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,510,            iMonthOfYear = monthOfYear;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,511,            iDayOfMonth = dayOfMonth;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,512,            iDayOfWeek = dayOfWeek;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,513,            iAdvance = advanceDayOfWeek;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,514,            iMillisOfDay = millisOfDay;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,515,        },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,146,            return loadZoneData(id);,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,223,        InputStream in = null;,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,225,            in = openResource(id);,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,226,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,227,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,228,            return tz;,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,235,                if (in != null) {,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,236,                    in.close();,0.00027,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,239,            },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,748,            iOfYear = ofYear;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,749,            iNameKey = nameKey;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,750,            iSaveMillis = saveMillis;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,751,        },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,95,        if (in instanceof DataInput) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,110,        switch (in.readUnsignedByte()) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,183,        int v = in.readUnsignedByte();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,184,        switch (v >> 6) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,188,            return v * (30 * 60000L);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,193,            v |= (in.readUnsignedByte()) << 16;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,194,            v |= (in.readUnsignedByte()) << 8;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,195,            v |= (in.readUnsignedByte());,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,196,            return v * 60000L;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,201,            w |= (in.readUnsignedByte()) << 24;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,202,            w |= (in.readUnsignedByte()) << 16;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,203,            w |= (in.readUnsignedByte()) << 8;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,204,            w |= (in.readUnsignedByte());,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,205,            return w * 1000L;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,209,            return in.readLong();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1503,            super(id);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1504,            iTransitions = transitions;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1505,            iWallOffsets = wallOffsets;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1506,            iStandardOffsets = standardOffsets;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1507,            iNameKeys = nameKeys;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1508,            iTailZone = tailZone;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1509,        },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1344,            int poolSize = in.readUnsignedShort();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1345,            String[] pool = new String[poolSize];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1346,            for (int i=0; i<poolSize; i++) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1347,                pool[i] = in.readUTF();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1350,            int size = in.readInt();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1351,            long[] transitions = new long[size];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1352,            int[] wallOffsets = new int[size];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1353,            int[] standardOffsets = new int[size];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1354,            String[] nameKeys = new String[size];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1356,            for (int i=0; i<size; i++) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1357,                transitions[i] = readMillis(in);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1358,                wallOffsets[i] = (int)readMillis(in);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1359,                standardOffsets[i] = (int)readMillis(in);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1362,                    if (poolSize < 256) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1363,                        index = in.readUnsignedByte();,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1367,                    nameKeys[i] = pool[index];,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1370,                },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1373,            DSTZone tailZone = null;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1374,            if (in.readBoolean()) {,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1375,"                tailZone = DSTZone.readFrom(in, id);",0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1378,            return new PrecalculatedZone,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,87,        super(zone.getID());,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,84,    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,88,        iZone = zone;,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,89,    },0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,42,        },0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,45,        if (i == null) {,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,48,            cacheSize = 512; // (1 << 9),0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,61,        cInfoCacheMask = cacheSize - 1;,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,62,    },0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,68,        if (zone instanceof CachedDateTimeZone) {,0.00027,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,71,        return new CachedDateTimeZone(zone);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1179,            super(id);,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1180,            iStandardOffset = standardOffset;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1181,            iStartRecurrence = startRecurrence;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1182,            iEndRecurrence = endRecurrence;,0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1183,        },0.00027,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1169,"            return new DSTZone(id, (int)readMillis(in), ",0.00027,0,-1,0
org/joda/time/DateTimeZone,2,714,    protected DateTimeZone(String id) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,715,        if (id == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,718,        iID = id;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,719,    },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,116,        setProvider0(null);,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,117,        setNameProvider0(null);,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,118,    },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,443,        if (provider == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,444,            provider = getDefaultProvider();,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,446,        Set<String> ids = provider.getAvailableIDs();,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,447,        if (ids == null || ids.size() == 0) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,451,"        if (!ids.contains(""UTC"")) {",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,457,        cProvider = provider;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,458,        cAvailableIDs = ids;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,459,    },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,471,        Provider provider = null;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,474,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,475,            if (providerClass != null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,484,        },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,486,        if (provider == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,488,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,491,            },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,494,        if (provider == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,498,        return provider;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,539,        if (nameProvider == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,540,            nameProvider = getDefaultNameProvider();,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,542,        cNameProvider = nameProvider;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,543,    },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,554,        NameProvider nameProvider = null;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00026,0,-1,0
org/joda/time/DateTimeZone,2,557,            if (providerClass != null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,566,        },0.00026,0,-1,0
org/joda/time/DateTimeZone,2,568,        if (nameProvider == null) {,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,569,            nameProvider = new DefaultNameProvider();,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,572,        return nameProvider;,0.00026,0,-1,0
org/joda/time/DateTimeZone,2,731,        return iID;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,82,"        this(resourcePath, null, false);",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,83,    },0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,106,    {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,107,        if (resourcePath == null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,110,"        if (!resourcePath.endsWith(""/"")) {",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,111,            resourcePath += '/';,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,114,        iFileDir = null;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,115,        iResourcePath = resourcePath;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,117,        if (loader == null && !favorSystemLoader) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,118,            loader = getClass().getClassLoader();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,121,        iLoader = loader;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,124,    },0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,135,        if (id == null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,139,        Object obj = iZoneInfoMap.get(id);,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,140,        if (obj == null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,144,        if (id.equals(obj)) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,149,        if (obj instanceof SoftReference<?>) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,151,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,152,            DateTimeZone tz = ref.get();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,153,            if (tz != null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,154,                return tz;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,173,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,195,        if (iFileDir != null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,198,            String path = iResourcePath.concat(name);,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,199,            if (iLoader != null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,200,                in = iLoader.getResourceAsStream(path);,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,204,            if (in == null) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,213,        return in;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,251,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,252,        DataInputStream din = new DataInputStream(in);,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,254,"            readZoneInfoMap(din, map);",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,257,                din.close();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,259,            },0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,261,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,262,        return map;,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,273,        int size = din.readUnsignedShort();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,274,        String[] pool = new String[size];,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,275,        for (int i=0; i<size; i++) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,276,            pool[i] = din.readUTF().intern();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,280,        size = din.readUnsignedShort();,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,281,        for (int i=0; i<size; i++) {,0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,283,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,286,            },0.00026,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,288,    },0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,38,        super(id);,0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,39,        iNameKey = nameKey;,0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,40,        iWallOffset = wallOffset;,0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,41,        iStandardOffset = standardOffset;,0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,42,    },0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,88,        if (this == obj) {,0.00026,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,89,            return true;,0.00026,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,39,    public DefaultNameProvider() {,0.00026,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00026,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,40,    },0.00026,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,99,        return new HashMap(7);,0.00026,0,-1,0
org/joda/time/DurationFieldType,2,94,        super();,0.00026,0,-1,0
org/joda/time/DurationFieldType,2,95,        iName = name;,0.00026,0,-1,0
org/joda/time/DurationFieldType,2,96,    },0.00026,0,-1,0
org/joda/time/DurationFieldType,2,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00026,0,-1,0
org/joda/time/DurationFieldType,2,259,            super(name);,0.00026,0,-1,0
org/joda/time/DurationFieldType,2,260,            iOrdinal = ordinal;,0.00026,0,-1,0
org/joda/time/DurationFieldType,2,261,        },0.00026,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,92,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,119,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,120,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,123,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,124,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,126,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,127,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,128,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,129,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,131,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,132,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,134,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,146,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,2,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,61,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,67,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,81,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,96,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,97,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,100,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,2,144,        return iRange;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,52,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,57,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,67,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,94,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,110,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,111,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,112,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,114,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,127,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,128,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,2,130,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,109,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,110,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,111,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,112,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,113,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,114,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,115,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,116,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,117,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,41,        StringBuilder buf = new StringBuilder(),0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,44,        if (lowerBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,59,        if (explain != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,63,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,2,328,    },0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/DurationField,2,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,2,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,2,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,2,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,2,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,2,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,89,        if (value <= iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,90,            if (value == iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,91,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,94,            value++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,96,"        return super.set(millis, value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,2,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,77,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,90,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,98,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,106,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,114,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,118,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,122,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,126,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,130,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,134,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,138,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,142,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,146,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,150,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,154,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,158,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,162,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,166,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,170,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,174,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,178,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,182,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,190,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,194,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,198,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,202,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,217,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,221,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,233,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,237,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,241,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,249,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,253,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,257,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,261,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,265,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,269,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,273,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,277,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,281,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,285,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,289,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,2,293,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,2,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/DurationFieldType,2,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,243,        return getName();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,2,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,2,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,48,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,53,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,54,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,55,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,57,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,61,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,65,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,69,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,73,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,77,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,81,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,85,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,86,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,87,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,88,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,90,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,94,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,98,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,111,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,120,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,129,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,138,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,148,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,158,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,168,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,178,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,182,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,186,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,190,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,194,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,198,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,2,202,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,57,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,60,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,75,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,79,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,95,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,99,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,2,103,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,54,"        super(field, type);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,56,        if (divisor < 2) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,57,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,60,        DurationField rangeField = field.getDurationField();,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,61,        if (rangeField == null) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,62,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,64,            iRangeField = new ScaledDurationField(,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,67,        iDurationField = field.getDurationField();,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,68,        iDivisor = divisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,69,    },0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,84,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,136,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,137,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,138,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,140,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,154,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,166,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,167,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,168,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,203,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,207,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,211,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,215,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,219,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,223,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,232,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,236,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,237,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,2,239,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,2,138,        return false;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,74,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,78,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,101,"        this(remainderField, null, type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,102,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,113,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,114,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,115,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,116,        iRangeDurationField = rangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,117,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,118,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,119,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,120,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,121,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,122,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,123,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,124,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,141,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,142,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,143,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,145,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,158,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,170,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,182,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,186,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,190,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,202,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,203,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,204,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,220,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,229,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,233,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,234,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,238,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,247,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,251,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,252,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,2,254,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,157,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,165,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,170,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,175,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,179,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,183,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,187,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,191,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,2,196,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,2,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,64,        int sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,70,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,123,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,136,        switch (val2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,141,                return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,143,                return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,145,                return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,147,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,148,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,151,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,163,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,164,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,166,        if (val1 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,167,            return val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,169,        if (val1 == 0 || val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,170,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,172,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,176,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,189,        if (dividend == Long.MIN_VALUE && divisor == -1L) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,190,"            throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,192,        return dividend / divisor;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,203,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,204,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,206,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,218,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,219,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,234,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,252,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,268,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,269,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,273,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,2,292,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,308,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,309,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,2,312,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,313,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,315,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,316,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,319,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,321,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,322,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,324,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,337,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,338,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,340,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,341,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,2,343,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,2,133,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,2,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,77,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,85,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,90,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,101,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,113,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,114,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,115,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,127,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,128,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,129,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,141,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,158,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,162,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,188,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,192,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,196,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,200,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,204,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,208,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,2,217,        return iOffset;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,69,        } else if (min == skip + 1) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,70,            iMinValue = skip;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,72,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,79,        int value = super.get(millis);,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,80,        if (value < iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,81,            value++;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,83,        return value;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,2,99,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,2,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,475,            return (1 << iOrdinal);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,496,                    return chronology.monthOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,498,                    return chronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,516,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,520,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,522,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,524,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,2,590,                    return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,628,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,631,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,634,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,637,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,640,                return getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,2,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeZone,2,716,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,146,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,2,152,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,156,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,2,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,206,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,209,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,2,216,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,217,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,218,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,220,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,221,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,274,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,279,        if (minutesOffset < -59 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,282,        if (hoursOffset > 0 && minutesOffset < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,285,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,287,            int hoursInMinutes = hoursOffset * 60;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,288,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,291,                minutesOffset = hoursInMinutes + minutesOffset;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,296,        },0.0,0,-1,0
org/joda/time/DateTimeZone,2,294,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,295,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,297,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,310,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,311,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,330,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,331,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,333,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,334,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,2,335,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,339,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,340,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,341,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,342,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,344,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,345,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,347,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,348,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,352,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,353,            convId = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,2,355,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,356,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,357,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,358,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,360,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,361,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,377,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,378,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,380,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,2,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,385,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,386,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,387,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,388,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,2,393,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,402,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,415,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,429,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,430,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,2,433,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,434,    },0.0,0,-1,0
org/joda/time/DateTimeZone,2,448,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,2,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,477,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,480,                },0.0,0,-1,0
org/joda/time/DateTimeZone,2,478,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,479,                    throw new RuntimeException(ex);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,482,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,489,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,490,                ex.printStackTrace();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,495,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,511,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,525,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,526,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,2,529,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,530,    },0.0,0,-1,0
org/joda/time/DateTimeZone,2,559,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,562,                },0.0,0,-1,0
org/joda/time/DateTimeZone,2,560,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,561,                    throw new RuntimeException(ex);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,564,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,583,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,2,584,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,586,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,2,587,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,588,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,589,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,590,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,591,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,592,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,593,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,594,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,2,595,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,596,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,597,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,2,598,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,599,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,600,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,2,601,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,602,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,603,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,604,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,605,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,606,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,607,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,608,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,609,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,610,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,611,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,612,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,613,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,614,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,615,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,616,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,617,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,618,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,619,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,620,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,622,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,628,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,656,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,657,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,658,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,2,660,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,2,661,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,669,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,2,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,672,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,673,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,676,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,677,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,2,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,679,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,680,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,681,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,684,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,2,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,686,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,695,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,2,700,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,754,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,769,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,770,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,772,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,773,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,774,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,777,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,778,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,780,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,2,794,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,809,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,810,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,812,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,813,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,814,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,816,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,817,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,818,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,820,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,2,838,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,839,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,2,841,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,2,869,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,907,        final int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,909,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,910,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,912,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,915,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,919,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,920,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,921,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,922,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,924,            },0.0,0,-1,0
org/joda/time/DateTimeZone,2,925,        } else if (offsetLocal >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,926,            long prev = previousTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,927,            if (prev < instantAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,928,                int offsetPrev = getOffset(prev);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,929,                int diff = offsetPrev - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,930,                if (instantAdjusted - prev <= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,931,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,935,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,1007,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1009,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1010,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1011,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1013,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1014,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1015,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1017,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1019,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1021,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,-1,0
org/joda/time/DateTimeZone,2,1026,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,2,1052,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1057,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,2,1168,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1169,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1172,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1173,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1174,        } catch (IllegalInstantException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1175,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1190,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1191,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1192,        long offsetBefore = getOffset(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1193,        long offsetAfter = getOffset(instantAfter);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1194,        if (offsetBefore <= offsetAfter) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,-1,0
org/joda/time/DateTimeZone,2,1199,        long diff = offsetBefore - offsetAfter;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1200,        long transition = nextTransition(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1201,        long overlapStart = transition - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1202,        long overlapEnd = transition + diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1203,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1204,          return instant;  // not an overlap,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1208,        long afterStart = instant - overlapStart;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1209,        if (afterStart >= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1211,          return earlierOrLater ? instant : instant - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1214,          return earlierOrLater ? instant + diff : instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1256,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1281,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1291,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/LocalDate,2,1894,            super();,0.0,0,-1,0
org/joda/time/LocalDate,2,1895,            iInstant = instant;,0.0,0,-1,0
org/joda/time/LocalDate,2,1896,            iField = field;,0.0,0,-1,0
org/joda/time/LocalDate,2,1897,        },0.0,0,-1,0
org/joda/time/LocalDate,2,1903,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1904,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDate,2,1905,        },0.0,0,-1,0
org/joda/time/LocalDate,2,1911,            iInstant = (LocalDate) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,2,1912,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,2,1913,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,2,1914,        },0.0,0,-1,0
org/joda/time/LocalDate,2,1923,            return iField;,0.0,0,-1,0
org/joda/time/LocalDate,2,1932,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,2,1942,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,2,1951,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDate,2,1965,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,2,1980,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,2,1994,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,2,2008,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDate,2,2021,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDate,2,2040,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDate,2,2052,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDate,2,2067,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,2,2081,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,2,2091,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,2,2101,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,2,2112,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,2,267,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,2,268,    },0.0,0,-1,0
org/joda/time/LocalDate,2,281,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,2,282,    },0.0,0,-1,0
org/joda/time/LocalDate,2,295,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDate,2,296,    },0.0,0,-1,0
org/joda/time/LocalDate,2,308,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,2,309,    },0.0,0,-1,0
org/joda/time/LocalDate,2,322,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,2,323,    },0.0,0,-1,0
org/joda/time/LocalDate,2,363,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDate,2,364,    },0.0,0,-1,0
org/joda/time/LocalDate,2,384,"    public LocalDate(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDate,2,385,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,386,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDate,2,387,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,2,388,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,2,389,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,2,390,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,2,391,    },0.0,0,-1,0
org/joda/time/LocalDate,2,414,"    public LocalDate(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDate,2,415,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,416,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDate,2,417,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,2,418,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,2,419,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,2,420,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,2,421,    },0.0,0,-1,0
org/joda/time/LocalDate,2,436,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,2,437,    },0.0,0,-1,0
org/joda/time/LocalDate,2,455,        super();,0.0,0,-1,0
org/joda/time/LocalDate,2,456,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,2,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0.0,0,-1,0
org/joda/time/LocalDate,2,458,        iChronology = chronology;,0.0,0,-1,0
org/joda/time/LocalDate,2,459,        iLocalMillis = instant;,0.0,0,-1,0
org/joda/time/LocalDate,2,460,    },0.0,0,-1,0
org/joda/time/LocalDate,2,124,        return new LocalDate();,0.0,0,-1,0
org/joda/time/LocalDate,2,136,        if (zone == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,137,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,139,        return new LocalDate(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,151,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,152,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,154,        return new LocalDate(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,2,168,"        return parse(str, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,2,179,        return formatter.parseLocalDate(str);,0.0,0,-1,0
org/joda/time/LocalDate,2,207,        if (calendar == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,208,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,210,        int era = calendar.get(Calendar.ERA);,0.0,0,-1,0
org/joda/time/LocalDate,2,211,        int yearOfEra = calendar.get(Calendar.YEAR);,0.0,0,-1,0
org/joda/time/LocalDate,2,212,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,2,241,        if (date == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,242,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,244,        if (date.getTime() < 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,246,            GregorianCalendar cal = new GregorianCalendar();,0.0,0,-1,0
org/joda/time/LocalDate,2,247,            cal.setTime(date);,0.0,0,-1,0
org/joda/time/LocalDate,2,248,            return fromCalendarFields(cal);,0.0,0,-1,0
org/joda/time/LocalDate,2,250,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,2,467,        if (iChronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,468,"            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,2,470,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,471,"            return new LocalDate(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDate,2,473,        return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,486,        return 3;,0.0,0,-1,0
org/joda/time/LocalDate,2,499,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,2,501,                return chrono.year();,0.0,0,-1,0
org/joda/time/LocalDate,2,503,                return chrono.monthOfYear();,0.0,0,-1,0
org/joda/time/LocalDate,2,505,                return chrono.dayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,2,507,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,2,524,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,2,526,                return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,528,                return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,530,                return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,532,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,2,552,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,553,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,555,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,556,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,2,558,        return fieldType.getField(getChronology()).get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,570,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,571,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,2,573,        DurationFieldType durType = type.getDurationType();,0.0,0,-1,0
org/joda/time/LocalDate,2,574,        if (DATE_DURATION_TYPES.contains(durType) ||,0.0,0,-1,0
org/joda/time/LocalDate,2,577,            return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/LocalDate,2,579,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,2,590,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,591,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,2,593,        DurationField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,2,594,        if (DATE_DURATION_TYPES.contains(type) ||,0.0,0,-1,0
org/joda/time/LocalDate,2,596,            return field.isSupported();,0.0,0,-1,0
org/joda/time/LocalDate,2,598,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,2,632,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDate,2,633,            return true;,0.0,0,-1,0
org/joda/time/LocalDate,2,635,        if (partial instanceof LocalDate) {,0.0,0,-1,0
org/joda/time/LocalDate,2,636,            LocalDate other = (LocalDate) partial;,0.0,0,-1,0
org/joda/time/LocalDate,2,637,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDate,2,638,                return iLocalMillis == other.iLocalMillis;,0.0,0,-1,0
org/joda/time/LocalDate,2,641,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDate,2,651,        int hash = iHash;,0.0,0,-1,0
org/joda/time/LocalDate,2,652,        if (hash == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,653,            hash = iHash = super.hashCode();,0.0,0,-1,0
org/joda/time/LocalDate,2,655,        return hash;,0.0,0,-1,0
org/joda/time/LocalDate,2,676,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDate,2,677,            return 0;,0.0,0,-1,0
org/joda/time/LocalDate,2,679,        if (partial instanceof LocalDate) {,0.0,0,-1,0
org/joda/time/LocalDate,2,680,            LocalDate other = (LocalDate) partial;,0.0,0,-1,0
org/joda/time/LocalDate,2,681,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDate,2,682,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDate,2,687,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDate,2,706,        return toDateTimeAtStartOfDay(null);,0.0,0,-1,0
org/joda/time/LocalDate,2,728,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,729,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,730,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/LocalDate,2,731,"        long instant = zone.convertLocalToUTC(localMillis, false);",0.0,0,-1,0
org/joda/time/LocalDate,2,732,        instant = chrono.dayOfMonth().roundFloor(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,733,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,2,753,        return toDateTimeAtMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,2,776,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,777,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,778,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,2,795,        return toDateTimeAtCurrentTime(null);,0.0,0,-1,0
org/joda/time/LocalDate,2,815,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,816,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,817,        long instantMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,2,818,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/LocalDate,2,819,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,2,842,        return toDateMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,2,865,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,866,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,867,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);",0.0,0,-1,0
org/joda/time/LocalDate,2,888,        if (time == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,889,"            throw new IllegalArgumentException(""The time must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,891,        if (getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,2,892,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,2,894,        long localMillis = getLocalMillis() + time.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,2,895,"        return new LocalDateTime(localMillis, getChronology());",0.0,0,-1,0
org/joda/time/LocalDate,2,917,"        return toDateTime(time, null);",0.0,0,-1,0
org/joda/time/LocalDate,2,939,        if (time != null && getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,2,940,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,2,942,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,943,        long instant = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,2,944,"        instant = chrono.set(this, instant);",0.0,0,-1,0
org/joda/time/LocalDate,2,945,        if (time != null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,946,"            instant = chrono.set(time, instant);",0.0,0,-1,0
org/joda/time/LocalDate,2,948,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,2,964,        return toInterval(null);,0.0,0,-1,0
org/joda/time/LocalDate,2,979,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,980,        DateTime start = toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,981,        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,2,982,"        return new Interval(start, end);",0.0,0,-1,0
org/joda/time/LocalDate,2,1003,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,2,1004,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);",0.0,0,-1,0
org/joda/time/LocalDate,2,1005,        LocalDate check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,2,1006,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1009,            while (check.equals(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1010,                date.setTime(date.getTime() + 3600000);,0.0,0,-1,0
org/joda/time/LocalDate,2,1011,                check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,2,1014,            while (date.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1015,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDate,2,1018,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDate,2,1019,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1021,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDate,2,1022,            if (earlier.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1023,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDate,2,1026,        return date;,0.0,0,-1,0
org/joda/time/LocalDate,2,1041,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0.0,0,-1,0
org/joda/time/LocalDate,2,1042,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,2,1060,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1061,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1063,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDate,2,1085,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1086,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1088,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1089,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1091,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDate,2,1092,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1114,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1115,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1117,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1118,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1120,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1121,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1123,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDate,2,1124,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1147,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1148,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1150,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,2,1151,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,2,1152,        for (int i = 0; i < period.size(); i++) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1153,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);",0.0,0,-1,0
org/joda/time/LocalDate,2,1154,            DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/LocalDate,2,1155,            if (isSupported(type)) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1156,"                instant = type.getField(chrono).add(instant, value);",0.0,0,-1,0
org/joda/time/LocalDate,2,1159,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1180,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDate,2,1202,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1203,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1205,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,2,1206,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1228,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1229,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1231,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,2,1232,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1251,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1252,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1254,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,2,1255,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1274,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1275,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1277,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,2,1278,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1299,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDate,2,1321,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1322,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1324,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,2,1325,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1347,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1348,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1350,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,2,1351,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1370,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1371,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1373,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,2,1374,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1393,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1394,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,2,1396,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,2,1397,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,2,1410,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1411,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1413,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1414,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,2,1416,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,2,1426,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1435,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1444,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1453,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1477,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1486,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1500,        return getChronology().weekOfWeekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1509,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1520,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1531,        return getChronology().dayOfWeek().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,2,1547,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDate,2,1562,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,2,1577,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,2,1592,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDate,2,1607,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDate,2,1628,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDate,2,1643,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,2,1663,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/LocalDate,2,1678,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,2,1693,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDate,2,1708,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/LocalDate,2,1718,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDate,2,1727,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,2,1736,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDate,2,1745,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,2,1754,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDate,2,1763,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/LocalDate,2,1772,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,2,1781,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDate,2,1790,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,2,1799,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDate,2,1808,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDate,2,1819,        return ISODateTimeFormat.date().print(this);,0.0,0,-1,0
org/joda/time/LocalDate,2,1829,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1830,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,2,1832,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,2,1843,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,2,1844,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,2,1846,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,2,82,public final class LocalDate,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,79,"        return getField(index, getChronology()).getType();",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,90,        DateTimeFieldType[] result = new DateTimeFieldType[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,91,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,92,            result[i] = getFieldType(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,94,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,116,        DateTimeField[] result = new DateTimeField[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,117,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,118,            result[i] = getField(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,120,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,132,        int[] result = new int[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,133,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,134,            result[i] = getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,136,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,150,        return getValue(indexOfSupported(type));,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,160,        return (indexOf(type) != -1);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,172,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,187,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,188,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,191,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,203,            if (getFieldType(i).getDurationType() == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,204,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,207,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,219,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,220,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,223,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,240,        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,241,        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,242,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,243,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,255,        if (this == partial) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,256,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,258,        if (partial instanceof ReadablePartial == false) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,259,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,261,        ReadablePartial other = (ReadablePartial) partial;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,262,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,265,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,266,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,267,                return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,270,"        return FieldUtils.equals(getChronology(), other.getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,280,        int total = 157;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,281,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,282,            total = 23 * total + getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,283,            total = 23 * total + getFieldType(i).hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,285,        total += getChronology().hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,286,        return total;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,311,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,312,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,314,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,317,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,318,            if (getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,323,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,324,            if (getValue(i) > other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,325,                return 1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,327,            if (getValue(i) < other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,328,                return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,331,        return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,350,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,351,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,353,        return compareTo(partial) > 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,372,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,373,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,375,        return compareTo(partial) < 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,394,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,395,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,397,        return compareTo(partial) == 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,409,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,410,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,412,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,2,46,public abstract class AbstractPartial,0.0,0,-1,0
org/joda/time/Instant,2,108,        super();,0.0,0,-1,0
org/joda/time/Instant,2,109,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,2,110,    },0.0,0,-1,0
org/joda/time/Instant,2,132,        super();,0.0,0,-1,0
org/joda/time/Instant,2,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,2,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,2,135,    },0.0,0,-1,0
org/joda/time/Instant,2,73,        return new Instant();,0.0,0,-1,0
org/joda/time/Instant,2,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,2,98,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,2,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,2,171,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,2,172,            return this;,0.0,0,-1,0
org/joda/time/Instant,2,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,2,175,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,2,189,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,2,190,            return this;,0.0,0,-1,0
org/joda/time/Instant,2,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,2,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,2,219,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,2,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,2,246,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,2,268,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,2,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,2,315,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,2,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,2,361,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,2,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,191,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,192,            return true;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,194,        if (obj instanceof ISOChronology) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,195,            ISOChronology chrono = (ISOChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,196,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,198,        return false;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,217,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,107,        if ((base = iBase) != null) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,108,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,391,    },0.0,0,-1,0
org/joda/time/DateTime,2,155,        super();,0.0,0,-1,0
org/joda/time/DateTime,2,156,    },0.0,0,-1,0
org/joda/time/DateTime,2,168,        super(zone);,0.0,0,-1,0
org/joda/time/DateTime,2,169,    },0.0,0,-1,0
org/joda/time/DateTime,2,182,        super(chronology);,0.0,0,-1,0
org/joda/time/DateTime,2,183,    },0.0,0,-1,0
org/joda/time/DateTime,2,193,        super(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,194,    },0.0,0,-1,0
org/joda/time/DateTime,2,206,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,2,207,    },0.0,0,-1,0
org/joda/time/DateTime,2,220,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/DateTime,2,221,    },0.0,0,-1,0
org/joda/time/DateTime,2,241,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateTime,2,242,    },0.0,0,-1,0
org/joda/time/DateTime,2,265,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,2,266,    },0.0,0,-1,0
org/joda/time/DateTime,2,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateTime,2,287,    },0.0,0,-1,0
org/joda/time/DateTime,2,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,-1,0
org/joda/time/DateTime,2,308,    },0.0,0,-1,0
org/joda/time/DateTime,2,331,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,2,333,    },0.0,0,-1,0
org/joda/time/DateTime,2,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,2,359,    },0.0,0,-1,0
org/joda/time/DateTime,2,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,-1,0
org/joda/time/DateTime,2,382,    },0.0,0,-1,0
org/joda/time/DateTime,2,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,2,409,    },0.0,0,-1,0
org/joda/time/DateTime,2,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,2,437,    },0.0,0,-1,0
org/joda/time/DateTime,2,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,2,461,    },0.0,0,-1,0
org/joda/time/DateTime,2,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,2,489,    },0.0,0,-1,0
org/joda/time/DateTime,2,89,        return new DateTime();,0.0,0,-1,0
org/joda/time/DateTime,2,101,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,2,104,        return new DateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,2,116,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,2,119,        return new DateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,2,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateTime,2,144,        return formatter.parseDateTime(str);,0.0,0,-1,0
org/joda/time/DateTime,2,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,-1,0
org/joda/time/DateTime,2,538,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,540,        return super.toDateTimeISO();,0.0,0,-1,0
org/joda/time/DateTime,2,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/DateTime,2,551,        if (getZone() == zone) {,0.0,0,-1,0
org/joda/time/DateTime,2,552,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,554,        return super.toDateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,2,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTime,2,565,        if (getChronology() == chronology) {,0.0,0,-1,0
org/joda/time/DateTime,2,566,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,568,        return super.toDateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,2,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/DateTime,2,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/DateTime,2,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateTime,2,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,-1,0
org/joda/time/DateTime,2,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateTime,2,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateTime,2,641,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateTime,2,642,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateTime,2,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateTime,2,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.0,0,-1,0
org/joda/time/DateTime,2,666,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,2,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.0,0,-1,0
org/joda/time/DateTime,2,686,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,2,709,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,2,710,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,2,711,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/DateTime,2,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/DateTime,2,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/DateTime,2,714,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,737,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,2,738,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,2,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/DateTime,2,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/DateTime,2,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/DateTime,2,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,2,743,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,-1,0
org/joda/time/DateTime,2,776,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,777,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateTime,2,802,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,2,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateTime,2,806,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,828,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,2,831,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,832,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateTime,2,835,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,851,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateTime,2,854,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,869,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,2,890,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,891,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,2,894,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,909,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,2,923,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,2,949,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateTime,2,976,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,977,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,2,980,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1006,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1007,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,2,1010,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1032,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1033,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,2,1036,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1067,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1068,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,2,1071,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1098,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1099,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,2,1102,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1125,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1126,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,2,1129,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1152,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1153,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,2,1156,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1178,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1179,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,2,1182,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1197,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,2,1211,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,2,1238,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateTime,2,1265,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1266,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,2,1269,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1295,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1296,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,2,1299,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1321,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1322,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,2,1325,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1356,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1357,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,2,1360,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1388,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1389,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,2,1392,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1415,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1416,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,2,1419,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1442,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1443,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,2,1446,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1469,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,2,1470,            return this;,0.0,0,-1,0
org/joda/time/DateTime,2,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,2,1473,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,2,1485,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTime,2,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,2,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateTime,2,1489,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateTime,2,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateTime,2,1492,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateTime,2,1505,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1517,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1529,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1540,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1551,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1562,"        return new LocalTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,1579,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateTime,2,1595,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateTime,2,1611,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateTime,2,1627,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateTime,2,1643,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateTime,2,1665,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateTime,2,1681,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateTime,2,1702,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateTime,2,1718,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateTime,2,1734,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateTime,2,1750,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateTime,2,1767,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,-1,0
org/joda/time/DateTime,2,1783,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,-1,0
org/joda/time/DateTime,2,1799,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,-1,0
org/joda/time/DateTime,2,1815,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,2,1831,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,2,1842,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateTime,2,1851,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateTime,2,1860,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateTime,2,1869,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateTime,2,1878,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateTime,2,1887,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateTime,2,1896,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateTime,2,1905,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateTime,2,1914,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateTime,2,1923,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateTime,2,1932,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/DateTime,2,1943,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/DateTime,2,1952,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/DateTime,2,1961,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/DateTime,2,1970,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/DateTime,2,1979,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/DateTime,2,1988,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/DateTime,2,1997,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,225,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,295,        return iMillis;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,304,        return iChronology;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,2,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,2,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/DateTime,2,2047,            super();,0.0,0,-1,0
org/joda/time/DateTime,2,2048,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateTime,2,2049,            iField = field;,0.0,0,-1,0
org/joda/time/DateTime,2,2050,        },0.0,0,-1,0
org/joda/time/DateTime,2,2056,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateTime,2,2057,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateTime,2,2058,        },0.0,0,-1,0
org/joda/time/DateTime,2,2064,            iInstant = (DateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,2,2065,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,2,2066,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateTime,2,2067,        },0.0,0,-1,0
org/joda/time/DateTime,2,2076,            return iField;,0.0,0,-1,0
org/joda/time/DateTime,2,2085,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateTime,2,2095,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateTime,2,2104,            return iInstant;,0.0,0,-1,0
org/joda/time/DateTime,2,2121,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,2,2137,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,2,2155,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,2,2172,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,2,2189,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateTime,2,2205,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateTime,2,2233,                return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateTime,2,2234,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,2,2235,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,2,2237,                    long beforeGap = getChronology().getZone().previousTransition(getMillis() + DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,2,2238,"                    return new DateTime(beforeGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,2240,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,2,2262,                return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateTime,2,2263,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,2,2264,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,2,2266,                    long afterGap = getChronology().getZone().nextTransition(getMillis() - DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,2,2267,"                    return new DateTime(afterGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,2,2269,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,2,2280,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,2,2289,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,2,2299,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,2,2309,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,2,2320,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,532,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,75,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,76,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,2,66,        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,88,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,129,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,130,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,131,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,133,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,135,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,2,148,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,149,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,151,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,152,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,153,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,2,163,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,178,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,179,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,181,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,196,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,197,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,199,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,200,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,201,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,203,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,219,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,220,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,221,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,222,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,223,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,225,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,226,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,228,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,243,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,244,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,246,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,247,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,248,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,250,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,266,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,267,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,268,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,270,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,302,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,318,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,319,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,321,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,335,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,336,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,338,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,366,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,367,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,369,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,370,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,371,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,372,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,373,                if (loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,374,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,377,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,379,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,397,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,398,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,399,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,400,            return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,429,        return cZoneNames;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,441,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,-1,0
org/joda/time/DateTimeUtils,2,442,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,2,468,        double epochDay = epochMillis / 86400000d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,469,        return epochDay + 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,488,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,501,        double epochDay = julianDay - 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,502,        return (long) (epochDay * 86400000d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,571,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,572,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,573,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,2,580,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,2,556,            return iMillis;,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,53,        super(message);,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,54,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,2,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,-1,0
org/joda/time/IllegalInstantException,2,64,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,2,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,-1,0
org/joda/time/IllegalInstantException,2,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,-1,0
org/joda/time/IllegalInstantException,2,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,-1,0
org/joda/time/IllegalInstantException,2,80,        if (ex instanceof IllegalInstantException) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,81,            return true;,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,84,            return isIllegalInstant(ex.getCause());,0.0,0,-1,0
org/joda/time/IllegalInstantException,2,86,        return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,2,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,2,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,294,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,298,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,2,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,2,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,2,348,                    return this;,0.0,0,-1,0
org/joda/time/JodaTimePermission,2,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,2,58,    },0.0,0,-1,0
org/joda/time/Partial,2,835,            super();,0.0,0,-1,0
org/joda/time/Partial,2,836,            iPartial = partial;,0.0,0,-1,0
org/joda/time/Partial,2,837,            iFieldIndex = fieldIndex;,0.0,0,-1,0
org/joda/time/Partial,2,838,        },0.0,0,-1,0
org/joda/time/Partial,2,846,            return iPartial.getField(iFieldIndex);,0.0,0,-1,0
org/joda/time/Partial,2,855,            return iPartial;,0.0,0,-1,0
org/joda/time/Partial,2,864,            return iPartial;,0.0,0,-1,0
org/joda/time/Partial,2,873,            return iPartial.getValue(iFieldIndex);,0.0,0,-1,0
org/joda/time/Partial,2,895,            int[] newValues = iPartial.getValues();,0.0,0,-1,0
org/joda/time/Partial,2,896,"            newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd);",0.0,0,-1,0
org/joda/time/Partial,2,897,"            return new Partial(iPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,919,            int[] newValues = iPartial.getValues();,0.0,0,-1,0
org/joda/time/Partial,2,920,"            newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd);",0.0,0,-1,0
org/joda/time/Partial,2,921,"            return new Partial(iPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,936,            int[] newValues = iPartial.getValues();,0.0,0,-1,0
org/joda/time/Partial,2,937,"            newValues = getField().set(iPartial, iFieldIndex, newValues, value);",0.0,0,-1,0
org/joda/time/Partial,2,938,"            return new Partial(iPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,953,            int[] newValues = iPartial.getValues();,0.0,0,-1,0
org/joda/time/Partial,2,954,"            newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale);",0.0,0,-1,0
org/joda/time/Partial,2,955,"            return new Partial(iPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,969,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/Partial,2,983,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/Partial,2,996,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/Partial,2,103,        this((Chronology) null);,0.0,0,-1,0
org/joda/time/Partial,2,104,    },0.0,0,-1,0
org/joda/time/Partial,2,123,        super();,0.0,0,-1,0
org/joda/time/Partial,2,124,        iChronology = DateTimeUtils.getChronology(chrono).withUTC();,0.0,0,-1,0
org/joda/time/Partial,2,125,        iTypes = new DateTimeFieldType[0];,0.0,0,-1,0
org/joda/time/Partial,2,126,        iValues = new int[0];,0.0,0,-1,0
org/joda/time/Partial,2,127,    },0.0,0,-1,0
org/joda/time/Partial,2,157,"            throw new IllegalArgumentException(""The field type must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,175,"        this(types, values, null);",0.0,0,-1,0
org/joda/time/Partial,2,176,    },0.0,0,-1,0
org/joda/time/Partial,2,194,"            throw new IllegalArgumentException(""Types array must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,197,"            throw new IllegalArgumentException(""Values array must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,200,"            throw new IllegalArgumentException(""Values array must be the same length as the types array"");",0.0,0,-1,0
org/joda/time/Partial,2,203,            iTypes = types;,0.0,0,-1,0
org/joda/time/Partial,2,204,            iValues = values;,0.0,0,-1,0
org/joda/time/Partial,2,205,            return;,0.0,0,-1,0
org/joda/time/Partial,2,209,"                throw new IllegalArgumentException(""Types array must not contain null: index "" + i);",0.0,0,-1,0
org/joda/time/Partial,2,219,"                    throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0.0,0,-1,0
org/joda/time/Partial,2,228,                        if (loopType.getRangeDurationType() == null) {,0.0,0,-1,0
org/joda/time/Partial,2,229,"                            throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0.0,0,-1,0
org/joda/time/Partial,2,232,                        DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);,0.0,0,-1,0
org/joda/time/Partial,2,233,                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,0.0,0,-1,0
org/joda/time/Partial,2,234,                        if (lastRangeField.compareTo(loopRangeField) < 0) {,0.0,0,-1,0
org/joda/time/Partial,2,235,"                            throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0.0,0,-1,0
org/joda/time/Partial,2,238,                        if (lastRangeField.compareTo(loopRangeField) == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,239,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0.0,0,-1,0
org/joda/time/Partial,2,248,        iTypes = (DateTimeFieldType[]) types.clone();,0.0,0,-1,0
org/joda/time/Partial,2,249,"        chronology.validate(this, values);",0.0,0,-1,0
org/joda/time/Partial,2,250,        iValues = (int[]) values.clone();,0.0,0,-1,0
org/joda/time/Partial,2,251,    },0.0,0,-1,0
org/joda/time/Partial,2,260,        super();,0.0,0,-1,0
org/joda/time/Partial,2,261,        if (partial == null) {,0.0,0,-1,0
org/joda/time/Partial,2,262,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,264,        iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC();,0.0,0,-1,0
org/joda/time/Partial,2,265,        iTypes = new DateTimeFieldType[partial.size()];,0.0,0,-1,0
org/joda/time/Partial,2,266,        iValues = new int[partial.size()];,0.0,0,-1,0
org/joda/time/Partial,2,267,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/Partial,2,268,            iTypes[i] = partial.getFieldType(i);,0.0,0,-1,0
org/joda/time/Partial,2,269,            iValues[i] = partial.getValue(i);,0.0,0,-1,0
org/joda/time/Partial,2,271,    },0.0,0,-1,0
org/joda/time/Partial,2,282,        super();,0.0,0,-1,0
org/joda/time/Partial,2,283,        iChronology = partial.iChronology;,0.0,0,-1,0
org/joda/time/Partial,2,284,        iTypes = partial.iTypes;,0.0,0,-1,0
org/joda/time/Partial,2,285,        iValues = values;,0.0,0,-1,0
org/joda/time/Partial,2,286,    },0.0,0,-1,0
org/joda/time/Partial,2,298,        super();,0.0,0,-1,0
org/joda/time/Partial,2,299,        iChronology = chronology;,0.0,0,-1,0
org/joda/time/Partial,2,300,        iTypes = types;,0.0,0,-1,0
org/joda/time/Partial,2,301,        iValues = values;,0.0,0,-1,0
org/joda/time/Partial,2,302,    },0.0,0,-1,0
org/joda/time/Partial,2,358,        return (DateTimeFieldType[]) iTypes.clone();,0.0,0,-1,0
org/joda/time/Partial,2,370,        return iValues[index];,0.0,0,-1,0
org/joda/time/Partial,2,383,        return (int[]) iValues.clone();,0.0,0,-1,0
org/joda/time/Partial,2,402,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/Partial,2,403,        newChronology = newChronology.withUTC();,0.0,0,-1,0
org/joda/time/Partial,2,404,        if (newChronology == getChronology()) {,0.0,0,-1,0
org/joda/time/Partial,2,405,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,407,"            Partial newPartial = new Partial(newChronology, iTypes, iValues);",0.0,0,-1,0
org/joda/time/Partial,2,408,"            newChronology.validate(newPartial, iValues);",0.0,0,-1,0
org/joda/time/Partial,2,409,            return newPartial;,0.0,0,-1,0
org/joda/time/Partial,2,430,"            throw new IllegalArgumentException(""The field type must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,441,                for (; i < iTypes.length; i++) {,0.0,0,-1,0
org/joda/time/Partial,2,442,                    DateTimeFieldType loopType = iTypes[i];,0.0,0,-1,0
org/joda/time/Partial,2,443,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,0.0,0,-1,0
org/joda/time/Partial,2,444,                    if (loopUnitField.isSupported()) {,0.0,0,-1,0
org/joda/time/Partial,2,445,                        int compare = unitField.compareTo(loopUnitField);,0.0,0,-1,0
org/joda/time/Partial,2,446,                        if (compare > 0) {,0.0,0,-1,0
org/joda/time/Partial,2,447,                            break;,0.0,0,-1,0
org/joda/time/Partial,2,448,                        } else if (compare == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,449,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,0.0,0,-1,0
org/joda/time/Partial,2,450,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,0.0,0,-1,0
org/joda/time/Partial,2,451,                            if (rangeField.compareTo(loopRangeField) > 0) {,0.0,0,-1,0
org/joda/time/Partial,2,452,                                break;,0.0,0,-1,0
org/joda/time/Partial,2,467,"            iChronology.validate(newPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,468,            return newPartial;,0.0,0,-1,0
org/joda/time/Partial,2,470,        if (value == getValue(index)) {,0.0,0,-1,0
org/joda/time/Partial,2,471,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,473,        int[] newValues = getValues();,0.0,0,-1,0
org/joda/time/Partial,2,474,"        newValues = getField(index).set(this, index, newValues, value);",0.0,0,-1,0
org/joda/time/Partial,2,475,"        return new Partial(this, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,487,        int index = indexOf(fieldType);,0.0,0,-1,0
org/joda/time/Partial,2,488,        if (index != -1) {,0.0,0,-1,0
org/joda/time/Partial,2,489,            DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1];,0.0,0,-1,0
org/joda/time/Partial,2,490,            int[] newValues = new int[size() - 1];,0.0,0,-1,0
org/joda/time/Partial,2,491,"            System.arraycopy(iTypes, 0, newTypes, 0, index);",0.0,0,-1,0
org/joda/time/Partial,2,492,"            System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index);",0.0,0,-1,0
org/joda/time/Partial,2,493,"            System.arraycopy(iValues, 0, newValues, 0, index);",0.0,0,-1,0
org/joda/time/Partial,2,494,"            System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index);",0.0,0,-1,0
org/joda/time/Partial,2,495,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,496,"            iChronology.validate(newPartial, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,497,            return newPartial;,0.0,0,-1,0
org/joda/time/Partial,2,499,        return this;,0.0,0,-1,0
org/joda/time/Partial,2,518,        int index = indexOfSupported(fieldType);,0.0,0,-1,0
org/joda/time/Partial,2,519,        if (value == getValue(index)) {,0.0,0,-1,0
org/joda/time/Partial,2,520,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,522,        int[] newValues = getValues();,0.0,0,-1,0
org/joda/time/Partial,2,523,"        newValues = getField(index).set(this, index, newValues, value);",0.0,0,-1,0
org/joda/time/Partial,2,524,"        return new Partial(this, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,542,        int index = indexOfSupported(fieldType);,0.0,0,-1,0
org/joda/time/Partial,2,543,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,544,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,546,        int[] newValues = getValues();,0.0,0,-1,0
org/joda/time/Partial,2,547,"        newValues = getField(index).add(this, index, newValues, amount);",0.0,0,-1,0
org/joda/time/Partial,2,548,"        return new Partial(this, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,566,        int index = indexOfSupported(fieldType);,0.0,0,-1,0
org/joda/time/Partial,2,567,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,568,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,570,        int[] newValues = getValues();,0.0,0,-1,0
org/joda/time/Partial,2,571,"        newValues = getField(index).addWrapPartial(this, index, newValues, amount);",0.0,0,-1,0
org/joda/time/Partial,2,572,"        return new Partial(this, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,591,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,592,            return this;,0.0,0,-1,0
org/joda/time/Partial,2,594,        int[] newValues = getValues();,0.0,0,-1,0
org/joda/time/Partial,2,595,        for (int i = 0; i < period.size(); i++) {,0.0,0,-1,0
org/joda/time/Partial,2,596,            DurationFieldType fieldType = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/Partial,2,597,            int index = indexOf(fieldType);,0.0,0,-1,0
org/joda/time/Partial,2,598,            if (index >= 0) {,0.0,0,-1,0
org/joda/time/Partial,2,599,"                newValues = getField(index).add(this, index, newValues,",0.0,0,-1,0
org/joda/time/Partial,2,603,"        return new Partial(this, newValues);",0.0,0,-1,0
org/joda/time/Partial,2,616,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/Partial,2,629,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/Partial,2,644,"        return new Property(this, indexOfSupported(type));",0.0,0,-1,0
org/joda/time/Partial,2,658,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/Partial,2,659,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/Partial,2,660,        for (int i = 0; i < iTypes.length; i++) {,0.0,0,-1,0
org/joda/time/Partial,2,661,            int value = iTypes[i].getField(chrono).get(millis);,0.0,0,-1,0
org/joda/time/Partial,2,662,            if (value != iValues[i]) {,0.0,0,-1,0
org/joda/time/Partial,2,663,                return false;,0.0,0,-1,0
org/joda/time/Partial,2,666,        return true;,0.0,0,-1,0
org/joda/time/Partial,2,682,        if (partial == null) {,0.0,0,-1,0
org/joda/time/Partial,2,683,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/Partial,2,685,        for (int i = 0; i < iTypes.length; i++) {,0.0,0,-1,0
org/joda/time/Partial,2,686,            int value = partial.get(iTypes[i]);,0.0,0,-1,0
org/joda/time/Partial,2,687,            if (value != iValues[i]) {,0.0,0,-1,0
org/joda/time/Partial,2,688,                return false;,0.0,0,-1,0
org/joda/time/Partial,2,691,        return true;,0.0,0,-1,0
org/joda/time/Partial,2,707,        DateTimeFormatter[] f = iFormatter;,0.0,0,-1,0
org/joda/time/Partial,2,708,        if (f == null) {,0.0,0,-1,0
org/joda/time/Partial,2,709,            if (size() == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,710,                return null;,0.0,0,-1,0
org/joda/time/Partial,2,712,            f = new DateTimeFormatter[2];,0.0,0,-1,0
org/joda/time/Partial,2,714,                List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes));,0.0,0,-1,0
org/joda/time/Partial,2,715,"                f[0] = ISODateTimeFormat.forFields(list, true, false);",0.0,0,-1,0
org/joda/time/Partial,2,716,                if (list.size() == 0) {,0.0,0,-1,0
org/joda/time/Partial,2,717,                    f[1] = f[0];,0.0,0,-1,0
org/joda/time/Partial,2,721,            },0.0,0,-1,0
org/joda/time/Partial,2,719,            } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/Partial,2,722,            iFormatter = f;,0.0,0,-1,0
org/joda/time/Partial,2,724,        return f[0];,0.0,0,-1,0
org/joda/time/Partial,2,740,        DateTimeFormatter[] f = iFormatter;,0.0,0,-1,0
org/joda/time/Partial,2,741,        if (f == null) {,0.0,0,-1,0
org/joda/time/Partial,2,742,            getFormatter();,0.0,0,-1,0
org/joda/time/Partial,2,743,            f = iFormatter;,0.0,0,-1,0
org/joda/time/Partial,2,744,            if (f == null) {,0.0,0,-1,0
org/joda/time/Partial,2,745,                return toStringList();,0.0,0,-1,0
org/joda/time/Partial,2,748,        DateTimeFormatter f1 = f[1];,0.0,0,-1,0
org/joda/time/Partial,2,749,        if (f1 == null) {,0.0,0,-1,0
org/joda/time/Partial,2,750,            return toStringList();,0.0,0,-1,0
org/joda/time/Partial,2,752,        return f1.print(this);,0.0,0,-1,0
org/joda/time/Partial,2,765,        int size = size();,0.0,0,-1,0
org/joda/time/Partial,2,766,        StringBuilder buf = new StringBuilder(20 * size);,0.0,0,-1,0
org/joda/time/Partial,2,767,        buf.append('[');,0.0,0,-1,0
org/joda/time/Partial,2,768,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/Partial,2,769,            if (i > 0) {,0.0,0,-1,0
org/joda/time/Partial,2,770,"                buf.append(',').append(' ');",0.0,0,-1,0
org/joda/time/Partial,2,772,            buf.append(iTypes[i].getName());,0.0,0,-1,0
org/joda/time/Partial,2,773,            buf.append('=');,0.0,0,-1,0
org/joda/time/Partial,2,774,            buf.append(iValues[i]);,0.0,0,-1,0
org/joda/time/Partial,2,776,        buf.append(']');,0.0,0,-1,0
org/joda/time/Partial,2,777,        return buf.toString();,0.0,0,-1,0
org/joda/time/Partial,2,788,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/Partial,2,789,            return toString();,0.0,0,-1,0
org/joda/time/Partial,2,791,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/Partial,2,803,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/Partial,2,804,            return toString();,0.0,0,-1,0
org/joda/time/Partial,2,806,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,763,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,771,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,89,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,93,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,94,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,96,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,97,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,99,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,100,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,102,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,109,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,118,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,128,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,138,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,139,        int offset = zone.getOffsetFromLocal(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,140,        localInstant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,141,        if (offset != zone.getOffset(localInstant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,142,"            throw new IllegalInstantException(localInstant, zone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,144,        return localInstant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,210,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,213,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,234,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,235,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,237,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,238,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,240,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,241,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,283,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,299,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,307,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,311,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,315,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,316,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,321,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,322,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,327,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,328,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,334,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,335,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,341,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,342,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,347,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,351,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,352,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,357,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,361,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,366,            if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,367,                return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,368,            } else if (obj instanceof ZonedDurationField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,369,                ZonedDurationField other = (ZonedDurationField) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,370,                return iField.equals(other.iField) &&,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,373,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,406,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,417,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,426,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,427,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,431,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,432,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,436,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,440,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,444,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,445,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,446,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,447,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,449,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,450,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,451,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,456,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,457,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,458,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,459,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,461,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,462,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,463,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,468,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,469,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,470,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,471,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,473,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,474,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,475,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,484,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,485,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,486,                ex.initCause(cause);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,487,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,494,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,495,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,496,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,500,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,501,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,507,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,508,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,522,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,523,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,527,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,528,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,536,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,537,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,538,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,539,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,541,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,542,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,543,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,548,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,549,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,550,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,551,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,553,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,554,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,555,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,560,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,561,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,569,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,570,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,574,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,578,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,586,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,587,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,591,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,595,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,599,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,603,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,607,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,608,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,610,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,611,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,613,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,618,            if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,619,                return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,620,            } else if (obj instanceof ZonedDateTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,621,                ZonedDateTimeField other = (ZonedDateTimeField) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,622,                return iField.equals(other.iField) &&,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,2,627,            return false;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,2,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,60,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,93,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,94,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,99,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,104,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,113,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,114,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,115,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,116,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,118,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,119,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,120,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,122,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,123,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,125,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,127,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,128,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,139,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,140,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,145,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,147,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,152,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,153,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,154,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,159,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,161,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,162,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,165,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,166,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,167,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,168,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,170,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,171,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,172,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,173,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,174,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,176,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,177,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,178,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,182,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,185,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,189,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,190,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,192,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,193,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,194,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,195,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,198,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,200,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,207,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,208,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,210,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,212,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,213,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,214,"            return set(partial, 0, values, newMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,216,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,217,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,218,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,219,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,221,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,222,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,224,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,239,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,244,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,245,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,248,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,249,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,250,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,251,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,253,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,257,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,259,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,261,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,263,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,267,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,272,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,274,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,277,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,278,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,281,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,307,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,321,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,322,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,323,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,325,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,330,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,340,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,345,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,350,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,351,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,352,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,357,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,2,365,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,197,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,198,            return true;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,200,        if (obj != null && getClass() == obj.getClass()) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,201,            BasicChronology chrono = (BasicChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,205,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,226,        StringBuilder sb = new StringBuilder(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,227,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,228,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,229,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,230,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,232,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,233,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,234,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,235,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,236,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,238,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,239,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,240,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,242,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,243,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,315,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,325,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,356,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,379,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,380,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,381,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,418,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,423,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,485,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,505,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,506,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,508,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,526,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,530,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,543,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,552,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,573,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,583,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,584,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,585,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,2,598,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,2,229,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,180,            if (isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,2,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,59,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,60,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,62,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,64,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,68,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,72,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,76,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,77,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,79,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,89,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,90,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,92,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,100,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,104,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,105,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,107,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,124,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,138,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,2,145,        return iChronology.year();,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,52,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,53,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,54,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,56,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,60,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,64,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,68,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,92,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,93,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,94,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,96,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,108,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,112,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,116,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,2,123,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,52,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,61,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,62,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,64,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,69,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,81,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,83,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,84,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,85,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,86,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,88,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,93,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,97,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,98,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,100,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,105,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,106,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,108,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,114,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,119,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,124,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,136,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,140,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,144,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,2,151,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,68,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,79,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,91,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,123,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,133,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,2,140,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,60,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,64,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,68,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,69,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,70,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,71,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,72,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,74,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,76,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,80,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,81,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,82,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,83,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,84,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,85,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,86,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,87,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,90,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,93,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,2,104,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,53,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,61,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,65,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,69,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,70,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,74,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,75,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,76,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,78,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,82,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,83,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,84,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,85,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,86,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,89,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,93,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,94,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,2,101,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,43,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,48,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,53,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,58,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,2,63,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,74,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,80,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,93,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,97,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,98,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,101,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,102,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,104,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,105,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,108,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,109,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,112,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,113,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,114,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,116,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,136,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,157,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,181,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,183,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,213,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,217,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,244,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,2,251,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,55,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,71,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,76,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,80,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,84,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,88,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,89,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,93,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,94,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,95,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,97,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,101,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,102,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,103,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,104,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,105,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,108,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,112,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,2,119,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,65,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,66,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,67,        int millisOfDay = getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,69,        if (dayOfYear > 365) {,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,71,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,73,                dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,77,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,78,        instant += millisOfDay;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,79,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,85,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,86,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,89,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,90,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,92,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,93,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,94,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,96,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,107,        return (getDayOfYear(millis) - 1) % MONTH_LENGTH + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,112,        return (year & 3) == 3;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,122,        return MONTH_LENGTH;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,127,        return (month != 13 ? MONTH_LENGTH : 6);,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,132,        return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,137,        long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,138,        return ((int) monthZeroBased) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicFixedMonthChronology,2,153,        return MILLIS_PER_YEAR / 2;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,351,"        LimitException(String desc, boolean isLow) {",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,352,            super(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,353,            iIsLow = isLow;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,354,        },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,357,            StringBuffer buf = new StringBuffer(85);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,358,"            buf.append(""The"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,359,            String desc = super.getMessage();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,360,            if (desc != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,361,                buf.append(' ');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,362,                buf.append(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,364,"            buf.append("" instant is "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,366,            DateTimeFormatter p = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,367,            p = p.withChronology(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,368,            if (iIsLow) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,369,"                buf.append(""below the supported minimum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,370,"                p.printTo(buf, getLowerLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,372,"                buf.append(""above the supported maximum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,373,"                p.printTo(buf, getUpperLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,376,"            buf.append("" ("");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,377,            buf.append(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,378,            buf.append(')');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,380,            return buf.toString();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,384,"            return ""IllegalArgumentException: "" + getMessage();",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,396,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,397,"            return getWrappedField().getValue(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,401,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,402,"            return getWrappedField().getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,406,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,407,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,411,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,412,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,416,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,417,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,418,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,419,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,423,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,424,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,425,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,426,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,430,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,431,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,436,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,437,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,95,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,107,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,140,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,141,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,152,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,162,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,163,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,165,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,166,            return this;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,168,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,180,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,181,            return true;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,183,        if (obj instanceof BuddhistChronology) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,184,            BuddhistChronology chrono = (BuddhistChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,185,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,187,        return false;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,197,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,208,"        String str = ""BuddhistChronology"";",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,209,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,210,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,211,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,2,213,        return str;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,96,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,97,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,98,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,99,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,100,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,124,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,140,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,156,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,198,"                throw new IllegalArgumentException(""Cutover too early. Must be on or after 0001-01-01."");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,250,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,251,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,253,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,255,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,291,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,297,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,321,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,326,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,334,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,335,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,339,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,341,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,343,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,345,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,347,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,350,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,359,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,360,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,368,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,381,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,371,        } catch (IllegalFieldValueException ex) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,372,            if (monthOfYear != 2 || dayOfMonth != 29) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,373,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,375,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,378,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,379,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,382,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,384,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,387,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,389,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,392,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,421,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,422,            return true;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,424,        if (obj instanceof GJChronology) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,425,            GJChronology chrono = (GJChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,426,            return iCutoverMillis == chrono.iCutoverMillis &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,430,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,440,"        return ""GJ"".hashCode() * 11 + getZone().hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,452,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,453,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,454,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,455,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,457,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,458,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,460,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,461,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,463,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,465,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,468,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,469,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,470,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,472,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,474,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,494,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,597,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,601,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,68,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,75,            if (!lowerLimit.isBefore(upperLimit)) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,76,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,111,        return iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,120,        return iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,129,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,138,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,139,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,141,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,142,            return this;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,145,        if (zone == DateTimeZone.UTC && iWithUTC != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,146,            return iWithUTC;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,149,        DateTime lowerLimit = iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,150,        if (lowerLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,151,            MutableDateTime mdt = lowerLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,152,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,153,            lowerLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,156,        DateTime upperLimit = iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,157,        if (upperLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,158,            MutableDateTime mdt = upperLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,159,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,160,            upperLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,163,        LimitChronology chrono = getInstance,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,166,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,167,            iWithUTC = chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,170,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,178,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,179,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,187,        long instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,190,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,191,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,199,"        checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,200,        instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,202,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,203,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,269,            return field;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,272,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,285,        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,286,"            throw new LimitException(desc, true);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,288,        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,289,"            throw new LimitException(desc, false);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,291,    },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,303,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,304,            return true;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,306,        if (obj instanceof LimitChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,307,            return false;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,309,        LimitChronology chrono = (LimitChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,310,        return,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,323,        int hash = 317351877;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,324,        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,325,        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,326,        hash += getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,327,        return hash;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,57,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,62,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,68,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,76,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,81,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,86,        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,91,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,96,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,101,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,116,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,121,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,126,        return iEraText;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,2,131,        return iEraText.length();,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,57,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,58,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,62,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,66,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,70,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,74,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,78,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,82,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,86,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,87,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,88,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,90,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,102,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,106,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,110,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,2,117,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,462,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,463,            return getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,467,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,468,"            return getWrappedField().getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,472,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,473,"            return getWrappedField().getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,477,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,478,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,479,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,480,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,484,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,485,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,486,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,487,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,491,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,492,"            long result = getWrappedField().addWrapField(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,493,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,494,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,498,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,499,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,500,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,504,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,505,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,506,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,510,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,511,"            long result = getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,512,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,513,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,517,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,518,"            long result = getWrappedField().set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,519,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,520,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,532,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,533,            return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,537,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,538,            return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,546,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,547,            long result = getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,548,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,549,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,553,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,554,            long result = getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,555,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,556,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,560,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,561,            long result = getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,562,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,563,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,567,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,568,            long result = getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,569,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,570,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,574,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,575,            long result = getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,576,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,577,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,581,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,582,            long result = getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,583,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,584,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,588,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,589,            return getWrappedField().getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,593,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,594,            return getWrappedField().getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,598,            return getWrappedField().getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,2,602,            return getWrappedField().getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,98,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,120,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,131,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,132,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,168,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,169,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,170,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,171,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,194,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,195,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,197,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,198,            return this;,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,200,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,216,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,218,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,219,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/CopticChronology,2,243,        return (1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,2,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1153,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1157,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1161,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1165,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,668,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,673,                return iGregorianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,680,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,681,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,683,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,688,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,692,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,693,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,695,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,700,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,704,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,708,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,714,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,715,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,717,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,718,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,719,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,720,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,722,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,723,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,725,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,730,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,734,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,747,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,755,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,756,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,759,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,760,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,769,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,770,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,771,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,773,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,774,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,779,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,780,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,782,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,783,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,788,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,800,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,801,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,803,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,808,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,809,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,811,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,827,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,831,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,835,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,836,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,839,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,843,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,844,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,845,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,848,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,858,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,859,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,862,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,866,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,867,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,868,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,871,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,875,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,876,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,880,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,881,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,882,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,883,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,884,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,885,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,888,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,892,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,893,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,894,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,896,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,897,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,901,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,903,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,907,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,908,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,910,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,911,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,913,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,914,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,918,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,922,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,927,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,932,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,933,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,935,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,941,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1006,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1007,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1008,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1010,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1011,                        if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1012,                            int wyear = iGregorianChronology.weekyear().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1013,                            if (wyear <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1014,"                                instant = iGregorianChronology.weekyear().add(instant, -1);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1016,                        } else {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1017,                            int year = iGregorianChronology.year().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1018,                            if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1019,"                                instant = iGregorianChronology.year().add(instant, -1);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1022,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1026,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1027,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1029,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1031,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1035,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1039,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1040,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1041,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1043,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1044,                        if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1045,                            int wyear = iGregorianChronology.weekyear().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1046,                            if (wyear <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1047,"                                instant = iGregorianChronology.weekyear().add(instant, -1);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1049,                        } else {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1050,                            int year = iGregorianChronology.year().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1051,                            if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1052,"                                instant = iGregorianChronology.year().add(instant, -1);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1055,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1059,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1060,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1062,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1064,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1068,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1072,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1073,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1074,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1078,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1079,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1081,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1082,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1086,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1087,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1092,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1093,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1094,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1098,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1099,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1101,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1102,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1106,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1107,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1122,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1123,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1125,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1130,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1131,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,2,1133,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,225,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,226,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,227,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,230,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,234,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,235,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,240,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,2,241,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,824,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,828,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,833,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,837,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,841,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,845,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,847,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,848,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,851,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,852,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,854,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,857,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,859,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,862,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,865,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,867,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,868,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,869,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,871,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,875,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,136,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,141,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,157,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,161,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,182,        ex.printStackTrace();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,183,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,196,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,202,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,205,                StringBuilder buf = new StringBuilder(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,210,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,238,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,229,        } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,230,            uncaughtException(ex);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,231,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,232,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,234,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,258,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,260,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,256,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,284,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,2,285,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,475,    },0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,2,98,        return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1365,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1368,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1369,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1392,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1393,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1394,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1397,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1398,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1399,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1400,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1402,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1403,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1404,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1406,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1407,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1410,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1411,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1412,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1413,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1415,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1420,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1421,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1422,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1423,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1424,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1425,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1429,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1431,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1432,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1433,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1434,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1435,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1436,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1437,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1438,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1439,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1446,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1447,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1448,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1451,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1452,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1453,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1454,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1455,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1460,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1461,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1463,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1464,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1467,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1468,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1474,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1483,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1512,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1513,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1514,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1515,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1517,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1518,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1519,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1520,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1522,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1524,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1525,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1527,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1534,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1541,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1546,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1550,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1551,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1552,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1553,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1555,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1556,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1557,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1558,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1560,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1562,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1563,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1565,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1569,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1582,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1583,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1584,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1586,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1590,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1591,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1592,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1593,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1594,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1596,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1598,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1599,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1600,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1601,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1602,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1603,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1606,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1608,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1609,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1610,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1611,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1614,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1615,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1616,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1618,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1622,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1623,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1625,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1626,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1627,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1637,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1641,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1644,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1645,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1646,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1649,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1650,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1651,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1653,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1654,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1655,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1656,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1660,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1661,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1662,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1665,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1667,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1668,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1669,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1670,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1673,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1674,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1675,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1676,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1677,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1679,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1681,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1686,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1687,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1688,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1690,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1693,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1694,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1696,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1697,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1698,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1703,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1704,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1706,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1707,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1708,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1709,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1710,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1714,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1715,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1716,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1717,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1724,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1728,            return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,95,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,99,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,111,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,115,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,119,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,128,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,133,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,162,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,164,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1186,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1194,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1198,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1202,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1203,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1204,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1209,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1211,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1213,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1221,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1215,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1218,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1220,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1224,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1226,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1228,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1236,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1230,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1233,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1235,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1238,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1244,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1246,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1247,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1248,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1253,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1255,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1257,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1265,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1259,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1262,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1264,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1268,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1270,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1272,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1280,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1274,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1277,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1279,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1282,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1286,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1287,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1289,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1290,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1291,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1297,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1301,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1302,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1303,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1304,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1307,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1308,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1309,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1314,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1322,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1316,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1319,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1321,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1325,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1333,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1327,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1330,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1332,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1335,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,965,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,966,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,967,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,968,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,973,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,974,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,975,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,976,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,977,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,978,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,979,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,980,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,950,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,951,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,952,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,984,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,988,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,989,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,992,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,993,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,994,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,997,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,998,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1000,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1003,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1004,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1005,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1014,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1016,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1021,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1027,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1028,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1029,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1032,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1033,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1035,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1036,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1037,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1040,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1041,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1045,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1046,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1047,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1048,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1050,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1052,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1056,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1064,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1066,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1069,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1070,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1085,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1088,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1089,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1091,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1092,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1093,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1094,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1095,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1096,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1097,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1101,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1103,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1104,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1106,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1108,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1109,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1113,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1114,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1118,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1119,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1121,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1123,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1127,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1134,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1135,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1137,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1144,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1145,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1146,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1147,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1157,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,1161,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,885,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,886,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,887,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,888,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,889,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,890,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,892,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,893,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,894,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,895,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,896,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,897,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,900,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,901,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,902,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,903,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,904,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,905,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,908,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,912,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,916,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,920,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,924,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,931,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,932,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,2,934,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,187,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,190,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,192,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,202,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,210,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,2,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,2,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1307,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1308,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1309,        },0.0,0,-1,0
org/joda/time/DateTimeZone,2,1312,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1313,        },0.0,0,-1,0
org/joda/time/DateTimeZone,2,1316,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,2,1317,        },0.0,0,-1,0
org/joda/time/DateTimeZone,2,1320,            return forID(iID);,0.0,0,-1,0
