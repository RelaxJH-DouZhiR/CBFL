project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/format/DateTimeFormatter,7,701,        DateTimeParser parser = requireParser();,0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,702,        if (instant == null) {,0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,706,        long instantMillis = instant.getMillis();,0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,707,        Chronology chrono = instant.getChronology();,0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,708,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0.17391,1,1,1
org/joda/time/format/DateTimeFormatter,7,709,        chrono = selectChronology(chrono);,0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,710,        int defaultYear = chrono.year().get(instantLocal);,0.17391,1,1,0
org/joda/time/format/DateTimeFormatter,7,712,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0.17391,0,0,0
org/joda/time/format/DateTimeFormatter,7,714,"        int newPos = parser.parseInto(bucket, text, position);",0.17391,0,1,0
org/joda/time/format/DateTimeFormatter,7,715,"        instant.setMillis(bucket.computeMillis(false, text));",0.17391,0,1,0
org/joda/time/format/DateTimeParserBucket,7,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0.15385,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,359,"                return computeMillis(resetFields, text);",0.15385,0,-1,0
org/joda/time/MutableDateTime,7,351,"        super(year, monthOfYear, dayOfMonth,",0.10811,0,-1,0
org/joda/time/MutableDateTime,7,353,    },0.10811,0,-1,0
org/joda/time/field/FieldUtils,7,218,            throw new IllegalFieldValueException,0.1,0,-1,0
org/joda/time/field/BaseDurationField,7,150,            return 0;,0.09756,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,306,            thisDom = maxDom;,0.09091,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,518,            return 1;,0.08333,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,421,                    SavedField t = array[j];,0.07273,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,422,                    array[j] = array[j-1];,0.07273,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,423,                    array[j-1] = t;,0.07273,0,-1,0
org/joda/time/chrono/BasicChronology,7,419,            year--;,0.07143,0,-1,0
org/joda/time/IllegalFieldValueException,7,53,"            buf.append(""must be in the range ["")",0.0678,0,-1,0
org/joda/time/IllegalFieldValueException,7,50,        } else if (upperBound == null) {,0.05556,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,971,        if (dtx == null) {,0.05405,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,972,            dtx = new DateTimeFormatterBuilder(),0.05405,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,977,        return dtx;,0.05405,0,-1,0
org/joda/time/IllegalFieldValueException,7,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,109,        iDateTimeFieldType = fieldType;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,110,        iDurationFieldType = null;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,111,        iFieldName = fieldType.getName();,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,112,        iNumberValue = value;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,113,        iStringValue = null;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,114,        iLowerBound = lowerBound;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,115,        iUpperBound = upperBound;,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,116,        iMessage = super.getMessage();,0.05263,0,-1,0
org/joda/time/IllegalFieldValueException,7,117,    },0.05263,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,935,        if (ttx == null) {,0.05,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,936,            ttx = new DateTimeFormatterBuilder(),0.05,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,941,        return ttx;,0.05,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0.04878,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,897,        if (tx == null) {,0.04819,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,898,            tx = new DateTimeFormatterBuilder(),0.04819,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,903,        return tx;,0.04819,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1442,        if (hms == null) {,0.04651,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1443,            hms = new DateTimeFormatterBuilder(),0.04651,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1449,        return hms;,0.04651,0,-1,0
org/joda/time/IllegalFieldValueException,7,41,        StringBuilder buf = new StringBuilder(),0.04545,0,-1,0
org/joda/time/IllegalFieldValueException,7,44,        if (lowerBound == null) {,0.04545,0,-1,0
org/joda/time/IllegalFieldValueException,7,59,        if (explain != null) {,0.04545,0,-1,0
org/joda/time/IllegalFieldValueException,7,63,        return buf.toString();,0.04545,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,549,        if (fieldType == null) {,0.04,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,552,"        return append0(new TextField(fieldType, true));",0.04,0,-1,0
org/joda/time/format/DateTimeFormatter,7,190,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.03738,0,-1,0
org/joda/time/format/DateTimeFormatter,7,193,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0.03738,0,-1,0
org/joda/time/format/DateTimeFormatter,7,204,        return iLocale;,0.03738,0,-1,0
org/joda/time/chrono/BasicChronology,7,584,        int thisYear = getYear(instant);,0.03636,0,-1,0
org/joda/time/chrono/BasicChronology,7,585,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.03636,0,-1,0
org/joda/time/chrono/BasicChronology,7,586,"        return getDaysInYearMonth(thisYear, thisMonth);",0.03636,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1822,            return estimatePrintedLength();,0.03361,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1754,            super();,0.03077,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1755,            iFieldType = fieldType;,0.03077,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1756,            iShort = isShort;,0.03077,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1757,        },0.03077,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0.03077,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1760,            return iShort ? 6 : 20;,0.03077,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1611,            long prev = transitions[i - 1];,0.0303,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1612,            if (prev > Long.MIN_VALUE) {,0.0303,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1613,                return prev - 1;,0.0303,0,-1,0
org/joda/time/DateTimeFieldType,7,378,        return iName;,0.0226,0,-1,0
org/joda/time/format/DateTimeFormat,7,486,                    builder.appendMonthOfYear(tokenLen);,0.01923,0,-1,0
org/joda/time/format/DateTimeFormat,7,488,                break;,0.01923,0,-1,0
org/joda/time/format/DateTimeFormat,7,490,                builder.appendDayOfMonth(tokenLen);,0.01887,0,-1,0
org/joda/time/format/DateTimeFormat,7,491,                break;,0.01887,0,-1,0
org/joda/time/format/DateTimeFormat,7,479,                if (tokenLen >= 3) {,0.01709,0,-1,0
org/joda/time/format/DateTimeFormat,7,551,                    builder.appendLiteral(sub.charAt(0));,0.01575,0,-1,0
org/joda/time/format/DateTimeFormat,7,613,                    i--;,0.01569,0,-1,0
org/joda/time/format/DateTimeFormat,7,614,                    break;,0.01569,0,-1,0
org/joda/time/format/DateTimeFormat,7,549,                String sub = token.substring(1);,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,550,                if (sub.length() == 1) {,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,596,            buf.append('\'');,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,598,            boolean inLiteral = false;,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,600,            for (; i < length; i++) {,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,601,                c = pattern.charAt(i);,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,603,                if (c == '\'') {,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,611,                } else if (!inLiteral &&,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,616,                    buf.append(c);,0.01563,0,-1,0
org/joda/time/format/DateTimeFormat,7,586,                char peek = pattern.charAt(i + 1);,0.01476,0,-1,0
org/joda/time/format/DateTimeFormat,7,587,                if (peek == c) {,0.01476,0,-1,0
org/joda/time/format/DateTimeFormat,7,683,                formatter = builder.toFormatter();,0.01429,0,-1,0
org/joda/time/format/DateTimeFormat,7,685,"                cPatternedCache.put(pattern, formatter);",0.01429,0,-1,0
org/joda/time/format/DateTimeFormat,7,687,        },0.01429,0,-1,0
org/joda/time/format/DateTimeFormat,7,688,        return formatter;,0.01429,0,-1,0
org/joda/time/format/DateTimeFormat,7,170,        return createFormatterForPattern(pattern);,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,674,        if (pattern == null || pattern.length() == 0) {,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,677,        DateTimeFormatter formatter = null;,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,678,        synchronized (cPatternedCache) {,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,679,            formatter = cPatternedCache.get(pattern);,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,680,            if (formatter == null) {,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0.01423,0,-1,0
org/joda/time/format/DateTimeFormat,7,682,"                parsePatternTo(builder, pattern);",0.01423,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,503,                return result;,0.01408,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,499,            DateTimeField other = obj.iField;,0.01394,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,500,            int result = compareReverse,0.01394,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,502,            if (result != 0) {,0.01394,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1259,            return position + 1;,0.01384,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,520,        return -a.compareTo(b);,0.01375,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,517,        if (b == null || !b.isSupported()) {,0.01365,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,354,            DurationField months = DurationFieldType.months().getField(iChrono);,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,355,            DurationField days = DurationFieldType.days().getField(iChrono);,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,356,            DurationField first = savedFields[0].iField.getDurationField();,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,366,"                millis = savedFields[i].set(millis, resetFields);",0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,511,        if (a == null || !a.isSupported()) {,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,482,            if (iText == null) {,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,483,"                millis = iField.set(millis, iValue);",0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,487,            if (reset) {,0.01351,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,490,            return millis;,0.01351,0,-1,0
org/joda/time/format/DateTimeFormat,7,563,    },0.01347,0,-1,0
org/joda/time/format/DateTimeFormat,7,583,            buf.append(c);,0.01347,0,-1,0
org/joda/time/format/DateTimeFormat,7,585,            while (i + 1 < length) {,0.01347,0,-1,0
org/joda/time/format/DateTimeFormat,7,400,        int length = pattern.length();,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,401,        int[] indexRef = new int[1];,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,403,        for (int i=0; i<length; i++) {,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,404,            indexRef[0] = i;,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,405,"            String token = parseToken(pattern, indexRef);",0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,406,            i = indexRef[0];,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,408,            int tokenLen = token.length();,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,409,            if (tokenLen == 0) {,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,412,            char c = token.charAt(0);,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,414,            switch (c) {,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,574,        StringBuilder buf = new StringBuilder();,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,576,        int i = indexRef[0];,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,577,        int length = pattern.length();,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,579,        char c = pattern.charAt(i);,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,621,        indexRef[0] = i;,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,622,        return buf.toString();,0.01342,0,-1,0
org/joda/time/format/DateTimeFormat,7,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",0.01329,0,-1,0
org/joda/time/format/DateTimeFormat,7,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0.01329,0,-1,0
org/joda/time/base/BaseDateTime,7,225,    },0.01311,0,-1,0
org/joda/time/base/BaseDateTime,7,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.01303,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1244,            char a = text.charAt(position);,0.01278,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1245,            char b = iValue;,0.01278,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1247,            if (a != b) {,0.01278,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0127,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1240,            if (position >= text.length()) {,0.01266,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1359,                length++;,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1360,            },0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1367,            if (length >= 9) {,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1372,                int i = position;,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1373,                if (negative) {,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1377,                    value = text.charAt(i++) - '0';,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1380,                },0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1381,                position += length;,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1382,                while (i < position) {,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1385,                if (negative) {,0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1390,"            bucket.saveField(iFieldType, value);",0.0125,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1391,            return position;,0.0125,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,345,        SavedField[] savedFields = iSavedFields;,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,346,        int count = iSavedFieldsCount;,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,347,        if (iSavedFieldsShared) {,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,351,"        sort(savedFields, count);",0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,352,        if (count > 0) {,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,363,        long millis = iMillis;,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,365,            for (int i = 0; i < count; i++) {,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,416,        if (high > 10) {,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,419,            for (int i=0; i<high; i++) {,0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,427,    },0.01246,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,248,    },0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,262,        SavedField[] savedFields = iSavedFields;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,263,        int savedFieldsCount = iSavedFieldsCount;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,274,        iSavedState = null;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,275,        savedFields[savedFieldsCount] = field;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,276,        iSavedFieldsCount = savedFieldsCount + 1;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,277,    },0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,467,"        SavedField(DateTimeField field, int value) {",0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,468,            iField = field;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,469,            iValue = value;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,470,            iText = null;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,471,            iLocale = null;,0.01238,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,472,        },0.01238,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2734,            DateTimeParser[] elements = iParsers;,0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2735,            if (elements == null) {,0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2739,            int len = elements.length;,0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2740,            for (int i=0; i<len && position >= 0; i++) {,0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2741,"                position = elements[i].parseInto(bucket, text, position);",0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2743,            return position;,0.01212,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1356,                if (c < '0' || c > '9') {,0.01208,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1332,            boolean negative = false;,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1333,            int length = 0;,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1334,            while (length < limit) {,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1335,                char c = text.charAt(position + length);,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1362,            if (length == 0) {,0.01205,0,-1,0
org/joda/time/format/DateTimeFormatter,7,932,        return parser;,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,120,        super();,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,73,    private SavedField[] iSavedFields = new SavedField[8];,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,121,        chrono = DateTimeUtils.getChronology(chrono);,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,122,        iMillis = instantLocal;,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,123,        iZone = chrono.getZone();,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,124,        iChrono = chrono.withUTC();,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,126,        iPivotYear = pivotYear;,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,127,        iDefaultYear = defaultYear;,0.01105,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,128,    },0.01105,0,-1,0
org/joda/time/format/DateTimeFormatter,7,928,        DateTimeParser parser = iParser;,0.01099,0,-1,0
org/joda/time/format/DateTimeFormatter,7,929,        if (parser == null) {,0.01099,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1405,            return iMaxParsedDigits;,0.01064,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0.01058,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1401,"            super(fieldType, maxParsedDigits, signed);",0.0105,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1402,        },0.0105,0,-1,0
org/joda/time/field/BaseDurationField,7,155,            return 1;,0.01039,0,-1,0
org/joda/time/field/BaseDurationField,7,146,        long otherMillis = otherField.getUnitMillis();,0.01018,0,-1,0
org/joda/time/field/BaseDurationField,7,147,        long thisMillis = getUnitMillis();,0.01018,0,-1,0
org/joda/time/field/BaseDurationField,7,149,        if (thisMillis == otherMillis) {,0.01018,0,-1,0
org/joda/time/field/BaseDurationField,7,152,        if (thisMillis < otherMillis) {,0.01018,0,-1,0
org/joda/time/field/BaseDurationField,7,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.01018,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,866,        return yearMonthDay();,0.00988,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1358,        if (ymd == null) {,0.00976,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1359,            ymd = new DateTimeFormatterBuilder(),0.00976,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1365,        return ymd;,0.00976,0,-1,0
org/joda/time/DurationFieldType,7,294,                    return chronology.months();,0.00966,0,-1,0
org/joda/time/DurationFieldType,7,298,                    return chronology.days();,0.00917,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1653,        if (lte == null) {,0.00832,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1654,            lte = new DateTimeFormatterBuilder(),0.00832,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1658,        return lte;,0.00832,0,-1,0
org/joda/time/format/DateTimeFormatter,7,129,        super();,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,130,        iPrinter = printer;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,131,        iParser = parser;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,132,        iLocale = locale;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,133,        iOffsetParsed = offsetParsed;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,134,        iChrono = chrono;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,135,        iZone = zone;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,136,        iPivotYear = pivotYear;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,137,        iDefaultYear = defaultYear;,0.00797,0,-1,0
org/joda/time/format/DateTimeFormatter,7,138,    },0.00797,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1703,        if (ze == null) {,0.00745,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1704,            ze = new DateTimeFormatterBuilder(),0.00745,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1708,        return ze;,0.00745,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2139,                est += iMinFields - 1;,0.00733,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2137,            int est = 1 + iMinFields << 1;,0.00704,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2138,            if (iShowSeparators) {,0.00704,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0.00704,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2144,            return est;,0.00704,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2274,            return estimatePrintedLength();,0.00704,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1091,        return append0(new TimeZoneOffset,0.00676,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2121,            super();,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2124,            iShowSeparators = showSeparators;,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2125,            if (minFields <= 0 || maxFields < minFields) {,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2128,            if (minFields > 4) {,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2132,            iMinFields = minFields;,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2133,            iMaxFields = maxFields;,0.00671,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2134,        },0.00671,0,-1,0
org/joda/time/DurationFieldType,7,282,            chronology = DateTimeUtils.getChronology(chronology);,0.00661,0,-1,0
org/joda/time/DurationFieldType,7,284,            switch (iOrdinal) {,0.00661,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1681,        if (sme == null) {,0.00657,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1682,            sme = new DateTimeFormatterBuilder(),0.00657,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1687,        return sme;,0.00657,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1671,        if (mhe == null) {,0.00654,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1672,            mhe = new DateTimeFormatterBuilder(),0.00654,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1677,        return mhe;,0.00654,0,-1,0
org/joda/time/chrono/ZonedChronology,7,144,        return localInstant;,0.00653,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1662,        if (hde == null) {,0.00651,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1663,            hde = new DateTimeFormatterBuilder(),0.00651,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1667,        return hde;,0.00651,0,-1,0
org/joda/time/chrono/ZonedChronology,7,138,        DateTimeZone zone = getZone();,0.00646,0,-1,0
org/joda/time/chrono/ZonedChronology,7,139,        int offset = zone.getOffsetFromLocal(localInstant);,0.00646,0,-1,0
org/joda/time/chrono/ZonedChronology,7,140,        localInstant -= offset;,0.00646,0,-1,0
org/joda/time/chrono/ZonedChronology,7,141,        if (offset != zone.getOffset(localInstant)) {,0.00646,0,-1,0
org/joda/time/chrono/ZonedChronology,7,118,        return localToUTC(getBase().getDateTimeMillis,0.00645,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0.00627,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00625,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0062,0,-1,0
org/joda/time/DateTimeZone,7,928,        } else if (offsetLocal >= 0) {,0.00593,0,-1,0
org/joda/time/DateTimeZone,7,938,        return offsetAdjusted;,0.00589,0,-1,0
org/joda/time/DateTimeZone,7,910,        final int offsetLocal = getOffset(instantLocal);,0.00579,0,-1,0
org/joda/time/DateTimeZone,7,912,        final long instantAdjusted = instantLocal - offsetLocal;,0.00579,0,-1,0
org/joda/time/DateTimeZone,7,913,        final int offsetAdjusted = getOffset(instantAdjusted);,0.00579,0,-1,0
org/joda/time/DateTimeZone,7,915,        if (offsetLocal != offsetAdjusted) {,0.00579,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1604,        if (dme == null) {,0.00576,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1605,            dme = new DateTimeFormatterBuilder(),0.00576,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1610,        return dme;,0.00576,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1594,        if (mye == null) {,0.00571,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1595,            mye = new DateTimeFormatterBuilder(),0.00571,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1600,        return mye;,0.00571,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0.00569,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0.00557,0,-1,0
org/joda/time/chrono/ZonedChronology,7,514,            return iLeapDurationField;,0.00557,0,-1,0
org/joda/time/chrono/ZonedChronology,7,547,            return iField.getMinimumValue();,0.00557,0,-1,0
org/joda/time/chrono/ZonedChronology,7,564,            return iField.getMaximumValue();,0.00557,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1585,        if (ye == null) {,0.00556,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1586,            ye = new DateTimeFormatterBuilder(),0.00556,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1590,        return ye;,0.00556,0,-1,0
org/joda/time/DateTimeFieldType,7,498,                    return chronology.dayOfMonth();,0.00552,0,-1,0
org/joda/time/format/DateTimeFormatter,7,943,        chrono = DateTimeUtils.getChronology(chrono);,0.00543,0,-1,0
org/joda/time/format/DateTimeFormatter,7,944,        if (iChrono != null) {,0.00543,0,-1,0
org/joda/time/format/DateTimeFormatter,7,947,        if (iZone != null) {,0.00543,0,-1,0
org/joda/time/format/DateTimeFormatter,7,950,        return chrono;,0.00543,0,-1,0
org/joda/time/base/AbstractInstant,7,260,            return true;,0.00541,0,-1,0
org/joda/time/chrono/GJChronology,7,204,                for (int i = chronos.size(); --i >= 0;) {,0.0054,0,-1,0
org/joda/time/chrono/GJChronology,7,205,                    chrono = chronos.get(i);,0.0054,0,-1,0
org/joda/time/chrono/GJChronology,7,206,                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.0054,0,-1,0
org/joda/time/chrono/GJChronology,7,209,                        return chrono;,0.0054,0,-1,0
org/joda/time/chrono/GJChronology,7,395,        return iCutoverInstant;,0.0054,0,-1,0
org/joda/time/chrono/GJChronology,7,404,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.00538,0,-1,0
org/joda/time/chrono/ZonedChronology,7,496,            return iDurationField;,0.00533,0,-1,0
org/joda/time/chrono/ZonedChronology,7,500,            return iRangeDurationField;,0.00533,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,279,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,280,    },0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,219,"                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,220,                chrono = new GJChronology,0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,485,            return;,0.00532,0,-1,0
org/joda/time/chrono/GJChronology,7,305,        return withZone(DateTimeZone.UTC);,0.00526,0,-1,0
org/joda/time/chrono/GJChronology,7,315,        if (zone == null) {,0.00526,0,-1,0
org/joda/time/chrono/GJChronology,7,318,        if (zone == getZone()) {,0.00526,0,-1,0
org/joda/time/chrono/GJChronology,7,319,            return this;,0.00526,0,-1,0
org/joda/time/chrono/GJChronology,7,291,        if ((base = getBase()) != null) {,0.00524,0,-1,0
org/joda/time/chrono/GJChronology,7,294,        return DateTimeZone.UTC;,0.00524,0,-1,0
org/joda/time/chrono/GJChronology,7,194,            cutoverInstant = gregorianCutover.toInstant();,0.00522,0,-1,0
org/joda/time/chrono/ZonedChronology,7,471,            return result;,0.00522,0,-1,0
org/joda/time/Instant,7,144,        return this;,0.00522,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0.00517,0,-1,0
org/joda/time/DateTimeFieldType,7,496,                    return chronology.monthOfYear();,0.00515,0,-1,0
org/joda/time/chrono/ZonedChronology,7,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.00515,0,-1,0
org/joda/time/chrono/ZonedChronology,7,465,            if (get(result) != value) {,0.00515,0,-1,0
org/joda/time/DateTimeFieldType,7,492,                    return chronology.year();,0.00512,0,-1,0
org/joda/time/chrono/ZonedChronology,7,462,            long localInstant = iZone.convertUTCToLocal(instant);,0.00506,0,-1,0
org/joda/time/chrono/ZonedChronology,7,463,"            localInstant = iField.set(localInstant, value);",0.00506,0,-1,0
org/joda/time/DateTimeZone,7,985,"        return convertLocalToUTC(instantLocal, strict);",0.00505,0,-1,0
org/joda/time/DateTimeZone,7,1002,        int offsetLocal = getOffset(instantLocal);,0.00504,0,-1,0
org/joda/time/DateTimeZone,7,1004,        int offset = getOffset(instantLocal - offsetLocal);,0.00504,0,-1,0
org/joda/time/DateTimeZone,7,1006,        if (offsetLocal != offset) {,0.00504,0,-1,0
org/joda/time/DateTimeZone,7,1035,        long instantUTC = instantLocal - offset;,0.00504,0,-1,0
org/joda/time/DateTimeZone,7,1037,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.00504,0,-1,0
org/joda/time/DateTimeZone,7,1040,        return instantUTC;,0.00504,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0.00503,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",0.00493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",0.00493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2778,            if (array != null) {,0.00493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2779,                for (int i=0; i<array.length; i++) {,0.00493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2780,                    list.add(array[i]);,0.00493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2783,        },0.00493,0,-1,0
org/joda/time/chrono/AssembledChronology,7,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00492,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,486,        if (fieldType == null) {,0.00491,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,489,        if (maxDigits < minDigits) {,0.00491,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,492,        if (minDigits < 0 || maxDigits <= 0) {,0.00491,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,495,        if (minDigits <= 1) {,0.00491,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0.00491,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,217,        if (formatter == null) {,0.00483,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0.00483,0,-1,0
org/joda/time/format/DateTimeFormatter,7,174,        return iParser;,0.00481,0,-1,0
org/joda/time/format/DateTimeFormatter,7,156,        return iPrinter;,0.00473,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,383,        iFormatter = null;,0.00468,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,384,        iElementPairs.add(printer);,0.00468,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,385,        iElementPairs.add(parser);,0.00468,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,386,        return this;,0.00468,0,-1,0
org/joda/time/base/AbstractInstant,7,259,        if (this == readableInstant) {,0.00463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1169,            return true;,0.0046,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1179,            return true;,0.0046,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1142,                Object printer = iElementPairs.get(0);,0.00458,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1143,                Object parser = iElementPairs.get(1);,0.00458,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1145,                if (printer != null) {,0.00458,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1146,                    if (printer == parser || parser == null) {,0.00458,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1147,                        f = printer;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,131,"        super(base, param);",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,132,    },0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,104,        if (zone == null) {,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,108,        synchronized (cCache) {,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,109,            chrono = cCache.get(zone);,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,110,            if (chrono == null) {,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,112,"                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,114,"                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,115,"                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,116,"                cCache.put(zone, chrono);",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,118,        },0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,119,        return chrono;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,215,        if (getParam() == null) {,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,217,            DateTimeField field = fields.year;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,218,            fields.year = new OffsetDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,222,            field = fields.yearOfEra;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,223,            fields.yearOfEra = new DelegatedDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,227,            field = fields.weekyear;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,228,            fields.weekyear = new OffsetDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,231,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,232,            fields.centuryOfEra = new DividedDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,235,            field = new RemainderDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,237,            fields.yearOfCentury = new OffsetDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,240,            field = new RemainderDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,242,            fields.weekyearOfCentury = new OffsetDateTimeField(,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,245,            fields.era = ERA_FIELD;,0.00458,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,247,    },0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,53,"        this(chronology, field, 0);",0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,54,    },0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,64,        super(field);,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,65,        iChronology = chronology;,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,66,        int min = super.getMinimumValue();,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,67,        if (min < skip) {,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,68,            iMinValue = min + 1;,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,74,        iSkip = skip;,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,75,    },0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,88,        if (value <= iSkip) {,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,89,            value--;,0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,91,"        return super.set(millis, value);",0.00458,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,95,        return iMinValue;,0.00458,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.00458,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,153,"        return super.set(instant, value - iOffset);",0.00458,0,-1,0
org/joda/time/field/SkipDateTimeField,7,82,            value--;,0.00458,0,-1,0
org/joda/time/chrono/GJChronology,7,173,"        return getInstance(zone, gregorianCutover, 4);",0.00457,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,82,"        return iField.set(instant, value);",0.00457,0,-1,0
org/joda/time/field/SkipDateTimeField,7,100,        return iMinValue;,0.00457,0,-1,0
org/joda/time/chrono/GJChronology,7,803,            return iJulianField.getMinimumValue();,0.00457,0,-1,0
org/joda/time/chrono/GJChronology,7,834,            return iGregorianField.getMaximumValue();,0.00457,0,-1,0
org/joda/time/chrono/JulianChronology,7,79,            if (year == 0) {,0.00457,0,-1,0
org/joda/time/chrono/JulianChronology,7,83,            year++;,0.00457,0,-1,0
org/joda/time/chrono/GJChronology,7,192,            cutoverInstant = DEFAULT_CUTOVER;,0.00456,0,-1,0
org/joda/time/chrono/AssembledChronology,7,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,132,"        long instant = year().set(0, year);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.00453,0,-1,0
org/joda/time/chrono/BaseChronology,7,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,587,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,722,                    if (instant + iGapDuration < iCutover) {,0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,723,                        instant = gregorianToJulian(instant);,0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,726,                    if (get(instant) != value) {,0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,923,                return gregorianToJulianByYear(instant);,0.00453,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,228,        return iChronology.getMaxYear();,0.00453,0,-1,0
org/joda/time/chrono/GJChronology,7,74,public final class GJChronology extends AssembledChronology {,0.00452,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,172,"        return iField.set(instant, value);",0.00452,0,-1,0
org/joda/time/chrono/GJChronology,7,655,                return iJulianField.get(instant);,0.00452,0,-1,0
org/joda/time/chrono/GJChronology,7,732,"                instant = iJulianField.set(instant, value);",0.00452,0,-1,0
org/joda/time/chrono/GJChronology,7,733,                if (instant >= iCutover) {,0.00452,0,-1,0
org/joda/time/chrono/GJChronology,7,920,            if (iConvertByWeekyear) {,0.00452,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,228,        return iField.getMaximumValue();,0.00451,0,-1,0
org/joda/time/chrono/JulianChronology,7,78,        if (year <= 0) {,0.00451,0,-1,0
org/joda/time/chrono/JulianChronology,7,85,        return year;,0.00451,0,-1,0
org/joda/time/chrono/JulianChronology,7,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.00451,0,-1,0
org/joda/time/chrono/GJChronology,7,718,            if (instant >= iCutover) {,0.0045,0,-1,0
org/joda/time/chrono/GJChronology,7,719,"                instant = iGregorianField.set(instant, value);",0.0045,0,-1,0
org/joda/time/chrono/GJChronology,7,720,                if (instant < iCutover) {,0.0045,0,-1,0
org/joda/time/chrono/GJChronology,7,745,            return instant;,0.0045,0,-1,0
org/joda/time/chrono/GJChronology,7,652,            if (instant >= iCutover) {,0.0045,0,-1,0
org/joda/time/chrono/BasicChronology,7,411,            i2 = i2 - unitMillis + 1;,0.00445,0,-1,0
org/joda/time/chrono/GregorianChronology,7,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.00445,0,-1,0
org/joda/time/chrono/GJChronology,7,796,            return iGregorianField.getLeapDurationField();,0.00434,0,-1,0
org/joda/time/chrono/GJChronology,7,776,            return iRangeDurationField;,0.0043,0,-1,0
org/joda/time/chrono/JulianChronology,7,224,            leapYears = (relativeYear + 3) >> 2;,0.00429,0,-1,0
org/joda/time/chrono/GJChronology,7,509,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,510,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,511,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,512,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,513,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,514,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,515,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,516,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,517,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,518,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,520,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,131,            instant = iChronology.getYearMillis(year + 1);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,269,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,270,    },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,83,        return to.getDateTimeMillis,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,189,        zone = DateTimeUtils.getZone(zone);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,191,        if (gregorianCutover == null) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,198,        synchronized (cCache) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,199,            ArrayList<GJChronology> chronos = cCache.get(zone);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,200,            if (chronos == null) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,201,                chronos = new ArrayList<GJChronology>(2);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,202,"                cCache.put(zone, chronos);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,213,            if (zone == DateTimeZone.UTC) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,214,                chrono = new GJChronology,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,226,            chronos.add(chrono);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,227,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,228,        return chrono;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,473,        Object[] params = (Object[])getParam();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,475,        JulianChronology julian = (JulianChronology)params[0];,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,476,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,477,        Instant cutoverInstant = (Instant)params[2];,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,478,        iCutoverMillis = cutoverInstant.getMillis();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,480,        iJulianChronology = julian;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,481,        iGregorianChronology = gregorian;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,482,        iCutoverInstant = cutoverInstant;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,484,        if (getBase() != null) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,488,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,493,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,499,        fields.copyFieldsFrom(gregorian);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,505,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,525,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,534,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,535,            fields.dayOfYear = new CutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,540,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,541,            fields.weekOfWeekyear = new CutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,549,            fields.year = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,551,            fields.years = fields.year.getDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,552,            fields.yearOfEra = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,554,            fields.yearOfCentury = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,557,            fields.centuryOfEra = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,559,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,561,            fields.monthOfYear = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,563,            fields.months = fields.monthOfYear.getDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,565,            fields.weekyear = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,567,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,569,            fields.weekyears = fields.weekyear.getDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,575,            CutoverField cf = new CutoverField,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,577,            cf.iRangeDurationField = fields.months;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,578,            fields.dayOfMonth = cf;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,580,    },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,583,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,942,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,943,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,953,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,954,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,964,        {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,965,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,966,            if (durationField == null) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,967,"                durationField = new LinkedDurationField(iDurationField, this);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,969,            iDurationField = durationField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,970,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,620,"            this(julianField, gregorianField, cutoverMillis, false);",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,621,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,630,"                     long cutoverMillis, boolean convertByWeekyear) {",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,631,            super(gregorianField.getType());,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,632,            iJulianField = julianField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,633,            iGregorianField = gregorianField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,634,            iCutover = cutoverMillis;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,635,            iConvertByWeekyear = convertByWeekyear;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,638,            iDurationField = gregorianField.getDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,640,            DurationField rangeField = gregorianField.getRangeDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,641,            if (rangeField == null) {,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,642,                rangeField = julianField.getRangeDurationField();,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,644,            iRangeDurationField = rangeField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,645,        },0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,772,            return iDurationField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,1091,"            super(durationField, durationField.getType());",0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,1092,            iField = dateTimeField;,0.00428,0,-1,0
org/joda/time/chrono/GJChronology,7,1093,        },0.00428,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,127,        int year = get(instant);,0.00428,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.00428,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,129,        if (instant != yearStartMillis) {,0.00428,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,133,        return instant;,0.00428,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,72,        if (years == 0) {,0.00427,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,75,"        return set(instant, get(instant) + years);",0.00427,0,-1,0
org/joda/time/DateTimeZone,7,983,            return instantUTC;,0.00427,0,-1,0
org/joda/time/chrono/JulianChronology,7,211,        return (year & 3) == 0;,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,219,        int relativeYear = year - 1968;,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,221,        if (relativeYear <= 0) {,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,253,        return MILLIS_PER_YEAR / 2;,0.00426,0,-1,0
org/joda/time/chrono/JulianChronology,7,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.00426,0,-1,0
org/joda/time/field/BaseDateTimeField,7,886,        long newInstant = roundFloor(instant);,0.00426,0,-1,0
org/joda/time/field/BaseDateTimeField,7,887,        if (newInstant != instant) {,0.00426,0,-1,0
org/joda/time/field/BaseDateTimeField,7,888,"            instant = add(newInstant, 1);",0.00426,0,-1,0
org/joda/time/field/BaseDateTimeField,7,890,        return instant;,0.00426,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,181,        } else if ( workWoyYear > year ) {,0.00426,0,-1,0
org/joda/time/field/SkipDateTimeField,7,80,        int value = super.get(millis);,0.00426,0,-1,0
org/joda/time/field/SkipDateTimeField,7,81,        if (value <= iSkip) {,0.00426,0,-1,0
org/joda/time/field/SkipDateTimeField,7,84,        return value;,0.00426,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.00425,0,-1,0
org/joda/time/chrono/BasicChronology,7,549,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.00424,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0.00424,0,-1,0
org/joda/time/chrono/BasicChronology,7,546,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.00423,0,-1,0
org/joda/time/chrono/BasicChronology,7,548,            if (daysSince19700101 < -3) {,0.00423,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,434,        if (fieldType == null) {,0.00422,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,437,        if (maxDigits < minDigits) {,0.00422,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,440,        if (minDigits < 0 || maxDigits <= 0) {,0.00422,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,443,        if (minDigits <= 1) {,0.00422,0,-1,0
org/joda/time/chrono/BasicChronology,7,153,        if ((base = getBase()) != null) {,0.00422,0,-1,0
org/joda/time/chrono/BasicChronology,7,157,        FieldUtils.verifyValueBounds,0.00422,0,-1,0
org/joda/time/chrono/BasicChronology,7,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.00422,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,96,        return iField.get(instant);,0.00422,0,-1,0
org/joda/time/chrono/BasicChronology,7,185,        return iMinDaysInFirstWeek;,0.00422,0,-1,0
org/joda/time/chrono/BasicChronology,7,505,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.00421,0,-1,0
org/joda/time/chrono/JulianChronology,7,50,public final class JulianChronology extends BasicGJChronology {,0.00421,0,-1,0
org/joda/time/DateTimeUtils,7,302,        return zone;,0.00421,0,-1,0
org/joda/time/DateTimeUtils,7,299,        if (zone == null) {,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,133,        int thisWeekyear = get( instant );,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,134,        if ( thisWeekyear == year ) {,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,155,        if ( setToWeek > maxOutWeeks ) {,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,162,        long workInstant = instant; // Get a copy,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,168,"        workInstant = iChronology.setYear( workInstant, year );",0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,173,        int workWoyYear = get( workInstant );,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,179,        if ( workWoyYear < year ) {,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.00421,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,204,        return workInstant;,0.00421,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,95,            instant += 1;,0.00419,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.00419,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.00418,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.00418,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,236,        if (wow > 1) {,0.00418,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,239,        return instant;,0.00418,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.00418,0,-1,0
org/joda/time/chrono/BasicChronology,7,336,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00418,0,-1,0
org/joda/time/chrono/BasicChronology,7,337,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00418,0,-1,0
org/joda/time/chrono/BasicChronology,7,338,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.00418,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.00415,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,163,        return getMaximumValue(instant);,0.00415,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1236,            return 1;,0.00413,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1212,            return 1;,0.00413,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,60,        return iChronology.getWeekyear(instant);,0.00413,0,-1,0
org/joda/time/chrono/BasicChronology,7,563,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.00412,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1326,            return iMaxParsedDigits;,0.00412,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,103,        return DateTimeConstants.MONDAY;,0.00412,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,112,        return DateTimeConstants.SUNDAY;,0.00412,0,-1,0
org/joda/time/chrono/BasicChronology,7,502,        int year = getYear(instant);,0.00411,0,-1,0
org/joda/time/chrono/BasicChronology,7,503,"        int week = getWeekOfWeekyear(instant, year);",0.00411,0,-1,0
org/joda/time/chrono/BasicChronology,7,504,        if (week == 1) {,0.00411,0,-1,0
org/joda/time/field/BaseDateTimeField,7,792,        return getMaximumValue();,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2641,                int size = parserList.size();,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2642,                iParsers = new DateTimeParser[size];,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2643,                int parseEst = 0;,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2644,                for (int i=0; i<size; i++) {,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2646,                    parseEst += parser.estimateParsedLength();,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2647,                    iParsers[i] = parser;,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2649,                iParsedLengthEstimate = parseEst;,0.0041,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2626,                int size = printerList.size();,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2627,                iPrinters = new DateTimePrinter[size];,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2628,                int printEst = 0;,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2629,                for (int i=0; i<size; i++) {,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2631,                    printEst += printer.estimatePrintedLength();,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2632,                    iPrinters[i] = printer;,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2634,                iPrintedLengthEstimate = printEst;,0.00409,0,-1,0
org/joda/time/chrono/BasicChronology,7,423,            if (isLeapYear(year)) {,0.00409,0,-1,0
org/joda/time/chrono/BasicChronology,7,426,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.00409,0,-1,0
org/joda/time/chrono/BasicChronology,7,429,            yearStart += oneYear;,0.00409,0,-1,0
org/joda/time/chrono/BasicChronology,7,431,            if (yearStart <= instant) {,0.00409,0,-1,0
org/joda/time/chrono/BasicChronology,7,433,                year++;,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2761,                Object element = elementPairs.get(i);,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2762,                if (element instanceof Composite) {,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2765,                    printerList.add(element);,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2768,                element = elementPairs.get(i + 1);,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2769,                if (element instanceof Composite) {,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2772,                    parserList.add(element);,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1468,            return iMaxParsedDigits;,0.00409,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,397,        return append0(new CharacterLiteral(c));,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1463,"            super(fieldType, maxParsedDigits, signed);",0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1464,            iMinPrintedDigits = minPrintedDigits;,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1465,        },0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1207,            super();,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1208,            iValue = value;,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1209,        },0.00408,0,-1,0
org/joda/time/chrono/BasicChronology,7,353,            return jan1millis + (8 - jan1dayOfWeek),0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1319,            super();,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1320,            iFieldType = fieldType;,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1321,            iMaxParsedDigits = maxParsedDigits;,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1322,            iSigned = signed;,0.00408,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1323,        },0.00408,0,-1,0
org/joda/time/chrono/BasicChronology,7,517,"        return getWeekOfWeekyear(instant, getYear(instant));",0.00407,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1167,                return ((Composite)f).isPrinter();,0.00406,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1177,                return ((Composite)f).isParser();,0.00406,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2747,            return iPrinters != null;,0.00406,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2751,            return iParsers != null;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,162,"        super(base, param, minDaysInFirstWeek);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,163,    },0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,75,    },0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,114,"        return getInstance(zone, 4);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,125,        if (zone == null) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,129,        synchronized (cCache) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,130,            JulianChronology[] chronos = cCache.get(zone);,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,131,            if (chronos == null) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,132,                chronos = new JulianChronology[7];,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,133,"                cCache.put(zone, chronos);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,140,            },0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,141,            if (chrono == null) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,142,                if (zone == DateTimeZone.UTC) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,151,        },0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,152,        return chrono;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,241,        return MIN_YEAR;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,245,        return MAX_YEAR;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,249,        return MILLIS_PER_YEAR;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,257,        return MILLIS_PER_MONTH;,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,265,        if (getBase() == null) {,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,266,            super.assemble(fields);,0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.00406,0,-1,0
org/joda/time/chrono/JulianChronology,7,271,    },0.00406,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1155,                f = new Composite(iElementPairs);,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2615,            super();,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2617,            List<Object> printerList = new ArrayList<Object>();,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2618,            List<Object> parserList = new ArrayList<Object>();,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2620,"            decompose(elementPairs, printerList, parserList);",0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2651,        },0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2759,            int size = elementPairs.size();,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2760,            for (int i=0; i<size; i+=2) {,0.00405,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2775,        },0.00405,0,-1,0
org/joda/time/chrono/BasicChronology,7,525,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.00404,0,-1,0
org/joda/time/chrono/BasicChronology,7,526,        if (instant < firstWeekMillis1) {,0.00404,0,-1,0
org/joda/time/chrono/BasicChronology,7,529,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.00404,0,-1,0
org/joda/time/chrono/BasicChronology,7,530,        if (instant >= firstWeekMillis2) {,0.00404,0,-1,0
org/joda/time/chrono/BasicChronology,7,533,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.00404,0,-1,0
org/joda/time/DateTimeZone,7,979,        int offsetOriginal = getOffset(originalInstantUTC);,0.00403,0,-1,0
org/joda/time/DateTimeZone,7,980,        long instantUTC = instantLocal - offsetOriginal;,0.00403,0,-1,0
org/joda/time/DateTimeZone,7,981,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.00403,0,-1,0
org/joda/time/DateTimeZone,7,982,        if (offsetLocalFromOriginal == offsetOriginal) {,0.00403,0,-1,0
org/joda/time/chrono/BasicChronology,7,348,        long jan1millis = getYearMillis(year);,0.00403,0,-1,0
org/joda/time/chrono/BasicChronology,7,349,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.00403,0,-1,0
org/joda/time/chrono/BasicChronology,7,351,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.00403,0,-1,0
org/joda/time/field/DecoratedDurationField,7,101,        return iField.getUnitMillis();,0.00399,0,-1,0
org/joda/time/chrono/ZonedChronology,7,403,            long localInstant = iZone.convertUTCToLocal(instant);,0.00397,0,-1,0
org/joda/time/chrono/ZonedChronology,7,404,            return iField.get(localInstant);,0.00397,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,112,            parser = (DateTimeParser) f;,0.00394,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,108,            printer = (DateTimePrinter) f;,0.00394,0,-1,0
org/joda/time/format/DateTimeFormatter,7,110,        super();,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,111,        iPrinter = printer;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,112,        iParser = parser;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,113,        iLocale = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,114,        iOffsetParsed = false;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,115,        iChrono = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,116,        iZone = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,117,        iPivotYear = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,118,        iDefaultYear = 2000;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatter,7,119,    },0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,105,        Object f = getFormatter();,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,106,        DateTimePrinter printer = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,107,        if (isPrinter(f)) {,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,110,        DateTimeParser parser = null;,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,111,        if (isParser(f)) {,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,114,        if (printer != null || parser != null) {,0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,115,"            return new DateTimeFormatter(printer, parser);",0.00393,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1165,        if (f instanceof DateTimePrinter) {,0.00391,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1166,            if (f instanceof Composite) {,0.00391,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1175,        if (f instanceof DateTimeParser) {,0.00391,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1176,            if (f instanceof Composite) {,0.00391,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,374,        iFormatter = null;,0.0039,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,376,        iElementPairs.add(element);,0.0039,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,377,        iElementPairs.add(element);,0.0039,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,378,        return this;,0.0039,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1138,        Object f = iFormatter;,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1140,        if (f == null) {,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1141,            if (iElementPairs.size() == 2) {,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1154,            if (f == null) {,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1158,            iFormatter = f;,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1161,        return f;,0.00389,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,84,        super();,0.00388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,85,        iElementPairs = new ArrayList<Object>();,0.00388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,86,    },0.00388,0,-1,0
org/joda/time/Instant,7,118,        super();,0.00386,0,-1,0
org/joda/time/Instant,7,119,        iMillis = instant;,0.00386,0,-1,0
org/joda/time/Instant,7,120,    },0.00386,0,-1,0
org/joda/time/Instant,7,256,        return iMillis;,0.00381,0,-1,0
org/joda/time/DateTimeFieldType,7,480,            chronology = DateTimeUtils.getChronology(chronology);,0.00372,0,-1,0
org/joda/time/DateTimeFieldType,7,482,            switch (iOrdinal) {,0.00372,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1535,                if (i > 0) {,0.0037,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1536,                    return iWallOffsets[i - 1];,0.0037,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1574,                return transitions[i];,0.00369,0,-1,0
org/joda/time/base/BaseDateTime,7,304,        return iChronology;,0.00368,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,51,        super(DateTimeFieldType.era());,0.00358,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,52,        iEraText = text;,0.00358,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,53,    },0.00358,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00358,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,111,        return null;,0.00358,0,-1,0
org/joda/time/DateTime,7,527,        return this;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,99,"        super(base, null);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,101,        iLowerLimit = lowerLimit;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,102,        iUpperLimit = upperLimit;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,103,    },0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,67,        if (base == null) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,74,        if (lowerLimit != null && upperLimit != null) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,213,"        fields.eras = convertField(fields.eras, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,214,"        fields.centuries = convertField(fields.centuries, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,215,"        fields.years = convertField(fields.years, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,216,"        fields.months = convertField(fields.months, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,217,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,218,"        fields.weeks = convertField(fields.weeks, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,219,"        fields.days = convertField(fields.days, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,221,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,222,"        fields.hours = convertField(fields.hours, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,223,"        fields.minutes = convertField(fields.minutes, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,224,"        fields.seconds = convertField(fields.seconds, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,225,"        fields.millis = convertField(fields.millis, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,229,"        fields.year = convertField(fields.year, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,233,"        fields.era = convertField(fields.era, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,239,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,253,    },0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,256,        if (field == null || !field.isSupported()) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,257,            return field;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,259,        if (converted.containsKey(field)) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,260,            return (DurationField)converted.get(field);,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,262,        LimitDurationField limitField = new LimitDurationField(field);,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,263,"        converted.put(field, limitField);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,264,        return limitField;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,268,        if (field == null || !field.isSupported()) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,271,        if (converted.containsKey(field)) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,274,        LimitDateTimeField limitField =,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,279,"        converted.put(field, limitField);",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,280,        return limitField;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,453,                           DurationField leapDurationField) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,454,"            super(field, field.getType());",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,455,            iDurationField = durationField;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,456,            iRangeDurationField = rangeDurationField;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,457,            iLeapDurationField = leapDurationField;,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,458,        },0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,391,        LimitDurationField(DurationField field) {,0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,392,"            super(field, field.getType());",0.00358,0,-1,0
org/joda/time/chrono/LimitChronology,7,393,        },0.00358,0,-1,0
org/joda/time/DateTime,7,518,    },0.0035,0,-1,0
org/joda/time/DateTime,7,516,"        super(year, monthOfYear, dayOfMonth,",0.00349,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,88,        return iField.isSupported();,0.00343,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,208,        return iField.getLeapDurationField();,0.00343,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,192,        return iField.getDurationField();,0.00342,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,80,        return iType;,0.0034,0,-1,0
org/joda/time/DateTimeZone,7,952,        int offset = getOffset(instantUTC);,0.00331,0,-1,0
org/joda/time/DateTimeZone,7,953,        long instantLocal = instantUTC + offset;,0.00331,0,-1,0
org/joda/time/DateTimeZone,7,955,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.00331,0,-1,0
org/joda/time/DateTimeZone,7,958,        return instantLocal;,0.00331,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,196,        return iField.getRangeDurationField();,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,54,"        this(chronology, field, 0);",0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,55,    },0.00326,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,212,        return iField.getMinimumValue();,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,65,        super(field);,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,66,        iChronology = chronology;,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,67,        int min = super.getMinimumValue();,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,68,        if (min < skip) {,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,69,            iMinValue = min - 1;,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,75,        iSkip = skip;,0.00326,0,-1,0
org/joda/time/field/SkipDateTimeField,7,76,    },0.00326,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,224,        return iChronology.getMinYear();,0.00325,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,52,"        this(field, null);",0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,53,    },0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,62,        super();,0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,63,        if (field == null) {,0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,66,        iField = field;,0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,67,        iType = (type == null ? field.getType() : type);,0.00323,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,68,    },0.00323,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,92,        if (instant >= 0) {,0.00321,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,115,        return iChronology.getMinYear();,0.00317,0,-1,0
org/joda/time/base/BaseDateTime,7,295,        return iMillis;,0.00309,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,165,        return getWrappedField().getLeapDurationField();,0.00296,0,-1,0
org/joda/time/chrono/GregorianChronology,7,213,                leapYears--;,0.00288,0,-1,0
org/joda/time/chrono/BasicChronology,7,444,"        return getMonthOfYear(millis, getYear(millis));",0.0028,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,72,        return iChronology.getMonthOfYear(instant);,0.0028,0,-1,0
org/joda/time/chrono/BasicChronology,7,167,        if ((base = getBase()) != null) {,0.00273,0,-1,0
org/joda/time/chrono/BasicChronology,7,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.00273,0,-1,0
org/joda/time/chrono/BasicChronology,7,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.00273,0,-1,0
org/joda/time/chrono/BasicChronology,7,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.00273,0,-1,0
org/joda/time/chrono/BasicChronology,7,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.00273,0,-1,0
org/joda/time/chrono/BasicChronology,7,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.00273,0,-1,0
org/joda/time/chrono/AssembledChronology,7,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.00266,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,56,        return iChronology.getDayOfWeek(instant);,0.0026,0,-1,0
org/joda/time/chrono/BasicChronology,7,543,        if (instant >= 0) {,0.00259,0,-1,0
org/joda/time/chrono/AssembledChronology,7,107,        if ((base = iBase) != null) {,0.00256,0,-1,0
org/joda/time/chrono/AssembledChronology,7,108,            return base.getZone();,0.00256,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,0.00255,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.00255,0,-1,0
org/joda/time/chrono/BasicChronology,7,467,"        int month = getMonthOfYear(millis, year);",0.00254,0,-1,0
org/joda/time/chrono/BasicChronology,7,468,"        return getDayOfMonth(millis, year, month);",0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,300,        int thisYear = iChronology.getYear(instant);,0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,304,        if (thisDom > maxDom) {,0.00254,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.00254,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.00253,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,112,        return instant + (value - get(instant)) * iUnitMillis;,0.00253,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,82,        FieldUtils.verifyValueBounds,0.00252,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,84,"        return iChronology.setYear(instant, year);",0.00252,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,55,        return 1;,0.00249,0,-1,0
org/joda/time/chrono/BasicChronology,7,561,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.00249,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,160,                break;,0.00247,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.00247,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,80,        return instant + (value - get(instant)) * iUnitMillis;,0.00247,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.00246,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,197,                if (iOffset == Integer.MIN_VALUE) {,0.00246,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.00246,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,200,                return iOffset;,0.00246,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1533,            i = ~i;,0.00246,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1534,            if (i < transitions.length) {,0.00246,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,103,        return getInfo(instant).getOffset(instant);,0.00246,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1528,            long[] transitions = iTransitions;,0.00246,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.00246,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1530,            if (i >= 0) {,0.00246,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,180,"        Info(DateTimeZone zone, long periodStart) {",0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,177,        private int iOffset = Integer.MIN_VALUE;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,181,            iPeriodStart = periodStart;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,182,            iZoneRef = zone;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,183,        },0.00245,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1570,            long[] transitions = iTransitions;,0.00245,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.00245,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.00245,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1573,            if (i < transitions.length) {,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,140,        int period = (int)(millis >> 32);,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,141,        Info[] cache = iInfoCache;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,142,        int index = period & cInfoCacheMask;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,143,        Info info = cache[index];,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,145,            info = createInfo(millis);,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,146,            cache[index] = info;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,148,        return info;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,152,        long periodStart = millis & (0xffffffffL << 32);,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,153,"        Info info = new Info(iZone, periodStart);",0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,155,        long end = periodStart | 0xffffffffL;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,156,        Info chain = info;,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,158,            long next = iZone.nextTransition(periodStart);,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,159,            if (next == periodStart || next > end) {,0.00245,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,166,        return info;,0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,175,        int thisYear = getYear(instant);,0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,177,        int millisOfDay = getMillisOfDay(instant);,0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,196,        instant += millisOfDay;,0.00245,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,198,        return instant;,0.00245,0,-1,0
org/joda/time/chrono/BasicChronology,7,494,        long yearStart = getYearMillis(year);,0.00244,0,-1,0
org/joda/time/chrono/BasicChronology,7,495,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00244,0,-1,0
org/joda/time/base/BaseDateTime,7,256,"        iMillis = checkInstant(instant, iChronology);",0.00244,0,-1,0
org/joda/time/base/BaseDateTime,7,257,    },0.00244,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,184,                    dayOfYear--;,0.00243,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,131,        return iRange - 1;,0.00243,0,-1,0
org/joda/time/base/BaseDateTime,7,252,        super();,0.00243,0,-1,0
org/joda/time/base/BaseDateTime,7,253,        iChronology = checkChronology(chronology);,0.00243,0,-1,0
org/joda/time/base/BaseDateTime,7,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00243,0,-1,0
org/joda/time/chrono/BasicChronology,7,560,        if (instant >= 0) {,0.00242,0,-1,0
org/joda/time/chrono/BasicChronology,7,614,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.00236,0,-1,0
org/joda/time/chrono/BasicChronology,7,615,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.00236,0,-1,0
org/joda/time/chrono/BasicChronology,7,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.00236,0,-1,0
org/joda/time/chrono/BasicChronology,7,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.00236,0,-1,0
org/joda/time/chrono/BasicChronology,7,691,        return getMaxMonth();,0.00236,0,-1,0
org/joda/time/field/FieldUtils,7,240,    },0.00236,0,-1,0
org/joda/time/field/FieldUtils,7,222,    },0.00235,0,-1,0
org/joda/time/field/FieldUtils,7,235,        if ((value < lowerBound) || (value > upperBound)) {,0.00235,0,-1,0
org/joda/time/field/FieldUtils,7,217,        if ((value < lowerBound) || (value > upperBound)) {,0.00235,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.0023,0,-1,0
org/joda/time/chrono/ISOChronology,7,77,        return INSTANCE_UTC;,0.00229,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,79,        if (instant >= 0) {,0.00226,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,120,        if (isLeapYear(year)) {,0.00225,0,-1,0
org/joda/time/chrono/BasicChronology,7,457,        int year = getYear(millis);,0.00224,0,-1,0
org/joda/time/chrono/BasicChronology,7,458,"        int month = getMonthOfYear(millis, year);",0.00224,0,-1,0
org/joda/time/chrono/BasicChronology,7,459,"        return getDayOfMonth(millis, year, month);",0.00224,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,47,        return iChronology.getDayOfMonth(instant);,0.00224,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,54,        return iChronology.getYear(instant);,0.00223,0,-1,0
org/joda/time/chrono/GregorianChronology,7,221,        return MIN_YEAR;,0.00222,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00222,0,-1,0
org/joda/time/chrono/BasicChronology,7,477,        long dateMillis = getYearMillis(year);,0.00222,0,-1,0
org/joda/time/chrono/BasicChronology,7,478,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.00222,0,-1,0
org/joda/time/chrono/BasicChronology,7,479,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00222,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.0022,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,93,        return,0.0022,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,182,                if (!isLeapYear(year)) {,0.00219,0,-1,0
org/joda/time/chrono/GregorianChronology,7,233,        return MILLIS_PER_YEAR / 2;,0.00218,0,-1,0
org/joda/time/chrono/GregorianChronology,7,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,408,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,409,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,410,        if (i2 < 0) {,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,413,        int year = (int) (i2 / unitMillis);,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,415,        long yearStart = getYearMillis(year);,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,416,        long diff = instant - yearStart;,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,418,        if (diff < 0) {,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,420,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.00218,0,-1,0
org/joda/time/chrono/BasicChronology,7,437,        return year;,0.00218,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,139,        if (isLeapYear(year)) {,0.00217,0,-1,0
org/joda/time/chrono/GregorianChronology,7,202,        int leapYears = year / 100;,0.00215,0,-1,0
org/joda/time/chrono/GregorianChronology,7,203,        if (year < 0) {,0.00215,0,-1,0
org/joda/time/chrono/GregorianChronology,7,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.00215,0,-1,0
org/joda/time/chrono/GregorianChronology,7,212,            if (isLeapYear(year)) {,0.00215,0,-1,0
org/joda/time/chrono/GregorianChronology,7,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.00215,0,-1,0
org/joda/time/chrono/GregorianChronology,7,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.00214,0,-1,0
org/joda/time/base/BaseDateTime,7,284,        return instant;,0.00212,0,-1,0
org/joda/time/chrono/BasicChronology,7,394,        long millis = getYearMillis(year);,0.00211,0,-1,0
org/joda/time/chrono/BasicChronology,7,395,"        millis += getTotalMillisByYearMonth(year, month);",0.00211,0,-1,0
org/joda/time/chrono/BasicChronology,7,396,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00211,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1541,                return iWallOffsets[i - 1];,0.00208,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1577,                return instant;,0.00207,0,-1,0
org/joda/time/base/BaseDateTime,7,270,        return DateTimeUtils.getChronology(chronology);,0.00206,0,-1,0
org/joda/time/base/AbstractDateTime,7,51,        super();,0.00205,0,-1,0
org/joda/time/base/AbstractDateTime,7,52,    },0.00205,0,-1,0
org/joda/time/chrono/BasicChronology,7,369,        return getYearInfo(year).iFirstDayMillis;,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,747,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,748,        if (info == null || info.iYear != year) {,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,749,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,750,            iYearInfoCache[year & CACHE_MASK] = info;,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,752,        return info;,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,779,"        YearInfo(int year, long firstDayMillis) {",0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,780,            iYear = year;,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,781,            iFirstDayMillis = firstDayMillis;,0.00203,0,-1,0
org/joda/time/chrono/BasicChronology,7,782,        },0.00203,0,-1,0
org/joda/time/chrono/ISOChronology,7,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00198,0,-1,0
org/joda/time/chrono/ISOChronology,7,108,"                cCache.put(zone, chrono);",0.00198,0,-1,0
org/joda/time/base/AbstractInstant,7,61,        super();,0.00196,0,-1,0
org/joda/time/base/AbstractInstant,7,62,    },0.00196,0,-1,0
org/joda/time/chrono/ISOChronology,7,96,        if (zone == null) {,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,100,        ISOChronology chrono = cFastCache[index];,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,101,        if (chrono != null && chrono.getZone() == zone) {,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,104,        synchronized (cCache) {,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,105,            chrono = cCache.get(zone);,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,106,            if (chrono == null) {,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,110,        },0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,111,        cFastCache[index] = chrono;,0.00193,0,-1,0
org/joda/time/chrono/ISOChronology,7,112,        return chrono;,0.00193,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1605,            if (iTailZone != null) {,0.00187,0,-1,0
org/joda/time/DateTimeUtils,7,112,        checkPermission();,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,114,    },0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,545,        FixedMillisProvider(long fixedMillis) {,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,546,            iMillis = fixedMillis;,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,547,        },0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,98,        checkPermission();,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,100,    },0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,159,        SecurityManager sm = System.getSecurityManager();,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,160,        if (sm != null) {,0.00181,0,-1,0
org/joda/time/DateTimeUtils,7,163,    },0.00181,0,-1,0
org/joda/time/chrono/ISOChronology,7,133,        return INSTANCE_UTC;,0.00179,0,-1,0
org/joda/time/DateTimeUtils,7,285,        return chrono;,0.00177,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1587,            long[] transitions = iTransitions;,0.00177,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.00177,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1589,            if (i >= 0) {,0.00177,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1595,            i = ~i;,0.00177,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1596,            if (i < transitions.length) {,0.00177,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,119,        return iZone.previousTransition(instant);,0.00177,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,123,        return iZone.hashCode();,0.00173,0,-1,0
org/joda/time/DateTimeZone,7,929,            long prev = previousTransition(instantAdjusted);,0.00173,0,-1,0
org/joda/time/DateTimeZone,7,930,            if (prev < instantAdjusted) {,0.00173,0,-1,0
org/joda/time/DateTimeZone,7,931,                int offsetPrev = getOffset(prev);,0.00173,0,-1,0
org/joda/time/DateTimeZone,7,932,                int diff = offsetPrev - offsetLocal;,0.00173,0,-1,0
org/joda/time/DateTimeZone,7,933,                if (instantAdjusted - prev <= diff) {,0.00173,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00171,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,131,        return null;,0.00171,0,-1,0
org/joda/time/DateTimeZone,7,175,        SecurityManager sm = System.getSecurityManager();,0.0017,0,-1,0
org/joda/time/DateTimeZone,7,176,        if (sm != null) {,0.0017,0,-1,0
org/joda/time/DateTimeZone,7,179,        if (zone == null) {,0.0017,0,-1,0
org/joda/time/DateTimeZone,7,182,        synchronized(DateTimeZone.class) {,0.0017,0,-1,0
org/joda/time/DateTimeZone,7,183,            cDefault = zone;,0.0017,0,-1,0
org/joda/time/DateTimeZone,7,184,        },0.0017,0,-1,0
org/joda/time/DateTimeZone,7,185,    },0.0017,0,-1,0
org/joda/time/DateTimeZone,7,1276,        return 57 + getID().hashCode();,0.0017,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,218,        return 0;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,386,            super(field.getType());,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,387,            if (!field.isSupported()) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,390,            iField = field;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,391,            iZone = zone;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,392,            iDurationField = durationField;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,393,            iTimeField = useTimeArithmetic(durationField);,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,394,            iRangeDurationField = rangeDurationField;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,395,            iLeapDurationField = leapDurationField;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,396,        },0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,81,"        super(base, zone);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,82,    },0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,55,        if (base == null) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,58,        base = base.withUTC();,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,59,        if (base == null) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,62,        if (zone == null) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,65,"        return new ZonedChronology(base, zone);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,85,        return (DateTimeZone)getParam();,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,154,"        fields.eras = convertField(fields.eras, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,155,"        fields.centuries = convertField(fields.centuries, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,156,"        fields.years = convertField(fields.years, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,157,"        fields.months = convertField(fields.months, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,158,"        fields.weekyears = convertField(fields.weekyears, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,159,"        fields.weeks = convertField(fields.weeks, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,160,"        fields.days = convertField(fields.days, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,162,"        fields.halfdays = convertField(fields.halfdays, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,163,"        fields.hours = convertField(fields.hours, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,164,"        fields.minutes = convertField(fields.minutes, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,165,"        fields.seconds = convertField(fields.seconds, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,166,"        fields.millis = convertField(fields.millis, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,170,"        fields.year = convertField(fields.year, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,174,"        fields.era = convertField(fields.era, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,180,"        fields.weekyear = convertField(fields.weekyear, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,194,    },0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,197,        if (field == null || !field.isSupported()) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,198,            return field;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,200,        if (converted.containsKey(field)) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,201,            return (DurationField)converted.get(field);,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,204,"        converted.put(field, zonedField);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,205,        return zonedField;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,209,        if (field == null || !field.isSupported()) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,212,        if (converted.containsKey(field)) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,215,        ZonedDateTimeField zonedField =,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,220,"        converted.put(field, zonedField);",0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,221,        return zonedField;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,281,            super(field.getType());,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,282,            if (!field.isSupported()) {,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,285,            iField = field;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,286,            iTimeField = useTimeArithmetic(field);,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,287,            iZone = zone;,0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,288,        },0.0017,0,-1,0
org/joda/time/chrono/ZonedChronology,7,295,            return iField.getUnitMillis();,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,109,        return getWrappedField().getUnitMillis() * iScalar;,0.0017,0,-1,0
org/joda/time/field/BaseDateTimeField,7,726,        return null;,0.0017,0,-1,0
org/joda/time/field/DecoratedDurationField,7,69,        return iField;,0.0017,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,111,        return iChronology.days();,0.0017,0,-1,0
org/joda/time/field/PreciseDurationField,7,142,        long millis = iUnitMillis;,0.0017,0,-1,0
org/joda/time/field/PreciseDurationField,7,143,        int hash = (int) (millis ^ (millis >>> 32));,0.0017,0,-1,0
org/joda/time/field/PreciseDurationField,7,144,        hash += getType().hashCode();,0.0017,0,-1,0
org/joda/time/field/PreciseDurationField,7,145,        return hash;,0.0017,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,101,        return getWrappedField().getLeapDurationField();,0.0017,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,334,        return iChronology.days();,0.0017,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,220,        return iChronology.weeks();,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,147,        long scalar = iScalar;,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,149,        hash += getType().hashCode();,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,150,        hash += getWrappedField().hashCode();,0.0017,0,-1,0
org/joda/time/field/ScaledDurationField,7,151,        return hash;,0.0017,0,-1,0
org/joda/time/field/MillisDurationField,7,49,        return DurationFieldType.millis();,0.0017,0,-1,0
org/joda/time/field/MillisDurationField,7,155,        return (int) getUnitMillis();,0.0017,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,94,        return iChronology.weeks();,0.00169,0,-1,0
org/joda/time/chrono/AssembledChronology,7,315,        return iParam;,0.00169,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,90,        return iField.getRangeDurationField();,0.00169,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,139,        return iRangeField;,0.00169,0,-1,0
org/joda/time/field/BaseDurationField,7,55,        return iType;,0.00169,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,56,        return iChronology.years();,0.00168,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,208,        return null;,0.00168,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,58,        return iChronology.weekyears();,0.00168,0,-1,0
org/joda/time/DateTimeUtils,7,282,        if (chrono == null) {,0.00168,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,51,        return iChronology.months();,0.00168,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,315,        return iChronology.years();,0.00168,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,95,        return null;,0.00168,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,160,            return iUnitMillis;,0.00167,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,122,        return iRangeField;,0.00167,0,-1,0
org/joda/time/chrono/ISOChronology,7,122,"        super(base, null);",0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,123,    },0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,68,    },0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00166,0,-1,0
org/joda/time/chrono/ISOChronology,7,180,    },0.00166,0,-1,0
org/joda/time/chrono/GregorianChronology,7,81,        return INSTANCE_UTC;,0.00166,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00166,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,47,    },0.00166,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00166,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,87,        return 0;,0.00166,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,91,        return getWrappedField().getMaximumValue();,0.00166,0,-1,0
org/joda/time/chrono/BasicChronology,7,146,        return DateTimeZone.UTC;,0.00166,0,-1,0
org/joda/time/chrono/BasicChronology,7,143,        if ((base = getBase()) != null) {,0.00166,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,141,        return iUnitField;,0.00166,0,-1,0
org/joda/time/chrono/GregorianChronology,7,45,public final class GregorianChronology extends BasicGJChronology {,0.00163,0,-1,0
org/joda/time/chrono/AssembledChronology,7,321,            fields.copyFieldsFrom(iBase);,0.00163,0,-1,0
org/joda/time/chrono/AssembledChronology,7,372,            flags = ,0.00163,0,-1,0
org/joda/time/chrono/GregorianChronology,7,148,"        super(base, param, minDaysInFirstWeek);",0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,149,    },0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,72,    },0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,100,"        return getInstance(zone, 4);",0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,111,        if (zone == null) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,115,        synchronized (cCache) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,117,            if (chronos == null) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,118,                chronos = new GregorianChronology[7];,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,119,"                cCache.put(zone, chronos);",0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,126,            },0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,127,            if (chrono == null) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,128,                if (zone == DateTimeZone.UTC) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,137,        },0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,138,        return chrono;,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,191,        if (getBase() == null) {,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,192,            super.assemble(fields);,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,194,    },0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,225,        return MAX_YEAR;,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,229,        return MILLIS_PER_YEAR;,0.00162,0,-1,0
org/joda/time/chrono/GregorianChronology,7,237,        return MILLIS_PER_MONTH;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,700,        return 12;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,75,"        super(base, param, minDaysInFirstWeek);",0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,76,    },0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,56,        long minSum = 0;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,57,        long maxSum = 0;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,58,        for (int i = 0; i < 11; i++) {,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,61,            minSum += millis;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,66,            maxSum += millis;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00162,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,69,    },0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,156,        return iMillis;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,160,        return iMillisOfSecond;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,164,        return iMillisOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,168,        return iSeconds;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,172,        return iSecondOfMinute;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,176,        return iSecondOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,180,        return iMinutes;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,184,        return iMinuteOfHour;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,188,        return iMinuteOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,192,        return iHours;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,196,        return iHourOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,200,        return iClockhourOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,204,        return iHalfdays;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,208,        return iHourOfHalfday;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,212,        return iClockhourOfHalfday;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,216,        return iHalfdayOfDay;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,220,        return iDays;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,224,        return iDayOfWeek;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,228,        return iDayOfMonth;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,232,        return iDayOfYear;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,236,        return iWeeks;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,240,        return iWeekOfWeekyear;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,244,        return iWeekyears;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,248,        return iWeekyear;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,252,        return iWeekyearOfCentury;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,256,        return iMonths;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,260,        return iMonthOfYear;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,264,        return iYears;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,272,        return iYearOfEra;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,276,        return iYearOfCentury;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,280,        return iCenturies;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,284,        return iCenturyOfEra;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,288,        return iEras;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,292,        return iEra;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,445,                if (isSupported(f = chrono.millis())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,446,                    millis = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,448,                if (isSupported(f = chrono.seconds())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,449,                    seconds = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,451,                if (isSupported(f = chrono.minutes())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,452,                    minutes = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,454,                if (isSupported(f = chrono.hours())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,455,                    hours = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,457,                if (isSupported(f = chrono.halfdays())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,458,                    halfdays = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,460,                if (isSupported(f = chrono.days())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,461,                    days = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,463,                if (isSupported(f = chrono.weeks())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,464,                    weeks = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,466,                if (isSupported(f = chrono.weekyears())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,467,                    weekyears = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,469,                if (isSupported(f = chrono.months())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,470,                    months = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,472,                if (isSupported(f = chrono.years())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,473,                    years = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,475,                if (isSupported(f = chrono.centuries())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,476,                    centuries = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,478,                if (isSupported(f = chrono.eras())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,486,                    millisOfSecond = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,489,                    millisOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,492,                    secondOfMinute = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,495,                    secondOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,498,                    minuteOfHour = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,501,                    minuteOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,504,                    hourOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,507,                    clockhourOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,510,                    hourOfHalfday = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,513,                    clockhourOfHalfday = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,516,                    halfdayOfDay = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,519,                    dayOfWeek = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,522,                    dayOfMonth = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,525,                    dayOfYear = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,528,                    weekOfWeekyear = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,530,                if (isSupported(f = chrono.weekyear())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,531,                    weekyear = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,534,                    weekyearOfCentury = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,537,                    monthOfYear = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,539,                if (isSupported(f = chrono.year())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,540,                    year = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,543,                    yearOfEra = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,546,                    yearOfCentury = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,549,                    centuryOfEra = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,551,                if (isSupported(f = chrono.era())) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,552,                    era = f;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,555,        },0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,558,            return field == null ? false : field.isSupported();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,562,            return field == null ? false : field.isSupported();,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,92,        return false;,0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,62,        return true;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,164,        return MILLIS_OF_SECOND_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,173,        return MILLIS_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,182,        return SECOND_OF_MINUTE_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,191,        return SECOND_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,209,        return MINUTE_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,218,        return HOUR_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,236,        return HOUR_OF_HALFDAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,254,        return HALFDAY_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,264,        return DAY_OF_WEEK_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,282,        return DAY_OF_YEAR_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,300,        return WEEKYEAR_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,318,        return MONTH_OF_YEAR_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,336,        return YEAR_OF_ERA_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,345,        return YEAR_OF_CENTURY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,354,        return CENTURY_OF_ERA_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,363,        return ERA_TYPE;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,100,        iBase = base;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,101,        iParam = param;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,102,        setFields();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,103,    },0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,268,        return iYear;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,308,        return iBase;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,319,        Fields fields = new Fields();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,320,        if (iBase != null) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,323,        assemble(fields);,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,369,        if (iBase == null) {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,370,            flags = 0;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,385,        iBaseFlags = flags;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,386,    },0.00162,0,-1,0
org/joda/time/chrono/BaseChronology,7,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,57,"        super(type, unit);",0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,59,        if (!range.isPrecise()) {,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,63,        long rangeMillis = range.getUnitMillis();,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,65,        if (iRange < 2) {,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,69,        iRangeField = range;,0.00162,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,70,    },0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,48,        super(type);,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,50,        if (!unit.isPrecise()) {,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,54,        iUnitMillis = unit.getUnitMillis();,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,55,        if (iUnitMillis < 1) {,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,59,        iUnitField = unit;,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,60,    },0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,150,        return 0;,0.00162,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,154,        return iUnitMillis;,0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,50,        super();,0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,51,        if (type == null) {,0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,54,        iType = type;,0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,55,    },0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,58,        return iType;,0.00162,0,-1,0
org/joda/time/field/BaseDateTimeField,7,69,        return true;,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,436,        Fields() {,0.00162,0,-1,0
org/joda/time/chrono/AssembledChronology,7,437,        },0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,53,            field = cCache.get(type);,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,47,    },0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,59,    },0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,73,"        super(field, type);",0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,75,        if (offset == 0) {,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,79,        iOffset = offset;,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,82,            iMin = field.getMinimumValue() + offset;,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,87,            iMax = field.getMaximumValue() + offset;,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,91,    },0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,174,        return iMin;,0.00162,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,183,        return iMax;,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,54,        super(type);,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,55,        if (field == null) {,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,58,        if (!field.isSupported()) {,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,61,        iField = field;,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,62,    },0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,70,        return iField;,0.00162,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,86,        return iField.getDurationField();,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,56,"        super(field, type);",0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,58,        if (divisor < 2) {,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,62,        DurationField unitField = field.getDurationField();,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,63,        if (unitField == null) {,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,66,            iDurationField = new ScaledDurationField(,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,70,        iDivisor = divisor;,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,72,        int i = field.getMinimumValue();,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,75,        int j = field.getMaximumValue();,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,78,        iMin = min;,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,79,        iMax = max;,0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,80,    },0.00162,0,-1,0
org/joda/time/field/DividedDateTimeField,7,182,        return iDurationField;,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,52,"        super(field, type);",0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,54,        if (divisor < 2) {,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,58,        DurationField rangeField = field.getDurationField();,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,59,        if (rangeField == null) {,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,62,            iRangeField = new ScaledDurationField(,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,66,        iDivisor = divisor;,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,67,    },0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,76,"        this(dividedField, dividedField.getType());",0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,77,    },0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,87,"        super(dividedField.getWrappedField(), type);",0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,88,        iDivisor = dividedField.iDivisor;,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,89,        iRangeField = dividedField.iDurationField;,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,90,    },0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,148,        return 0;,0.00162,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,158,        return iDivisor - 1;,0.00162,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00162,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,41,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,42,    },0.00162,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,93,        return 1;,0.00162,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,97,        return getWrappedField().getMaximumValue();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,131,"        super(base, param);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,139,    },0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,76,        cMillisField = MillisDurationField.INSTANCE;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,77,        cSecondsField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,79,        cMinutesField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,81,        cHoursField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,83,        cHalfdaysField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,85,        cDaysField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,87,        cWeeksField = new PreciseDurationField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,93,        cMillisOfDayField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,99,        cSecondOfDayField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,108,        cHourOfDayField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,120,        cHalfdayOfDayField = new HalfdayField();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,121,    },0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,250,        fields.millis = cMillisField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,251,        fields.seconds = cSecondsField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,252,        fields.minutes = cMinutesField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,253,        fields.hours = cHoursField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,254,        fields.halfdays = cHalfdaysField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,255,        fields.days = cDaysField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,256,        fields.weeks = cWeeksField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,258,        fields.millisOfSecond = cMillisOfSecondField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,259,        fields.millisOfDay = cMillisOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,260,        fields.secondOfMinute = cSecondOfMinuteField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,261,        fields.secondOfDay = cSecondOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,262,        fields.minuteOfHour = cMinuteOfHourField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,263,        fields.minuteOfDay = cMinuteOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,264,        fields.hourOfDay = cHourOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,265,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,266,        fields.clockhourOfDay = cClockhourOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,268,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,273,        fields.year = new BasicYearDateTimeField(this);,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,277,        DateTimeField field = new OffsetDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,279,        fields.centuryOfEra = new DividedDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,282,        field = new RemainderDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,284,        fields.yearOfCentury = new OffsetDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,287,        fields.era = new GJEraDateTimeField(this);,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,288,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,289,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,290,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,291,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,292,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,293,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,295,        field = new RemainderDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,297,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,303,        fields.years = fields.year.getDurationField();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,304,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,305,        fields.months = fields.monthOfYear.getDurationField();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,306,        fields.weekyears = fields.weekyear.getDurationField();,0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,307,    },0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,50,abstract class BasicChronology extends AssembledChronology {,0.00162,0,-1,0
org/joda/time/field/DecoratedDurationField,7,52,        super(type);,0.00162,0,-1,0
org/joda/time/field/DecoratedDurationField,7,53,        if (field == null) {,0.00162,0,-1,0
org/joda/time/field/DecoratedDurationField,7,56,        if (!field.isSupported()) {,0.00162,0,-1,0
org/joda/time/field/DecoratedDurationField,7,59,        iField = field;,0.00162,0,-1,0
org/joda/time/field/DecoratedDurationField,7,60,    },0.00162,0,-1,0
org/joda/time/field/BaseDurationField,7,47,        super();,0.00162,0,-1,0
org/joda/time/field/BaseDurationField,7,48,        if (type == null) {,0.00162,0,-1,0
org/joda/time/field/BaseDurationField,7,51,        iType = type;,0.00162,0,-1,0
org/joda/time/field/BaseDurationField,7,52,    },0.00162,0,-1,0
org/joda/time/field/BaseDurationField,7,66,        return true;,0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,42,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,43,    },0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00162,0,-1,0
org/joda/time/chrono/BasicChronology,7,760,        },0.00162,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,46,        super(DateTimeFieldType.era());,0.00162,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,47,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,48,    },0.00162,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00162,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,46,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,47,    },0.00162,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,119,        return iChronology.getMaxYear();,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,55,        super(type);,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,56,        iUnitMillis = unitMillis;,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,58,    },0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,137,        return iDurationField;,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,151,        LinkedDurationField(DurationFieldType type) {,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,152,            super(type);,0.00162,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,153,        },0.00162,0,-1,0
org/joda/time/field/PreciseDurationField,7,43,        super(type);,0.00162,0,-1,0
org/joda/time/field/PreciseDurationField,7,44,        iUnitMillis = unitMillis;,0.00162,0,-1,0
org/joda/time/field/PreciseDurationField,7,45,    },0.00162,0,-1,0
org/joda/time/field/PreciseDurationField,7,54,        return true;,0.00162,0,-1,0
org/joda/time/field/PreciseDurationField,7,63,        return iUnitMillis;,0.00162,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,45,"        super(field, type);",0.00162,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,46,        if (field.getMinimumValue() != 0) {,0.00162,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,49,    },0.00162,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00162,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,46,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,47,    },0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,42,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,43,    },0.00162,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,37,"        super(chronology, 2);",0.00162,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,38,    },0.00162,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00162,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,52,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,53,        iMax = iChronology.getMaxMonth();,0.00162,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,54,        iLeapMonth = leapMonth;,0.00162,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,55,    },0.00162,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00162,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,45,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,46,    },0.00162,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00162,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,43,        iChronology = chronology;,0.00162,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,44,    },0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,452,            return iUnitType;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,457,            return iRangeType;,0.00162,0,-1,0
org/joda/time/field/ScaledDurationField,7,47,"        super(field, type);",0.00162,0,-1,0
org/joda/time/field/ScaledDurationField,7,48,        if (scalar == 0 || scalar == 1) {,0.00162,0,-1,0
org/joda/time/field/ScaledDurationField,7,51,        iScalar = scalar;,0.00162,0,-1,0
org/joda/time/field/ScaledDurationField,7,52,    },0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,44,        super();,0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,45,    },0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,71,        return true;,0.00162,0,-1,0
org/joda/time/field/MillisDurationField,7,80,        return 1;,0.00162,0,-1,0
org/joda/time/DateTimeField,7,33,public abstract class DateTimeField {,0.00162,0,-1,0
org/joda/time/DurationField,7,30,public abstract class DurationField implements Comparable<DurationField> {,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,200,        return MINUTE_OF_HOUR_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,273,        return DAY_OF_MONTH_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,327,        return YEAR_TYPE;,0.00162,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,71,        iType = type;,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,72,    },0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,49,        if (cCache == null) {,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,51,            field = null;,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,55,        if (field == null) {,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,56,            field = new UnsupportedDurationField(type);,0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,57,"            cCache.put(type, field);",0.00162,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,59,        return field;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,153,        super();,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,154,        iName = name;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,155,    },0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.00162,0,-1,0
org/joda/time/DurationFieldType,7,141,        return HALFDAYS_TYPE;,0.00162,0,-1,0
org/joda/time/DurationFieldType,7,169,        return WEEKYEARS_TYPE;,0.00162,0,-1,0
org/joda/time/DurationFieldType,7,205,        return ERAS_TYPE;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,444,            super(name);,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,445,            iOrdinal = ordinal;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,446,            iUnitType = unitType;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,447,            iRangeType = rangeType;,0.00162,0,-1,0
org/joda/time/DateTimeFieldType,7,448,        },0.00162,0,-1,0
org/joda/time/DurationFieldType,7,196,        return CENTURIES_TYPE;,0.00161,0,-1,0
org/joda/time/Chronology,7,63,public abstract class Chronology {,0.00161,0,-1,0
org/joda/time/chrono/BaseChronology,7,54,        super();,0.00161,0,-1,0
org/joda/time/chrono/BaseChronology,7,55,    },0.00161,0,-1,0
org/joda/time/DurationFieldType,7,278,            return (1 << iOrdinal);,0.0016,0,-1,0
org/joda/time/DateTimeZone,7,148,                        },0.00159,0,-1,0
org/joda/time/DateTimeZone,7,134,        DateTimeZone zone = cDefault;,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,135,        if (zone == null) {,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,136,            synchronized(DateTimeZone.class) {,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,137,                zone = cDefault;,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,138,                if (zone == null) {,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,139,                    DateTimeZone temp = null;,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,142,"                            String id = System.getProperty(""user.timezone"");",0.00159,0,-1,0
org/joda/time/DateTimeZone,7,143,                            if (id != null) {  // null check avoids stack overflow,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,144,                                temp = forID(id);,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,149,                        if (temp == null) {,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,154,                    },0.00159,0,-1,0
org/joda/time/DateTimeZone,7,155,                    if (temp == null) {,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,158,                    cDefault = zone = temp;,0.00159,0,-1,0
org/joda/time/DateTimeZone,7,160,            },0.00159,0,-1,0
org/joda/time/DateTimeZone,7,162,        return zone;,0.00159,0,-1,0
org/joda/time/DurationFieldType,7,160,        return WEEKS_TYPE;,0.00158,0,-1,0
org/joda/time/DurationFieldType,7,187,        return YEARS_TYPE;,0.00158,0,-1,0
org/joda/time/DurationFieldType,7,114,        return SECONDS_TYPE;,0.00157,0,-1,0
org/joda/time/DurationFieldType,7,123,        return MINUTES_TYPE;,0.00157,0,-1,0
org/joda/time/DurationFieldType,7,132,        return HOURS_TYPE;,0.00157,0,-1,0
org/joda/time/DurationFieldType,7,105,        return MILLIS_TYPE;,0.00157,0,-1,0
org/joda/time/DurationFieldType,7,178,        return MONTHS_TYPE;,0.00157,0,-1,0
org/joda/time/DurationFieldType,7,151,        return DAYS_TYPE;,0.00156,0,-1,0
org/joda/time/DurationFieldType,7,94,        super();,0.00155,0,-1,0
org/joda/time/DurationFieldType,7,95,        iName = name;,0.00155,0,-1,0
org/joda/time/DurationFieldType,7,96,    },0.00155,0,-1,0
org/joda/time/DurationFieldType,7,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00155,0,-1,0
org/joda/time/DurationFieldType,7,259,            super(name);,0.00155,0,-1,0
org/joda/time/DurationFieldType,7,260,            iOrdinal = ordinal;,0.00155,0,-1,0
org/joda/time/DurationFieldType,7,261,        },0.00155,0,-1,0
org/joda/time/DateTimeUtils,7,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,48,"        map.put(""UT"", DateTimeZone.UTC);",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,49,"        map.put(""UTC"", DateTimeZone.UTC);",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,50,"        map.put(""GMT"", DateTimeZone.UTC);",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,51,"        put(map, ""EST"", ""America/New_York"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,52,"        put(map, ""EDT"", ""America/New_York"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,53,"        put(map, ""CST"", ""America/Chicago"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,54,"        put(map, ""CDT"", ""America/Chicago"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,55,"        put(map, ""MST"", ""America/Denver"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,56,"        put(map, ""MDT"", ""America/Denver"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,59,        cZoneNames = Collections.unmodifiableMap(map);,0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,60,    },0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,63,"            map.put(name, DateTimeZone.forID(id));",0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,66,        },0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,67,    },0.00153,0,-1,0
org/joda/time/DateTimeUtils,7,524,    static class SystemMillisProvider implements MillisProvider {,0.00153,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,162,            periodStart = next;,0.0015,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0015,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,164,        },0.0015,0,-1,0
org/joda/time/DateTimeZone,7,205,        if (id == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,208,"        if (id.equals(""UTC"")) {",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,211,        DateTimeZone zone = cProvider.getZone(id);,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,212,        if (zone != null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,213,            return zone;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,504,        {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,509,            iMode = mode;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,510,            iMonthOfYear = monthOfYear;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,511,            iDayOfMonth = dayOfMonth;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,512,            iDayOfWeek = dayOfWeek;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,513,            iAdvance = advanceDayOfWeek;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,514,            iMillisOfDay = millisOfDay;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,515,        },0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1176,            super(id);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1177,            iStandardOffset = standardOffset;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1178,            iStartRecurrence = startRecurrence;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1179,            iEndRecurrence = endRecurrence;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1180,        },0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1500,            super(id);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1501,            iTransitions = transitions;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1502,            iWallOffsets = wallOffsets;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1503,            iStandardOffsets = standardOffsets;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1504,            iNameKeys = nameKeys;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1505,            iTailZone = tailZone;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1506,        },0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1341,            int poolSize = in.readUnsignedShort();,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1342,            String[] pool = new String[poolSize];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1343,            for (int i=0; i<poolSize; i++) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1344,                pool[i] = in.readUTF();,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1347,            int size = in.readInt();,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1348,            long[] transitions = new long[size];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1349,            int[] wallOffsets = new int[size];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1350,            int[] standardOffsets = new int[size];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1351,            String[] nameKeys = new String[size];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1353,            for (int i=0; i<size; i++) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1354,                transitions[i] = readMillis(in);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1355,                wallOffsets[i] = (int)readMillis(in);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1356,                standardOffsets[i] = (int)readMillis(in);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1359,                    if (poolSize < 256) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1360,                        index = in.readUnsignedByte();,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1364,                    nameKeys[i] = pool[index];,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1367,                },0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1370,            DSTZone tailZone = null;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1371,            if (in.readBoolean()) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1375,            return new PrecalculatedZone,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,95,        if (in instanceof DataInput) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,110,        switch (in.readUnsignedByte()) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,183,        int v = in.readUnsignedByte();,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,184,        switch (v >> 6) {,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,188,            return v * (30 * 60000L);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,193,            v |= (in.readUnsignedByte()) << 16;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,194,            v |= (in.readUnsignedByte()) << 8;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,195,            v |= (in.readUnsignedByte());,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,196,            return v * 60000L;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,201,            w |= (in.readUnsignedByte()) << 24;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,202,            w |= (in.readUnsignedByte()) << 16;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,203,            w |= (in.readUnsignedByte()) << 8;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,204,            w |= (in.readUnsignedByte());,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,205,            return w * 1000L;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,209,            return in.readLong();,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,87,        super(zone.getID());,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,88,        iZone = zone;,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,89,    },0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,42,        },0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,45,        if (i == null) {,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,48,            cacheSize = 512; // (1 << 9),0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,61,        cInfoCacheMask = cacheSize - 1;,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,62,    },0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,68,        if (zone instanceof CachedDateTimeZone) {,0.00148,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,71,        return new CachedDateTimeZone(zone);,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,748,            iOfYear = ofYear;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,749,            iNameKey = nameKey;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,750,            iSaveMillis = saveMillis;,0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,751,        },0.00148,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,147,            return loadZoneData(id);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,224,        InputStream in = null;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,226,            in = openResource(id);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,229,            return tz;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,236,                if (in != null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,237,                    in.close();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,240,            },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,717,    protected DateTimeZone(String id) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,718,        if (id == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,721,        iID = id;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,722,    },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,116,        setProvider0(null);,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,117,        setNameProvider0(null);,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,118,    },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,443,        if (provider == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,444,            provider = getDefaultProvider();,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,446,        Set<String> ids = provider.getAvailableIDs();,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,447,        if (ids == null || ids.size() == 0) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,451,"        if (!ids.contains(""UTC"")) {",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,457,        cProvider = provider;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,458,        cAvailableIDs = ids;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,459,    },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,471,        Provider provider = null;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,474,            String providerClass =,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,476,            if (providerClass != null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,486,        },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,488,        if (provider == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,490,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,494,            },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,497,        if (provider == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,501,        return provider;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,542,        if (nameProvider == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,543,            nameProvider = getDefaultNameProvider();,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,545,        cNameProvider = nameProvider;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,546,    },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,557,        NameProvider nameProvider = null;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,559,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00148,0,-1,0
org/joda/time/DateTimeZone,7,560,            if (providerClass != null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,570,        },0.00148,0,-1,0
org/joda/time/DateTimeZone,7,572,        if (nameProvider == null) {,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,573,            nameProvider = new DefaultNameProvider();,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,576,        return nameProvider;,0.00148,0,-1,0
org/joda/time/DateTimeZone,7,734,        return iID;,0.00148,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,39,    public DefaultNameProvider() {,0.00148,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00148,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,40,    },0.00148,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,99,        return new HashMap(7);,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,38,        super(id);,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,39,        iNameKey = nameKey;,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,40,        iWallOffset = wallOffset;,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,41,        iStandardOffset = standardOffset;,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,42,    },0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,88,        if (this == obj) {,0.00148,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,89,            return true;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,82,"        this(resourcePath, null, false);",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,83,    },0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,106,    {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,107,        if (resourcePath == null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,110,"        if (!resourcePath.endsWith(""/"")) {",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,111,            resourcePath += '/';,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,114,        iFileDir = null;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,115,        iResourcePath = resourcePath;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,117,        if (loader == null && !favorSystemLoader) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,118,            loader = getClass().getClassLoader();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,121,        iLoader = loader;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,124,    },0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,136,        if (id == null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,140,        Object obj = iZoneInfoMap.get(id);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,141,        if (obj == null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,145,        if (id.equals(obj)) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,150,        if (obj instanceof SoftReference<?>) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,153,            DateTimeZone tz = ref.get();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,154,            if (tz != null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,155,                return tz;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,196,        if (iFileDir != null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,199,            String path = iResourcePath.concat(name);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,200,            if (iLoader != null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,201,                in = iLoader.getResourceAsStream(path);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,205,            if (in == null) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,214,        return in;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,253,        DataInputStream din = new DataInputStream(in);,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,255,"            readZoneInfoMap(din, map);",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,258,                din.close();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,260,            },0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,263,        return map;,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,274,        int size = din.readUnsignedShort();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,275,        String[] pool = new String[size];,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,276,        for (int i=0; i<size; i++) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,277,            pool[i] = din.readUTF().intern();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,281,        size = din.readUnsignedShort();,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,282,        for (int i=0; i<size; i++) {,0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,287,            },0.00148,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,289,    },0.00148,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,180,            if (isLeapYear(thisYear)) {,0.00111,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1540,            if (iTailZone == null) {,0.00086,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1576,            if (iTailZone == null) {,0.00084,0,-1,0
org/joda/time/DateTime,7,2047,            super();,0.0,0,-1,0
org/joda/time/DateTime,7,2048,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateTime,7,2049,            iField = field;,0.0,0,-1,0
org/joda/time/DateTime,7,2050,        },0.0,0,-1,0
org/joda/time/DateTime,7,2056,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateTime,7,2057,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateTime,7,2058,        },0.0,0,-1,0
org/joda/time/DateTime,7,2064,            iInstant = (DateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,7,2065,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,7,2066,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateTime,7,2067,        },0.0,0,-1,0
org/joda/time/DateTime,7,2076,            return iField;,0.0,0,-1,0
org/joda/time/DateTime,7,2085,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateTime,7,2095,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateTime,7,2104,            return iInstant;,0.0,0,-1,0
org/joda/time/DateTime,7,2121,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,7,2137,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,7,2155,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,7,2172,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,7,2189,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateTime,7,2205,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateTime,7,2233,                return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateTime,7,2234,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,7,2235,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,7,2237,                    long beforeGap = getChronology().getZone().previousTransition(getMillis() + DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,7,2238,"                    return new DateTime(beforeGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,2240,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,7,2262,                return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateTime,7,2263,            } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTime,7,2264,                if (IllegalInstantException.isIllegalInstant(ex)) {,0.0,0,-1,0
org/joda/time/DateTime,7,2266,                    long afterGap = getChronology().getZone().nextTransition(getMillis() - DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/DateTime,7,2267,"                    return new DateTime(afterGap, getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,2269,                throw ex;,0.0,0,-1,0
org/joda/time/DateTime,7,2280,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,7,2289,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,7,2299,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,7,2309,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,7,2320,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,7,155,        super();,0.0,0,-1,0
org/joda/time/DateTime,7,156,    },0.0,0,-1,0
org/joda/time/DateTime,7,168,        super(zone);,0.0,0,-1,0
org/joda/time/DateTime,7,169,    },0.0,0,-1,0
org/joda/time/DateTime,7,182,        super(chronology);,0.0,0,-1,0
org/joda/time/DateTime,7,183,    },0.0,0,-1,0
org/joda/time/DateTime,7,193,        super(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,194,    },0.0,0,-1,0
org/joda/time/DateTime,7,206,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,7,207,    },0.0,0,-1,0
org/joda/time/DateTime,7,220,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/DateTime,7,221,    },0.0,0,-1,0
org/joda/time/DateTime,7,241,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateTime,7,242,    },0.0,0,-1,0
org/joda/time/DateTime,7,265,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,7,266,    },0.0,0,-1,0
org/joda/time/DateTime,7,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateTime,7,287,    },0.0,0,-1,0
org/joda/time/DateTime,7,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,-1,0
org/joda/time/DateTime,7,308,    },0.0,0,-1,0
org/joda/time/DateTime,7,331,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,7,333,    },0.0,0,-1,0
org/joda/time/DateTime,7,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,7,359,    },0.0,0,-1,0
org/joda/time/DateTime,7,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,-1,0
org/joda/time/DateTime,7,382,    },0.0,0,-1,0
org/joda/time/DateTime,7,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,7,409,    },0.0,0,-1,0
org/joda/time/DateTime,7,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,7,437,    },0.0,0,-1,0
org/joda/time/DateTime,7,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,7,461,    },0.0,0,-1,0
org/joda/time/DateTime,7,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,7,489,    },0.0,0,-1,0
org/joda/time/DateTime,7,89,        return new DateTime();,0.0,0,-1,0
org/joda/time/DateTime,7,101,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,7,104,        return new DateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,7,116,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,7,119,        return new DateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,7,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateTime,7,144,        return formatter.parseDateTime(str);,0.0,0,-1,0
org/joda/time/DateTime,7,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,-1,0
org/joda/time/DateTime,7,538,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,540,        return super.toDateTimeISO();,0.0,0,-1,0
org/joda/time/DateTime,7,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/DateTime,7,551,        if (getZone() == zone) {,0.0,0,-1,0
org/joda/time/DateTime,7,552,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,554,        return super.toDateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,7,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTime,7,565,        if (getChronology() == chronology) {,0.0,0,-1,0
org/joda/time/DateTime,7,566,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,568,        return super.toDateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,7,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/DateTime,7,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/DateTime,7,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateTime,7,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,-1,0
org/joda/time/DateTime,7,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateTime,7,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateTime,7,641,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateTime,7,642,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateTime,7,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateTime,7,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.0,0,-1,0
org/joda/time/DateTime,7,666,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,7,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.0,0,-1,0
org/joda/time/DateTime,7,686,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,7,709,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,7,710,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,7,711,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/DateTime,7,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/DateTime,7,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/DateTime,7,714,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,737,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,7,738,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,7,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/DateTime,7,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/DateTime,7,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/DateTime,7,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,7,743,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,-1,0
org/joda/time/DateTime,7,776,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,777,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateTime,7,802,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,7,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateTime,7,806,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,828,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,7,831,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,832,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateTime,7,835,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,851,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateTime,7,854,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,869,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,7,890,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,891,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,7,894,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,909,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,7,923,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,7,949,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateTime,7,976,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,977,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,7,980,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1006,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1007,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,7,1010,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1032,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1033,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,7,1036,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1067,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1068,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,7,1071,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1098,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1099,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,7,1102,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1125,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1126,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,7,1129,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1152,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1153,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,7,1156,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1178,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1179,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,7,1182,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1197,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,7,1211,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,7,1238,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateTime,7,1265,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1266,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,7,1269,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1295,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1296,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,7,1299,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1321,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1322,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,7,1325,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1356,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1357,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,7,1360,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1388,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1389,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,7,1392,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1415,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1416,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,7,1419,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1442,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1443,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,7,1446,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1469,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,7,1470,            return this;,0.0,0,-1,0
org/joda/time/DateTime,7,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,7,1473,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,7,1485,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTime,7,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,7,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateTime,7,1489,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateTime,7,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateTime,7,1492,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateTime,7,1505,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1517,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1529,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1540,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1551,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1562,"        return new LocalTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,7,1579,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateTime,7,1595,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateTime,7,1611,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateTime,7,1627,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateTime,7,1643,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateTime,7,1665,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateTime,7,1681,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateTime,7,1702,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateTime,7,1718,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateTime,7,1734,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateTime,7,1750,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateTime,7,1767,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,-1,0
org/joda/time/DateTime,7,1783,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,-1,0
org/joda/time/DateTime,7,1799,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,-1,0
org/joda/time/DateTime,7,1815,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,7,1831,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,7,1842,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateTime,7,1851,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateTime,7,1860,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateTime,7,1869,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateTime,7,1878,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateTime,7,1887,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateTime,7,1896,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateTime,7,1905,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateTime,7,1914,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateTime,7,1923,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateTime,7,1932,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/DateTime,7,1943,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/DateTime,7,1952,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/DateTime,7,1961,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/DateTime,7,1970,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/DateTime,7,1979,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/DateTime,7,1988,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/DateTime,7,1997,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,7,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,7,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,7,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/DurationField,7,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,7,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,7,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,7,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,7,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,7,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,73,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,74,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,7,64,        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,86,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,127,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,128,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,133,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,7,146,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,149,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,150,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,151,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,7,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,176,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,177,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,179,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,194,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,195,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,197,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,198,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,199,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,201,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,217,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,218,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,219,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,220,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,221,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,223,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,224,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,226,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,241,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,242,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,244,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,245,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,246,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,248,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,264,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,265,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,266,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,268,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,283,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,300,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,316,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,317,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,319,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,333,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,334,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,336,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,364,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,367,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,368,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,369,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,370,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,371,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,372,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,375,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,377,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,397,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,398,            return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,427,        return cZoneNames;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,439,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,-1,0
org/joda/time/DateTimeUtils,7,440,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,7,466,        double epochDay = epochMillis / 86400000d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,467,        return epochDay + 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,486,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,499,        double epochDay = julianDay - 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,500,        return (long) (epochDay * 86400000d);,0.0,0,-1,0
org/joda/time/JodaTimePermission,7,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,7,58,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,191,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,192,            return true;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,194,        if (obj instanceof ISOChronology) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,195,            ISOChronology chrono = (ISOChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,196,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,198,        return false;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,217,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,7,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeZone,7,719,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,146,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,7,152,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,156,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,7,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,206,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,209,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,7,216,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,217,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,218,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,220,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,221,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,274,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,279,        if (minutesOffset < -59 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,282,        if (hoursOffset > 0 && minutesOffset < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,285,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,287,            int hoursInMinutes = hoursOffset * 60;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,288,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,291,                minutesOffset = hoursInMinutes + minutesOffset;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,296,        },0.0,0,-1,0
org/joda/time/DateTimeZone,7,294,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,295,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,297,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,310,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,311,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,330,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,331,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,333,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,334,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,7,335,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,339,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,340,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,341,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,342,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,344,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,345,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,347,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,348,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,352,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,353,            convId = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,7,355,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,356,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,357,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,358,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,360,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,361,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,377,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,378,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,380,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,7,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,385,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,386,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,387,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,388,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,7,393,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,402,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,415,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,429,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,430,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,7,433,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,434,    },0.0,0,-1,0
org/joda/time/DateTimeZone,7,448,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,7,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,478,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,482,                },0.0,0,-1,0
org/joda/time/DateTimeZone,7,479,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,480,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,481,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,484,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,491,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,492,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,493,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,498,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,514,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,528,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,529,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,530,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,7,532,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,533,    },0.0,0,-1,0
org/joda/time/DateTimeZone,7,562,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,566,                },0.0,0,-1,0
org/joda/time/DateTimeZone,7,563,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,564,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,565,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,568,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,587,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,7,588,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,590,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,7,591,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,592,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,593,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,594,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,595,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,596,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,597,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,598,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,7,599,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,600,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,601,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,7,602,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,603,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,604,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,7,605,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,606,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,607,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,608,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,609,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,610,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,611,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,612,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,613,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,614,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,615,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,616,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,617,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,618,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,619,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,620,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,621,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,622,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,623,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,624,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,626,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,632,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,646,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,659,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,660,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,661,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,7,663,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,7,664,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,667,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,668,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,669,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,671,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,672,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,7,673,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,674,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,675,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,676,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,679,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,680,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,7,681,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,682,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,683,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,684,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,687,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,7,688,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,689,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,698,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,699,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,7,703,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,757,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,772,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,773,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,775,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,776,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,777,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,779,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,780,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,781,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,783,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,7,797,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,812,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,813,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,815,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,816,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,817,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,819,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,820,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,821,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,823,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,7,841,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,842,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,7,844,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,7,872,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,918,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,922,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,923,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,924,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,925,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,927,            },0.0,0,-1,0
org/joda/time/DateTimeZone,7,934,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,956,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1010,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1012,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1013,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1014,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1016,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1017,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1018,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1020,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1022,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1024,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1029,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1038,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1054,        if (newZone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1055,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1057,        if (newZone == this) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1058,            return oldInstant;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1060,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1061,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1171,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1172,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1175,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1176,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1177,        } catch (IllegalInstantException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1178,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1193,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1194,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1195,        long offsetBefore = getOffset(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1196,        long offsetAfter = getOffset(instantAfter);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1197,        if (offsetBefore <= offsetAfter) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1198,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1202,        long diff = offsetBefore - offsetAfter;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1203,        long transition = nextTransition(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1204,        long overlapStart = transition - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1205,        long overlapEnd = transition + diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1206,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1207,          return instant;  // not an overlap,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1211,        long afterStart = instant - overlapStart;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1212,        if (afterStart >= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1214,          return earlierOrLater ? instant : instant - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1217,          return earlierOrLater ? instant + diff : instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1259,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1284,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1294,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,530,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,569,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,570,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,571,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,7,578,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,7,554,            return iMillis;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,243,        return getName();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,147,        return (iPrinter != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,165,        return (iParser != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,191,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,223,        if (iOffsetParsed == true) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,224,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,226,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,237,        return iOffsetParsed;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,258,        if (iChrono == chrono) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,259,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,261,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,271,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,282,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,302,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,322,        if (iZone == zone) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,323,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,325,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,335,        return iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,369,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,370,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,372,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,406,        return withPivotYear(Integer.valueOf(pivotYear));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,416,      return iPivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,439,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,450,      return iDefaultYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,461,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,462,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,463,"        printTo(buf, millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,464,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,473,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,474,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,475,"        printTo(out, millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,476,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,486,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,487,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,498,"        printTo(buf, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,499,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,509,"        printTo(out, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,510,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,521,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,522,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,535,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,536,        if (partial == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,537,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,539,"        printer.printTo(buf, partial, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,540,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,552,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,553,        if (partial == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,554,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,556,"        printer.printTo(out, partial, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,557,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,570,        appendable.append(print(partial));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,571,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,584,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,585,"        printTo(buf, instant);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,586,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,599,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,600,"        printTo(buf, instant);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,601,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,614,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,615,"        printTo(buf, partial);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,616,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,620,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,621,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,624,        DateTimeZone zone = chrono.getZone();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,625,        int offset = zone.getOffset(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,626,        long adjustedInstant = instant + offset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,627,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,629,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,630,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,631,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,633,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,634,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,637,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,638,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,641,        DateTimeZone zone = chrono.getZone();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,642,        int offset = zone.getOffset(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,643,        long adjustedInstant = instant + offset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,644,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,646,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,647,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,648,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,650,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,651,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,659,        DateTimePrinter printer = iPrinter;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,660,        if (printer == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,661,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,663,        return printer;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,703,"            throw new IllegalArgumentException(""Instant must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,716,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,717,            int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,718,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,719,            chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,720,        } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,721,            chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,723,        instant.setChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,724,        if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,725,            instant.setZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,727,        return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,743,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,745,        Chronology chrono = selectChronology(iChrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,746,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,747,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,748,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,749,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,750,"                return bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,753,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,755,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,773,        return parseLocalDateTime(text).toLocalDate();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,791,        return parseLocalDateTime(text).toLocalTime();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,809,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,811,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,812,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,813,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,814,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,815,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,816,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,817,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,818,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,819,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,820,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,821,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,822,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,824,"                return new LocalDateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,827,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,829,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,850,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,852,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,853,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,854,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,855,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,856,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,857,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,858,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,859,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,860,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,861,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,862,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,863,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,865,"                DateTime dt = new DateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,866,                if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,867,                    dt = dt.withZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,869,                return dt;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,872,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,874,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,895,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,897,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,898,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,899,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,900,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,901,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,902,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,903,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,904,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,905,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,906,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,907,                } else if (bucket.getZone() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,908,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,910,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,911,                if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,912,                    dt.setZone(iZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,914,                return dt;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,917,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,919,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,930,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,945,            chrono = iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,7,948,            chrono = chrono.withZone(iZone);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,172,        super();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,173,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,185,        super(zone);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,186,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,199,        super(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,200,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,210,        super(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,211,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,223,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,224,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,237,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,238,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,257,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,258,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,280,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,281,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,300,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,301,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,324,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,325,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,380,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/MutableDateTime,7,382,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,106,        return new MutableDateTime();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,118,        if (zone == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,119,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,121,        return new MutableDateTime(zone);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,133,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,134,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,136,        return new MutableDateTime(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,150,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,161,        return formatter.parseDateTime(str).toMutableDateTime();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,392,        return iRoundingField;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,402,        return iRoundingMode;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,418,"        setRounding(field, MutableDateTime.ROUND_FLOOR);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,419,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,436,        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,437,"            throw new IllegalArgumentException(""Illegal rounding mode: "" + mode);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,439,        iRoundingField = (mode == ROUND_NONE ? null : field);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,440,        iRoundingMode = (field == null ? ROUND_NONE : mode);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,441,        setMillis(getMillis());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,442,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,454,        switch (iRoundingMode) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,456,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,458,                instant = iRoundingField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,459,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,461,                instant = iRoundingField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,462,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,464,                instant = iRoundingField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,465,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,467,                instant = iRoundingField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,468,                break;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,470,                instant = iRoundingField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,474,        super.setMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,475,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,486,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,487,        setMillis(instantMillis);  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,7,488,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,498,"        setMillis(FieldUtils.safeAdd(getMillis(), duration));  // set via this class not super",0.0,0,-1,0
org/joda/time/MutableDateTime,7,499,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,510,"        add(duration, 1);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,511,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,523,        if (duration != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,524,"            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,526,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,537,"        add(period, 1);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,538,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,550,        if (period != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,551,"            setMillis(getChronology().add(period, getMillis(), scalar));  // set via this class not super",0.0,0,-1,0
org/joda/time/MutableDateTime,7,553,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,564,        super.setChronology(chronology);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,565,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,583,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,584,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,585,        if (chrono.getZone() != newZone) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,586,            setChronology(chrono.withZone(newZone));  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,7,588,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,602,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,603,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,604,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,605,            return;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,608,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,609,        setChronology(getChronology().withZone(newZone));  // set via this class not super,0.0,0,-1,0
org/joda/time/MutableDateTime,7,610,        setMillis(millis);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,611,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,622,        if (type == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,623,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,625,"        setMillis(type.getField(getChronology()).set(getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,626,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,637,        if (type == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,638,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,640,"        setMillis(type.getField(getChronology()).add(getMillis(), amount));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,641,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,651,"        setMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,652,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,661,"        setMillis(getChronology().years().add(getMillis(), years));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,662,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,672,"        setMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,673,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,682,"        setMillis(getChronology().weekyears().add(getMillis(), weekyears));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,683,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,693,"        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,694,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,703,"        setMillis(getChronology().months().add(getMillis(), months));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,704,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,714,"        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,715,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,724,"        setMillis(getChronology().weeks().add(getMillis(), weeks));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,725,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,735,"        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,736,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,745,"        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,746,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,755,"        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,756,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,765,"        setMillis(getChronology().days().add(getMillis(), days));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,766,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,776,"        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,777,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,786,"        setMillis(getChronology().hours().add(getMillis(), hours));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,787,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,797,"        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,798,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,807,"        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,808,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,817,"        setMillis(getChronology().minutes().add(getMillis(), minutes));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,818,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,828,"        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,829,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,838,"        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,839,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,848,"        setMillis(getChronology().seconds().add(getMillis(), seconds));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,849,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,859,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,860,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,869,"        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,870,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,881,"        setMillis(getChronology().millis().add(getMillis(), millis));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,882,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,893,"        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,894,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,907,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,908,        if (instant instanceof ReadableDateTime) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,909,            ReadableDateTime rdt = (ReadableDateTime) instant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,910,            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,911,            DateTimeZone zone = instantChrono.getZone();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,912,            if (zone != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,913,"                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,916,        setDate(instantMillis);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,917,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,932,        Chronology c = getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,933,"        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,934,        setDate(instantMidnight);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,935,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,946,        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,947,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,948,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,958,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,959,        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,960,        DateTimeZone zone = instantChrono.getZone();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,961,        if (zone != null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,962,"            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,964,        setTime(instantMillis);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,965,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,982,        long instant = getChronology().getDateTimeMillis(,0.0,0,-1,0
org/joda/time/MutableDateTime,7,984,        setMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,985,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,1007,        long instant = getChronology().getDateTimeMillis(,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1009,        setMillis(instant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1010,    },0.0,0,-1,0
org/joda/time/MutableDateTime,7,1022,        if (type == null) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1023,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1025,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1026,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1027,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1029,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1038,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1047,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1056,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1065,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1074,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1083,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1092,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1101,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1110,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1121,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1132,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1142,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1151,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1160,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1169,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1178,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1187,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1196,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1206,        return (MutableDateTime) clone();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1217,            return super.clone();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1218,        } catch (CloneNotSupportedException ex) {,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1219,"            throw new InternalError(""Clone error"");",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1230,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/Instant,7,108,        super();,0.0,0,-1,0
org/joda/time/Instant,7,109,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,7,110,    },0.0,0,-1,0
org/joda/time/Instant,7,132,        super();,0.0,0,-1,0
org/joda/time/Instant,7,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,7,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,7,135,    },0.0,0,-1,0
org/joda/time/Instant,7,73,        return new Instant();,0.0,0,-1,0
org/joda/time/Instant,7,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,7,98,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,7,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,7,171,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,7,172,            return this;,0.0,0,-1,0
org/joda/time/Instant,7,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,7,175,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,7,189,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,7,190,            return this;,0.0,0,-1,0
org/joda/time/Instant,7,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,7,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,7,219,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,7,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,7,246,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,7,268,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,7,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,7,315,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,7,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,7,361,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,7,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,187,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,190,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,192,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,202,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,210,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,7,98,        return false;,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,53,        super(message);,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,54,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,7,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,-1,0
org/joda/time/IllegalInstantException,7,64,    },0.0,0,-1,0
org/joda/time/IllegalInstantException,7,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,-1,0
org/joda/time/IllegalInstantException,7,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,-1,0
org/joda/time/IllegalInstantException,7,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,-1,0
org/joda/time/IllegalInstantException,7,80,        if (ex instanceof IllegalInstantException) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,81,            return true;,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,84,            return isIllegalInstant(ex.getCause());,0.0,0,-1,0
org/joda/time/IllegalInstantException,7,86,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,632,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,634,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,637,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,640,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,643,                return getClass().getName();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,873,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,475,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,95,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,99,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,111,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,115,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,128,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,7,133,        return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,7,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,206,                StringBuilder buf = new StringBuilder(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,239,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,230,        } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,231,            uncaughtException(ex);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,259,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,285,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,7,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/DateTimeZone,7,1310,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1311,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1312,        },0.0,0,-1,0
org/joda/time/DateTimeZone,7,1315,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1316,        },0.0,0,-1,0
org/joda/time/DateTimeZone,7,1319,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,7,1320,        },0.0,0,-1,0
org/joda/time/DateTimeZone,7,1323,            return forID(iID);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2544,    static enum TimeZoneId,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2547,        INSTANCE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2548,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2551,            int max = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2552,            for (String id : ALL_IDS) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2553,"                max = Math.max(max, id.length());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2554,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2555,            MAX_LENGTH = max;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2556,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2559,            return MAX_LENGTH;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2566,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2571,"            out.write(displayZone != null ? displayZone.getID() : """");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2572,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2576,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2580,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2583,            return MAX_LENGTH;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2587,            String str = text.substring(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2588,            String best = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2589,            for (String id : ALL_IDS) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2590,                if (str.startsWith(id)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2591,                    if (best == null || id.length() > best.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2592,                        best = id;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2595,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2596,            if (best != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2597,                bucket.setZone(DateTimeZone.forID(best));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2598,                return position + best.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2600,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,133,        Object f = getFormatter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,134,        if (isPrinter(f)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,135,            return (DateTimePrinter) f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,137,"        throw new UnsupportedOperationException(""Printing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,153,        Object f = getFormatter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,154,        if (isParser(f)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,155,            return (DateTimeParser) f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,168,        return isFormatter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,178,        return isPrinter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,188,        return isParser(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,197,        iFormatter = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,198,        iElementPairs.clear();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,199,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,218,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,238,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,239,"        return append0(printer, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,257,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,258,"        return append0(null, parser);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,276,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,277,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,278,"        return append0(printer, parser);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,305,        if (printer != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,306,            checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,308,        if (parsers == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,309,"            throw new IllegalArgumentException(""No parsers supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,311,        int length = parsers.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,312,        if (length == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,313,            if (parsers[0] == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,314,"                throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,316,"            return append0(printer, parsers[0]);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,321,        for (i = 0; i < length - 1; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,323,"                throw new IllegalArgumentException(""Incomplete parser array"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,326,        copyOfParsers[i] = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,328,"        return append0(printer, new MatchingParser(copyOfParsers));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,345,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,347,"        return append0(null, new MatchingParser(parsers));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,357,        if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,358,"            throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,360,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,368,        if (printer == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,369,"            throw new IllegalArgumentException(""No printer supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,371,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,408,        if (text == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,409,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,411,        switch (text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,413,                return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,415,                return append0(new CharacterLiteral(text.charAt(0)));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,417,                return append0(new StringLiteral(text));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,435,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,438,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,441,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,464,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,465,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,467,        if (numDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,470,"        return append0(new FixedNumber(fieldType, numDigits, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,487,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,490,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,493,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,516,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,517,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,519,        if (numDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,522,"        return append0(new FixedNumber(fieldType, numDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,534,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,535,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,537,"        return append0(new TextField(fieldType, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,550,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,570,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,571,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,573,        if (maxDigits < minDigits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,574,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,576,        if (minDigits < 0 || maxDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,577,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,851,"        return appendTwoDigitYear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,891,"        return appendTwoDigitWeekyear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,955,        return appendText(DateTimeFieldType.halfdayOfDay());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,965,        return appendText(DateTimeFieldType.dayOfWeek());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,987,        return appendText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,997,        return appendShortText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1007,        return appendText(DateTimeFieldType.era());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1032,"        return append0(pp, pp);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1058,"        return append0(pp, pp);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1118,        return append0(new TimeZoneOffset,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1132,"        DateTimeFormat.appendPatternTo(this, pattern);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1133,        return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1150,                    f = parser;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1171,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1181,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1185,        return (isPrinter(f) || isParser(f));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1189,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1190,            buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1192,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1195,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1196,            out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1198,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2794,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2795,            iParsers = parsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2796,            int est = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2797,            for (int i=parsers.length; --i>=0 ;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2798,                DateTimeParser parser = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2799,                if (parser != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2800,                    int len = parser.estimateParsedLength();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2801,                    if (len > est) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2802,                        est = len;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2805,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2806,            iParsedLengthEstimate = est;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2807,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2810,            return iParsedLengthEstimate;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2814,            DateTimeParser[] parsers = iParsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2815,            int length = parsers.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2817,            final Object originalState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2818,            boolean isOptional = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2820,            int bestValidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2821,            Object bestValidState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2823,            int bestInvalidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2825,            for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2826,                DateTimeParser parser = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2827,                if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2829,                    if (bestValidPos <= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2830,                        return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2832,                    isOptional = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2833,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2835,"                int parsePos = parser.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2836,                if (parsePos >= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2837,                    if (parsePos > bestValidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2838,                        if (parsePos >= text.length() ||,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2843,                            return parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2845,                        bestValidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2846,                        bestValidState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2849,                    if (parsePos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2850,                        parsePos = ~parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2851,                        if (parsePos > bestInvalidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2852,                            bestInvalidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2856,                bucket.restoreState(originalState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2859,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2861,                if (bestValidState != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2862,                    bucket.restoreState(bestValidState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2864,                return bestValidPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2867,            return ~bestInvalidPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2623,                iPrinters = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2624,                iPrintedLengthEstimate = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2638,                iParsers = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2639,                iParsedLengthEstimate = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2654,            return iPrintedLengthEstimate;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2660,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2661,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2662,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2665,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2667,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2670,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2671,            for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2674,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2679,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2680,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2681,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2684,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2686,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2689,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2690,            for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2693,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2696,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2697,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2698,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2701,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2703,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2706,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2707,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2708,"                elements[i].printTo(buf, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2710,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2713,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2714,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2715,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2718,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2720,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2723,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2724,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2725,"                elements[i].printTo(out, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2727,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2730,            return iParsedLengthEstimate;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2736,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,89,"        this(instantLocal, chrono, locale, null, 2000);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,90,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,105,"        this(instantLocal, chrono, locale, pivotYear, 2000);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,106,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,135,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,145,        return iLocale;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,153,        return iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,160,        iSavedState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,161,        iZone = zone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,162,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,171,        return (iOffset != null ? iOffset : 0);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,178,        return iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,187,        iSavedState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,188,        iOffset = offset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,189,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,195,        iSavedState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,196,        iOffset = offset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,197,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,213,        return iPivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,226,        iPivotYear = pivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,227,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,237,"        saveField(new SavedField(field, value));",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,238,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,258,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,259,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,267,            SavedField[] newArray = new SavedField,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,269,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,270,            iSavedFields = savedFields = newArray;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,271,            iSavedFieldsShared = false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,287,        if (iSavedState == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,288,            iSavedState = new SavedState();,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,290,        return iSavedState;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,302,        if (savedState instanceof SavedState) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,303,            if (((SavedState) savedState).restoreState(this)) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,304,                iSavedState = savedState;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,305,                return true;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,308,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,319,"        return computeMillis(false, null);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,331,"        return computeMillis(resetFields, null);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,348,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,349,            iSavedFieldsShared = false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,368,            if (resetFields) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,369,                for (int i = 0; i < count; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,370,"                    millis = savedFields[i].set(millis, i == (count - 1));",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,378,        },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,373,        } catch (IllegalFieldValueException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,374,            if (text != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,375,"                e.prependMessage(""Cannot parse \"""" + text + '""');",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,377,            throw e;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,380,        if (iOffset != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,381,            millis -= iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,382,        } else if (iZone != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,383,            int offset = iZone.getOffsetFromLocal(millis);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,384,            millis -= offset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,385,            if (offset != iZone.getOffset(millis)) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,386,"                String message = ""Illegal instant due to time zone offset transition ("" + iZone + ')';",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,387,                if (text != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,388,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,390,                throw new IllegalInstantException(message);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,394,        return millis;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,417,"            Arrays.sort(array, 0, high);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,512,            if (b == null || !b.isSupported()) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,513,                return 0;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,515,            return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,56,public class DateTimeParserBucket {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1337,                    negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1340,                    if (length + 1 >= limit || ,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1343,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1346,                    if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1347,                        length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1350,                        position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1353,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1354,                    continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1357,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1363,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1370,"                value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1374,                    i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1378,                } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1379,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1386,                    value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1412,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1416,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1414,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1415,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1417,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1423,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1427,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1425,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1426,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1428,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1431,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1436,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1434,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1435,                    buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1438,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1440,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1443,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1448,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1446,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1447,                    out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1450,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1452,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2477,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2478,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2479,            iParseLookup = parseLookup;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2480,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2483,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2490,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2495,"            out.write(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2496,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2499,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2500,"                return """";  // no zone",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2502,            switch (iType) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2504,"                    return displayZone.getName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2506,"                    return displayZone.getShortName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2508,"            return """";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2513,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2517,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2520,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2525,            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2526,            String str = text.substring(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2527,            String matched = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2528,            for (String name : parseLookup.keySet()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2529,                if (str.startsWith(name)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2530,                    if (matched == null || name.length() > matched.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2531,                        matched = name;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2534,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2535,            if (matched != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2536,                bucket.setZone(parseLookup.get(matched));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2537,                return position + matched.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2539,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2126,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2129,                minFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2130,                maxFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2142,                est = iZeroOffsetPrintText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2150,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2151,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2154,                buf.append(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2155,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2157,            if (displayOffset >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2158,                buf.append('+');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2160,                buf.append('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2161,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2166,            if (iMaxFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2167,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2171,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2175,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2176,                buf.append(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2179,            if (iMaxFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2180,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2183,            if (displayOffset == 0 && iMinFields <= 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2184,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2187,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2188,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2189,                buf.append(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2192,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2193,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2195,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2196,            if (displayOffset == 0 && iMinFields <= 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2197,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2200,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2201,                buf.append('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2204,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2209,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2210,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2212,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2213,                out.write(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2214,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2216,            if (displayOffset >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2217,                out.write('+');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2219,                out.write('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2220,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2223,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2225,            if (iMaxFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2226,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2228,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2229,            if (displayOffset == 0 && iMinFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2230,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2233,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2234,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2235,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2238,            if (iMaxFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2239,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2241,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2242,            if (displayOffset == 0 && iMinFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2243,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2246,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2247,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2248,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2251,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2252,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2254,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2255,            if (displayOffset == 0 && iMinFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2256,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2259,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2260,                out.write('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2263,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2267,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2271,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2278,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2281,            if (iZeroOffsetParseText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2282,                if (iZeroOffsetParseText.length() == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2284,                    if (limit > 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2285,                        char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2286,                        if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2287,                            break zeroOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2290,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2291,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2294,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2295,                    return position + iZeroOffsetParseText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2301,            if (limit <= 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2302,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2306,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2307,            if (c == '-') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2308,                negative = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2309,            } else if (c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2310,                negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2312,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2315,            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2316,            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2330,"            if (digitCount(text, position, 2) < 2) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2332,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2338,            if (hours > 23) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2339,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2342,            limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2343,            position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2349,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2350,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2354,                c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2355,                if (c == ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2356,                    expectSeparators = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2357,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2358,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2359,                } else if (c >= '0' && c <= '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2360,                    expectSeparators = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2367,"                int count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2368,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2369,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2370,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2372,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2376,                if (minutes > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2377,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2380,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2381,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2385,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2386,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2389,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2390,                    if (text.charAt(position) != ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2391,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2393,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2394,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2397,"                count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2398,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2399,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2400,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2402,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2406,                if (seconds > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2407,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2409,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2410,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2411,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2415,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2416,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2419,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2421,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2423,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2424,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2427,"                count = digitCount(text, position, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2428,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2429,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2430,                } else if (count < 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2432,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2435,                offset += (text.charAt(position++) - '0') * 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2436,                if (count > 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2437,                    offset += (text.charAt(position++) - '0') * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2438,                    if (count > 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2439,                        offset += text.charAt(position++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2445,            return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2453,"            int limit = Math.min(text.length() - position, amount);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2454,            amount = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2455,            for (; limit > 0; limit--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2456,                char c = text.charAt(position + amount);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2457,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2458,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2460,                amount++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2462,            return amount;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1895,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1896,            iFieldType = fieldType;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1898,            if (maxDigits > 18) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1899,                maxDigits = 18;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1901,            iMinDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1902,            iMaxDigits = maxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1903,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1906,            return iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1913,"                printTo(buf, null, instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1916,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1914,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1917,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1922,"            printTo(null, out, instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1923,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1928,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1930,"                printTo(buf, null, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1933,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1931,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1934,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1939,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1940,"            printTo(null, out, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1941,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1946,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1947,            int minDigits = iMinDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1951,                fraction = field.remainder(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1959,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1952,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1953,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1954,"                    appendUnknownString(buf, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1956,"                    printUnknownString(out, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1958,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1961,            if (fraction == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1962,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1963,                    while (--minDigits >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1964,                        buf.append('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1967,                    while (--minDigits >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1968,                        out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1971,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1975,"            long[] fractionData = getFractionData(fraction, field);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1976,            long scaled = fractionData[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1977,            int maxDigits = (int) fractionData[1];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1979,            if ((scaled & 0x7fffffff) == scaled) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1980,                str = Integer.toString((int) scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1982,                str = Long.toString(scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1985,            int length = str.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1986,            int digits = maxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1987,            while (length < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1988,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1989,                    buf.append('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1991,                    out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1993,                minDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1994,                digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1997,            if (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1999,                while (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2000,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2001,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2003,                    digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2004,                    length--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2006,                if (length < str.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2007,                    if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2008,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2009,                            buf.append(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2012,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2013,                            out.write(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2016,                    return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2020,            if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2021,                buf.append(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2023,                out.write(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2025,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2028,            long rangeMillis = field.getDurationField().getUnitMillis();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2030,            int maxDigits = iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2032,                switch (maxDigits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2033,                default: scalar = 1L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2034,                case 1:  scalar = 10L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2035,                case 2:  scalar = 100L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2036,                case 3:  scalar = 1000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2037,                case 4:  scalar = 10000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2038,                case 5:  scalar = 100000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2039,                case 6:  scalar = 1000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2040,                case 7:  scalar = 10000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2041,                case 8:  scalar = 100000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2042,                case 9:  scalar = 1000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2043,                case 10: scalar = 10000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2044,                case 11: scalar = 100000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2045,                case 12: scalar = 1000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2046,                case 13: scalar = 10000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2047,                case 14: scalar = 100000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2048,                case 15: scalar = 1000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2049,                case 16: scalar = 10000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2050,                case 17: scalar = 100000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2051,                case 18: scalar = 1000000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2053,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2054,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2057,                maxDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2064,            return iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2068,            DateTimeField field = iFieldType.getField(bucket.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2072,            long value = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2073,            long n = field.getDurationField().getUnitMillis() * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2074,            int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2075,            while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2076,                char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2077,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2078,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2080,                length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2081,                long nn = n / 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2082,                value += (c - '0') * nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2083,                n = nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2084,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2086,            value /= 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2088,            if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2089,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2092,            if (value > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2093,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2096,            DateTimeField parseField = new PreciseDateTimeField(,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2101,"            bucket.saveField(parseField, (int) value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,2103,            return position + length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1767,"                buf.append(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1770,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1768,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1769,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1771,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1777,"                out.write(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1780,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1778,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1779,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1781,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1785,"                buf.append(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1788,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1786,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1787,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1789,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1793,"                out.write(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1796,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1794,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1795,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1797,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1800,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1801,            if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1802,"                return field.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1804,"                return field.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1809,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1810,                DateTimeField field = iFieldType.getField(partial.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1811,                if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1812,"                    return field.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1814,"                    return field.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1817,"                return ""\ufffd"";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1827,            Locale locale = bucket.getLocale();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1830,            Set<String> validValues = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1831,            int maxLength = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1832,            synchronized (cParseCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1834,                if (innerMap == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1836,"                    cParseCache.put(locale, innerMap);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1838,                Object[] array = innerMap.get(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1839,                if (array == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1840,                    validValues = new HashSet<String>(32);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1842,                    Property property = dt.property(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1843,                    int min = property.getMinimumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1844,                    int max = property.getMaximumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1845,                    if (max - min > 32) {  // protect against invalid fields,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1846,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1848,                    maxLength = property.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1849,                    for (int i = min; i <= max; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1850,                        property.set(i);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1851,                        validValues.add(property.getAsShortText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1852,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1853,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1854,                        validValues.add(property.getAsText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1855,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1856,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1860,"                        validValues.add(""BCE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1861,"                        validValues.add(""bce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1862,"                        validValues.add(""CE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1863,"                        validValues.add(""ce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1864,                        maxLength = 3;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1867,"                    innerMap.put(iFieldType, array);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1868,                } else {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1869,                    validValues = (Set<String>) array[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1870,                    maxLength = ((Integer) array[1]).intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1872,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1874,"            int limit = Math.min(text.length(), position + maxLength);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1875,            for (int i = limit; i > position; i--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1876,"                String match = text.substring(position, i);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1877,                if (validValues.contains(match)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1878,"                    bucket.saveField(iFieldType, match, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1879,                    return i;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1882,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1561,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1562,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1563,            iPivot = pivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1564,            iLenientParse = lenientParse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1565,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1568,            return iLenientParse ? 4 : 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1572,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1574,            if (!iLenientParse) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1575,"                limit = Math.min(2, limit);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1576,                if (limit < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1577,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1580,                boolean hasSignChar = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1581,                boolean negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1582,                int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1583,                while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1584,                    char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1585,                    if (length == 0 && (c == '-' || c == '+')) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1586,                        hasSignChar = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1587,                        negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1588,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1589,                            length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1592,                            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1593,                            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1595,                        continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1597,                    if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1598,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1600,                    length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1601,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1603,                if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1604,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1607,                if (hasSignChar || length != 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1609,                    if (length >= 9) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1612,"                        value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1614,                        int i = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1615,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1616,                            i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1619,                            value = text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1622,                        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1620,                        } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1621,                            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1623,                        position += length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1624,                        while (i < position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1625,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1627,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1628,                            value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1632,"                    bucket.saveField(iType, value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1633,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1638,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1639,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1640,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1642,            year = c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1643,            c = text.charAt(position + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1644,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1645,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1647,            year = ((year << 3) + (year << 1)) + c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1649,            int pivot = iPivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1651,            if (bucket.getPivotYear() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1652,                pivot = bucket.getPivotYear().intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1655,            int low = pivot - 50;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1658,            if (low >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1659,                t = low % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1661,                t = 99 + ((low + 1) % 100);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1664,            year += low + ((year < t) ? 100 : 0) - t;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1666,"            bucket.saveField(iType, year);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1667,            return position + 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1671,            return 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1677,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1678,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1679,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1680,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1684,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1689,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1690,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1691,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1692,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1694,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1696,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1700,                int year = iType.getField(chrono).get(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1701,                if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1702,                    year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1704,                return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1705,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1706,                return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1711,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1712,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1713,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1714,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1718,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1721,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1722,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1723,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1724,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1726,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1728,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1731,            if (partial.isSupported(iType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1733,                    int year = partial.get(iType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1734,                    if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1735,                        year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1737,                    return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1738,                } catch (RuntimeException e) {},0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1740,            return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1522,"            super(fieldType, numDigits, signed, numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1523,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1526,"            int newPos = super.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1527,            if (newPos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1528,                return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1530,            int expectedPos = position + iMaxParsedDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1531,            if (newPos != expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1532,                if (iSigned) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1533,                    char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1534,                    if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1535,                        expectedPos++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1538,                if (newPos > expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1540,                    return ~(expectedPos + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1541,                } else if (newPos < expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1543,                    return ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1546,            return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1475,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1479,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1477,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1478,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1480,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1486,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1490,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1488,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1489,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1491,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1494,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1499,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1497,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1498,"                    appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1501,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1503,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1506,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1511,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1509,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1510,"                    printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1513,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1515,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,145,        super();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,146,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,230,        if (fields == null || fields.size() == 0) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,233,        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,234,        int inputSize = workingFields.size();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,235,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,236,        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,238,        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,240,        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,242,        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,244,        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,246,        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,248,        } else if (workingFields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,249,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,250,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,251,        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,252,            bld.append(weekyearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,253,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,255,        boolean datePresent = (workingFields.size() < inputSize);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,261,        if (bld.canBuildFormatter() == false) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,268,            fields.retainAll(workingFields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,271,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,269,        } catch (UnsupportedOperationException ex) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,272,        return bld.toFormatter();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,293,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,294,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,295,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,296,            if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,297,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,299,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,300,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,301,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,302,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,305,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,306,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,307,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,310,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,312,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,313,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,314,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,315,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,318,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,323,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,324,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,325,            bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,328,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,329,                bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,332,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,334,        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,336,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,337,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,338,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,339,            bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,341,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,361,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,362,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,363,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,364,            if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,366,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,367,                bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,370,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,373,        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,375,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,376,            bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,378,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,398,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,399,        if (fields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,400,            bld.append(weekyearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,401,            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,402,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,403,                bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,404,                bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,405,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,407,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,408,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,411,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,414,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,416,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,417,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,418,                    bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,419,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,420,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,423,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,427,        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,428,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,429,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,430,            bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,431,            if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,433,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,434,                bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,437,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,439,        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,441,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,442,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,443,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,444,            bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,446,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,470,        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,471,        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,472,        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,473,        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,474,        if (!hour && !minute && !second && !milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,475,            return;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,477,        if (hour || minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,478,            if (strictISO && reducedPrec) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,481,            if (datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,482,                bld.appendLiteral('T');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,485,        if (hour && minute && second || (hour && !second && !milli)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,488,            if (strictISO && datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,491,            if (!hour && (minute && second || (minute && !milli) || second)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,494,                if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,499,        if (hour) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,500,            bld.appendHourOfDay(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,501,        } else if (minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,502,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,504,        if (extended && hour && minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,505,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,507,        if (minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,508,            bld.appendMinuteOfHour(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,509,        } else if (second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,510,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,512,        if (extended && minute && second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,513,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,515,        if (second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,516,            bld.appendSecondOfMinute(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,517,        } else if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,518,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,520,        if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,521,            bld.appendLiteral('.');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,522,            bld.appendMillisOfSecond(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,524,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,535,        if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,538,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,549,        if (extended) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,550,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,552,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,569,        if (dp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,570,            DateTimeParser tOffset = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,573,            dp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,578,        return dp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,595,        if (ldp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,596,            ldp = dateElementParser().withZoneUTC();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,598,        return ldp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,613,        if (dpe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,614,            dpe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,636,        return dpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,654,        if (tp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,655,            tp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,661,        return tp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,680,        if (ltp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,681,            ltp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,686,        return ltp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,702,        if (tpe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,704,            DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,715,            tpe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,751,        return tpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,775,        if (dtp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,778,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,783,            dtp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,787,        return dtp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,810,        if (dotp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,811,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,816,            dotp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,821,        return dotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,845,        if (ldotp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,846,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,850,            ldotp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,855,        return ldotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,879,        if (t == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,880,            t = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,885,        return t;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,916,        if (tt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,917,            tt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,922,        return tt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,953,        if (dt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,954,            dt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,959,        return dt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,988,        if (od == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,989,            od = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,994,        return od;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1007,        if (odt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1008,            odt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1013,        return odt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1026,        if (odtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1027,            odtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1032,        return odtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1042,        return weekyearWeekDay();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1054,        if (wdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1055,            wdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1060,        return wdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1072,        if (wdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1073,            wdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1078,        return wdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1089,        if (bd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1090,            bd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1096,        return bd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1109,        if (bt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1110,            bt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1119,        return bt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1131,        if (btx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1132,            btx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1139,        return btx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1152,        if (btt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1153,            btt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1158,        return btt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1171,        if (bttx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1172,            bttx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1177,        return bttx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1189,        if (bdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1190,            bdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1195,        return bdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1207,        if (bdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1208,            bdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1213,        return bdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1224,        if (bod == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1225,            bod = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1230,        return bod;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1243,        if (bodt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1244,            bodt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1249,        return bodt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1262,        if (bodtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1263,            bodtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1268,        return bodtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1278,        if (bwd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1279,            bwd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1286,        return bwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1298,        if (bwdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1299,            bwdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1304,        return bwdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1316,        if (bwdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1317,            bwdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1322,        return bwdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1332,        return yearElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1342,        if (ym == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1343,            ym = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1348,        return ym;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1374,        return weekyearElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1384,        if (ww == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1385,            ww = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1390,        return ww;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1400,        if (wwd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1401,            wwd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1407,        return wwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1416,        return hourElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1426,        if (hm == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1427,            hm = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1432,        return hm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1461,        if (hmsl == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1462,            hmsl = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1470,        return hmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1482,        if (hmsf == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1483,            hmsf = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1490,        return hmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1500,        if (dh == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1501,            dh = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1507,        return dh;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1517,        if (dhm == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1518,            dhm = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1524,        return dhm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1535,        if (dhms == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1536,            dhms = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1542,        return dhms;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1554,        if (dhmsl == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1555,            dhmsl = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1561,        return dhmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1573,        if (dhmsf == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1574,            dhmsf = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1580,        return dhmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1614,        if (we == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1615,            we = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1619,        return we;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1623,        if (wwe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1624,            wwe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1629,        return wwe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1633,        if (dwe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1634,            dwe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1639,        return dwe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1643,        if (dye == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1644,            dye = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1649,        return dye;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1691,        if (fse == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1692,            fse = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,7,1699,        return fse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1218,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1219,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1224,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1225,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1228,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1229,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1232,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1233,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1241,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1248,                a = Character.toUpperCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1249,                b = Character.toUpperCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1250,                if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1251,                    a = Character.toLowerCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1252,                    b = Character.toLowerCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1253,                    if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1254,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1270,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1271,            iValue = value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1272,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1275,            return iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1281,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1282,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1287,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1288,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1291,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1292,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1295,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1296,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1299,            return iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1304,                return position + iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,7,1306,            return ~position;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,7,143,        return iRange;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,93,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,126,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,7,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,7,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,435,        SavedState() {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,436,            this.iZone = DateTimeParserBucket.this.iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,437,            this.iOffset = DateTimeParserBucket.this.iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,438,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,439,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,440,        },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,443,            if (enclosing != DateTimeParserBucket.this) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,444,                return false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,446,            enclosing.iZone = this.iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,447,            enclosing.iOffset = this.iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,448,            enclosing.iSavedFields = this.iSavedFields;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,449,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,454,                enclosing.iSavedFieldsShared = true;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,456,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,457,            return true;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,474,"        SavedField(DateTimeField field, String text, Locale locale) {",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,475,            iField = field;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,476,            iValue = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,477,            iText = text;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,478,            iLocale = locale;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,479,        },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,485,"                millis = iField.set(millis, iText, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,488,                millis = iField.roundFloor(millis);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,505,            return compareReverse,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,7,461,    static class SavedField implements Comparable<SavedField> {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,7,328,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,387,        super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,388,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,194,        return createFormatterForStyle(style);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,212,        DateTimeFormatter formatter = createFormatterForStyle(style);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,213,        if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,214,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,217,        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,230,"        return createFormatterForStyleIndex(SHORT, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,242,"        return createFormatterForStyleIndex(NONE, SHORT);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,254,"        return createFormatterForStyleIndex(SHORT, SHORT);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,304,"        return createFormatterForStyleIndex(LONG, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,316,"        return createFormatterForStyleIndex(NONE, LONG);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,328,"        return createFormatterForStyleIndex(LONG, LONG);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,341,"        return createFormatterForStyleIndex(FULL, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,353,"        return createFormatterForStyleIndex(NONE, FULL);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,365,"        return createFormatterForStyleIndex(FULL, FULL);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,377,"        parsePatternTo(builder, pattern);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,378,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,410,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,416,                builder.appendEraText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,417,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,420,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,424,                if (tokenLen == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,425,                    boolean lenientParse = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,428,                    if (i + 1 < length) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,429,                        indexRef[0]++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,434,                            lenientParse = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,436,                        indexRef[0]--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,440,                    switch (c) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,442,                        builder.appendTwoDigitWeekyear,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,444,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,451,                } else {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,453,                    int maxDigits = 9;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,456,                    if (i + 1 < length) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,457,                        indexRef[0]++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,460,                            maxDigits = tokenLen;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,462,                        indexRef[0]--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,465,                    switch (c) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,468,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,470,"                        builder.appendYear(tokenLen, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,471,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,477,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,480,                    if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,481,                        builder.appendMonthOfYearText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,483,                        builder.appendMonthOfYearShortText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,493,                builder.appendHalfdayOfDayText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,494,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,496,                builder.appendClockhourOfHalfday(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,497,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,499,                builder.appendHourOfDay(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,500,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,502,                builder.appendClockhourOfDay(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,503,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,505,                builder.appendHourOfHalfday(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,506,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,508,                builder.appendMinuteOfHour(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,509,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,511,                builder.appendSecondOfMinute(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,512,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,515,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,517,                builder.appendDayOfWeek(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,518,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,520,                if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,521,                    builder.appendDayOfWeekText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,523,                    builder.appendDayOfWeekShortText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,525,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,527,                builder.appendDayOfYear(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,528,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,530,                builder.appendWeekOfWeekyear(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,531,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,533,                if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,534,                    builder.appendTimeZoneName();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,536,                    builder.appendTimeZoneShortName(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,538,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,540,                if (tokenLen == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,542,                } else if (tokenLen == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,545,                    builder.appendTimeZoneId();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,547,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,555,                    builder.appendLiteral(new String(sub));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,557,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,559,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,588,                    buf.append(c);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,589,                    i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,593,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,604,                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,606,                        i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,607,                        buf.append(c);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,609,                        inLiteral = !inLiteral;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,632,        int tokenLen = token.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,633,        if (tokenLen > 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,634,            char c = token.charAt(0);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,635,            switch (c) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,654,                return true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,656,                if (tokenLen <= 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,657,                    return true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,662,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,701,        if (style == null || style.length() != 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,704,        int dateStyle = selectStyle(style.charAt(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,705,        int timeStyle = selectStyle(style.charAt(1));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,706,        if (dateStyle == NONE && timeStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,720,        int index = ((dateStyle << 2) + dateStyle) + timeStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,721,        DateTimeFormatter f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,722,        synchronized (cStyleCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,723,            f = cStyleCache[index];,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,724,            if (f == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,725,                int type = DATETIME;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,726,                if (dateStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,727,                    type = TIME;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,728,                } else if (timeStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,729,                    type = DATE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,731,                StyleFormatter llf = new StyleFormatter(,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,733,"                f = new DateTimeFormatter(llf, llf);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,734,                cStyleCache[index] = f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,736,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,737,        return f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,747,        switch (ch) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,749,            return SHORT;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,751,            return MEDIUM;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,753,            return LONG;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,755,            return FULL;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,757,            return NONE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,774,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,775,            iDateStyle = dateStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,776,            iTimeStyle = timeStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,777,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,778,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,781,            return 40;  // guess,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,787,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,789,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,794,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,796,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,799,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,800,"            p.printTo(buf, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,801,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,804,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,805,"            p.printTo(out, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,806,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,809,            return 40;  // guess,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,813,            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,814,"            return p.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,818,            locale = (locale == null ? Locale.getDefault() : locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,819,            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,820,            DateTimeFormatter f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,821,            synchronized (cCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,822,                f = cCache.get(key);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,823,                if (f == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,824,                    String pattern = getPattern(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,825,                    f = DateTimeFormat.forPattern(pattern);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,826,"                    cCache.put(key, f);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,828,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,829,            return f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,833,            DateFormat f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,834,            switch (iType) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,837,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,840,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,845,            if (f instanceof SimpleDateFormat == false) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,7,848,            return ((SimpleDateFormat) f).toPattern();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,7,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,7,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,286,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,292,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,7,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,7,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,7,348,                    return this;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,7,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,84,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,93,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,105,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,138,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,139,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,150,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,160,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,161,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,163,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,164,            return this;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,166,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,178,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,179,            return true;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,181,        if (obj instanceof BuddhistChronology) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,182,            BuddhistChronology chrono = (BuddhistChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,183,            return getZone().equals(chrono.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,185,        return false;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,195,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,206,"        String str = ""BuddhistChronology"";",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,207,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,208,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,209,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,7,211,        return str;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,7,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,7,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,99,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,245,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,246,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,248,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,250,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,286,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,292,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,316,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,321,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,329,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,330,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,334,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,336,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,338,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,340,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,342,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,345,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,354,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,355,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,363,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,376,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,366,        } catch (IllegalFieldValueException ex) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,367,            if (monthOfYear != 2 || dayOfMonth != 29) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,368,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,370,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,373,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,374,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,377,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,379,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,382,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,384,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,387,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,416,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,417,            return true;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,419,        if (obj instanceof GJChronology) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,420,            GJChronology chrono = (GJChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,421,            return iCutoverMillis == chrono.iCutoverMillis &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,425,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,435,"        return ""GJ"".hashCode() * 11 + getZone().hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,447,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,448,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,449,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,450,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,452,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,453,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,455,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,456,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,458,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,460,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,463,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,464,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,465,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,467,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,469,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,489,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,591,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,595,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,68,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,75,            if (!lowerLimit.isBefore(upperLimit)) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,76,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,111,        return iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,120,        return iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,129,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,138,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,139,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,141,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,142,            return this;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,145,        if (zone == DateTimeZone.UTC && iWithUTC != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,146,            return iWithUTC;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,149,        DateTime lowerLimit = iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,150,        if (lowerLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,151,            MutableDateTime mdt = lowerLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,152,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,153,            lowerLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,156,        DateTime upperLimit = iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,157,        if (upperLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,158,            MutableDateTime mdt = upperLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,159,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,160,            upperLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,163,        LimitChronology chrono = getInstance,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,166,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,167,            iWithUTC = chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,170,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,178,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,179,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,187,        long instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,190,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,191,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,199,"        checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,200,        instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,202,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,203,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,269,            return field;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,272,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,285,        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,286,"            throw new LimitException(desc, true);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,288,        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,289,"            throw new LimitException(desc, false);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,291,    },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,303,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,304,            return true;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,306,        if (obj instanceof LimitChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,307,            return false;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,309,        LimitChronology chrono = (LimitChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,310,        return,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,323,        int hash = 317351877;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,324,        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,325,        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,326,        hash += getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,327,        return hash;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,57,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,62,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,68,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,76,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,81,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,86,        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,91,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,96,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,101,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,116,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,121,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,126,        return iEraText;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,7,131,        return iEraText.length();,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,69,        } else if (min == skip + 1) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,70,            iMinValue = skip;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,72,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,79,        int value = super.get(millis);,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,80,        if (value < iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,81,            value++;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,83,        return value;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,7,99,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,64,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,76,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,84,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,92,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,100,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,104,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,108,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,112,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,116,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,120,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,124,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,132,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,136,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,140,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,144,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,156,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,176,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,180,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,184,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,200,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,204,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,216,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,220,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,224,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,232,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,236,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,240,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,244,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,248,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,252,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,256,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,260,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,264,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,268,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,272,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,7,276,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,7,216,        return iOffset;,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,7,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,7,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,7,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,7,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,197,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,198,            return true;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,200,        if (obj != null && getClass() == obj.getClass()) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,201,            BasicChronology chrono = (BasicChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,205,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,226,        StringBuilder sb = new StringBuilder(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,227,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,228,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,229,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,230,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,232,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,233,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,234,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,235,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,236,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,238,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,239,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,240,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,242,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,243,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,316,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,326,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,357,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,380,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,381,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,382,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,424,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,486,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,506,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,507,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,509,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,527,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,531,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,544,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,553,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,574,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,599,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,351,"        LimitException(String desc, boolean isLow) {",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,352,            super(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,353,            iIsLow = isLow;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,354,        },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,357,            StringBuffer buf = new StringBuffer(85);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,358,"            buf.append(""The"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,359,            String desc = super.getMessage();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,360,            if (desc != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,361,                buf.append(' ');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,362,                buf.append(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,364,"            buf.append("" instant is "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,366,            DateTimeFormatter p = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,367,            p = p.withChronology(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,368,            if (iIsLow) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,369,"                buf.append(""below the supported minimum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,370,"                p.printTo(buf, getLowerLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,372,"                buf.append(""above the supported maximum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,373,"                p.printTo(buf, getUpperLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,376,"            buf.append("" ("");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,377,            buf.append(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,378,            buf.append(')');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,380,            return buf.toString();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,384,"            return ""IllegalArgumentException: "" + getMessage();",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,461,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,462,            return getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,466,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,467,"            return getWrappedField().getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,471,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,472,"            return getWrappedField().getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,476,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,477,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,478,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,479,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,483,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,484,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,485,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,486,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,490,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,491,"            long result = getWrappedField().addWrapField(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,492,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,493,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,497,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,498,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,503,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,504,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,509,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,510,"            long result = getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,511,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,512,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,516,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,517,"            long result = getWrappedField().set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,518,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,519,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,523,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,527,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,531,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,532,            return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,536,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,537,            return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,541,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,545,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,546,            long result = getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,547,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,548,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,552,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,553,            long result = getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,554,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,555,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,559,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,560,            long result = getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,561,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,562,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,566,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,567,            long result = getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,568,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,569,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,573,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,574,            long result = getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,575,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,576,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,580,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,581,            long result = getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,582,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,583,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,587,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,588,            return getWrappedField().getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,592,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,593,            return getWrappedField().getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,597,            return getWrappedField().getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,601,            return getWrappedField().getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,396,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,397,"            return getWrappedField().getValue(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,401,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,402,"            return getWrappedField().getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,406,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,407,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,411,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,412,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,416,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,417,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,418,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,419,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,423,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,424,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,425,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,426,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,430,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,431,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,436,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,437,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,7,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,7,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,7,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,7,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,763,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,7,771,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,973,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,974,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,975,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,977,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,978,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,982,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,983,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,985,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,986,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,990,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,994,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,995,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,996,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,998,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,999,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1003,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1004,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1006,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1007,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1011,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1015,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1016,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1017,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1021,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1022,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1024,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1025,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1029,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1030,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1035,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1036,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1037,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1041,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1042,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1044,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1045,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1049,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1050,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1065,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1066,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1068,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1073,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1074,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1076,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,648,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,653,                return iGregorianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,660,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,661,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,663,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,668,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,672,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,673,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,675,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,680,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,684,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,688,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,694,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,695,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,697,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,698,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,699,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,700,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,702,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,703,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,705,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,710,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,714,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,727,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,735,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,736,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,739,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,740,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,749,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,750,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,751,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,753,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,754,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,759,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,760,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,762,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,763,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,768,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,780,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,781,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,783,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,788,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,789,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,791,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,807,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,811,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,815,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,816,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,819,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,823,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,824,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,825,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,828,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,838,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,839,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,842,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,846,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,847,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,848,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,851,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,855,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,856,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,860,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,861,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,862,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,863,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,864,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,865,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,868,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,872,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,873,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,874,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,876,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,877,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,881,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,883,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,887,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,888,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,890,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,891,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,893,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,894,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,898,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,902,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,907,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,912,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,913,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,915,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,921,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1096,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1100,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1104,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,7,1108,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,7,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,388,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,399,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,408,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,409,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,413,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,414,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,418,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,422,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,426,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,427,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,428,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,429,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,431,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,432,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,433,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,438,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,439,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,440,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,441,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,443,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,444,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,445,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,450,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,451,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,452,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,453,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,455,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,456,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,457,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,466,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,467,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,468,                ex.initCause(cause);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,469,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,476,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,477,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,478,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,482,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,483,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,489,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,490,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,504,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,505,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,509,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,510,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,518,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,519,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,520,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,521,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,523,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,524,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,525,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,530,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,531,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,532,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,533,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,535,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,536,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,537,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,542,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,543,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,551,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,552,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,556,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,560,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,568,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,569,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,573,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,577,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,581,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,585,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,589,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,590,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,592,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,593,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,595,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,89,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,93,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,94,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,96,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,97,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,99,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,100,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,102,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,109,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,128,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,142,"            throw new IllegalInstantException(localInstant, zone.getID());",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,210,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,213,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,234,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,235,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,237,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,238,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,240,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,241,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,58,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,61,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,63,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,123,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,7,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,7,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,7,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,7,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,7,133,        return false;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,7,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,7,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,7,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,7,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,209,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,211,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,212,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,213,"            return set(partial, 0, values, newMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,215,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,216,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,220,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,221,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,223,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,243,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,244,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,247,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,256,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,260,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,262,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,271,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,273,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,276,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,277,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,280,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,320,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,321,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,324,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,329,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,339,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,344,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,349,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,350,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,351,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,356,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,7,364,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,7,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,79,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,7,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,283,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,299,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,307,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,311,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,315,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,316,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,321,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,322,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,327,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,328,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,334,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,335,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,341,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,342,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,347,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,351,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,352,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,357,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,7,361,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,50,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,51,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,55,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,59,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,81,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,83,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,95,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,99,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,103,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,7,110,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,7,229,                leapYears++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,89,        if (value <= iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,90,            if (value == iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,91,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,94,            value++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,96,"        return super.set(millis, value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,7,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,225,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,226,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,227,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,230,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,234,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,235,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,240,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,7,241,        },0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,475,            return (1 << iOrdinal);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,516,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,520,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,522,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,524,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,7,590,                    return this;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1270,            super();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1271,            iInstant = instant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1272,            iField = field;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1273,        },0.0,0,-1,0
org/joda/time/MutableDateTime,7,1279,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1280,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1281,        },0.0,0,-1,0
org/joda/time/MutableDateTime,7,1287,            iInstant = (MutableDateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1288,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1289,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1290,        },0.0,0,-1,0
org/joda/time/MutableDateTime,7,1299,            return iField;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1308,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1318,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1327,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1339,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1340,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1351,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1352,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1363,"            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1364,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1376,"            iInstant.setMillis(getField().set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1377,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1390,"            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1391,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1403,"            set(text, null);",0.0,0,-1,0
org/joda/time/MutableDateTime,7,1404,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1415,            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1416,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1426,            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1427,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1438,            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1439,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1450,            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1451,            return iInstant;,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1462,            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/MutableDateTime,7,1463,            return iInstant;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,7,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,64,        int sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,70,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,123,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,136,        switch (val2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,141,                return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,143,                return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,145,                return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,147,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,148,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,151,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,163,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,164,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,166,        if (val1 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,167,            return val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,169,        if (val1 == 0 || val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,170,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,172,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,176,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,188,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,202,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,203,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,236,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,252,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,253,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,257,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,7,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,292,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,293,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,7,296,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,297,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,299,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,300,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,303,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,305,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,306,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,308,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,321,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,322,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,324,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,325,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,7,327,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,7,138,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,7,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
