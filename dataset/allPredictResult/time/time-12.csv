project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/field/PreciseDurationDateTimeField,12,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,4.0,0,0,0
org/joda/time/LocalDateTime,12,2016,        return ISODateTimeFormat.dateTime().print(this);,1.77778,1,-1,1
org/joda/time/LocalDateTime,12,612,        if (type == null) {,1.33333,1,-1,1
org/joda/time/LocalDateTime,12,615,        return type.getField(getChronology()).isSupported();,1.33333,1,-1,1
org/joda/time/LocalDate,12,1805,        return ISODateTimeFormat.date().print(this);,1.33333,0,-1,0
org/joda/time/LocalDateTime,12,597,        if (type == null) {,0.8,0,-1,0
org/joda/time/LocalDateTime,12,600,        return type.getField(getChronology()).get(getLocalMillis());,0.8,0,-1,0
org/joda/time/LocalDate,12,548,        return fieldType.getField(getChronology()).get(getLocalMillis());,0.8,1,-1,1
org/joda/time/LocalDateTime,12,567,        switch (index) {,0.7619,0,-1,0
org/joda/time/LocalDateTime,12,569,                return getChronology().year().get(getLocalMillis());,0.7619,0,-1,0
org/joda/time/LocalDateTime,12,571,                return getChronology().monthOfYear().get(getLocalMillis());,0.7619,0,-1,0
org/joda/time/LocalDateTime,12,573,                return getChronology().dayOfMonth().get(getLocalMillis());,0.7619,0,-1,0
org/joda/time/LocalDateTime,12,575,                return getChronology().millisOfDay().get(getLocalMillis());,0.7619,0,-1,0
org/joda/time/LocalDate,12,542,        if (fieldType == null) {,0.7619,1,-1,1
org/joda/time/LocalDate,12,545,        if (isSupported(fieldType) == false) {,0.7619,1,-1,1
org/joda/time/LocalDate,12,567,            return type.getField(getChronology()).isSupported();,0.66667,0,-1,0
org/joda/time/LocalDate,12,560,        if (type == null) {,0.61538,0,-1,0
org/joda/time/LocalDate,12,563,        DurationFieldType durType = type.getDurationType();,0.61538,0,-1,0
org/joda/time/LocalDate,12,564,        if (DATE_DURATION_TYPES.contains(durType) ||,0.61538,0,-1,0
org/joda/time/LocalDateTime,12,199,        int yearOfEra = calendar.get(Calendar.YEAR);,0.57143,0,-1,0
org/joda/time/LocalDateTime,12,200,        return new LocalDateTime(,0.57143,0,-1,0
org/joda/time/LocalDate,12,210,        int yearOfEra = calendar.get(Calendar.YEAR);,0.57143,0,-1,0
org/joda/time/LocalDate,12,211,        return new LocalDate(,0.57143,0,-1,0
org/joda/time/LocalDateTime,12,196,        if (calendar == null) {,0.5,0,-1,0
org/joda/time/LocalDate,12,207,        if (calendar == null) {,0.5,0,-1,0
org/joda/time/LocalDateTime,12,546,                return chrono.monthOfYear();,0.37209,0,-1,0
org/joda/time/LocalDateTime,12,548,                return chrono.dayOfMonth();,0.37209,0,-1,0
org/joda/time/LocalDateTime,12,550,                return chrono.millisOfDay();,0.37209,0,-1,0
org/joda/time/DateTimeFieldType,12,526,                    return chronology.millisOfDay();,0.37209,0,-1,0
org/joda/time/LocalDateTime,12,529,        return 4;,0.36364,0,-1,0
org/joda/time/LocalDateTime,12,542,        switch (index) {,0.36364,0,-1,0
org/joda/time/LocalDateTime,12,544,                return chrono.year();,0.36364,0,-1,0
org/joda/time/LocalDateTime,12,669,                return iLocalMillis == other.iLocalMillis;,0.32,0,-1,0
org/joda/time/LocalDateTime,12,237,        return new LocalDateTime(,0.30769,0,-1,0
org/joda/time/LocalDateTime,12,666,        if (partial instanceof LocalDateTime) {,0.30769,0,-1,0
org/joda/time/LocalDateTime,12,667,            LocalDateTime other = (LocalDateTime) partial;,0.30769,0,-1,0
org/joda/time/LocalDateTime,12,668,            if (iChronology.equals(other.iChronology)) {,0.30769,0,-1,0
org/joda/time/LocalDate,12,244,        return new LocalDate(,0.30769,0,-1,0
org/joda/time/LocalDateTime,12,663,        if (this == partial) {,0.30189,0,-1,0
org/joda/time/LocalDateTime,12,233,        if (date == null) {,0.28571,0,-1,0
org/joda/time/LocalDate,12,240,        if (date == null) {,0.28571,0,-1,0
org/joda/time/chrono/ISOChronology,12,190,        return super.equals(obj);,0.2735,0,-1,0
org/joda/time/LocalDate,12,628,                return iLocalMillis == other.iLocalMillis;,0.26667,0,-1,0
org/joda/time/LocalDate,12,622,        if (this == partial) {,0.25806,0,-1,0
org/joda/time/LocalDate,12,625,        if (partial instanceof LocalDate) {,0.25806,0,-1,0
org/joda/time/LocalDate,12,626,            LocalDate other = (LocalDate) partial;,0.25806,0,-1,0
org/joda/time/LocalDate,12,627,            if (iChronology.equals(other.iChronology)) {,0.25806,0,-1,0
org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.21918,0,-1,0
org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.21918,0,-1,0
org/joda/time/chrono/BaseChronology,12,242,        return instant;,0.21918,0,-1,0
org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.20847,0,-1,0
org/joda/time/chrono/GregorianChronology,12,132,                    chrono = new GregorianChronology,0.20847,0,-1,0
org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0.20253,0,-1,0
org/joda/time/LocalDate,12,427,    },0.20253,0,-1,0
org/joda/time/chrono/GregorianChronology,12,171,        return INSTANCE_UTC;,0.19104,0,-1,0
org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.17778,0,-1,0
org/joda/time/LocalDateTime,12,473,    },0.17778,0,-1,0
org/joda/time/DateTimeFieldType,12,498,                    return chronology.dayOfMonth();,0.17021,0,-1,0
org/joda/time/DateTimeFieldType,12,492,                    return chronology.year();,0.15534,0,-1,0
org/joda/time/DateTimeFieldType,12,496,                    return chronology.monthOfYear();,0.15059,0,-1,0
org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.13008,0,-1,0
org/joda/time/chrono/AssembledChronology,12,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.128,0,-1,0
org/joda/time/base/BaseLocal,12,47,        super();,0.125,0,-1,0
org/joda/time/base/BaseLocal,12,48,    },0.125,0,-1,0
org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();",0.12308,0,-1,0
org/joda/time/LocalDateTime,12,499,        super();,0.11679,0,-1,0
org/joda/time/LocalDateTime,12,500,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.11679,0,-1,0
org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.11679,0,-1,0
org/joda/time/LocalDateTime,12,503,        iChronology = chronology;,0.11679,0,-1,0
org/joda/time/LocalDateTime,12,504,        iLocalMillis = instant;,0.11679,0,-1,0
org/joda/time/LocalDateTime,12,505,    },0.11679,0,-1,0
org/joda/time/DateTimeFieldType,12,480,            chronology = DateTimeUtils.getChronology(chronology);,0.10997,0,-1,0
org/joda/time/DateTimeFieldType,12,482,            switch (iOrdinal) {,0.10997,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,84,        return INSTANCE_UTC;,0.10774,0,-1,0
org/joda/time/LocalDate,12,445,        super();,0.10738,0,-1,0
org/joda/time/LocalDate,12,446,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.10738,0,-1,0
org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",0.10738,0,-1,0
org/joda/time/LocalDate,12,448,        iChronology = chronology;,0.10738,0,-1,0
org/joda/time/LocalDate,12,449,        iLocalMillis = instant;,0.10738,0,-1,0
org/joda/time/LocalDate,12,450,    },0.10738,0,-1,0
org/joda/time/LocalDate,12,600,        return iLocalMillis;,0.1,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,126,        if (instant >= 0) {,0.09756,0,-1,0
org/joda/time/LocalDate,12,609,        return iChronology;,0.09249,0,-1,0
org/joda/time/DateTimeFieldType,12,522,                    return chronology.secondOfDay();,0.08649,0,-1,0
org/joda/time/LocalDateTime,12,641,        return iLocalMillis;,0.08466,0,-1,0
org/joda/time/LocalDateTime,12,650,        return iChronology;,0.08122,0,-1,0
org/joda/time/chrono/AssembledChronology,12,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.07556,0,-1,0
org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.07556,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,82,"        return iField.set(instant, value);",0.07556,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.07556,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);",0.07556,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,        return iChronology.getMaxYear();,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,644,            if (instant >= iCutover) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,647,                return iJulianField.get(instant);,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,710,            if (instant >= iCutover) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,711,"                instant = iGregorianField.set(instant, value);",0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,712,                if (instant < iCutover) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,714,                    if (instant + iGapDuration < iCutover) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,715,                        instant = gregorianToJulian(instant);,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,718,                    if (get(instant) != value) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,724,"                instant = iJulianField.set(instant, value);",0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,725,                if (instant >= iCutover) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,737,            return instant;,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,795,            return iJulianField.getMinimumValue();,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,826,            return iGregorianField.getMaximumValue();,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,912,            if (iConvertByWeekyear) {,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,915,                return gregorianToJulianByYear(instant);,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,173,"        return getInstance(zone, gregorianCutover, 4);",0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,192,            cutoverInstant = DEFAULT_CUTOVER;,0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.07556,0,-1,0
org/joda/time/chrono/GJChronology,12,74,public final class GJChronology extends AssembledChronology {,0.07556,0,-1,0
org/joda/time/chrono/JulianChronology,12,78,        if (year <= 0) {,0.07556,0,-1,0
org/joda/time/chrono/JulianChronology,12,79,            if (year == 0) {,0.07556,0,-1,0
org/joda/time/chrono/JulianChronology,12,83,            year++;,0.07556,0,-1,0
org/joda/time/chrono/JulianChronology,12,85,        return year;,0.07556,0,-1,0
org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,129,    },0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,104,        if (zone == null) {,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,107,        BuddhistChronology chrono = cCache.get(zone);,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,108,        if (chrono == null) {,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,114,"            cCache.put(zone, chrono);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,116,        return chrono;,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,204,        if (getParam() == null) {,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,206,            DateTimeField field = fields.year;,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,207,            fields.year = new OffsetDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,211,            field = fields.yearOfEra;,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,212,            fields.yearOfEra = new DelegatedDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,216,            field = fields.weekyear;,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,217,            fields.weekyear = new OffsetDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,221,            fields.centuryOfEra = new DividedDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,224,            field = new RemainderDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,226,            fields.yearOfCentury = new OffsetDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,229,            field = new RemainderDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,234,            fields.era = ERA_FIELD;,0.07556,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,236,    },0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,53,"        this(chronology, field, 0);",0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,54,    },0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,64,        super(field);,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,65,        iChronology = chronology;,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,66,        int min = super.getMinimumValue();,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,67,        if (min < skip) {,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,68,            iMinValue = min + 1;,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,74,        iSkip = skip;,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,75,    },0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,88,        if (value <= iSkip) {,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,89,            value--;,0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);",0.07556,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,95,        return iMinValue;,0.07556,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);",0.07556,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,228,        return iField.getMaximumValue();,0.07556,0,-1,0
org/joda/time/field/SkipDateTimeField,12,82,            value--;,0.07556,0,-1,0
org/joda/time/field/SkipDateTimeField,12,100,        return iMinValue;,0.07556,0,-1,0
org/joda/time/chrono/BasicChronology,12,344,            return jan1millis + (8 - jan1dayOfWeek),0.07529,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.07529,0,-1,0
org/joda/time/chrono/GJChronology,12,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.07529,0,-1,0
org/joda/time/chrono/JulianChronology,12,224,            leapYears = (relativeYear + 3) >> 2;,0.07529,0,-1,0
org/joda/time/field/BaseDateTimeField,12,886,        long newInstant = roundFloor(instant);,0.07521,0,-1,0
org/joda/time/field/BaseDateTimeField,12,887,        if (newInstant != instant) {,0.07521,0,-1,0
org/joda/time/field/BaseDateTimeField,12,888,"            instant = add(newInstant, 1);",0.07521,0,-1,0
org/joda/time/field/BaseDateTimeField,12,890,        return instant;,0.07521,0,-1,0
org/joda/time/chrono/BasicChronology,12,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.07521,0,-1,0
org/joda/time/chrono/BasicChronology,12,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.07521,0,-1,0
org/joda/time/chrono/BasicChronology,12,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.07521,0,-1,0
org/joda/time/chrono/BasicChronology,12,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.07521,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,127,        int year = get(instant);,0.07521,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.07521,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,129,        if (instant != yearStartMillis) {,0.07521,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,131,            instant = iChronology.getYearMillis(year + 1);,0.07521,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,133,        return instant;,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,72,        if (years == 0) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,75,"        return set(instant, get(instant) + years);",0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,133,        int thisWeekyear = get( instant );,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,134,        if ( thisWeekyear == year ) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,155,        if ( setToWeek > maxOutWeeks ) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,162,        long workInstant = instant; // Get a copy,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,168,"        workInstant = iChronology.setYear( workInstant, year );",0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,173,        int workWoyYear = get( workInstant );,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,179,        if ( workWoyYear < year ) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,181,        } else if ( workWoyYear > year ) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,204,        return workInstant;,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,236,        if (wow > 1) {,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,239,        return instant;,0.07521,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,1083,"            super(durationField, durationField.getType());",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,1084,            iField = dateTimeField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,1085,        },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,612,"            this(julianField, gregorianField, cutoverMillis, false);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,613,        },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,622,"                     long cutoverMillis, boolean convertByWeekyear) {",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,623,            super(gregorianField.getType());,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,624,            iJulianField = julianField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,625,            iGregorianField = gregorianField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,626,            iCutover = cutoverMillis;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,627,            iConvertByWeekyear = convertByWeekyear;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,630,            iDurationField = gregorianField.getDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,632,            DurationField rangeField = gregorianField.getRangeDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,633,            if (rangeField == null) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,634,                rangeField = julianField.getRangeDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,636,            iRangeDurationField = rangeField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,637,        },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,764,            return iDurationField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,768,            return iRangeDurationField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,788,            return iGregorianField.getLeapDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,272,    },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,83,        return to.getDateTimeMillis,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,189,        zone = DateTimeUtils.getZone(zone);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,191,        if (gregorianCutover == null) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,200,        if (chronos == null) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,201,            chronos = new ArrayList<GJChronology>(2);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,202,"            cCache.put(zone, chronos);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,214,        if (zone == DateTimeZone.UTC) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,215,            chrono = new GJChronology,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,228,        chronos.add(chrono);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,230,        return chrono;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,465,        Object[] params = (Object[])getParam();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,467,        JulianChronology julian = (JulianChronology)params[0];,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,469,        Instant cutoverInstant = (Instant)params[2];,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,470,        iCutoverMillis = cutoverInstant.getMillis();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,472,        iJulianChronology = julian;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,473,        iGregorianChronology = gregorian;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,474,        iCutoverInstant = cutoverInstant;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,476,        if (getBase() != null) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,485,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,491,        fields.copyFieldsFrom(gregorian);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,497,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,526,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,527,            fields.dayOfYear = new CutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,533,            fields.weekOfWeekyear = new CutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,541,            fields.year = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,543,            fields.years = fields.year.getDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,544,            fields.yearOfEra = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,546,            fields.yearOfCentury = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,549,            fields.centuryOfEra = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,551,            fields.centuries = fields.centuryOfEra.getDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,553,            fields.monthOfYear = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,555,            fields.months = fields.monthOfYear.getDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,557,            fields.weekyear = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,559,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,561,            fields.weekyears = fields.weekyear.getDurationField();,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,567,            CutoverField cf = new CutoverField,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,569,            cf.iRangeDurationField = fields.months;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,570,            fields.dayOfMonth = cf;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,572,    },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,934,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,935,        },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,946,        },0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,956,        {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,958,            if (durationField == null) {,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,959,"                durationField = new LinkedDurationField(iDurationField, this);",0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,961,            iDurationField = durationField;,0.07521,0,-1,0
org/joda/time/chrono/GJChronology,12,962,        },0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,211,        return (year & 3) == 0;,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,219,        int relativeYear = year - 1968;,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,221,        if (relativeYear <= 0) {,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,253,        return MILLIS_PER_YEAR / 2;,0.07521,0,-1,0
org/joda/time/chrono/JulianChronology,12,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.07521,0,-1,0
org/joda/time/chrono/BasicChronology,12,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.07512,0,-1,0
org/joda/time/chrono/BasicChronology,12,539,            if (daysSince19700101 < -3) {,0.07512,0,-1,0
org/joda/time/chrono/BasicChronology,12,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,162,"        super(base, param, minDaysInFirstWeek);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,163,    },0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,75,    },0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,114,"        return getInstance(zone, 4);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,125,        if (zone == null) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,129,        synchronized (cCache) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,130,            JulianChronology[] chronos = cCache.get(zone);,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,131,            if (chronos == null) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,132,                chronos = new JulianChronology[7];,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,133,"                cCache.put(zone, chronos);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,140,            },0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,141,            if (chrono == null) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,142,                if (zone == DateTimeZone.UTC) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,151,        },0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,152,        return chrono;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,241,        return MIN_YEAR;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,245,        return MAX_YEAR;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,249,        return MILLIS_PER_YEAR;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,257,        return MILLIS_PER_MONTH;,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,265,        if (getBase() == null) {,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,266,            super.assemble(fields);,0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,271,    },0.07512,0,-1,0
org/joda/time/chrono/JulianChronology,12,50,public final class JulianChronology extends BasicGJChronology {,0.07512,0,-1,0
org/joda/time/field/SkipDateTimeField,12,80,        int value = super.get(millis);,0.07512,0,-1,0
org/joda/time/field/SkipDateTimeField,12,81,        if (value <= iSkip) {,0.07512,0,-1,0
org/joda/time/field/SkipDateTimeField,12,84,        return value;,0.07512,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,96,        return iField.get(instant);,0.07503,0,-1,0
org/joda/time/chrono/BasicChronology,12,339,        long jan1millis = getYearMillis(year);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,493,        int year = getYear(instant);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,494,"        int week = getWeekOfWeekyear(instant, year);",0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,495,        if (week == 1) {,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,517,        if (instant < firstWeekMillis1) {,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,521,        if (instant >= firstWeekMillis2) {,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.07494,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,163,        return getMaximumValue(instant);,0.07494,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,60,        return iChronology.getWeekyear(instant);,0.07494,0,-1,0
org/joda/time/chrono/BasicChronology,12,402,            i2 = i2 - unitMillis + 1;,0.07485,0,-1,0
org/joda/time/chrono/GregorianChronology,12,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.07485,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.07485,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,95,            instant += 1;,0.07468,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.07468,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,103,        return DateTimeConstants.MONDAY;,0.07468,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,112,        return DateTimeConstants.SUNDAY;,0.07468,0,-1,0
org/joda/time/chrono/BasicChronology,12,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.07459,0,-1,0
org/joda/time/chrono/BasicChronology,12,185,        return iMinDaysInFirstWeek;,0.07451,0,-1,0
org/joda/time/LocalDate,12,96,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0.07442,0,-1,0
org/joda/time/LocalDate,12,98,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0.07442,0,-1,0
org/joda/time/LocalDate,12,99,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0.07442,0,-1,0
org/joda/time/LocalDate,12,100,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0.07442,0,-1,0
org/joda/time/LocalDate,12,101,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0.07442,0,-1,0
org/joda/time/LocalDate,12,102,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0.07442,0,-1,0
org/joda/time/LocalDate,12,103,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0.07442,0,-1,0
org/joda/time/LocalDate,12,105,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0.07442,0,-1,0
org/joda/time/LocalDate,12,106,    },0.07442,0,-1,0
org/joda/time/DateTimeUtils,12,299,        if (zone == null) {,0.07433,0,-1,0
org/joda/time/DateTimeUtils,12,302,        return zone;,0.07433,0,-1,0
org/joda/time/chrono/BasicChronology,12,414,            if (isLeapYear(year)) {,0.07399,0,-1,0
org/joda/time/chrono/BasicChronology,12,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.07399,0,-1,0
org/joda/time/chrono/BasicChronology,12,420,            yearStart += oneYear;,0.07399,0,-1,0
org/joda/time/chrono/BasicChronology,12,422,            if (yearStart <= instant) {,0.07399,0,-1,0
org/joda/time/chrono/BasicChronology,12,424,                year++;,0.07399,0,-1,0
org/joda/time/field/BaseDateTimeField,12,792,        return getMaximumValue();,0.07382,0,-1,0
org/joda/time/base/AbstractPartial,12,54,        super();,0.07306,0,-1,0
org/joda/time/base/AbstractPartial,12,55,    },0.07306,0,-1,0
org/joda/time/Instant,12,118,        super();,0.07232,0,-1,0
org/joda/time/Instant,12,119,        iMillis = instant;,0.07232,0,-1,0
org/joda/time/Instant,12,120,    },0.07232,0,-1,0
org/joda/time/Instant,12,256,        return iMillis;,0.07223,0,-1,0
org/joda/time/chrono/BasicChronology,12,153,        if ((base = getBase()) != null) {,0.07183,0,-1,0
org/joda/time/chrono/BasicChronology,12,157,        FieldUtils.verifyValueBounds,0.07183,0,-1,0
org/joda/time/chrono/BasicChronology,12,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.07183,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,92,        if (instant >= 0) {,0.06737,0,-1,0
org/joda/time/chrono/GregorianChronology,12,213,                leapYears--;,0.06439,0,-1,0
org/joda/time/chrono/BasicChronology,12,534,        if (instant >= 0) {,0.06419,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,56,        return iChronology.getDayOfWeek(instant);,0.06419,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.06184,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,300,        int thisYear = iChronology.getYear(instant);,0.06184,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.06184,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.06184,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,304,        if (thisDom > maxDom) {,0.06184,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.06184,0,-1,0
org/joda/time/chrono/BasicChronology,12,458,"        int month = getMonthOfYear(millis, year);",0.06184,0,-1,0
org/joda/time/chrono/BasicChronology,12,459,"        return getDayOfMonth(millis, year, month);",0.06184,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.06172,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.06172,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,82,        FieldUtils.verifyValueBounds,0.0616,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,84,"        return iChronology.setYear(instant, year);",0.0616,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.0616,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,112,        return instant + (value - get(instant)) * iUnitMillis;,0.0616,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,175,        int thisYear = getYear(instant);,0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,177,        int millisOfDay = getMillisOfDay(instant);,0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,196,        instant += millisOfDay;,0.06142,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,198,        return instant;,0.06142,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.06136,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,80,        return instant + (value - get(instant)) * iUnitMillis;,0.06136,0,-1,0
org/joda/time/DateTime,12,527,        return this;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,391,        LimitDurationField(DurationField field) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,392,"            super(field, field.getType());",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,393,        },0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,99,"        super(base, null);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,101,        iLowerLimit = lowerLimit;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,102,        iUpperLimit = upperLimit;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,103,    },0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,67,        if (base == null) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,74,        if (lowerLimit != null && upperLimit != null) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,213,"        fields.eras = convertField(fields.eras, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,214,"        fields.centuries = convertField(fields.centuries, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,215,"        fields.years = convertField(fields.years, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,216,"        fields.months = convertField(fields.months, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,217,"        fields.weekyears = convertField(fields.weekyears, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,218,"        fields.weeks = convertField(fields.weeks, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,219,"        fields.days = convertField(fields.days, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,221,"        fields.halfdays = convertField(fields.halfdays, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,222,"        fields.hours = convertField(fields.hours, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,223,"        fields.minutes = convertField(fields.minutes, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,224,"        fields.seconds = convertField(fields.seconds, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,225,"        fields.millis = convertField(fields.millis, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,229,"        fields.year = convertField(fields.year, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,233,"        fields.era = convertField(fields.era, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,239,"        fields.weekyear = convertField(fields.weekyear, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,253,    },0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,256,        if (field == null || !field.isSupported()) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,257,            return field;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,259,        if (converted.containsKey(field)) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,260,            return (DurationField)converted.get(field);,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,262,        LimitDurationField limitField = new LimitDurationField(field);,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,263,"        converted.put(field, limitField);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,264,        return limitField;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,268,        if (field == null || !field.isSupported()) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,271,        if (converted.containsKey(field)) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,274,        LimitDateTimeField limitField =,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,279,"        converted.put(field, limitField);",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,280,        return limitField;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,453,                           DurationField leapDurationField) {,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,454,"            super(field, field.getType());",0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,455,            iDurationField = durationField;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,456,            iRangeDurationField = rangeDurationField;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,457,            iLeapDurationField = leapDurationField;,0.0613,0,-1,0
org/joda/time/chrono/LimitChronology,12,458,        },0.0613,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,51,        super(DateTimeFieldType.era());,0.0613,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,52,        iEraText = text;,0.0613,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,53,    },0.0613,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.0613,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,111,        return null;,0.0613,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,88,        return iField.isSupported();,0.06124,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,208,        return iField.getLeapDurationField();,0.06124,0,-1,0
org/joda/time/chrono/BasicChronology,12,485,        long yearStart = getYearMillis(year);,0.06119,0,-1,0
org/joda/time/chrono/BasicChronology,12,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.06119,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,80,        return iType;,0.06119,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,192,        return iField.getDurationField();,0.06119,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,224,        return iChronology.getMinYear();,0.06113,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,212,        return iField.getMinimumValue();,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,54,"        this(chronology, field, 0);",0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,55,    },0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,65,        super(field);,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,66,        iChronology = chronology;,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,67,        int min = super.getMinimumValue();,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,68,        if (min < skip) {,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,69,            iMinValue = min - 1;,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,75,        iSkip = skip;,0.06113,0,-1,0
org/joda/time/field/SkipDateTimeField,12,76,    },0.06113,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,52,"        this(field, null);",0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,53,    },0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,62,        super();,0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,63,        if (field == null) {,0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,66,        iField = field;,0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,67,        iType = (type == null ? field.getType() : type);,0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,68,    },0.06107,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,196,        return iField.getRangeDurationField();,0.06107,0,-1,0
org/joda/time/DateTime,12,516,"        super(year, monthOfYear, dayOfMonth,",0.06101,0,-1,0
org/joda/time/DateTime,12,518,    },0.06101,0,-1,0
org/joda/time/chrono/BasicChronology,12,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.06072,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,55,        return 1;,0.06066,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,131,        return iRange - 1;,0.06049,0,-1,0
org/joda/time/chrono/BasicChronology,12,551,        if (instant >= 0) {,0.06043,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,115,        return iChronology.getMinYear();,0.05931,0,-1,0
org/joda/time/chrono/AssembledChronology,12,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.05899,0,-1,0
org/joda/time/field/FieldUtils,12,217,        if ((value < lowerBound) || (value > upperBound)) {,0.05845,0,-1,0
org/joda/time/field/FieldUtils,12,222,    },0.05845,0,-1,0
org/joda/time/chrono/BasicChronology,12,435,"        return getMonthOfYear(millis, getYear(millis));",0.05755,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,72,        return iChronology.getMonthOfYear(instant);,0.0575,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,165,        return getWrappedField().getLeapDurationField();,0.05735,0,-1,0
org/joda/time/DateTimeFieldType,12,524,                    return chronology.secondOfMinute();,0.05714,0,-1,0
org/joda/time/chrono/ISOChronology,12,77,        return INSTANCE_UTC;,0.05634,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,79,        if (instant >= 0) {,0.05624,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.05508,0,-1,0
org/joda/time/chrono/BasicChronology,12,448,        int year = getYear(millis);,0.05424,0,-1,0
org/joda/time/chrono/BasicChronology,12,449,"        int month = getMonthOfYear(millis, year);",0.05424,0,-1,0
org/joda/time/chrono/BasicChronology,12,450,"        return getDayOfMonth(millis, year, month);",0.05424,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,54,        return iChronology.getYear(instant);,0.05424,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,47,        return iChronology.getDayOfMonth(instant);,0.05415,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.05387,0,-1,0
org/joda/time/chrono/BasicChronology,12,468,        long dateMillis = getYearMillis(year);,0.05378,0,-1,0
org/joda/time/chrono/BasicChronology,12,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.05378,0,-1,0
org/joda/time/chrono/BasicChronology,12,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.05378,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,120,        if (isLeapYear(year)) {,0.05316,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.05289,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,93,        return,0.05289,0,-1,0
org/joda/time/chrono/GregorianChronology,12,233,        return MILLIS_PER_YEAR / 2;,0.05267,0,-1,0
org/joda/time/chrono/GregorianChronology,12,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.05267,0,-1,0
org/joda/time/chrono/GregorianChronology,12,221,        return MIN_YEAR;,0.05263,0,-1,0
org/joda/time/base/BaseDateTime,12,256,"        iMillis = checkInstant(instant, iChronology);",0.05259,0,-1,0
org/joda/time/base/BaseDateTime,12,257,    },0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,401,        if (i2 < 0) {,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,404,        int year = (int) (i2 / unitMillis);,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,406,        long yearStart = getYearMillis(year);,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,407,        long diff = instant - yearStart;,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,409,        if (diff < 0) {,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.05259,0,-1,0
org/joda/time/chrono/BasicChronology,12,428,        return year;,0.05259,0,-1,0
org/joda/time/base/BaseDateTime,12,252,        super();,0.05242,0,-1,0
org/joda/time/base/BaseDateTime,12,253,        iChronology = checkChronology(chronology);,0.05242,0,-1,0
org/joda/time/base/BaseDateTime,12,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.05242,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,139,        if (isLeapYear(year)) {,0.05229,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.05229,0,-1,0
org/joda/time/chrono/GregorianChronology,12,202,        int leapYears = year / 100;,0.05153,0,-1,0
org/joda/time/chrono/GregorianChronology,12,203,        if (year < 0) {,0.05153,0,-1,0
org/joda/time/chrono/GregorianChronology,12,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.05153,0,-1,0
org/joda/time/chrono/GregorianChronology,12,212,            if (isLeapYear(year)) {,0.05153,0,-1,0
org/joda/time/chrono/GregorianChronology,12,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.05153,0,-1,0
org/joda/time/chrono/BasicChronology,12,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.05149,0,-1,0
org/joda/time/chrono/BasicChronology,12,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.05149,0,-1,0
org/joda/time/chrono/BasicChronology,12,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.05149,0,-1,0
org/joda/time/chrono/BasicChronology,12,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.05149,0,-1,0
org/joda/time/chrono/BasicChronology,12,682,        return getMaxMonth();,0.05149,0,-1,0
org/joda/time/field/FieldUtils,12,235,        if ((value < lowerBound) || (value > upperBound)) {,0.05149,0,-1,0
org/joda/time/field/FieldUtils,12,240,    },0.05149,0,-1,0
org/joda/time/DateTimeUtils,12,98,        checkPermission();,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,100,    },0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,112,        checkPermission();,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,114,    },0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,159,        SecurityManager sm = System.getSecurityManager();,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,160,        if (sm != null) {,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,163,    },0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,530,        FixedMillisProvider(long fixedMillis) {,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,531,            iMillis = fixedMillis;,0.05116,0,-1,0
org/joda/time/DateTimeUtils,12,532,        },0.05116,0,-1,0
org/joda/time/chrono/GregorianChronology,12,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.05112,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.05079,0,-1,0
org/joda/time/base/BaseDateTime,12,284,        return instant;,0.05039,0,-1,0
org/joda/time/base/AbstractDateTime,12,51,        super();,0.05004,0,-1,0
org/joda/time/base/AbstractDateTime,12,52,    },0.05004,0,-1,0
org/joda/time/base/BaseDateTime,12,270,        return DateTimeUtils.getChronology(chronology);,0.05004,0,-1,0
org/joda/time/base/AbstractInstant,12,61,        super();,0.04977,0,-1,0
org/joda/time/base/AbstractInstant,12,62,    },0.04977,0,-1,0
org/joda/time/chrono/BasicChronology,12,385,        long millis = getYearMillis(year);,0.04919,0,-1,0
org/joda/time/chrono/BasicChronology,12,386,"        millis += getTotalMillisByYearMonth(year, month);",0.04919,0,-1,0
org/joda/time/chrono/BasicChronology,12,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.04919,0,-1,0
org/joda/time/DateTimeZone,12,174,        SecurityManager sm = System.getSecurityManager();,0.04908,0,-1,0
org/joda/time/DateTimeZone,12,175,        if (sm != null) {,0.04908,0,-1,0
org/joda/time/DateTimeZone,12,178,        if (zone == null) {,0.04908,0,-1,0
org/joda/time/DateTimeZone,12,181,        synchronized(DateTimeZone.class) {,0.04908,0,-1,0
org/joda/time/DateTimeZone,12,182,            cDefault = zone;,0.04908,0,-1,0
org/joda/time/DateTimeZone,12,183,        },0.04908,0,-1,0
org/joda/time/DateTimeZone,12,184,    },0.04908,0,-1,0
org/joda/time/chrono/BasicChronology,12,360,        return getYearInfo(year).iFirstDayMillis;,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,739,        if (info == null || info.iYear != year) {,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,743,        return info;,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,770,"        YearInfo(int year, long firstDayMillis) {",0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,771,            iYear = year;,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,772,            iFirstDayMillis = firstDayMillis;,0.0478,0,-1,0
org/joda/time/chrono/BasicChronology,12,773,        },0.0478,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,123,        return iZone.hashCode();,0.04744,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.04709,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,131,        return null;,0.04709,0,-1,0
org/joda/time/DateTimeZone,12,147,                        },0.04675,0,-1,0
org/joda/time/DateTimeZone,12,133,        DateTimeZone zone = cDefault;,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,134,        if (zone == null) {,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,135,            synchronized(DateTimeZone.class) {,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,136,                zone = cDefault;,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,137,                if (zone == null) {,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,138,                    DateTimeZone temp = null;,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,141,"                            String id = System.getProperty(""user.timezone"");",0.04672,0,-1,0
org/joda/time/DateTimeZone,12,142,                            if (id != null) {  // null check avoids stack overflow,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,143,                                temp = forID(id);,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,148,                        if (temp == null) {,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,153,                    },0.04672,0,-1,0
org/joda/time/DateTimeZone,12,154,                    if (temp == null) {,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,157,                    cDefault = zone = temp;,0.04672,0,-1,0
org/joda/time/DateTimeZone,12,159,            },0.04672,0,-1,0
org/joda/time/DateTimeZone,12,161,        return zone;,0.04672,0,-1,0
org/joda/time/chrono/ISOChronology,12,133,        return INSTANCE_UTC;,0.04624,0,-1,0
org/joda/time/DateTimeZone,12,1250,        return 57 + getID().hashCode();,0.04601,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,218,        return 0;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,82,"        super(base, zone);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,83,    },0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,56,        if (base == null) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,59,        base = base.withUTC();,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,60,        if (base == null) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,63,        if (zone == null) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,66,"        return new ZonedChronology(base, zone);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,86,        return (DateTimeZone)getParam();,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,157,"        fields.eras = convertField(fields.eras, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,158,"        fields.centuries = convertField(fields.centuries, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,159,"        fields.years = convertField(fields.years, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,160,"        fields.months = convertField(fields.months, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,162,"        fields.weeks = convertField(fields.weeks, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,163,"        fields.days = convertField(fields.days, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,166,"        fields.hours = convertField(fields.hours, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,167,"        fields.minutes = convertField(fields.minutes, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,168,"        fields.seconds = convertField(fields.seconds, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,169,"        fields.millis = convertField(fields.millis, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,173,"        fields.year = convertField(fields.year, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,177,"        fields.era = convertField(fields.era, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,197,    },0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,200,        if (field == null || !field.isSupported()) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,201,            return field;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,203,        if (converted.containsKey(field)) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,204,            return (DurationField)converted.get(field);,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,207,"        converted.put(field, zonedField);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,208,        return zonedField;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,212,        if (field == null || !field.isSupported()) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,215,        if (converted.containsKey(field)) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,218,        ZonedDateTimeField zonedField =,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,223,"        converted.put(field, zonedField);",0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,224,        return zonedField;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,284,            super(field.getType());,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,285,            if (!field.isSupported()) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,288,            iField = field;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,289,            iTimeField = useTimeArithmetic(field);,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,290,            iZone = zone;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,291,        },0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,298,            return iField.getUnitMillis();,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,389,            super(field.getType());,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,390,            if (!field.isSupported()) {,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,393,            iField = field;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,394,            iZone = zone;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,395,            iDurationField = durationField;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,396,            iTimeField = useTimeArithmetic(durationField);,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,397,            iRangeDurationField = rangeDurationField;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,398,            iLeapDurationField = leapDurationField;,0.04601,0,-1,0
org/joda/time/chrono/ZonedChronology,12,399,        },0.04601,0,-1,0
org/joda/time/field/ScaledDurationField,12,109,        return getWrappedField().getUnitMillis() * iScalar;,0.04601,0,-1,0
org/joda/time/chrono/AssembledChronology,12,315,        return iParam;,0.04598,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,160,            return iUnitMillis;,0.04598,0,-1,0
org/joda/time/DateTimeFieldType,12,520,                    return chronology.minuteOfHour();,0.04533,0,-1,0
org/joda/time/DateTimeUtils,12,285,        return chrono;,0.0452,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,334,        return iChronology.days();,0.04408,0,-1,0
org/joda/time/field/BaseDateTimeField,12,726,        return null;,0.04408,0,-1,0
org/joda/time/field/BaseDurationField,12,55,        return iType;,0.04408,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,111,        return iChronology.days();,0.04408,0,-1,0
org/joda/time/field/PreciseDurationField,12,142,        long millis = iUnitMillis;,0.04408,0,-1,0
org/joda/time/field/PreciseDurationField,12,143,        int hash = (int) (millis ^ (millis >>> 32));,0.04408,0,-1,0
org/joda/time/field/PreciseDurationField,12,144,        hash += getType().hashCode();,0.04408,0,-1,0
org/joda/time/field/PreciseDurationField,12,145,        return hash;,0.04408,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,101,        return getWrappedField().getLeapDurationField();,0.04408,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,90,        return iField.getRangeDurationField();,0.04408,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,139,        return iRangeField;,0.04408,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,94,        return iChronology.weeks();,0.04408,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,56,        return iChronology.years();,0.04408,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,208,        return null;,0.04408,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,220,        return iChronology.weeks();,0.04408,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,58,        return iChronology.weekyears();,0.04408,0,-1,0
org/joda/time/field/DecoratedDurationField,12,69,        return iField;,0.04408,0,-1,0
org/joda/time/field/ScaledDurationField,12,147,        long scalar = iScalar;,0.04408,0,-1,0
org/joda/time/field/ScaledDurationField,12,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.04408,0,-1,0
org/joda/time/field/ScaledDurationField,12,149,        hash += getType().hashCode();,0.04408,0,-1,0
org/joda/time/field/ScaledDurationField,12,150,        hash += getWrappedField().hashCode();,0.04408,0,-1,0
org/joda/time/field/ScaledDurationField,12,151,        return hash;,0.04408,0,-1,0
org/joda/time/field/MillisDurationField,12,49,        return DurationFieldType.millis();,0.04408,0,-1,0
org/joda/time/field/MillisDurationField,12,155,        return (int) getUnitMillis();,0.04408,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,315,        return iChronology.years();,0.04405,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,95,        return null;,0.04405,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,122,        return iRangeField;,0.04405,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,51,        return iChronology.months();,0.04405,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,141,        return iUnitField;,0.04381,0,-1,0
org/joda/time/chrono/ISOChronology,12,122,"        super(base, null);",0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,123,    },0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,68,    },0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,171,            fields.centuryOfEra = new DividedDateTimeField(,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.04375,0,-1,0
org/joda/time/chrono/ISOChronology,12,180,    },0.04375,0,-1,0
org/joda/time/chrono/GregorianChronology,12,81,        return INSTANCE_UTC;,0.04375,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.04375,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,47,    },0.04375,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.04375,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,87,        return 0;,0.04375,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,91,        return getWrappedField().getMaximumValue();,0.04375,0,-1,0
org/joda/time/chrono/GregorianChronology,12,148,"        super(base, param, minDaysInFirstWeek);",0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,149,    },0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,72,    },0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,100,"        return getInstance(zone, 4);",0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,111,        if (zone == null) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,115,        synchronized (cCache) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,116,            GregorianChronology[] chronos = cCache.get(zone);,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,117,            if (chronos == null) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,118,                chronos = new GregorianChronology[7];,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,119,"                cCache.put(zone, chronos);",0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,126,            },0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,127,            if (chrono == null) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,128,                if (zone == DateTimeZone.UTC) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,137,        },0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,138,        return chrono;,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,191,        if (getBase() == null) {,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,192,            super.assemble(fields);,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,194,    },0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,225,        return MAX_YEAR;,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,229,        return MILLIS_PER_YEAR;,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,237,        return MILLIS_PER_MONTH;,0.04369,0,-1,0
org/joda/time/chrono/GregorianChronology,12,45,public final class GregorianChronology extends BasicGJChronology {,0.04369,0,-1,0
org/joda/time/chrono/BasicChronology,12,146,        return DateTimeZone.UTC;,0.04366,0,-1,0
org/joda/time/chrono/BasicChronology,12,691,        return 12;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,75,"        super(base, param, minDaysInFirstWeek);",0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,76,    },0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,56,        long minSum = 0;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,57,        long maxSum = 0;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,58,        for (int i = 0; i < 11; i++) {,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,61,            minSum += millis;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,66,            maxSum += millis;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.04366,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,69,    },0.04366,0,-1,0
org/joda/time/chrono/BasicChronology,12,143,        if ((base = getBase()) != null) {,0.04363,0,-1,0
org/joda/time/DateTimeUtils,12,282,        if (chrono == null) {,0.04348,0,-1,0
org/joda/time/DateTimeFieldType,12,516,                    return chronology.hourOfDay();,0.04348,0,-1,0
org/joda/time/DateTimeFieldType,12,164,        return MILLIS_OF_SECOND_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,173,        return MILLIS_OF_DAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,182,        return SECOND_OF_MINUTE_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,191,        return SECOND_OF_DAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,200,        return MINUTE_OF_HOUR_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,209,        return MINUTE_OF_DAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,218,        return HOUR_OF_DAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,236,        return HOUR_OF_HALFDAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,254,        return HALFDAY_OF_DAY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,264,        return DAY_OF_WEEK_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,273,        return DAY_OF_MONTH_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,282,        return DAY_OF_YEAR_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,300,        return WEEKYEAR_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,318,        return MONTH_OF_YEAR_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,336,        return YEAR_OF_ERA_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,345,        return YEAR_OF_CENTURY_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,354,        return CENTURY_OF_ERA_TYPE;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,363,        return ERA_TYPE;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,99,"    protected AssembledChronology(Chronology base, Object param) {",0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,100,        iBase = base;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,101,        iParam = param;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,102,        setFields();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,103,    },0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,156,        return iMillis;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,160,        return iMillisOfSecond;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,164,        return iMillisOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,168,        return iSeconds;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,172,        return iSecondOfMinute;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,176,        return iSecondOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,180,        return iMinutes;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,184,        return iMinuteOfHour;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,188,        return iMinuteOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,192,        return iHours;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,196,        return iHourOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,200,        return iClockhourOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,204,        return iHalfdays;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,208,        return iHourOfHalfday;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,212,        return iClockhourOfHalfday;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,216,        return iHalfdayOfDay;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,220,        return iDays;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,224,        return iDayOfWeek;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,228,        return iDayOfMonth;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,232,        return iDayOfYear;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,236,        return iWeeks;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,240,        return iWeekOfWeekyear;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,244,        return iWeekyears;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,248,        return iWeekyear;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,252,        return iWeekyearOfCentury;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,256,        return iMonths;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,260,        return iMonthOfYear;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,264,        return iYears;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,268,        return iYear;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,272,        return iYearOfEra;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,276,        return iYearOfCentury;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,280,        return iCenturies;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,284,        return iCenturyOfEra;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,288,        return iEras;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,292,        return iEra;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,308,        return iBase;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,319,        Fields fields = new Fields();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,320,        if (iBase != null) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,321,            fields.copyFieldsFrom(iBase);,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,323,        assemble(fields);,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,369,        if (iBase == null) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,370,            flags = 0;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,372,            flags = ,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,385,        iBaseFlags = flags;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,386,    },0.04345,0,-1,0
org/joda/time/chrono/BaseChronology,12,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.04345,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,37,"        super(chronology, 2);",0.04345,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,38,    },0.04345,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.04345,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,52,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,53,        iMax = iChronology.getMaxMonth();,0.04345,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,54,        iLeapMonth = leapMonth;,0.04345,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,55,    },0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,55,        super(type);,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,56,        iUnitMillis = unitMillis;,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,58,    },0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,137,        return iDurationField;,0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,50,        super();,0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,51,        if (type == null) {,0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,54,        iType = type;,0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,55,    },0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,58,        return iType;,0.04345,0,-1,0
org/joda/time/field/BaseDateTimeField,12,69,        return true;,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,151,        LinkedDurationField(DurationFieldType type) {,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,152,            super(type);,0.04345,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,153,        },0.04345,0,-1,0
org/joda/time/field/BaseDurationField,12,47,        super();,0.04345,0,-1,0
org/joda/time/field/BaseDurationField,12,48,        if (type == null) {,0.04345,0,-1,0
org/joda/time/field/BaseDurationField,12,51,        iType = type;,0.04345,0,-1,0
org/joda/time/field/BaseDurationField,12,52,    },0.04345,0,-1,0
org/joda/time/field/BaseDurationField,12,66,        return true;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,131,"        super(base, param);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,139,    },0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,76,        cMillisField = MillisDurationField.INSTANCE;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,77,        cSecondsField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,79,        cMinutesField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,81,        cHoursField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,83,        cHalfdaysField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,85,        cDaysField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,87,        cWeeksField = new PreciseDurationField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,90,        cMillisOfSecondField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,93,        cMillisOfDayField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,99,        cSecondOfDayField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,102,        cMinuteOfHourField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,105,        cMinuteOfDayField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,108,        cHourOfDayField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,120,        cHalfdayOfDayField = new HalfdayField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,121,    },0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,241,        fields.millis = cMillisField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,242,        fields.seconds = cSecondsField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,243,        fields.minutes = cMinutesField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,244,        fields.hours = cHoursField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,245,        fields.halfdays = cHalfdaysField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,246,        fields.days = cDaysField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,247,        fields.weeks = cWeeksField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,249,        fields.millisOfSecond = cMillisOfSecondField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,250,        fields.millisOfDay = cMillisOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,252,        fields.secondOfDay = cSecondOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,253,        fields.minuteOfHour = cMinuteOfHourField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,254,        fields.minuteOfDay = cMinuteOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,255,        fields.hourOfDay = cHourOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,264,        fields.year = new BasicYearDateTimeField(this);,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,268,        DateTimeField field = new OffsetDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,270,        fields.centuryOfEra = new DividedDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,273,        field = new RemainderDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,278,        fields.era = new GJEraDateTimeField(this);,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,286,        field = new RemainderDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,294,        fields.years = fields.year.getDurationField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,296,        fields.months = fields.monthOfYear.getDurationField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,297,        fields.weekyears = fields.weekyear.getDurationField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,298,    },0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,50,abstract class BasicChronology extends AssembledChronology {,0.04345,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.04345,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,46,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,47,    },0.04345,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,119,        return iChronology.getMaxYear();,0.04345,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,46,        super(DateTimeFieldType.era());,0.04345,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,47,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,48,    },0.04345,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,92,        return false;,0.04345,0,-1,0
org/joda/time/field/PreciseDurationField,12,43,        super(type);,0.04345,0,-1,0
org/joda/time/field/PreciseDurationField,12,44,        iUnitMillis = unitMillis;,0.04345,0,-1,0
org/joda/time/field/PreciseDurationField,12,45,    },0.04345,0,-1,0
org/joda/time/field/PreciseDurationField,12,54,        return true;,0.04345,0,-1,0
org/joda/time/field/PreciseDurationField,12,63,        return iUnitMillis;,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,57,"        super(type, unit);",0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,59,        if (!range.isPrecise()) {,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,63,        long rangeMillis = range.getUnitMillis();,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,65,        if (iRange < 2) {,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,69,        iRangeField = range;,0.04345,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,70,    },0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,48,        super(type);,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,50,        if (!unit.isPrecise()) {,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,54,        iUnitMillis = unit.getUnitMillis();,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,55,        if (iUnitMillis < 1) {,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,59,        iUnitField = unit;,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,60,    },0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,150,        return 0;,0.04345,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,154,        return iUnitMillis;,0.04345,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,45,"        super(field, type);",0.04345,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,46,        if (field.getMinimumValue() != 0) {,0.04345,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,49,    },0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,54,        super(type);,0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,55,        if (field == null) {,0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,58,        if (!field.isSupported()) {,0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,61,        iField = field;,0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,62,    },0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,70,        return iField;,0.04345,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,86,        return iField.getDurationField();,0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.04345,0,-1,0
org/joda/time/chrono/BasicChronology,12,751,        },0.04345,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.04345,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,41,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,42,    },0.04345,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,93,        return 1;,0.04345,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,97,        return getWrappedField().getMaximumValue();,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,47,    },0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,59,    },0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,73,"        super(field, type);",0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,75,        if (offset == 0) {,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,79,        iOffset = offset;,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,82,            iMin = field.getMinimumValue() + offset;,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,87,            iMax = field.getMaximumValue() + offset;,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,91,    },0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,174,        return iMin;,0.04345,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,183,        return iMax;,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,56,"        super(field, type);",0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,58,        if (divisor < 2) {,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,62,        DurationField unitField = field.getDurationField();,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,63,        if (unitField == null) {,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,66,            iDurationField = new ScaledDurationField(,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,70,        iDivisor = divisor;,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,72,        int i = field.getMinimumValue();,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,75,        int j = field.getMaximumValue();,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,78,        iMin = min;,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,79,        iMax = max;,0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,80,    },0.04345,0,-1,0
org/joda/time/field/DividedDateTimeField,12,182,        return iDurationField;,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,52,"        super(field, type);",0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,54,        if (divisor < 2) {,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,58,        DurationField rangeField = field.getDurationField();,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,59,        if (rangeField == null) {,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,62,            iRangeField = new ScaledDurationField(,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,66,        iDivisor = divisor;,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,67,    },0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,76,"        this(dividedField, dividedField.getType());",0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,77,    },0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,87,"        super(dividedField.getWrappedField(), type);",0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,88,        iDivisor = dividedField.iDivisor;,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,89,        iRangeField = dividedField.iDurationField;,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,90,    },0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,148,        return 0;,0.04345,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,158,        return iDivisor - 1;,0.04345,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.04345,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,46,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,47,    },0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,42,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,43,    },0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,42,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,43,    },0.04345,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.04345,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,45,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,46,    },0.04345,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.04345,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,43,        iChronology = chronology;,0.04345,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,44,    },0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,436,        Fields() {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,437,        },0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,445,                if (isSupported(f = chrono.millis())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,446,                    millis = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,448,                if (isSupported(f = chrono.seconds())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,449,                    seconds = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,451,                if (isSupported(f = chrono.minutes())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,452,                    minutes = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,454,                if (isSupported(f = chrono.hours())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,455,                    hours = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,457,                if (isSupported(f = chrono.halfdays())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,458,                    halfdays = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,460,                if (isSupported(f = chrono.days())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,461,                    days = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,463,                if (isSupported(f = chrono.weeks())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,464,                    weeks = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,466,                if (isSupported(f = chrono.weekyears())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,467,                    weekyears = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,469,                if (isSupported(f = chrono.months())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,470,                    months = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,472,                if (isSupported(f = chrono.years())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,473,                    years = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,475,                if (isSupported(f = chrono.centuries())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,476,                    centuries = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,478,                if (isSupported(f = chrono.eras())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,486,                    millisOfSecond = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,488,                if (isSupported(f = chrono.millisOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,489,                    millisOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,492,                    secondOfMinute = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,494,                if (isSupported(f = chrono.secondOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,495,                    secondOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,498,                    minuteOfHour = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,501,                    minuteOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,503,                if (isSupported(f = chrono.hourOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,504,                    hourOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,507,                    clockhourOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,510,                    hourOfHalfday = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,513,                    clockhourOfHalfday = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,516,                    halfdayOfDay = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,519,                    dayOfWeek = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,522,                    dayOfMonth = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,524,                if (isSupported(f = chrono.dayOfYear())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,525,                    dayOfYear = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,528,                    weekOfWeekyear = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,530,                if (isSupported(f = chrono.weekyear())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,531,                    weekyear = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,534,                    weekyearOfCentury = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,536,                if (isSupported(f = chrono.monthOfYear())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,537,                    monthOfYear = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,539,                if (isSupported(f = chrono.year())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,540,                    year = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,542,                if (isSupported(f = chrono.yearOfEra())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,543,                    yearOfEra = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,546,                    yearOfCentury = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,549,                    centuryOfEra = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,551,                if (isSupported(f = chrono.era())) {,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,552,                    era = f;,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,555,        },0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,558,            return field == null ? false : field.isSupported();,0.04345,0,-1,0
org/joda/time/chrono/AssembledChronology,12,562,            return field == null ? false : field.isSupported();,0.04345,0,-1,0
org/joda/time/field/DecoratedDurationField,12,52,        super(type);,0.04345,0,-1,0
org/joda/time/field/DecoratedDurationField,12,53,        if (field == null) {,0.04345,0,-1,0
org/joda/time/field/DecoratedDurationField,12,56,        if (!field.isSupported()) {,0.04345,0,-1,0
org/joda/time/field/DecoratedDurationField,12,59,        iField = field;,0.04345,0,-1,0
org/joda/time/field/DecoratedDurationField,12,60,    },0.04345,0,-1,0
org/joda/time/field/ScaledDurationField,12,47,"        super(field, type);",0.04345,0,-1,0
org/joda/time/field/ScaledDurationField,12,48,        if (scalar == 0 || scalar == 1) {,0.04345,0,-1,0
org/joda/time/field/ScaledDurationField,12,51,        iScalar = scalar;,0.04345,0,-1,0
org/joda/time/field/ScaledDurationField,12,52,    },0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,44,        super();,0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,45,    },0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,62,        return true;,0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,71,        return true;,0.04345,0,-1,0
org/joda/time/field/MillisDurationField,12,80,        return 1;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,452,            return iUnitType;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,457,            return iRangeType;,0.04345,0,-1,0
org/joda/time/DateTimeFieldType,12,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.04342,0,-1,0
org/joda/time/DateTimeFieldType,12,327,        return YEAR_TYPE;,0.04342,0,-1,0
org/joda/time/DateTimeField,12,33,public abstract class DateTimeField {,0.04342,0,-1,0
org/joda/time/DurationField,12,30,public abstract class DurationField implements Comparable<DurationField> {,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,70,    private UnsupportedDurationField(DurationFieldType type) {,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,71,        iType = type;,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,72,    },0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,49,        if (cCache == null) {,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,51,            field = null;,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,53,            field = cCache.get(type);,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,55,        if (field == null) {,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,56,            field = new UnsupportedDurationField(type);,0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,57,"            cCache.put(type, field);",0.04342,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,59,        return field;,0.04342,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.04342,0,-1,0
org/joda/time/DurationFieldType,12,278,            return (1 << iOrdinal);,0.04342,0,-1,0
org/joda/time/DateTimeFieldType,12,153,        super();,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,154,        iName = name;,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,155,    },0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.04339,0,-1,0
org/joda/time/DurationFieldType,12,141,        return HALFDAYS_TYPE;,0.04339,0,-1,0
org/joda/time/DurationFieldType,12,169,        return WEEKYEARS_TYPE;,0.04339,0,-1,0
org/joda/time/DurationFieldType,12,196,        return CENTURIES_TYPE;,0.04339,0,-1,0
org/joda/time/DurationFieldType,12,205,        return ERAS_TYPE;,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,444,            super(name);,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,445,            iOrdinal = ordinal;,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,446,            iUnitType = unitType;,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,447,            iRangeType = rangeType;,0.04339,0,-1,0
org/joda/time/DateTimeFieldType,12,448,        },0.04339,0,-1,0
org/joda/time/DurationFieldType,12,105,        return MILLIS_TYPE;,0.0433,0,-1,0
org/joda/time/Chronology,12,63,public abstract class Chronology {,0.04307,0,-1,0
org/joda/time/chrono/BaseChronology,12,54,        super();,0.04307,0,-1,0
org/joda/time/chrono/BaseChronology,12,55,    },0.04307,0,-1,0
org/joda/time/DateTimeUtils,12,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,48,"        map.put(""UT"", DateTimeZone.UTC);",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,49,"        map.put(""UTC"", DateTimeZone.UTC);",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,50,"        map.put(""GMT"", DateTimeZone.UTC);",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,51,"        put(map, ""EST"", ""America/New_York"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,52,"        put(map, ""EDT"", ""America/New_York"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,53,"        put(map, ""CST"", ""America/Chicago"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,54,"        put(map, ""CDT"", ""America/Chicago"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,55,"        put(map, ""MST"", ""America/Denver"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,56,"        put(map, ""MDT"", ""America/Denver"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,59,        cZoneNames = Collections.unmodifiableMap(map);,0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,60,    },0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,63,"            map.put(name, DateTimeZone.forID(id));",0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,66,        },0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,67,    },0.04298,0,-1,0
org/joda/time/DateTimeUtils,12,509,    static class SystemMillisProvider implements MillisProvider {,0.04298,0,-1,0
org/joda/time/DurationFieldType,12,178,        return MONTHS_TYPE;,0.04287,0,-1,0
org/joda/time/DurationFieldType,12,187,        return YEARS_TYPE;,0.04287,0,-1,0
org/joda/time/DurationFieldType,12,160,        return WEEKS_TYPE;,0.04261,0,-1,0
org/joda/time/DurationFieldType,12,114,        return SECONDS_TYPE;,0.04258,0,-1,0
org/joda/time/DurationFieldType,12,123,        return MINUTES_TYPE;,0.04258,0,-1,0
org/joda/time/DurationFieldType,12,132,        return HOURS_TYPE;,0.04258,0,-1,0
org/joda/time/DurationFieldType,12,151,        return DAYS_TYPE;,0.04255,0,-1,0
org/joda/time/DurationFieldType,12,94,        super();,0.0396,0,-1,0
org/joda/time/DurationFieldType,12,95,        iName = name;,0.0396,0,-1,0
org/joda/time/DurationFieldType,12,96,    },0.0396,0,-1,0
org/joda/time/DurationFieldType,12,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.0396,0,-1,0
org/joda/time/DurationFieldType,12,259,            super(name);,0.0396,0,-1,0
org/joda/time/DurationFieldType,12,260,            iOrdinal = ordinal;,0.0396,0,-1,0
org/joda/time/DurationFieldType,12,261,        },0.0396,0,-1,0
org/joda/time/DateTimeZone,12,689,    protected DateTimeZone(String id) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,690,        if (id == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,693,        iID = id;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,694,    },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,115,        setProvider0(null);,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,116,        setNameProvider0(null);,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,117,    },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,204,        if (id == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,207,"        if (id.equals(""UTC"")) {",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,210,        DateTimeZone zone = cProvider.getZone(id);,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,211,        if (zone != null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,212,            return zone;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,415,        if (provider == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,416,            provider = getDefaultProvider();,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,418,        Set<String> ids = provider.getAvailableIDs();,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,419,        if (ids == null || ids.size() == 0) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,423,"        if (!ids.contains(""UTC"")) {",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,429,        cProvider = provider;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,430,        cAvailableIDs = ids;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,431,    },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,443,        Provider provider = null;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,446,            String providerClass =,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,448,            if (providerClass != null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,458,        },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,460,        if (provider == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,466,            },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,469,        if (provider == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,473,        return provider;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,514,        if (nameProvider == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,515,            nameProvider = getDefaultNameProvider();,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,517,        cNameProvider = nameProvider;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,518,    },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,529,        NameProvider nameProvider = null;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.03842,0,-1,0
org/joda/time/DateTimeZone,12,532,            if (providerClass != null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,542,        },0.03842,0,-1,0
org/joda/time/DateTimeZone,12,544,        if (nameProvider == null) {,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,545,            nameProvider = new DefaultNameProvider();,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,548,        return nameProvider;,0.03842,0,-1,0
org/joda/time/DateTimeZone,12,706,        return iID;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,504,        {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,509,            iMode = mode;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,510,            iMonthOfYear = monthOfYear;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,511,            iDayOfMonth = dayOfMonth;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,512,            iDayOfWeek = dayOfWeek;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,513,            iAdvance = advanceDayOfWeek;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,514,            iMillisOfDay = millisOfDay;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,515,        },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,482,"            return new OfYear((char)in.readUnsignedByte(),",0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1176,            super(id);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1177,            iStandardOffset = standardOffset;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1178,            iStartRecurrence = startRecurrence;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1179,            iEndRecurrence = endRecurrence;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1180,        },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,38,        super(id);,0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,39,        iNameKey = nameKey;,0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,40,        iWallOffset = wallOffset;,0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,41,        iStandardOffset = standardOffset;,0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,42,    },0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,88,        if (this == obj) {,0.03842,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,89,            return true;,0.03842,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,39,    public DefaultNameProvider() {,0.03842,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.03842,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,40,    },0.03842,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,99,        return new HashMap(7);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,82,"        this(resourcePath, null, false);",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,83,    },0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,106,    {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,107,        if (resourcePath == null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,110,"        if (!resourcePath.endsWith(""/"")) {",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,111,            resourcePath += '/';,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,114,        iFileDir = null;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,115,        iResourcePath = resourcePath;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,117,        if (loader == null && !favorSystemLoader) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,118,            loader = getClass().getClassLoader();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,121,        iLoader = loader;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,124,    },0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,136,        if (id == null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,140,        Object obj = iZoneInfoMap.get(id);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,141,        if (obj == null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,145,        if (id.equals(obj)) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,147,            return loadZoneData(id);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,150,        if (obj instanceof SoftReference<?>) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,153,            DateTimeZone tz = ref.get();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,154,            if (tz != null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,155,                return tz;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,196,        if (iFileDir != null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,199,            String path = iResourcePath.concat(name);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,200,            if (iLoader != null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,201,                in = iLoader.getResourceAsStream(path);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,205,            if (in == null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,214,        return in;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,224,        InputStream in = null;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,226,            in = openResource(id);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,229,            return tz;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,236,                if (in != null) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,237,                    in.close();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,240,            },0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,253,        DataInputStream din = new DataInputStream(in);,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,255,"            readZoneInfoMap(din, map);",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,258,                din.close();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,260,            },0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,263,        return map;,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,274,        int size = din.readUnsignedShort();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,275,        String[] pool = new String[size];,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,276,        for (int i=0; i<size; i++) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,277,            pool[i] = din.readUTF().intern();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,281,        size = din.readUnsignedShort();,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,282,        for (int i=0; i<size; i++) {,0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,287,            },0.03842,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,289,    },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,95,        if (in instanceof DataInput) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,110,        switch (in.readUnsignedByte()) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,183,        int v = in.readUnsignedByte();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,184,        switch (v >> 6) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,187,            v = (v << (32 - 6)) >> (32 - 6);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,188,            return v * (30 * 60000L);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,192,            v = (v << (32 - 6)) >> (32 - 30);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,193,            v |= (in.readUnsignedByte()) << 16;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,194,            v |= (in.readUnsignedByte()) << 8;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,195,            v |= (in.readUnsignedByte());,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,196,            return v * 60000L;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,201,            w |= (in.readUnsignedByte()) << 24;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,202,            w |= (in.readUnsignedByte()) << 16;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,203,            w |= (in.readUnsignedByte()) << 8;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,204,            w |= (in.readUnsignedByte());,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,205,            return w * 1000L;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,209,            return in.readLong();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1500,            super(id);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1501,            iTransitions = transitions;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1502,            iWallOffsets = wallOffsets;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1503,            iStandardOffsets = standardOffsets;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1504,            iNameKeys = nameKeys;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1505,            iTailZone = tailZone;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1506,        },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1341,            int poolSize = in.readUnsignedShort();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1342,            String[] pool = new String[poolSize];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1343,            for (int i=0; i<poolSize; i++) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1344,                pool[i] = in.readUTF();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1347,            int size = in.readInt();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1348,            long[] transitions = new long[size];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1349,            int[] wallOffsets = new int[size];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1350,            int[] standardOffsets = new int[size];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1351,            String[] nameKeys = new String[size];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1353,            for (int i=0; i<size; i++) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1354,                transitions[i] = readMillis(in);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1355,                wallOffsets[i] = (int)readMillis(in);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1356,                standardOffsets[i] = (int)readMillis(in);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1359,                    if (poolSize < 256) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1360,                        index = in.readUnsignedByte();,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1364,                    nameKeys[i] = pool[index];,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1367,                },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1370,            DSTZone tailZone = null;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1371,            if (in.readBoolean()) {,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1372,"                tailZone = DSTZone.readFrom(in, id);",0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1375,            return new PrecalculatedZone,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,87,        super(zone.getID());,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,88,        iZone = zone;,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,89,    },0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,42,        },0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,45,        if (i == null) {,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,48,            cacheSize = 512; // (1 << 9),0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,61,        cInfoCacheMask = cacheSize - 1;,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,62,    },0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,68,        if (zone instanceof CachedDateTimeZone) {,0.03842,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,71,        return new CachedDateTimeZone(zone);,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,748,            iOfYear = ofYear;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,749,            iNameKey = nameKey;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,750,            iSaveMillis = saveMillis;,0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,751,        },0.03842,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.03842,0,-1,0
org/joda/time/chrono/AssembledChronology,12,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.03837,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1535,                if (i > 0) {,0.01706,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1536,                    return iWallOffsets[i - 1];,0.01706,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1574,                return transitions[i];,0.01704,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,160,                break;,0.01527,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.01517,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,197,                if (iOffset == Integer.MIN_VALUE) {,0.01517,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.01517,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,200,                return iOffset;,0.01517,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1533,            i = ~i;,0.01517,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1534,            if (i < transitions.length) {,0.01517,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,103,        return getInfo(instant).getOffset(instant);,0.01517,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1528,            long[] transitions = iTransitions;,0.01515,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.01515,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1530,            if (i >= 0) {,0.01515,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,180,"        Info(DateTimeZone zone, long periodStart) {",0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,177,        private int iOffset = Integer.MIN_VALUE;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,181,            iPeriodStart = periodStart;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,182,            iZoneRef = zone;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,183,        },0.01509,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1570,            long[] transitions = iTransitions;,0.01509,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.01509,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.01509,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1573,            if (i < transitions.length) {,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,140,        int period = (int)(millis >> 32);,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,141,        Info[] cache = iInfoCache;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,142,        int index = period & cInfoCacheMask;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,143,        Info info = cache[index];,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,145,            info = createInfo(millis);,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,146,            cache[index] = info;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,148,        return info;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,152,        long periodStart = millis & (0xffffffffL << 32);,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,153,"        Info info = new Info(iZone, periodStart);",0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,155,        long end = periodStart | 0xffffffffL;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,156,        Info chain = info;,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,158,            long next = iZone.nextTransition(periodStart);,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,159,            if (next == periodStart || next > end) {,0.01509,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,166,        return info;,0.01509,0,-1,0
org/joda/time/chrono/BasicChronology,12,167,        if ((base = getBase()) != null) {,0.01505,0,-1,0
org/joda/time/chrono/BasicChronology,12,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.01505,0,-1,0
org/joda/time/chrono/BasicChronology,12,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.01505,0,-1,0
org/joda/time/chrono/BasicChronology,12,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.01505,0,-1,0
org/joda/time/chrono/BasicChronology,12,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.01505,0,-1,0
org/joda/time/chrono/BasicChronology,12,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.01505,0,-1,0
org/joda/time/IllegalFieldValueException,12,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,109,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,110,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,111,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,112,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,113,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,114,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,115,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,116,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,117,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,41,        StringBuilder buf = new StringBuilder(),0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,44,        if (lowerBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,59,        if (explain != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,63,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,12,328,    },0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,378,        return iName;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/DurationFieldType,12,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,243,        return getName();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,90,        DateTimeFieldType[] result = new DateTimeFieldType[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,91,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,92,            result[i] = getFieldType(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,94,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,105,"        return getField(index, getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,116,        DateTimeField[] result = new DateTimeField[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,117,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,118,            result[i] = getField(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,120,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,132,        int[] result = new int[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,133,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,134,            result[i] = getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,136,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,150,        return getValue(indexOfSupported(type));,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,160,        return (indexOf(type) != -1);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,170,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,171,            if (getFieldType(i) == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,172,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,175,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,187,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,188,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,191,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,203,            if (getFieldType(i).getDurationType() == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,204,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,207,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,219,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,220,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,223,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,240,        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,241,        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,242,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,243,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,255,        if (this == partial) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,256,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,258,        if (partial instanceof ReadablePartial == false) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,259,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,261,        ReadablePartial other = (ReadablePartial) partial;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,262,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,265,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,266,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,267,                return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,270,"        return FieldUtils.equals(getChronology(), other.getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,280,        int total = 157;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,281,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,282,            total = 23 * total + getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,283,            total = 23 * total + getFieldType(i).hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,285,        total += getChronology().hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,286,        return total;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,311,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,312,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,314,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,317,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,318,            if (getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,323,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,324,            if (getValue(i) > other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,325,                return 1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,327,            if (getValue(i) < other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,328,                return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,331,        return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,350,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,351,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,353,        return compareTo(partial) > 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,372,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,373,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,375,        return compareTo(partial) < 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,394,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,395,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,397,        return compareTo(partial) == 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,409,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,410,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,412,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,12,46,public abstract class AbstractPartial,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,259,        if (this == readableInstant) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,260,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,12,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,130,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,270,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,271,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,273,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,275,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,276,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,294,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,296,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,297,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,308,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,309,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,322,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,323,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,12,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,225,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,295,        return iMillis;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,304,        return iChronology;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,12,330,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,2092,            super();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2093,            iInstant = instant;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2094,            iField = field;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2095,        },0.0,0,-1,0
org/joda/time/LocalDateTime,12,2101,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2102,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2103,        },0.0,0,-1,0
org/joda/time/LocalDateTime,12,2109,            iInstant = (LocalDateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2110,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2111,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2112,        },0.0,0,-1,0
org/joda/time/LocalDateTime,12,2121,            return iField;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2130,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2140,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2149,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2163,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2176,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2191,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2205,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2219,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2232,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2251,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2263,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2278,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2292,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2302,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2312,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2323,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,12,258,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,259,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,272,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,273,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,286,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,287,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,299,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,300,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,313,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,314,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,326,"    public LocalDateTime(long instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDateTime,12,327,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,329,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,330,        iLocalMillis = localMillis;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,331,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,332,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,352,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,353,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,373,"    public LocalDateTime(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDateTime,12,374,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,375,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,376,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,377,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,378,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,379,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,380,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,399,"    public LocalDateTime(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDateTime,12,400,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,401,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,402,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,403,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,404,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,405,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,406,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,425,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/LocalDateTime,12,427,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,447,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/LocalDateTime,12,449,    },0.0,0,-1,0
org/joda/time/LocalDateTime,12,111,        return new LocalDateTime();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,124,        if (zone == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,125,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,127,        return new LocalDateTime(zone);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,140,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,141,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,143,        return new LocalDateTime(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,157,"        return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,168,        return formatter.parseLocalDateTime(str);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,197,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,234,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,512,        if (iChronology == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,513,"            return new LocalDateTime(iLocalMillis, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,515,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,516,"            return new LocalDateTime(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,518,        return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,552,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,577,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,598,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,613,            return false;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,626,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,627,            return false;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,629,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,664,            return true;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,672,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,693,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,694,            return 0;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,696,        if (partial instanceof LocalDateTime) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,697,            LocalDateTime other = (LocalDateTime) partial;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,698,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,699,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDateTime,12,704,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,717,        return toDateTime((DateTimeZone) null);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,730,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,731,        Chronology chrono = iChronology.withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,732,        return new DateTime(,0.0,0,-1,0
org/joda/time/LocalDateTime,12,745,"        return new LocalDate(getLocalMillis(), getChronology());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,754,"        return new LocalTime(getLocalMillis(), getChronology());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,777,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,778,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,",0.0,0,-1,0
org/joda/time/LocalDateTime,12,780,        date.setTime(date.getTime() + getMillisOfSecond());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,781,        LocalDateTime check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,782,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,785,            while (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,786,                date.setTime(date.getTime() + 60000);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,787,                check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,790,            while (check.isBefore(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,791,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,792,                check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,794,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,795,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,797,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,798,            check = LocalDateTime.fromDateFields(earlier);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,799,            if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,800,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,803,        return date;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,818,"        return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,840,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,841,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,842,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,843,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,844,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,845,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,867,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,868,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,869,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,870,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,871,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,872,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,873,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,890,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,891,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,893,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,916,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,917,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,919,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,920,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,943,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,944,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,946,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,947,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,949,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,950,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,965,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,966,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,968,"        long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,969,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,988,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,989,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,991,"        long instant = getChronology().add(period, getLocalMillis(), scalar);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,992,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1006,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1023,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1043,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1044,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1046,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1047,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1066,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1067,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1069,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1070,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1089,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1090,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1092,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1093,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1112,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1113,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1115,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1116,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1136,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1137,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1139,"        long instant = getChronology().hours().add(getLocalMillis(), hours);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1140,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1159,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1160,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1162,"        long instant = getChronology().minutes().add(getLocalMillis(), minutes);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1163,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1182,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1183,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1185,"        long instant = getChronology().seconds().add(getLocalMillis(), seconds);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1186,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1205,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1206,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1208,"        long instant = getChronology().millis().add(getLocalMillis(), millis);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1209,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1223,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1240,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1260,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1261,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1263,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1264,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1283,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1284,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1286,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1287,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1306,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1307,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1309,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1310,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1329,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1330,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1332,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1333,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1353,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1354,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1356,"        long instant = getChronology().hours().subtract(getLocalMillis(), hours);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1357,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1376,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1377,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1379,"        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1380,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1399,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1400,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1402,"        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1403,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1422,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1423,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1425,"        long instant = getChronology().millis().subtract(getLocalMillis(), millis);",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1426,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1439,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1440,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1442,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1443,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1445,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1455,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1464,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1473,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1482,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1491,        return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1506,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1515,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1529,        return getChronology().weekOfWeekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1538,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1549,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1560,        return getChronology().dayOfWeek().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1570,        return getChronology().hourOfDay().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1579,        return getChronology().minuteOfHour().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1588,        return getChronology().secondOfMinute().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1597,        return getChronology().millisOfSecond().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1606,        return getChronology().millisOfDay().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,12,1622,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1637,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1652,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1667,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1682,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1703,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1718,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1738,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1753,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1768,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1783,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1799,"        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1814,"        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1829,"        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1844,"        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1859,"        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1869,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1878,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1887,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1896,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1905,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1914,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1923,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1932,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1941,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1950,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1959,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1969,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1978,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1987,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,1996,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2005,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/LocalDateTime,12,2026,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2027,            return toString();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2029,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2040,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2041,            return toString();,0.0,0,-1,0
org/joda/time/LocalDateTime,12,2043,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDateTime,12,80,public final class LocalDateTime,0.0,0,-1,0
org/joda/time/DurationField,12,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,12,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,12,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,12,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,12,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,12,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,73,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,74,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,12,64,        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,86,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,127,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,128,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,133,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,12,146,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,149,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,150,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,151,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,12,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,176,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,177,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,179,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,194,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,195,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,197,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,198,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,199,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,201,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,217,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,218,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,219,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,220,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,221,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,223,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,224,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,226,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,241,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,242,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,244,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,245,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,246,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,248,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,264,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,265,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,266,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,268,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,283,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,300,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,316,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,317,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,319,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,333,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,334,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,336,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,364,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,367,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,368,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,369,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,370,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,371,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,372,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,375,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,377,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,397,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,398,            return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,412,        return cZoneNames;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,424,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,425,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,12,451,        double epochDay = epochMillis / 86400000d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,452,        return epochDay + 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,471,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,484,        double epochDay = julianDay - 2440587.5d;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,485,        return (long) (epochDay * 86400000d);,0.0,0,-1,0
org/joda/time/JodaTimePermission,12,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,12,58,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,96,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,100,        ISOChronology chrono = cFastCache[index];,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,101,        if (chrono != null && chrono.getZone() == zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,104,        synchronized (cCache) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,105,            chrono = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,106,            if (chrono == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,108,"                cCache.put(zone, chrono);",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,110,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,111,        cFastCache[index] = chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,112,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,208,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,107,        if ((base = iBase) != null) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,108,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,12,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeZone,12,691,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,145,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,149,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,12,151,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,155,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,12,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,205,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,208,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,12,215,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,216,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,217,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,219,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,220,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,254,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,255,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,260,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,263,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,271,        },0.0,0,-1,0
org/joda/time/DateTimeZone,12,269,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,270,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,272,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,282,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,283,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,302,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,303,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,305,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,306,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,12,307,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,311,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,312,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,313,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,314,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,316,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,317,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,319,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,320,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,324,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,325,            convId = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,12,327,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,328,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,329,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,330,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,332,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,333,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,349,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,350,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,352,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,12,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,357,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,358,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,359,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,360,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,12,365,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,374,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,387,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,401,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,402,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,12,405,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,406,    },0.0,0,-1,0
org/joda/time/DateTimeZone,12,420,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,12,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,454,                },0.0,0,-1,0
org/joda/time/DateTimeZone,12,451,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,452,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,456,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,463,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,464,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,470,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,486,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,500,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,501,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,12,504,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,505,    },0.0,0,-1,0
org/joda/time/DateTimeZone,12,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,538,                },0.0,0,-1,0
org/joda/time/DateTimeZone,12,535,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,536,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,540,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,559,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,12,560,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,562,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,12,563,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,564,"            map.put(""WET"", ""WET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,565,"            map.put(""CET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,566,"            map.put(""MET"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,567,"            map.put(""ECT"", ""CET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,568,"            map.put(""EET"", ""EET"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,569,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,12,571,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,572,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,12,574,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,575,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,-1,0
org/joda/time/DateTimeZone,12,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,579,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,582,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,583,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,585,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,586,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,587,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,588,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,591,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,592,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,593,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,595,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,596,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,598,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,604,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,631,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,632,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,633,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,12,635,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,12,636,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,644,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,12,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,647,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,648,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,652,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,12,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,655,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,656,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,659,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,12,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,661,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,670,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,12,675,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,729,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,744,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,745,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,747,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,748,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,749,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,752,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,753,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,755,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,12,769,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,784,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,785,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,787,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,788,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,789,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,792,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,793,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,795,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,12,813,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,12,816,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,12,844,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,882,        final int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,884,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,885,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,887,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,890,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,894,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,896,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,897,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,899,            },0.0,0,-1,0
org/joda/time/DateTimeZone,12,900,        } else if (offsetLocal >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,901,            long prev = previousTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,902,            if (prev < instantAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,903,                int offsetPrev = getOffset(prev);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,904,                int diff = offsetPrev - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,905,                if (instantAdjusted - prev <= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,906,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,910,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,924,        int offset = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,925,        long instantLocal = instantUTC + offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,930,        return instantLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,951,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,952,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,954,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,955,            return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,957,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,974,        int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,976,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,978,        if (offsetLocal != offset) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,982,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,985,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,986,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,988,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,989,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,990,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,992,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,994,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,-1,0
org/joda/time/DateTimeZone,12,1003,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1009,        long instantUTC = instantLocal - offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,12,1014,        return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1028,        if (newZone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1029,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1031,        if (newZone == this) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1032,            return oldInstant;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1034,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,12,1145,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1146,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1149,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1150,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1151,        } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1152,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1167,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1168,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1169,        long offsetBefore = getOffset(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1170,        long offsetAfter = getOffset(instantAfter);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1171,        if (offsetBefore <= offsetAfter) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1172,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,-1,0
org/joda/time/DateTimeZone,12,1176,        long diff = offsetBefore - offsetAfter;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1177,        long transition = nextTransition(instantBefore);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1178,        long overlapStart = transition - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1179,        long overlapEnd = transition + diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1180,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1181,          return instant;  // not an overlap,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1185,        long afterStart = instant - overlapStart;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1186,        if (afterStart >= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1188,          return earlierOrLater ? instant : instant - diff;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1191,          return earlierOrLater ? instant + diff : instant;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1233,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1258,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1268,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,515,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTime,12,2045,            super();,0.0,0,-1,0
org/joda/time/DateTime,12,2046,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateTime,12,2047,            iField = field;,0.0,0,-1,0
org/joda/time/DateTime,12,2048,        },0.0,0,-1,0
org/joda/time/DateTime,12,2054,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateTime,12,2055,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateTime,12,2056,        },0.0,0,-1,0
org/joda/time/DateTime,12,2062,            iInstant = (DateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,12,2063,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,12,2064,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateTime,12,2065,        },0.0,0,-1,0
org/joda/time/DateTime,12,2074,            return iField;,0.0,0,-1,0
org/joda/time/DateTime,12,2083,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateTime,12,2093,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateTime,12,2102,            return iInstant;,0.0,0,-1,0
org/joda/time/DateTime,12,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,12,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,12,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,12,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,12,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateTime,12,2203,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateTime,12,2227,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateTime,12,2244,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateTime,12,2254,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,12,2263,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,12,2273,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,12,2283,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,12,2294,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,12,155,        super();,0.0,0,-1,0
org/joda/time/DateTime,12,156,    },0.0,0,-1,0
org/joda/time/DateTime,12,168,        super(zone);,0.0,0,-1,0
org/joda/time/DateTime,12,169,    },0.0,0,-1,0
org/joda/time/DateTime,12,182,        super(chronology);,0.0,0,-1,0
org/joda/time/DateTime,12,183,    },0.0,0,-1,0
org/joda/time/DateTime,12,193,        super(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,194,    },0.0,0,-1,0
org/joda/time/DateTime,12,206,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,12,207,    },0.0,0,-1,0
org/joda/time/DateTime,12,220,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/DateTime,12,221,    },0.0,0,-1,0
org/joda/time/DateTime,12,241,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateTime,12,242,    },0.0,0,-1,0
org/joda/time/DateTime,12,265,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,12,266,    },0.0,0,-1,0
org/joda/time/DateTime,12,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateTime,12,287,    },0.0,0,-1,0
org/joda/time/DateTime,12,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,-1,0
org/joda/time/DateTime,12,308,    },0.0,0,-1,0
org/joda/time/DateTime,12,331,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,12,333,    },0.0,0,-1,0
org/joda/time/DateTime,12,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,12,359,    },0.0,0,-1,0
org/joda/time/DateTime,12,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,-1,0
org/joda/time/DateTime,12,382,    },0.0,0,-1,0
org/joda/time/DateTime,12,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,12,409,    },0.0,0,-1,0
org/joda/time/DateTime,12,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,12,437,    },0.0,0,-1,0
org/joda/time/DateTime,12,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,12,461,    },0.0,0,-1,0
org/joda/time/DateTime,12,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,12,489,    },0.0,0,-1,0
org/joda/time/DateTime,12,89,        return new DateTime();,0.0,0,-1,0
org/joda/time/DateTime,12,101,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,12,104,        return new DateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,12,116,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,12,119,        return new DateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,12,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateTime,12,144,        return formatter.parseDateTime(str);,0.0,0,-1,0
org/joda/time/DateTime,12,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,-1,0
org/joda/time/DateTime,12,538,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,540,        return super.toDateTimeISO();,0.0,0,-1,0
org/joda/time/DateTime,12,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/DateTime,12,551,        if (getZone() == zone) {,0.0,0,-1,0
org/joda/time/DateTime,12,552,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,554,        return super.toDateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,12,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTime,12,565,        if (getChronology() == chronology) {,0.0,0,-1,0
org/joda/time/DateTime,12,566,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,568,        return super.toDateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,12,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/DateTime,12,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/DateTime,12,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateTime,12,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,-1,0
org/joda/time/DateTime,12,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateTime,12,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateTime,12,641,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateTime,12,642,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateTime,12,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateTime,12,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.0,0,-1,0
org/joda/time/DateTime,12,666,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,12,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.0,0,-1,0
org/joda/time/DateTime,12,686,        return withMillis(newMillis);,0.0,0,-1,0
org/joda/time/DateTime,12,709,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,12,710,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,12,711,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/DateTime,12,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/DateTime,12,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/DateTime,12,714,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,737,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,12,738,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,12,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/DateTime,12,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/DateTime,12,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/DateTime,12,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,12,743,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,-1,0
org/joda/time/DateTime,12,776,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,777,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateTime,12,802,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,12,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateTime,12,806,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,828,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,12,831,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,832,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateTime,12,835,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,851,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateTime,12,854,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,869,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,12,890,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,891,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,12,894,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,909,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,12,923,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,12,949,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateTime,12,976,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,977,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,12,980,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1006,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1007,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,12,1010,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1032,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1033,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,12,1036,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1067,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1068,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,12,1071,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1098,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1099,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,12,1102,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1125,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1126,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,12,1129,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1152,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1153,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,12,1156,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1178,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1179,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,12,1182,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1197,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,12,1211,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,12,1238,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateTime,12,1265,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1266,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,12,1269,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1295,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1296,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,12,1299,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1321,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1322,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,12,1325,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1356,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1357,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,12,1360,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1388,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1389,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,12,1392,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1415,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1416,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,12,1419,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1442,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1443,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,12,1446,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1469,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,12,1470,            return this;,0.0,0,-1,0
org/joda/time/DateTime,12,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,12,1473,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,12,1485,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTime,12,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,12,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateTime,12,1489,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateTime,12,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateTime,12,1492,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateTime,12,1503,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1515,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1527,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1538,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1549,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1560,"        return new LocalTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,12,1577,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateTime,12,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateTime,12,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateTime,12,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateTime,12,1641,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateTime,12,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateTime,12,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateTime,12,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateTime,12,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateTime,12,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateTime,12,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateTime,12,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,-1,0
org/joda/time/DateTime,12,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,-1,0
org/joda/time/DateTime,12,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,-1,0
org/joda/time/DateTime,12,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,12,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,12,1840,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateTime,12,1849,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateTime,12,1858,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateTime,12,1867,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateTime,12,1876,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateTime,12,1885,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateTime,12,1894,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateTime,12,1903,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateTime,12,1912,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateTime,12,1921,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateTime,12,1930,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/DateTime,12,1941,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/DateTime,12,1950,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/DateTime,12,1959,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/DateTime,12,1968,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/DateTime,12,1977,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/DateTime,12,1986,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/DateTime,12,1995,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/DateTimeUtils,12,554,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,555,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,556,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,12,563,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/Instant,12,108,        super();,0.0,0,-1,0
org/joda/time/Instant,12,109,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,12,110,    },0.0,0,-1,0
org/joda/time/Instant,12,132,        super();,0.0,0,-1,0
org/joda/time/Instant,12,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,12,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,12,135,    },0.0,0,-1,0
org/joda/time/Instant,12,73,        return new Instant();,0.0,0,-1,0
org/joda/time/Instant,12,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,12,98,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,12,144,        return this;,0.0,0,-1,0
org/joda/time/Instant,12,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,12,171,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,12,172,            return this;,0.0,0,-1,0
org/joda/time/Instant,12,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,12,175,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,12,189,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,12,190,            return this;,0.0,0,-1,0
org/joda/time/Instant,12,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,12,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,12,219,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,12,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,12,246,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,12,268,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,12,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,12,315,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,12,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,12,361,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,12,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,209,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,211,            int curMonth0 = partial.getValue(0) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,212,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,213,"            return set(partial, 0, values, newMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,215,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,216,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,220,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,221,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,223,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,243,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,244,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,247,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,256,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,260,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,262,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,271,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,273,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,276,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,277,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,280,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,306,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,320,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,321,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,324,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,329,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,339,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,344,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,349,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,350,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,351,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,356,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,364,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,12,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,12,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,12,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,196,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,217,        StringBuilder sb = new StringBuilder(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,218,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,219,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,220,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,221,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,223,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,224,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,225,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,226,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,227,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,230,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,233,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,234,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,307,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,348,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,371,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,372,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,373,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,410,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,497,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,500,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,518,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,522,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,565,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,575,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,590,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,58,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,61,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,63,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,123,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,12,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,12,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,12,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,12,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,180,            if (isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,12,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,12,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,12,133,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,12,143,        return iRange;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,93,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,12,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,12,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,12,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,12,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,12,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,12,216,        return iOffset;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,12,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,12,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,12,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,12,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,12,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,79,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,90,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,94,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,95,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,97,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,98,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,100,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,101,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,119,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,139,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,140,        int offset = zone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,141,        instant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,142,        if (offset != zone.getOffset(instant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,143,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,147,        return instant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,213,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,216,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,237,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,238,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,241,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,244,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,12,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,351,"        LimitException(String desc, boolean isLow) {",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,352,            super(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,353,            iIsLow = isLow;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,354,        },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,357,            StringBuffer buf = new StringBuffer(85);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,358,"            buf.append(""The"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,359,            String desc = super.getMessage();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,360,            if (desc != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,361,                buf.append(' ');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,362,                buf.append(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,364,"            buf.append("" instant is "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,366,            DateTimeFormatter p = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,367,            p = p.withChronology(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,368,            if (iIsLow) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,369,"                buf.append(""below the supported minimum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,370,"                p.printTo(buf, getLowerLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,372,"                buf.append(""above the supported maximum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,373,"                p.printTo(buf, getUpperLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,376,"            buf.append("" ("");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,377,            buf.append(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,378,            buf.append(')');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,380,            return buf.toString();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,384,"            return ""IllegalArgumentException: "" + getMessage();",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,50,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,51,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,55,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,59,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,81,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,83,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,95,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,99,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,103,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,12,110,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,286,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,318,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,319,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,324,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,325,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,331,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,338,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,344,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,345,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,350,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,355,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,360,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,364,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,402,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,407,            return iField.get(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,412,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,429,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,430,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,432,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,435,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,441,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,442,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,444,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,447,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,453,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,454,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,456,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,466,"            localInstant = iField.set(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,468,            if (get(result) != value) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,474,            return result;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,486,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,493,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,499,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,503,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,508,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,513,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,517,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,521,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,522,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,523,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,524,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,533,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,534,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,536,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,546,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,550,            return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,555,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,559,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,563,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,567,            return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,572,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,576,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,580,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,584,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,592,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,593,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,12,598,            return offset;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,396,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,397,"            return getWrappedField().getValue(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,401,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,402,"            return getWrappedField().getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,406,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,407,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,411,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,412,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,416,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,417,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,418,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,419,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,423,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,424,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,425,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,426,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,430,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,431,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,436,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,437,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,12,101,        return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1088,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1092,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1096,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1100,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,640,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,645,                return iGregorianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,652,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,653,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,655,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,660,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,664,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,665,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,667,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,672,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,676,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,680,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,686,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,687,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,689,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,690,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,691,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,692,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,694,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,695,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,697,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,702,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,706,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,719,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,727,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,728,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,731,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,732,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,741,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,742,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,743,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,745,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,746,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,751,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,752,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,754,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,755,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,760,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,772,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,773,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,775,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,780,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,781,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,783,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,799,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,803,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,807,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,808,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,811,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,815,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,816,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,817,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,820,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,830,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,831,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,834,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,838,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,839,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,840,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,843,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,847,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,848,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,852,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,853,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,854,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,855,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,856,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,857,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,860,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,864,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,865,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,866,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,868,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,869,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,873,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,875,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,879,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,880,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,882,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,883,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,885,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,886,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,890,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,894,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,899,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,904,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,905,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,907,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,913,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,282,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,99,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,194,            cutoverInstant = gregorianCutover.toInstant();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,204,            for (int i=chronos.size(); --i>=0; ) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,205,                chrono = chronos.get(i);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,209,                    return chrono;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,221,            chrono = new GJChronology,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,247,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,248,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,250,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,293,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,294,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,296,        return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,307,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,317,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,318,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,320,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,321,            return this;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,331,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,336,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,338,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,340,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,342,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,344,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,347,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,356,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,357,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,365,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,378,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,368,        } catch (IllegalFieldValueException ex) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,369,            if (monthOfYear != 2 || dayOfMonth != 29) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,370,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,372,            instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,375,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,376,                throw ex;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,379,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,381,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,384,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,386,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,389,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,397,        return iCutoverInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,406,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,417,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,427,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,439,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,440,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,441,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,442,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,444,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,445,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,447,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,448,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,450,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,452,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,455,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,456,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,457,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,459,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,461,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,477,            return;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,481,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,583,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,587,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,965,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,966,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,967,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,969,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,970,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,974,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,975,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,977,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,978,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,982,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,986,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,987,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,988,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,990,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,991,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,995,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,996,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,998,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,999,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1003,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1007,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1008,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1009,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1013,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1014,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1016,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1017,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1021,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1022,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1027,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1028,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1029,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1033,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1034,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1036,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1037,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1041,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1042,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1057,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1058,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1060,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1065,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1066,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,12,1068,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,12,229,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,68,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,75,            if (!lowerLimit.isBefore(upperLimit)) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,76,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,111,        return iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,120,        return iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,129,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,138,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,139,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,141,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,142,            return this;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,145,        if (zone == DateTimeZone.UTC && iWithUTC != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,146,            return iWithUTC;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,149,        DateTime lowerLimit = iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,150,        if (lowerLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,151,            MutableDateTime mdt = lowerLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,152,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,153,            lowerLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,156,        DateTime upperLimit = iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,157,        if (upperLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,158,            MutableDateTime mdt = upperLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,159,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,160,            upperLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,163,        LimitChronology chrono = getInstance,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,166,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,167,            iWithUTC = chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,170,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,178,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,179,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,187,        long instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,190,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,191,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,199,"        checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,200,        instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,202,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,203,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,269,            return field;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,272,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,285,        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,286,"            throw new LimitException(desc, true);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,288,        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,289,"            throw new LimitException(desc, false);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,291,    },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,303,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,304,            return true;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,306,        if (obj instanceof LimitChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,307,            return false;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,309,        LimitChronology chrono = (LimitChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,310,        return,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,323,        int hash = 317351877;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,324,        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,325,        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,326,        hash += getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,327,        return hash;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,461,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,462,            return getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,466,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,467,"            return getWrappedField().getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,471,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,472,"            return getWrappedField().getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,476,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,477,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,478,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,479,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,483,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,484,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,485,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,486,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,490,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,491,"            long result = getWrappedField().addWrapField(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,492,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,493,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,497,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,498,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,503,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,504,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,509,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,510,"            long result = getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,511,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,512,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,516,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,517,"            long result = getWrappedField().set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,518,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,519,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,523,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,527,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,531,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,532,            return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,536,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,537,            return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,541,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,545,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,546,            long result = getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,547,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,548,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,552,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,553,            long result = getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,554,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,555,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,559,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,560,            long result = getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,561,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,562,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,566,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,567,            long result = getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,568,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,569,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,573,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,574,            long result = getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,575,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,576,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,580,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,581,            long result = getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,582,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,583,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,587,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,588,            return getWrappedField().getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,592,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,593,            return getWrappedField().getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,597,            return getWrappedField().getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,12,601,            return getWrappedField().getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,216,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,217,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,218,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,221,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,225,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,226,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,12,232,        },0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,93,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,105,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,135,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,136,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,147,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,157,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,158,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,160,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,161,            return this;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,163,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,174,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,195,"        String str = ""BuddhistChronology"";",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,196,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,197,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,198,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,12,200,        return str;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,57,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,62,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,68,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,76,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,81,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,86,        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,91,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,96,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,101,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,116,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,121,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,126,        return iEraText;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,12,131,        return iEraText.length();,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,69,        } else if (min == skip + 1) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,70,            iMinValue = skip;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,72,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,79,        int value = super.get(millis);,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,80,        if (value < iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,81,            value++;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,83,        return value;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,12,99,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,64,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,76,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,84,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,92,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,100,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,104,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,108,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,112,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,116,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,120,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,124,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,132,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,136,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,140,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,144,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,156,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,176,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,180,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,184,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,200,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,204,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,216,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,220,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,224,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,232,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,236,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,240,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,244,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,248,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,252,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,256,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,260,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,264,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,268,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,272,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,12,276,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,89,        if (value <= iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,90,            if (value == iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,91,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,94,            value++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,96,"        return super.set(millis, value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,12,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,604,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,606,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,609,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,612,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,615,                return getClass().getName();,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,12,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,64,        int sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,70,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,123,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,136,        switch (val2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,141,                return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,143,                return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,145,                return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,147,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,148,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,151,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,163,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,164,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,166,        if (val1 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,167,            return val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,169,        if (val1 == 0 || val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,170,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,172,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,176,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,188,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,202,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,203,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,218,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,236,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,252,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,253,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,257,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,12,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,292,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,293,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,12,296,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,297,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,299,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,300,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,303,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,305,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,306,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,308,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,321,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,322,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,324,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,325,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,12,327,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,12,138,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,148,        if (obj instanceof MillisDurationField) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,151,        return false;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,164,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,171,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,12,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/DateTimeUtils,12,539,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,873,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,187,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,190,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,192,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,202,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,210,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,12,98,        return false;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,67,            String[] setEn = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,68,            for (String[] strings : zoneStringsEn) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,70,                setEn = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,71,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,75,            String[] setLoc = null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,78,                setLoc = strings;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,79,                break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,83,            if (setEn != null && setLoc != null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,12,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,206,                StringBuilder buf = new StringBuilder(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,239,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,230,        } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,231,            uncaughtException(ex);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,259,            } catch (IOException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,285,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,12,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,252,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,253,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,475,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1540,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1541,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1576,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1577,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1587,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1589,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1595,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1596,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1605,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1611,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1613,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,95,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,99,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,111,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,115,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,119,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,128,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,133,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,162,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,12,164,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,12,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/LocalDate,12,261,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,12,262,    },0.0,0,-1,0
org/joda/time/LocalDate,12,275,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,12,276,    },0.0,0,-1,0
org/joda/time/LocalDate,12,289,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDate,12,290,    },0.0,0,-1,0
org/joda/time/LocalDate,12,302,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,12,303,    },0.0,0,-1,0
org/joda/time/LocalDate,12,316,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,12,317,    },0.0,0,-1,0
org/joda/time/LocalDate,12,329,"    public LocalDate(long instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDate,12,330,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,12,332,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",0.0,0,-1,0
org/joda/time/LocalDate,12,333,        chronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,12,334,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,0.0,0,-1,0
org/joda/time/LocalDate,12,335,        iChronology = chronology;,0.0,0,-1,0
org/joda/time/LocalDate,12,336,    },0.0,0,-1,0
org/joda/time/LocalDate,12,357,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDate,12,358,    },0.0,0,-1,0
org/joda/time/LocalDate,12,378,"    public LocalDate(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDate,12,379,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,380,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDate,12,381,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,12,382,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,12,383,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,12,384,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,12,385,    },0.0,0,-1,0
org/joda/time/LocalDate,12,404,"    public LocalDate(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDate,12,405,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,406,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDate,12,407,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,12,408,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,12,409,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,12,410,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,12,411,    },0.0,0,-1,0
org/joda/time/LocalDate,12,124,        return new LocalDate();,0.0,0,-1,0
org/joda/time/LocalDate,12,136,        if (zone == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,137,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,139,        return new LocalDate(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,151,        if (chronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,152,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,154,        return new LocalDate(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,12,168,"        return parse(str, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,12,179,        return formatter.parseLocalDate(str);,0.0,0,-1,0
org/joda/time/LocalDate,12,208,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,241,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,457,        if (iChronology == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,458,"            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,12,460,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,12,461,"            return new LocalDate(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDate,12,463,        return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,476,        return 3;,0.0,0,-1,0
org/joda/time/LocalDate,12,489,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,12,491,                return chrono.year();,0.0,0,-1,0
org/joda/time/LocalDate,12,493,                return chrono.monthOfYear();,0.0,0,-1,0
org/joda/time/LocalDate,12,495,                return chrono.dayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,12,497,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,12,514,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,12,516,                return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,518,                return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,520,                return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,522,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,12,543,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,546,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,12,561,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,12,569,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,12,580,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,581,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,12,583,        DurationField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,12,584,        if (DATE_DURATION_TYPES.contains(type) ||,0.0,0,-1,0
org/joda/time/LocalDate,12,586,            return field.isSupported();,0.0,0,-1,0
org/joda/time/LocalDate,12,588,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,12,623,            return true;,0.0,0,-1,0
org/joda/time/LocalDate,12,631,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDate,12,641,        int hash = iHash;,0.0,0,-1,0
org/joda/time/LocalDate,12,642,        if (hash == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,643,            hash = iHash = super.hashCode();,0.0,0,-1,0
org/joda/time/LocalDate,12,645,        return hash;,0.0,0,-1,0
org/joda/time/LocalDate,12,666,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDate,12,667,            return 0;,0.0,0,-1,0
org/joda/time/LocalDate,12,669,        if (partial instanceof LocalDate) {,0.0,0,-1,0
org/joda/time/LocalDate,12,670,            LocalDate other = (LocalDate) partial;,0.0,0,-1,0
org/joda/time/LocalDate,12,671,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDate,12,672,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDate,12,677,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDate,12,696,        return toDateTimeAtStartOfDay(null);,0.0,0,-1,0
org/joda/time/LocalDate,12,718,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,719,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,720,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/LocalDate,12,721,"        long instant = zone.convertLocalToUTC(localMillis, false);",0.0,0,-1,0
org/joda/time/LocalDate,12,722,        instant = chrono.dayOfMonth().roundFloor(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,723,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,12,743,        return toDateTimeAtMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,12,766,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,767,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,768,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,12,785,        return toDateTimeAtCurrentTime(null);,0.0,0,-1,0
org/joda/time/LocalDate,12,805,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,806,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,807,        long instantMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,12,808,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/LocalDate,12,809,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,12,830,        return toDateMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,12,851,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,852,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,853,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);",0.0,0,-1,0
org/joda/time/LocalDate,12,874,        if (time == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,875,"            throw new IllegalArgumentException(""The time must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,877,        if (getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,12,878,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,12,880,        long localMillis = getLocalMillis() + time.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,12,881,"        return new LocalDateTime(localMillis, getChronology());",0.0,0,-1,0
org/joda/time/LocalDate,12,903,"        return toDateTime(time, null);",0.0,0,-1,0
org/joda/time/LocalDate,12,925,        if (time != null && getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,12,926,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,12,928,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,929,        long instant = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,12,930,"        instant = chrono.set(this, instant);",0.0,0,-1,0
org/joda/time/LocalDate,12,931,        if (time != null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,932,"            instant = chrono.set(time, instant);",0.0,0,-1,0
org/joda/time/LocalDate,12,934,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,12,950,        return toInterval(null);,0.0,0,-1,0
org/joda/time/LocalDate,12,965,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,966,        DateTime start = toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,967,        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,12,968,"        return new Interval(start, end);",0.0,0,-1,0
org/joda/time/LocalDate,12,989,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,12,990,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);",0.0,0,-1,0
org/joda/time/LocalDate,12,991,        LocalDate check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,12,992,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,12,995,            while (check.equals(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,12,996,                date.setTime(date.getTime() + 3600000);,0.0,0,-1,0
org/joda/time/LocalDate,12,997,                check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,12,1000,            while (date.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1001,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDate,12,1004,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDate,12,1005,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1007,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDate,12,1008,            if (earlier.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1009,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDate,12,1012,        return date;,0.0,0,-1,0
org/joda/time/LocalDate,12,1027,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0.0,0,-1,0
org/joda/time/LocalDate,12,1028,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,12,1046,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1047,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1049,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDate,12,1071,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1072,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1074,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1075,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1077,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDate,12,1078,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1100,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1101,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1103,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1104,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1106,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1107,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1109,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDate,12,1110,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1133,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1134,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1136,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,12,1137,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,12,1138,        for (int i = 0; i < period.size(); i++) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1139,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);",0.0,0,-1,0
org/joda/time/LocalDate,12,1140,            DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/LocalDate,12,1141,            if (isSupported(type)) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1142,"                instant = type.getField(chrono).add(instant, value);",0.0,0,-1,0
org/joda/time/LocalDate,12,1145,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1166,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDate,12,1188,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1189,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1191,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,12,1192,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1214,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1215,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1217,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,12,1218,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1237,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1238,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1240,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,12,1241,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1260,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1261,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1263,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,12,1264,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1285,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDate,12,1307,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1308,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1310,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,12,1311,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1333,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1334,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1336,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,12,1337,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1356,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1357,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1359,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,12,1360,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1379,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1380,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1382,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,12,1383,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1396,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1397,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1399,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1400,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,12,1402,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,12,1412,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1421,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1430,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1439,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1448,        return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1463,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1472,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1486,        return getChronology().weekOfWeekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1495,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1506,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1517,        return getChronology().dayOfWeek().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,12,1533,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDate,12,1548,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,12,1563,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,12,1578,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDate,12,1593,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDate,12,1614,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDate,12,1629,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,12,1649,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/LocalDate,12,1664,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,12,1679,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDate,12,1694,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/LocalDate,12,1704,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDate,12,1713,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,12,1722,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDate,12,1731,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,12,1740,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDate,12,1749,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/LocalDate,12,1758,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,12,1767,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDate,12,1776,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,12,1785,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDate,12,1794,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDate,12,1815,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1816,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,12,1818,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,12,1829,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,12,1830,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,12,1832,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,12,82,public final class LocalDate,0.0,0,-1,0
org/joda/time/DurationFieldType,12,266,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DurationFieldType,12,267,                return true;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,269,            if (obj instanceof StandardDurationFieldType) {,0.0,0,-1,0
org/joda/time/DurationFieldType,12,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,272,            return false;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,282,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DurationFieldType,12,284,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,12,286,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,288,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,290,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,292,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,294,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,296,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,298,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,300,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,302,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,304,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,306,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,308,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,311,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,12,321,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,12,323,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,325,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,327,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,329,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,331,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,333,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,335,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,337,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,339,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,341,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,343,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,345,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,12,348,                    return this;,0.0,0,-1,0
org/joda/time/LocalDate,12,1880,            super();,0.0,0,-1,0
org/joda/time/LocalDate,12,1881,            iInstant = instant;,0.0,0,-1,0
org/joda/time/LocalDate,12,1882,            iField = field;,0.0,0,-1,0
org/joda/time/LocalDate,12,1883,        },0.0,0,-1,0
org/joda/time/LocalDate,12,1889,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDate,12,1890,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDate,12,1891,        },0.0,0,-1,0
org/joda/time/LocalDate,12,1897,            iInstant = (LocalDate) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,12,1898,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,12,1899,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,12,1900,        },0.0,0,-1,0
org/joda/time/LocalDate,12,1909,            return iField;,0.0,0,-1,0
org/joda/time/LocalDate,12,1918,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,12,1928,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,12,1937,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDate,12,1951,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,12,1966,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,12,1980,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,12,1994,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDate,12,2007,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDate,12,2026,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDate,12,2038,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDate,12,2053,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,12,2067,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,12,2077,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,12,2087,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,12,2098,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,475,            return (1 << iOrdinal);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,502,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,504,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,12,590,                    return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1284,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1285,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1286,        },0.0,0,-1,0
org/joda/time/DateTimeZone,12,1289,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1290,        },0.0,0,-1,0
org/joda/time/DateTimeZone,12,1293,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,12,1294,        },0.0,0,-1,0
org/joda/time/DateTimeZone,12,1297,            return forID(iID);,0.0,0,-1,0
