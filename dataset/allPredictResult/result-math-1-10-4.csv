dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,1,0,0,0,3,54,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,3,0,3,6,1,6,0,0,19,71,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,10,1,0,2,5,1,0,0,0,12,36,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,0,0,0,2,23,12,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,10,2,0,1,3,1,4,0,0,18,33,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,1,1,1,2,1,0,0,0,8,19,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,2,0,0,0,0,0,6,0,0,9,14,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,8,0,3,7,0,18,0,0,35,63,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,2,0,2,5,0,6,0,0,11,49,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,14,5,0,1,2,0,0,0,0,20,17,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,4,1,1,1,2,0,0,0,0,10,17,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,0,0,1,1,3,0,0,0,0,3,38,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,6,4,0,3,7,0,12,0,0,24,61,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,0,0,0,1,3,0,0,0,0,4,34,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,1,1,3,0,0,0,0,6,20,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,4,0,0,0,0,0,0,0,0,5,49,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,0,0,0,0,0,0,0,0,0,0,31,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,6,0,0,0,0,0,0,4,0,10,22,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,6,4,0,2,5,0,0,0,0,10,24,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,6,1,0,0,0,3,0,0,0,10,6,1,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,0,0,0,2,4,0,0,0,0,6,62,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,2,0,0,0,0,8,0,0,15,16,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,0,0,0,3,7,0,0,0,0,10,41,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,4,1,1,1,2,0,0,0,0,10,19,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,40,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,16,3,0,1,2,0,6,0,0,28,34,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,0,0,0,0,0,1,0,0,0,1,13,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,0,0,0,4,30,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,2,0,0,1,3,0,0,0,0,2,43,7,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,4,0,1,1,2,0,0,0,0,8,12,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,14,2,0,1,3,0,0,0,0,18,43,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,4,1,1,1,2,0,0,0,0,8,26,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,8,2,0,0,0,0,0,0,0,11,19,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,10,2,0,1,3,0,0,0,0,13,16,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,10,1,0,0,0,0,0,0,0,13,15,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,1,1,3,0,0,0,0,4,16,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,2,0,0,0,0,1,4,4,0,10,9,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,14,3,0,2,5,0,0,0,0,19,32,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,0,0,0,0,0,0,0,0,0,0,8,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",12,2,0,1,2,0,4,0,0,18,54,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,4,2,1,0,0,1,12,0,0,23,9,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,4,1,1,1,2,0,0,0,0,8,20,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,0,0,0,1,3,0,0,0,0,4,14,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,0,0,3,7,0,0,0,0,2,57,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,0,0,3,7,0,0,0,0,10,27,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,2,3,0,3,7,0,6,0,0,11,27,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,10,2,0,2,4,1,8,0,0,21,37,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,20,7,0,2,5,0,0,0,0,27,71,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,6,1,1,0,0,1,4,2,0,23,9,0,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,10,3,0,1,3,0,0,0,0,13,45,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,12,3,0,1,3,0,0,0,0,15,47,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,0,0,0,0,28,67,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,14,1,1,1,3,1,0,0,0,18,20,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,46,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,10,1,1,3,7,0,0,0,0,16,28,0,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,12,1,0,0,0,1,0,0,0,14,14,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,14,1,0,0,0,1,0,2,0,20,20,0,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,6,1,0,1,3,0,0,0,0,8,39,14,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,0,0,0,1,2,0,0,0,0,3,23,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,12,2,0,0,0,0,0,0,0,15,11,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,0,0,0,0,0,0,0,0,0,0,14,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,6,0,1,0,0,0,0,0,0,9,33,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,6,0,1,1,3,1,0,0,0,9,39,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,22,2,1,2,4,1,0,0,0,31,37,1,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,12,2,1,1,2,0,0,0,0,17,32,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,0,0,0,1,2,0,0,0,0,3,37,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,0,0,0,1,2,0,4,0,0,4,20,7,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,2,1,0,1,2,0,4,0,0,7,19,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,0,0,0,1,2,0,0,0,0,3,41,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,8,0,0,0,0,0,0,0,0,10,50,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,0,0,0,1,2,0,0,0,0,3,57,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,12,1,0,1,2,0,0,0,0,16,35,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,6,0,0,6,23,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,4,1,0,2,5,0,4,0,0,9,34,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,12,7,1,3,6,0,0,0,0,23,72,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,0,8,0,0,8,6,9,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,2,0,0,1,3,0,0,0,0,2,10,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,2,0,0,0,0,3,0,0,0,5,11,2,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,2,0,0,1,3,0,0,2,0,4,39,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,14,2,1,1,2,1,0,4,0,27,27,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,0,0,0,1,3,0,0,0,0,4,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,0,0,0,1,3,0,0,0,0,4,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,1,1,2,0,8,0,0,21,46,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,0,0,0,0,0,1,0,0,0,1,29,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,0,0,0,0,0,0,0,0,0,0,31,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,14,2,0,0,0,0,0,0,0,19,15,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,21,30,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,8,1,1,1,2,0,0,0,0,12,28,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",0,0,0,0,0,0,0,0,0,0,65,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,10,3,0,1,3,0,0,0,0,14,48,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,2,1,0,2,4,0,0,0,0,3,51,8,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,18,4,0,0,0,1,2,0,0,26,52,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,10,1,0,3,6,0,0,0,0,13,44,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,6,0,0,16,38,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,6,2,0,2,5,0,8,0,0,17,27,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",10,0,0,1,2,1,10,0,0,23,48,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,2,0,0,0,0,1,6,0,0,8,14,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,0,0,0,0,0,0,0,0,0,0,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,2,0,0,0,0,0,0,0,0,2,43,5,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,63,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,0,0,0,1,2,0,0,0,0,3,61,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",6,1,0,1,2,0,0,0,0,8,93,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,10,0,1,1,2,0,0,4,0,17,26,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,6,0,1,1,2,0,0,0,0,9,27,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,8,2,1,1,2,0,10,0,0,34,16,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,0,1,2,0,0,0,0,3,17,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,62,23,0,2,4,0,0,0,0,87,57,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0,0,0,2,4,0,0,0,0,6,53,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,0,0,0,1,3,0,0,0,0,4,20,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,0,0,0,1,2,0,8,2,0,10,20,7,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0,0,1,2,4,0,0,0,0,6,43,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,14,6,0,1,2,1,4,0,0,26,32,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,8,0,0,21,43,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,14,4,1,4,8,1,0,0,0,28,60,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,0,0,0,0,0,0,14,0,0,14,15,7,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,8,2,1,1,2,1,6,2,0,24,30,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,8,5,0,1,3,0,0,0,0,13,14,3,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,10,2,0,0,0,0,0,0,0,14,14,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.03571,0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,14,4,0,2,4,0,12,0,0,32,50,3,0.03571,0,0,1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,0,0,0,1,3,0,0,0,0,4,18,4,0.03571,0,0,1
