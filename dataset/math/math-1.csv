project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",1.33333,0,,0
org/apache/commons/math3/fraction/FractionConversionException,1,54,    },1.33333,0,,0
org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,0.8,0,,0
org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0.8,0,,0
org/apache/commons/math3/exception/ConvergenceException,1,50,    },0.8,0,,0
org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0.5,1,,1
org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,0.5,0,,0
org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,0.5,0,,0
org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",0.5,0,,0
org/apache/commons/math3/fraction/BigFraction,1,357,    },0.5,0,,0
org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",0.5,0,,0
org/apache/commons/math3/fraction/Fraction,1,145,    },0.5,0,,0
org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",0.5,1,,1
org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0.5,0,,0
org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0.5,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.23529,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0.23529,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,0.23529,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,0.22222,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,0.22222,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",0.22222,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0.22222,0,,0
org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,0.2,0,,0
org/apache/commons/math3/fraction/BigFraction,1,330,            denominator = BigInteger.valueOf(q2);,0.2,0,,0
org/apache/commons/math3/fraction/BigFraction,1,328,        if (q2 < maxDenominator) {,0.16667,0,,0
org/apache/commons/math3/fraction/BigFraction,1,335,    },0.16667,0,,0
org/apache/commons/math3/fraction/BigFraction,1,271,        throws FractionConversionException {,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,272,        long overflow = Integer.MAX_VALUE;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,273,        double r0 = value;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,274,        long a0 = (long) FastMath.floor(r0);,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,275,        if (a0 > overflow) {,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,281,        if (FastMath.abs(a0 - value) < epsilon) {,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,287,        long p0 = 1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,288,        long q0 = 0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,289,        long p1 = a0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,290,        long q1 = 1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,292,        long p2 = 0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,293,        long q2 = 1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,295,        int n = 0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,296,        boolean stop = false;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,298,            ++n;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,299,            final double r1 = 1.0 / (r0 - a0);,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,300,            final long a1 = (long) FastMath.floor(r1);,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,301,            p2 = (a1 * p1) + p0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,302,            q2 = (a1 * q1) + q0;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,303,            if ((p2 > overflow) || (q2 > overflow)) {,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,309,            final double convergent = (double) p2 / (double) q2;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,310,            if ((n < maxIterations) &&,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,313,                p0 = p1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,314,                p1 = p2;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,315,                q0 = q1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,316,                q1 = q2;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,317,                a0 = a1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,318,                r0 = r1;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,320,                stop = true;,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,322,        } while (!stop);,0.14286,0,,0
org/apache/commons/math3/fraction/BigFraction,1,324,        if (n >= maxIterations) {,0.14286,0,,0
org/apache/commons/math3/util/FastMath,1,3352,            return x*y;,0.07273,0,,0
org/apache/commons/math3/fraction/BigFraction,1,768,        return denominator.intValue();,0.06667,0,,0
org/apache/commons/math3/fraction/BigFraction,1,801,        return numerator.intValue();,0.0625,0,,0
org/apache/commons/math3/util/FastMath,1,3338,        if (x != x) { // NaN,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3342,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3346,        y = (long) x;,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3347,        if (x < 0 && y != x) {,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3351,        if (y == 0) {,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3355,        return y;,0.04819,0,,0
org/apache/commons/math3/util/FastMath,1,3024,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,0.0404,0,,0
org/apache/commons/math3/fraction/Fraction,1,220,                p0 = p1;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,221,                p1 = p2;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,222,                q0 = q1;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,223,                q1 = q2;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,224,                a0 = a1;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,225,                r0 = r1;,0.03704,0,,0
org/apache/commons/math3/fraction/Fraction,1,366,        return denominator;,0.03571,0,,0
org/apache/commons/math3/fraction/Fraction,1,374,        return numerator;,0.03448,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,370,    private LocalizedFormats(final String sourceFormat) {,0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,371,        this.sourceFormat = sourceFormat;,0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,372,    },0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,51,"    BANDWIDTH(""bandwidth ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,75,"    CONSTRAINT(""constraint""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,76,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,77,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,79,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,80,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,81,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,82,"    CROSSOVER_RATE(""crossover rate ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,83,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,84,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,85,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,86,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,87,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,88,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,89,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,90,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,91,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,92,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,93,"    ELITISM_RATE(""elitism rate ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,94,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,95,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,96,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,97,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,98,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,99,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,100,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,101,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,102,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,103,"    EVALUATION(""evaluation""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,104,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,105,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,106,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,107,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,108,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,109,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,110,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,111,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,112,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,113,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,114,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,115,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,116,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,117,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,118,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,119,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,120,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,121,"    INDEX(""index ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,122,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,123,"    INFINITE_BOUND(""interval bounds must be finite""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,124,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,125,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,126,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,127,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,128,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,129,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,130,    @Deprecated,0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,132,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,133,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,134,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,135,"    DIMENSION(""dimension ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,136,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,137,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,138,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,139,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,140,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,141,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,142,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,143,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,144,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,145,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,146,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,147,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,148,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,149,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,150,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,151,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,152,"    ITERATIONS(""iterations""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,153,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,154,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,155,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,156,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,157,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,158,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,159,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,160,"    EVALUATIONS(""evaluations""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,161,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,162,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,163,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,164,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,165,"    MUTATION_RATE(""mutation rate ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,166,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,167,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,168,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,169,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,170,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,171,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,172,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,173,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,174,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,175,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,176,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,177,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,178,"    START_POSITION(""start position ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,179,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,180,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,181,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,182,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,183,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,184,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,185,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,186,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,187,"    NORM(""Norm ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,188,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,189,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,190,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,191,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,192,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,193,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,194,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,195,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,196,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,197,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,198,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,199,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,200,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,201,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,202,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,203,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,204,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,205,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,206,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,207,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,208,"    EXPONENT(""exponent ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,209,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,210,"    LENGTH(""length ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,211,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,212,"    MEAN(""mean ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,213,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,214,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,215,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,216,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,217,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,218,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,219,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,220,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,221,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,222,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,223,"    SCALE(""scale ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,224,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,225,"    SHAPE(""shape ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,226,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,227,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,228,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,229,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,230,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,231,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,232,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,233,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,234,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,235,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,236,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,237,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,238,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,239,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,240,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,241,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,242,"    NO_BIN_SELECTED(""no bin selected""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,243,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,244,"    NO_DATA(""no data""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,245,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,246,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,247,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,248,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,249,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,250,"    NO_RESULT_AVAILABLE(""no result available""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,251,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,252,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,253,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,254,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,255,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,256,"    DENOMINATOR(""denominator""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,257,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,258,"    FRACTION(""fraction""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,259,"    FUNCTION(""function""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,260,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,261,"    INPUT_ARRAY(""input array""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,262,"    NUMERATOR(""numerator""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,263,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,264,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,265,"    REAL_FORMAT(""real format""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,266,"    WHOLE_FORMAT(""whole format""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,267,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,268,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,269,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,270,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,271,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,272,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,273,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,274,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,275,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,276,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,277,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,278,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,279,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,280,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,281,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,282,"    OUT_OF_RANGE(""out of range""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,283,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,284,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,285,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,286,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,287,"    OVERFLOW(""overflow""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,288,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,289,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,290,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,291,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,292,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,293,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,294,"    POLYNOMIAL(""polynomial""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,295,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,296,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,297,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,298,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,299,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,300,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,301,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,302,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,303,"    ROW_INDEX(""row index ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,304,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,305,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,306,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,307,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,308,"    SIMPLE_MESSAGE(""{0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,309,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,310,"    SINGULAR_OPERATOR(""operator is singular""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,311,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,312,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,313,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,314,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,354,"    ZERO_NORM(""zero norm""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0.02186,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,39,public enum LocalizedFormats implements Localizable {,0.02186,0,,0
org/apache/commons/math3/fraction/Fraction,1,236,            this.numerator = (int) p2;,0.02041,0,,0
org/apache/commons/math3/fraction/Fraction,1,237,            this.denominator = (int) q2;,0.02041,0,,0
org/apache/commons/math3/fraction/Fraction,1,235,        if (q2 < maxDenominator) {,0.02,0,,0
org/apache/commons/math3/fraction/Fraction,1,243,    },0.02,0,,0
org/apache/commons/math3/fraction/Fraction,1,227,                stop = true;,0.01961,0,,0
org/apache/commons/math3/fraction/Fraction,1,231,        if (n >= maxIterations) {,0.01961,0,,0
org/apache/commons/math3/fraction/Fraction,1,195,        long p0 = 1;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,196,        long q0 = 0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,197,        long p1 = a0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,198,        long q1 = 1;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,200,        long p2 = 0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,201,        long q2 = 1;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,203,        int n = 0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,204,        boolean stop = false;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,206,            ++n;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,207,            double r1 = 1.0 / (r0 - a0);,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,208,            long a1 = (long)FastMath.floor(r1);,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,209,            p2 = (a1 * p1) + p0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,210,            q2 = (a1 * q1) + q0;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,212,            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,218,            double convergent = (double)p2 / (double)q2;,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,219,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,229,        } while (!stop);,0.01923,0,,0
org/apache/commons/math3/fraction/Fraction,1,180,    {,0.01786,0,,0
org/apache/commons/math3/fraction/Fraction,1,181,        long overflow = Integer.MAX_VALUE;,0.01786,0,,0
org/apache/commons/math3/fraction/Fraction,1,182,        double r0 = value;,0.01786,0,,0
org/apache/commons/math3/fraction/Fraction,1,183,        long a0 = (long)FastMath.floor(r0);,0.01786,0,,0
org/apache/commons/math3/fraction/Fraction,1,184,        if (FastMath.abs(a0) > overflow) {,0.01786,0,,0
org/apache/commons/math3/fraction/Fraction,1,189,        if (FastMath.abs(a0 - value) < epsilon) {,0.01786,0,,0
org/apache/commons/math3/util/FastMath,1,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,115,    private static final double LN_QUICK_COEF[][] = {,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,128,    private static final double LN_HI_PREC_COEF[][] = {,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,141,    private static final double SINE_TABLE_A[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,160,    private static final double SINE_TABLE_B[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,179,    private static final double COSINE_TABLE_A[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,198,    private static final double COSINE_TABLE_B[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,218,    private static final double TANGENT_TABLE_A[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,237,    private static final double TANGENT_TABLE_B[] =,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,256,    private static final long RECIP_2PI[] = new long[] {,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,277,    private static final long PI_O_4_BITS[] = new long[] {,0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01581,0,,0
org/apache/commons/math3/util/FastMath,1,3001,        final long l = x >>> 63;,0.01449,0,,0
org/apache/commons/math3/util/FastMath,1,3006,        return (x ^ (~l + 1)) + l;,0.01449,0,,0
org/apache/commons/math3/fraction/BigFraction,1,120,"    public BigFraction(BigInteger num, BigInteger den) {",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,121,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,122,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,123,        if (BigInteger.ZERO.equals(den)) {,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,126,        if (BigInteger.ZERO.equals(num)) {,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,127,            numerator   = BigInteger.ZERO;,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,128,            denominator = BigInteger.ONE;,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,132,            final BigInteger gcd = num.gcd(den);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,133,            if (BigInteger.ONE.compareTo(gcd) < 0) {,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,134,                num = num.divide(gcd);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,135,                den = den.divide(gcd);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,139,            if (BigInteger.ZERO.compareTo(den) > 0) {,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,145,            numerator   = num;,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,146,            denominator = den;,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,149,    },0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,369,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,370,    },0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,384,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,385,    },0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,45,    public static final BigFraction TWO = new BigFraction(2);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,48,    public static final BigFraction ONE = new BigFraction(1);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,51,    public static final BigFraction ZERO = new BigFraction(0);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,54,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,57,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,60,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,63,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,66,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,69,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,72,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,75,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,78,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,81,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,84,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",0.0119,0,,0
org/apache/commons/math3/fraction/BigFraction,1,90,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0.0119,0,,0
org/apache/commons/math3/util/MathUtils,1,251,        if (o == null) {,0.0119,0,,0
org/apache/commons/math3/util/MathUtils,1,254,    },0.0119,0,,0
org/apache/commons/math3/fraction/Fraction,1,261,"    public Fraction(int num, int den) {",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,262,        if (den == 0) {,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,266,        if (den < 0) {,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,276,"        final int d = ArithmeticUtils.gcd(num, den);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,277,        if (d > 1) {,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,278,            num /= d;,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,279,            den /= d;,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,283,        if (den < 0) {,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,287,        this.numerator   = num;,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,288,        this.denominator = den;,0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,289,    },0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,42,"    public static final Fraction TWO = new Fraction(2, 1);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,45,"    public static final Fraction ONE = new Fraction(1, 1);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",0.00472,0,,0
org/apache/commons/math3/fraction/Fraction,1,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,253,        int a = p;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,254,        int b = q;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,255,        if (a == 0 ||,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,257,            if (a == Integer.MIN_VALUE ||,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,262,            return FastMath.abs(a + b);,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,265,        long al = a;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,266,        long bl = b;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,267,        boolean useLong = false;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,268,        if (a < 0) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,269,            if(Integer.MIN_VALUE == a) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,272,                a = -a;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,274,            al = -al;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,276,        if (b < 0) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,284,        if (useLong) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,306,"        return gcdPositive(a, b);",0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,331,        if (a == 0) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,334,        else if (b == 0) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,339,        final int aTwos = Integer.numberOfTrailingZeros(a);,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,340,        a >>= aTwos;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,341,        final int bTwos = Integer.numberOfTrailingZeros(b);,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,342,        b >>= bTwos;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,343,"        final int shift = Math.min(aTwos, bTwos);",0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,351,        while (a != b) {,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,352,            final int delta = a - b;,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,353,"            b = Math.min(a, b);",0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,354,            a = Math.abs(delta);,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,357,            a >>= Integer.numberOfTrailingZeros(a);,0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,358,        },0.00472,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,361,        return a << shift;,0.00472,0,,0
org/apache/commons/math3/util/FastMath,1,2991,        final int i = x >>> 31;,0.00472,0,,0
org/apache/commons/math3/util/FastMath,1,2992,        return (x ^ (~i + 1)) + i;,0.00472,0,,0
org/apache/commons/math3/fraction/BigFraction,1,108,"        this(num, BigInteger.ONE);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,109,    },0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,124,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,140,                num = num.negate();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,141,                den = den.negate();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,172,    public BigFraction(final double value) throws MathIllegalArgumentException {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,173,        if (Double.isNaN(value)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,174,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,176,        if (Double.isInfinite(value)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,177,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,181,        final long bits     = Double.doubleToLongBits(value);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,182,        final long sign     = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,183,        final long exponent = bits & 0x7ff0000000000000L;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,184,        long m              = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,185,        if (exponent != 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,187,            m |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,189,        if (sign != 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,190,            m = -m;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,192,        int k = ((int) (exponent >> 52)) - 1075;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,193,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,194,            m = m >> 1;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,195,            ++k;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,198,        if (k < 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,199,            numerator   = BigInteger.valueOf(m);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,200,            denominator = BigInteger.ZERO.flipBit(-k);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,202,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,203,            denominator = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,206,    },0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,232,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,233,    },0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,276,"            throw new FractionConversionException(value, a0, 1l);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,282,            numerator = BigInteger.valueOf(a0);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,283,            denominator = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,284,            return;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,325,"            throw new FractionConversionException(value, maxIterations);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,396,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,397,    },0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,411,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,412,    },0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,435,        if (numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,436,            return ZERO; // normalize zero.,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,439,"        return new BigFraction(numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,450,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,466,        MathUtils.checkNotNull(bg);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,467,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,481,        return add(BigInteger.valueOf(i));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,495,        return add(BigInteger.valueOf(l));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,510,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,511,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,513,        if (ZERO.equals(fraction)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,514,            return this;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,517,        BigInteger num = null;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,518,        BigInteger den = null;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,520,        if (denominator.equals(fraction.denominator)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,521,            num = numerator.add(fraction.numerator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,522,            den = denominator;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,524,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,525,            den = denominator.multiply(fraction.denominator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,527,"        return new BigFraction(num, den);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,544,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,563,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,582,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,597,        BigInteger nOd = numerator.multiply(object.denominator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,598,        BigInteger dOn = denominator.multiply(object.numerator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,599,        return nOd.compareTo(dOn);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,614,        if (bg == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,615,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,617,        if (BigInteger.ZERO.equals(bg)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,618,            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,620,"        return new BigFraction(numerator, denominator.multiply(bg));",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,634,        return divide(BigInteger.valueOf(i));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,648,        return divide(BigInteger.valueOf(l));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,663,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,664,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,666,        if (BigInteger.ZERO.equals(fraction.numerator)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,667,            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,670,        return multiply(fraction.reciprocal());,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,684,        double result = numerator.doubleValue() / denominator.doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,685,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,688,"            int shift = Math.max(numerator.bitLength(),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,690,            result = numerator.shiftRight(shift).doubleValue() /,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,693,        return result;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,713,        boolean ret = false;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,715,        if (this == other) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,716,            ret = true;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,717,        } else if (other instanceof BigFraction) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,718,            BigFraction rhs = ((BigFraction) other).reduce();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,719,            BigFraction thisOne = this.reduce();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,720,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,723,        return ret;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,737,        float result = numerator.floatValue() / denominator.floatValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,738,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,741,"            int shift = Math.max(numerator.bitLength(),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,743,            result = numerator.shiftRight(shift).floatValue() /,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,746,        return result;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,757,        return denominator;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,779,        return denominator.longValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,790,        return numerator;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,812,        return numerator.longValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,825,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,839,        return numerator.divide(denominator).intValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,853,        return numerator.divide(denominator).longValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,867,        if (bg == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,868,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,870,"        return new BigFraction(bg.multiply(numerator), denominator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,884,        return multiply(BigInteger.valueOf(i));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,898,        return multiply(BigInteger.valueOf(l));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,912,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,913,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,915,        if (numerator.equals(BigInteger.ZERO) ||,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,917,            return ZERO;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,919,"        return new BigFraction(numerator.multiply(fraction.numerator),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,932,"        return new BigFraction(numerator.negate(), denominator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,944,        return multiply(ONE_HUNDRED).doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,959,        if (exponent < 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,960,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,962,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,976,        if (exponent < 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,977,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,980,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,995,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,996,            final BigInteger eNeg = exponent.negate();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,997,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1000,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1015,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1027,"        return new BigFraction(denominator, numerator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1039,        final BigInteger gcd = numerator.gcd(denominator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1040,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1054,        if (bg == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1055,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1057,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1070,        return subtract(BigInteger.valueOf(i));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1083,        return subtract(BigInteger.valueOf(l));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1097,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1098,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1100,        if (ZERO.equals(fraction)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1101,            return this;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1104,        BigInteger num = null;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1105,        BigInteger den = null;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1106,        if (denominator.equals(fraction.denominator)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1107,            num = numerator.subtract(fraction.numerator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1108,            den = denominator;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1110,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1111,            den = denominator.multiply(fraction.denominator);,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1113,"        return new BigFraction(num, den);",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1128,        String str = null;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1129,        if (BigInteger.ONE.equals(denominator)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1130,            str = numerator.toString();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1131,        } else if (BigInteger.ZERO.equals(numerator)) {,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1132,"            str = ""0"";",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1134,"            str = numerator + "" / "" + denominator;",0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1136,        return str;,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,1141,        return BigFractionField.getInstance();,0.0,0,,0
org/apache/commons/math3/fraction/BigFraction,1,40,public class BigFraction,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,1,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,1,42,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,1,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,1,51,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,1,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/ZeroException,1,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/ZeroException,1,38,    },0.0,0,,0
org/apache/commons/math3/exception/ZeroException,1,47,"        super(specific, INTEGER_ZERO, arguments);",0.0,0,,0
org/apache/commons/math3/exception/ZeroException,1,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,1,51,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,1,52,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,1,53,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,1,33,    protected static final Integer INTEGER_ZERO = Integer.valueOf(0);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,1,59,        return argument;,0.0,0,,0
org/apache/commons/math3/fraction/FractionConversionException,1,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0.0,0,,0
org/apache/commons/math3/fraction/FractionConversionException,1,43,    },0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,1,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,1,38,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,60,        super(cause);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,63,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,1,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,1,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,102,"        this(value, DEFAULT_EPSILON, 100);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,103,    },0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,124,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,125,    },0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,185,"            throw new FractionConversionException(value, a0, 1l);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,190,            this.numerator = (int) a0;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,191,            this.denominator = 1;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,192,            return;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,232,"            throw new FractionConversionException(value, maxIterations);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,251,"        this(num, 1);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,252,    },0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,263,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,267,            if (num == Integer.MIN_VALUE ||,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,269,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,272,            num = -num;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,273,            den = -den;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,284,            num = -num;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,285,            den = -den;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,297,        if (numerator >= 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,298,            ret = this;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,300,            ret = negate();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,302,        return ret;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,312,        long nOd = ((long) numerator) * object.denominator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,313,        long dOn = ((long) denominator) * object.numerator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,314,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,324,        return (double)numerator / (double)denominator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,338,        if (this == other) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,339,            return true;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,341,        if (other instanceof Fraction) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,344,            Fraction rhs = (Fraction)other;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,345,            return (numerator == rhs.numerator) &&,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,348,        return false;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,358,        return (float)doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,383,        return 37 * (37 * 17 + numerator) + denominator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,393,        return (int)doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,403,        return (long)doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,411,        if (numerator==Integer.MIN_VALUE) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,412,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,414,"        return new Fraction(-numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,422,"        return new Fraction(denominator, numerator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,436,"        return addSub(fraction, true /* add */);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,445,"        return new Fraction(numerator + i * denominator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,459,"        return addSub(fraction, false /* subtract */);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,468,"        return new Fraction(numerator - i * denominator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,482,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,483,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,486,        if (numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,487,            return isAdd ? fraction : fraction.negate();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,489,        if (fraction.numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,490,            return this;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,494,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,495,        if (d1==1) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,497,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,498,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,499,            return new Fraction,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,507,        BigInteger uvp = BigInteger.valueOf(numerator),0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,509,        BigInteger upv = BigInteger.valueOf(fraction.numerator),0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,511,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,514,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,515,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,518,        BigInteger w = t.divide(BigInteger.valueOf(d2));,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,519,        if (w.bitLength() > 31) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,520,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,523,"        return new Fraction (w.intValue(),",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,539,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,540,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,542,        if (numerator == 0 || fraction.numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,543,            return ZERO;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,547,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,548,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,549,        return getReducedFraction,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,560,"        return new Fraction(numerator * i, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,574,        if (fraction == null) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,575,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,577,        if (fraction.numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,578,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,581,        return multiply(fraction.reciprocal());,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,590,"        return new Fraction(numerator, denominator * i);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,602,        return 100 * doubleValue();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,617,        if (denominator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,618,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,621,        if (numerator==0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,622,            return ZERO; // normalize zero.,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,625,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,626,            numerator/=2; denominator/=2;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,628,        if (denominator < 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,629,            if (numerator==Integer.MIN_VALUE ||,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,631,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,634,            numerator = -numerator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,635,            denominator = -denominator;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,638,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,639,        numerator /= gcd;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,640,        denominator /= gcd;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,641,"        return new Fraction(numerator, denominator);",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,655,        String str = null;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,656,        if (denominator == 1) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,657,            str = Integer.toString(numerator);,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,658,        } else if (numerator == 0) {,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,659,"            str = ""0"";",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,661,"            str = numerator + "" / "" + denominator;",0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,663,        return str;,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,668,        return FractionField.getInstance();,0.0,0,,0
org/apache/commons/math3/fraction/Fraction,1,37,public class Fraction,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,37,        super();,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,38,    },0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,52,        long s = (long)x + (long)y;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,53,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,54,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,56,        return (int)s;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,70,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,102,"       return CombinatoricsUtils.binomialCoefficient(n, k);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,133,"        return CombinatoricsUtils.binomialCoefficientDouble(n, k);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,160,"        return CombinatoricsUtils.binomialCoefficientLog(n, k);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,189,        return CombinatoricsUtils.factorial(n);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,207,         return CombinatoricsUtils.factorialDouble(n);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,219,        return CombinatoricsUtils.factorialLog(n);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,259,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,270,                useLong = true;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,277,            if (Integer.MIN_VALUE == b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,278,                useLong = true;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,280,                b = -b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,282,            bl = -bl;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,285,            if(al == bl) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,286,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,289,            long blbu = bl;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,290,            bl = al;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,291,            al = blbu % al;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,292,            if (al == 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,293,                if (bl > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,294,"                    throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,297,                return (int) bl;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,299,            blbu = bl;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,302,            b = (int) al;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,303,            a = (int) (blbu % al);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,332,            return b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,335,            return a;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,394,        long u = p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,395,        long v = q;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,396,        if ((u == 0) || (v == 0)) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,397,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,398,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,401,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,408,        if (u > 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,409,            u = -u;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,411,        if (v > 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,412,            v = -v;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,415,        int k = 0;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,416,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,418,            u /= 2;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,419,            v /= 2;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,420,            k++; // cast out twos.,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,422,        if (k == 63) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,423,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,428,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,434,            while ((t & 1) == 0) { // while t is even..,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,435,                t /= 2; // cast out twos,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,438,            if (t > 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,439,                u = -t;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,441,                v = t;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,444,            t = (v - u) / 2;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,447,        } while (t != 0);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,448,        return -u * (1L << k); // gcd is u*2^k,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,474,        if (a == 0 || b == 0){,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,475,            return 0;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,477,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,478,        if (lcm == Integer.MIN_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,479,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,482,        return lcm;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,508,        if (a == 0 || b == 0){,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,509,            return 0;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,511,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,512,        if (lcm == Long.MIN_VALUE){,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,513,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,516,        return lcm;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,530,        long m = ((long)x) * ((long)y);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,531,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,532,            throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,534,        return (int)m;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,549,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,551,"            ret = mulAndCheck(b, a);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,553,            if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,554,                if (b < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,556,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,557,                        ret = a * b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,559,                        throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,561,                } else if (b > 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,563,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,564,                        ret = a * b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,566,                        throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,571,                    ret = 0;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,573,            } else if (a > 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,578,                if (a <= Long.MAX_VALUE / b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,579,                    ret = a * b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,581,                    throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,585,                ret = 0;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,588,        return ret;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,602,        long s = (long)x - (long)y;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,603,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,604,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,606,        return (int)s;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,621,        if (b == Long.MIN_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,622,            if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,623,                ret = a - b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,625,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,629,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,631,        return ret;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,643,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,644,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,647,        int result = 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,648,        int k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,649,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,650,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,651,                result *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,653,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,654,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,657,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,669,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,670,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,673,        int result = 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,674,        int k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,675,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,676,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,677,                result *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,679,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,680,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,683,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,695,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,696,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,699,        long result = 1l;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,700,        long k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,701,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,702,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,703,                result *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,705,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,706,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,709,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,721,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,725,        long result = 1l;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,726,        long k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,727,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,728,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,729,                result *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,731,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,732,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,735,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,747,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,751,        return k.pow(e);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,763,        if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,764,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,767,        BigInteger result = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,768,        BigInteger k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,769,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,770,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,771,                result = result.multiply(k2p);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,773,            k2p = k2p.multiply(k2p);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,774,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,777,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,790,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,791,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,794,        BigInteger result = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,795,        BigInteger k2p    = k;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,796,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,797,            if (e.testBit(0)) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,798,                result = result.multiply(k2p);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,800,            k2p = k2p.multiply(k2p);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,801,            e = e.shiftRight(1);,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,804,        return result;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,829,"        return CombinatoricsUtils.stirlingS2(n, k);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,846,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,848,"            ret = addAndCheck(b, a, pattern);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,852,            if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,853,                if (b < 0) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,855,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,856,                        ret = a + b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,858,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,862,                    ret = a + b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,869,                if (a <= Long.MAX_VALUE - b) {,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,870,                    ret = a + b;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,872,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,876,        return ret;,0.0,0,,0
org/apache/commons/math3/util/ArithmeticUtils,1,886,        return (n > 0) && ((n & (n - 1)) == 0);,0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,1,37,"        super(value, INTEGER_ZERO, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,1,38,    },0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,1,47,"        super(specific, value, INTEGER_ZERO, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,1,48,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,1,85,        return min;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3794,    private static class lnMant {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3808,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3810,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,359,    private FastMath() {},0.0,0,,0
org/apache/commons/math3/util/FastMath,1,371,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,372,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,374,        long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,375,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,376,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,385,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,393,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,394,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,402,      if (x > 20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,403,          if (x >= LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,405,              final double t = exp(0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,406,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,408,              return 0.5 * exp(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,410,      } else if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,411,          if (x <= -LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,413,              final double t = exp(-0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,414,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,416,              return 0.5 * exp(-x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,420,      final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,421,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,422,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,424,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,426,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,427,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,429,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,430,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,431,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,434,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,435,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,436,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,437,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,440,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,442,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,445,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,446,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,447,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,448,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,449,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,450,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,452,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,453,      result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,454,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,462,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,463,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,464,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,472,      if (x > 20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,473,          if (x >= LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,475,              final double t = exp(0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,476,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,478,              return 0.5 * exp(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,480,      } else if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,481,          if (x <= -LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,483,              final double t = exp(-0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,484,              return (-0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,486,              return -0.5 * exp(-x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,490,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,491,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,494,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,495,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,496,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,501,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,502,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,503,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,505,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,506,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,508,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,509,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,510,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,513,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,514,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,515,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,516,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,519,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,521,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,523,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,524,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,527,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,528,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,529,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,530,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,531,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,532,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,534,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,535,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,536,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,538,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,539,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,541,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,542,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,545,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,546,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,547,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,548,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,549,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,550,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,551,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,553,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,554,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,555,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,557,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,560,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,561,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,564,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,565,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,566,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,567,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,568,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,569,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,571,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,572,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,575,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,576,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,579,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,587,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,589,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,590,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,599,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,600,          return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,603,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,604,          return -1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,607,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,608,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,611,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,612,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,613,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,617,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,618,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,620,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,622,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,623,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,626,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,627,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,628,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,629,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,630,          na = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,633,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,634,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,635,          temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,636,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,637,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,639,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,640,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,641,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,644,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,645,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,646,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,647,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,650,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,653,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,655,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,657,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,658,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,660,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,662,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,664,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,665,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,668,          double na = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,669,          double nb = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,672,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,673,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,674,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,675,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,676,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,678,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,679,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,680,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,683,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,684,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,685,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,686,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,689,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,692,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,694,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,696,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,699,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,700,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,703,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,711,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,721,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,722,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,726,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,727,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,730,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,732,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,733,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,734,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,735,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,737,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,741,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,749,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,750,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,751,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,752,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,756,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,757,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,759,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,760,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,762,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,763,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,764,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,765,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,767,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,771,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,780,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,789,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,797,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,805,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,813,        return Math.random();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,837,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,856,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,857,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,859,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,860,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,861,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,862,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,864,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,867,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,869,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,870,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,871,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,872,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,874,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,877,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,879,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,880,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,881,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,882,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,884,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,887,            intVal++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,889,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,890,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,892,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,894,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,896,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,897,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,898,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,899,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,901,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,904,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,905,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,912,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,913,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,914,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,920,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,929,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,930,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,931,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,932,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,933,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,940,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,941,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,947,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,949,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,950,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,952,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,955,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,957,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,958,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,961,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,969,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,978,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,979,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,982,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,985,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,986,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,987,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,988,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,990,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,991,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,992,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,993,                return ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1000,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1002,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1003,            x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1004,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1008,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1009,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1010,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1012,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1013,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1014,            tempA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1016,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1017,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1018,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1020,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1025,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1026,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1027,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1028,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1029,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1030,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1032,        double za = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1033,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1034,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1035,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1037,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1038,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1039,        zb += za - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1040,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1043,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1045,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1046,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1047,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1049,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1050,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1051,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1053,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1054,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1055,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1059,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1060,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1061,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1063,        temp = ya + za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1065,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1066,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1068,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1070,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1071,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1073,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1075,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1076,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1078,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1080,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1081,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1082,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1083,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1084,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1085,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1086,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1088,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1089,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1090,            zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1092,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1103,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1104,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1107,            ya = -ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1108,            yb = -rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1111,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1112,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1113,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1116,        return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1126,"        return log(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1136,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1137,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1139,        long bits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1142,        if (((bits & 0x8000000000000000L) != 0 || x != x) && x != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1143,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1144,                hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1147,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1151,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1152,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1153,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1156,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1160,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1162,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1164,            if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1166,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1167,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1170,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1174,            bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1175,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1176,                --exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1177,                bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1182,        if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1187,            double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1188,            double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1189,            double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1190,            double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1191,            double ab = xa - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1192,            xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1193,            xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1195,            final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1196,            double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1197,            double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1199,            for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1201,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1202,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1204,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1205,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1206,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1209,                final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1210,                aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1211,                ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1213,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1214,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1215,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1219,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1220,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1222,            tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1223,            ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1224,            yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1226,            return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1230,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1241,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1243,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1244,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1246,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1248,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1249,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1250,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1251,            double xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1252,            double xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1255,            final double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1256,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1257,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1258,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1261,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1262,            double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1263,            double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1265,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1267,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1268,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1270,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1271,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1272,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1275,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1276,                aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1277,                ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1279,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1280,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1281,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1285,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1286,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1294,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1295,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1296,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1299,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1300,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1301,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1302,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1303,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1304,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1305,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1322,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1323,        double b = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1324,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1325,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1326,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1327,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1329,        c = a + lnza;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1330,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1331,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1332,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1334,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1335,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1336,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1337,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1339,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1340,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1341,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1342,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1344,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1345,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1346,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1347,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1349,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1350,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1351,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1354,        return a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1364,        if (x == -1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1365,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1368,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1369,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1372,        if (x > 1e-6 ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1374,            final double xpa = 1 + x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1375,            final double xpb = -(xpa - 1 - x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1377,            final double[] hiPrec = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1378,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1379,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1380,                return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1385,            final double fx1 = xpb / xpa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1386,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1387,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1390,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1391,            return y * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1400,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1402,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1403,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1404,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1407,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1408,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1409,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1411,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1412,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1414,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1434,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1445,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1447,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1448,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1451,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1452,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1456,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1457,            long bits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1458,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1460,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1462,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1463,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1466,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1467,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1471,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1472,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1474,            if (y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1478,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1481,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1482,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1483,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1485,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1486,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1488,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1492,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1493,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1494,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1497,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1498,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1500,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1504,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1505,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1506,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1509,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1510,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1511,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1512,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1515,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1518,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1519,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1520,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1521,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1524,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1528,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1530,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1531,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1534,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1535,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1537,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1542,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1544,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1545,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1548,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1550,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1552,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1559,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1560,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1561,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1562,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1563,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1564,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1565,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1566,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1567,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1571,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1572,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1573,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1576,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1577,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1580,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1581,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1582,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1583,        lna = tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1586,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1587,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1589,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1590,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1592,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1593,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1594,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1595,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1596,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1597,        z = z * lnb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1599,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1601,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1615,        if (e == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1616,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1617,        } else if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1618,            e = -e;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1619,            d = 1.0 / d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1624,        final int splitFactor = 0x8000001;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1625,        final double cd       = splitFactor * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1626,        final double d1High   = cd - (cd - d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1627,        final double d1Low    = d - d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1630,        double resultHigh = 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1631,        double resultLow  = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1634,        double d2p     = d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1635,        double d2pHigh = d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1636,        double d2pLow  = d1Low;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1638,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1640,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1643,                final double tmpHigh = resultHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1644,                final double cRH     = splitFactor * resultHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1645,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1646,                final double rHL     = resultHigh - rHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1647,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1648,                resultHigh = tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1649,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1654,            final double tmpHigh = d2pHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1655,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1656,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1657,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1658,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1659,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1660,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1661,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1662,            d2p     = d2pHigh + d2pLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1664,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1666,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1668,        return resultHigh + resultLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1680,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1682,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1683,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1684,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1685,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1688,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1690,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1700,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1702,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1703,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1704,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1705,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1706,        p *= x2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1708,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1719,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1720,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1723,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1724,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1725,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1726,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1729,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1730,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1731,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1732,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1735,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1736,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1737,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1738,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1764,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1765,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1767,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1768,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1769,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1770,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1771,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1773,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1774,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1775,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1776,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1777,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1779,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1794,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1821,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1822,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1824,            c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1825,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1826,            a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1827,            b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1830,        result = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1832,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1843,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1844,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1846,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1847,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1848,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1850,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1863,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1864,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1867,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1868,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1869,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1870,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1873,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1874,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1875,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1876,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1879,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1880,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1881,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1882,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1907,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1908,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1911,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1912,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1913,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1914,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1915,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1917,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1918,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1919,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1920,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1921,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1923,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1924,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1926,        double sina = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1927,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1931,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1933,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1934,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1935,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1936,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1937,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1939,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1940,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1941,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1942,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1943,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1945,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1946,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1948,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1949,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1951,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1953,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1954,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1968,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1971,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1972,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1973,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1975,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1976,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1977,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1980,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1981,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1982,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1984,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1987,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1988,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1989,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1992,            err += xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,1995,        return est+err;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2012,        long inbits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2013,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2016,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2017,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2020,        exponent++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2021,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2027,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2028,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2030,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2031,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2032,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2033,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2034,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2036,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2037,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2038,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2042,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2043,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2045,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2046,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2048,        long ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2049,        long bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2050,        long bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2051,        long ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2053,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2054,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2056,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2057,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2058,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2061,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2063,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2066,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2067,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2069,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2070,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2072,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2075,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2077,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2081,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2082,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2083,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2084,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2085,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2088,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2090,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2091,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2092,        prodB += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2093,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2095,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2097,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2101,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2102,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2104,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2105,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2106,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2108,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2120,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2123,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2124,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2125,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2128,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2129,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2131,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2132,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2134,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2135,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2136,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2137,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2139,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2140,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2142,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2143,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2144,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2147,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2149,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2152,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2153,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2155,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2156,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2158,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2161,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2163,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2167,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2168,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2169,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2170,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2171,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2174,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2176,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2177,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2178,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2179,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2181,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2183,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2187,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2188,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2189,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2190,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2191,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2192,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2193,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2196,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2198,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2199,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2200,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2201,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2203,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2205,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2209,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2210,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2212,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2213,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2216,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2217,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2218,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2219,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2228,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2229,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2231,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2234,        xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2235,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2236,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2237,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2241,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2242,            long bits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2243,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2244,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2246,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2249,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2250,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2254,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2258,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2259,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2260,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2261,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2262,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2263,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2264,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2265,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2266,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2267,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2270,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2271,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2274,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2276,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2278,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2280,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2282,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2284,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2295,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2298,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2299,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2300,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2303,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2304,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2308,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2309,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2313,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2314,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2315,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2316,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2317,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2318,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2319,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2320,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2321,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2322,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2328,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2330,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2332,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2334,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2336,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2338,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2349,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2350,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2353,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2354,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2355,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2356,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2360,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2361,            long bits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2362,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2363,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2365,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2368,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2369,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2373,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2374,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2378,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2379,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2380,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2381,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2382,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2383,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2384,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2385,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2386,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2387,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2390,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2392,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2393,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2395,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2396,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2397,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2399,            xa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2400,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2401,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2402,            negative ^= true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2406,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2407,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2409,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2412,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2413,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2416,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2425,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2435,        boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2438,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2439,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2442,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2444,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2445,            xb = -xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2446,            negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2449,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2450,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2454,        if (xa < 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2455,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2457,            final double oneOverXa = 1 / xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2458,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2460,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2461,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2462,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2464,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2465,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2466,        epsA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2469,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2470,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2471,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2472,        xa = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2473,        xb += yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2476,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2479,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2481,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2482,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2483,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2484,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2485,            double za = 1d + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2486,            double zb = -(za - 1d - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2487,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2488,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2489,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2490,            za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2492,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2493,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2495,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2496,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2497,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2499,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2500,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2501,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2504,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2506,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2507,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2511,        epsA = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2512,        epsB = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2515,        final double epsA2 = epsA * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2526,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2527,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2528,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2529,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2530,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2531,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2532,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2535,        ya = epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2537,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2538,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2539,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2542,        yb += epsB / (1d + epsA * epsA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2545,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2546,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2547,        temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2548,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2549,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2551,        double result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2553,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2555,            final double resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2556,            final double pia = 1.5707963267948966 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2557,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2559,            za = pia - result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2560,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2561,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2563,            result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2567,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2568,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2571,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2581,        if (x != x || y != y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2582,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2585,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2586,            final double result = x * y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2587,            final double invx = 1d / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2588,            final double invy = 1d / y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2590,            if (invx == 0) { // X is infinite,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2591,                if (x > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2592,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2594,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2598,            if (x < 0 || invx < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2599,                if (y < 0 || invy < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2600,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2602,                    return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2605,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2611,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2612,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2613,                return Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2616,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2617,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2620,            return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2623,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2624,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2625,                return -Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2628,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2629,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2632,            return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2635,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2636,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2637,                return 0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2640,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2641,                return -0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2645,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2647,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2648,                return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2651,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2652,                return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2658,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2659,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2660,                return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2663,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2664,                return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2669,        final double r = y / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2670,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2671,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2674,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2675,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2678,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2679,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2681,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2683,        final double temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2684,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2685,        ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2687,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2688,"            ra = copySign(0d, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2692,"        final double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2694,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2702,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2703,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2706,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2707,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2710,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2711,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2714,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2715,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2718,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2719,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2725,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2726,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2727,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2730,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2731,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2734,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2735,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2737,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2738,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2740,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2741,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2742,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2746,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2747,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2748,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2749,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2752,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2755,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2758,      double r = x/y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2759,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2760,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2761,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2763,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2764,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2766,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2767,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2768,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2770,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2778,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2779,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2782,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2783,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2786,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2787,          return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2790,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2791,          return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2794,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2795,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2801,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2802,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2803,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2806,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2807,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2810,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2811,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2813,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2814,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2816,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2817,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2818,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2821,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2822,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2823,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2824,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2827,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2830,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2831,      y = ya+yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2832,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2835,      double r = y/x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2838,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2839,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2842,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2843,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2845,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2846,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2848,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2849,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2850,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2852,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2861,      long inbits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2862,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2863,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2865,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2866,          if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2867,              return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2871,          subnormal = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2872,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2873,          inbits = Double.doubleToRawLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2874,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2877,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2879,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2883,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2886,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2890,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2893,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2894,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2895,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2896,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2897,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2899,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2904,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2906,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2909,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2910,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2911,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2913,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2914,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2915,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2916,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2917,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2918,      za = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2920,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2921,      za = za * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2923,      double na = xs - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2924,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2925,      nb -= zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2927,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2930,      est *= p2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2932,      if (subnormal) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2933,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2936,      return est;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2946,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2947,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2951,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2952,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2954,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2955,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2957,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2958,        if (result == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2959,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2961,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2971,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2972,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2976,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2977,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2979,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2980,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,2982,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3015,        return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3033,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3034,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3036,        return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3045,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3046,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3048,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3060,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3061,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3065,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3066,            return d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3068,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3069,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3071,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3072,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3076,        final long bits = Double.doubleToRawLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3077,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3078,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3079,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3082,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3084,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3086,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3088,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3089,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3093,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3096,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3097,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3098,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3100,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3102,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3106,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3110,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3113,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3114,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3115,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3117,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3118,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3120,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3121,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3123,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3126,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3127,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3129,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3144,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3145,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3149,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3150,            return f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3152,        if (n < -277) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3153,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3155,        if (n > 276) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3156,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3160,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3161,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3162,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3163,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3166,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3168,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3170,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3172,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3173,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3177,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3180,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3181,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3182,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3184,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3186,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3190,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3194,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3197,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3198,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3199,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3201,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3202,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3204,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3205,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3207,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3210,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3211,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3213,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3253,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3254,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3255,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3256,            return direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3257,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3258,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3259,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3260,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3265,        final long bits = Double.doubleToRawLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3266,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3267,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3268,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3270,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3309,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3310,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3311,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3312,            return (float) direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3313,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3314,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3315,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3316,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3321,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3322,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3323,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3324,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3326,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3339,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3343,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3348,            y--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3365,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3366,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3369,        y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3370,        if (y == x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3371,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3374,        y += 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3376,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3377,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3380,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3388,        double y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3389,        double d = x - y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3391,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3392,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3393,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3395,            return y+1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3397,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3398,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3402,        long z = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3403,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3411,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3419,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3428,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3437,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3446,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3447,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3449,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3450,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3453,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3454,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3458,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3459,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3460,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3462,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3471,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3472,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3474,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3475,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3478,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3479,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3483,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3484,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3485,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3487,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3496,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3505,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3514,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3515,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3517,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3518,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3521,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3522,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3526,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3527,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3528,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3530,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3539,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3540,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3542,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3543,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3546,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3547,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3551,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3552,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3553,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3555,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3573,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3574,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3575,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3576,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3579,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3580,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3581,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3583,                return abs(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3584,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3586,                return abs(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3590,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3593,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3594,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3597,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3600,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3628,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3644,        final long m = Double.doubleToRawLongBits(magnitude); // don't care about NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3645,        final long s = Double.doubleToRawLongBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3646,        if ((m^s) >= 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3647,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3649,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3665,        final int m = Float.floatToRawIntBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3666,        final int s = Float.floatToRawIntBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3667,        if ((m^s) >= 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3668,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3670,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3684,        return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3698,        return ((Float.floatToRawIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3707,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3708,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3709,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3710,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3711,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3712,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3713,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3714,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3715,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3716,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3717,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3718,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3719,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,47,    private MathUtils() {},0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,57,        return new Double(value).hashCode();,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,68,        return Arrays.hashCode(value);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,113,        final double p = FastMath.abs(period);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,131,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,132,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,136,            return (byte) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,154,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,155,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,159,            return (short) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,177,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,178,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,182,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,200,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,201,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,205,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,218,            throw new NotFiniteNumberException(x);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,220,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,231,        for (int i = 0; i < val.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,232,            final double x = val[i];,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,237,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,252,"            throw new NullArgumentException(pattern, args);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,264,        if (o == null) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,265,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/MathUtils,1,267,    },0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,1,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,1,41,    },0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,1,53,"        super(specific, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,1,54,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3761,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3787,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3788,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3790,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3825,        CodyWaite(double xa) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3828,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3834,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3835,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3836,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3838,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3839,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3840,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3841,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3843,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3844,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3845,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3846,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3848,                if (remA > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3849,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3855,                --k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3856,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3858,            this.finalK = k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3859,            this.finalRemA = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3860,            this.finalRemB = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3861,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3867,            return finalK;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3873,            return finalRemA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3879,            return finalRemB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3722,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3754,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3755,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,1,3757,        },0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,376,        return sourceFormat;,0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,382,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,383,            ResourceBundle bundle =,0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,385,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,387,                return bundle.getString(toString());,0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,392,        },0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,390,        } catch (MissingResourceException mre) { // NOPMD,0.0,0,,0
org/apache/commons/math3/exception/util/LocalizedFormats,1,396,        return sourceFormat;,0.0,0,,0
