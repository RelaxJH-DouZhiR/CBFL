project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,1.0,1,,1
org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",1.0,1,,1
org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,0.2,0,,0
org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,0.2,0,,0
org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,0.2,0,,0
org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,0.16667,0,,0
org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,0.16667,0,,0
org/apache/commons/math/stat/Frequency,90,59,    },0.16667,0,,0
org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,68,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,79,        StringBuffer outBuffer = new StringBuffer();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,81,        Iterator iter = freqTable.keySet().iterator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,82,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,84,            outBuffer.append(value);,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,85,            outBuffer.append('\t');,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,86,            outBuffer.append(getCount(value));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,88,            outBuffer.append(nf.format(getPct(value)));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,89,            outBuffer.append('\t');,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,90,            outBuffer.append(nf.format(getCumPct(value)));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,91,            outBuffer.append('\n');,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,92,        },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,93,        return outBuffer.toString();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,123,           obj = Long.valueOf(((Integer) v).longValue());,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,135,        },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,136,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,144,        addValue(Long.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,145,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,154,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,162,        addValue(Long.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,163,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,171,        addValue(Character.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,172,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,177,    },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,189,        return freqTable.keySet().iterator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,202,        while (iterator.hasNext())  {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,205,        return result;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,216,        if (v instanceof Integer) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,223,                result = count.longValue();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,227,        },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,225,        } catch (ClassCastException ex) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,228,        return result;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,238,        return getCount(Long.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,248,        return getCount(Long.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,258,        return getCount(Character.valueOf(v));,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,274,        if (sumFreq == 0) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,275,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,288,        return getPct(Long.valueOf(v));       ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,299,        return getPct(Long.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,310,        return getPct(Character.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,324,        if (getSumFreq() == 0) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,325,            return 0;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,327,        if (v instanceof Integer) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,328,            return getCumFreq(((Integer) v).longValue());,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,330,        Comparator c = freqTable.comparator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,334,        long result = 0;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,343,        },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,341,        } catch (ClassCastException ex) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,353,        Iterator values = valuesIterator();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,354,        while (values.hasNext()) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,357,                result += getCount(nextValue);,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,359,                return result;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,361,        },0.0,0,,0
org/apache/commons/math/stat/Frequency,90,362,        return result;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,374,        return getCumFreq(Long.valueOf(v));       ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,386,        return getCumFreq(Long.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,398,        return getCumFreq(Character.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,415,        final long sumFreq = getSumFreq();,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,416,        if (sumFreq == 0) {,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,432,        return getCumPct(Long.valueOf(v));       ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,445,        return getCumPct(Long.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,458,        return getCumPct(Character.valueOf(v));         ,0.0,0,,0
org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",0.0,0,,0
org/apache/commons/math/stat/Frequency,90,484,            return ((Comparable)o1).compareTo(o2);,0.0,0,,0
