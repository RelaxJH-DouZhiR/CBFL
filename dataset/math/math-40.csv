project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,1.0,0,,0
org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,1.0,0,,0
org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,43,    },1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,56,    },1.0,0,,0
org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,48,    },1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,70,    },1.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,1.0,0,,0
org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,1.0,0,,0
org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,1.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,1.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",1.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,1.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,1.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,0.33333,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0.33333,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0.33333,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.25,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0.25,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.25,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },0.25,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,0.07692,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0.0625,1,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,294,                nbPoints = end - start;,0.05882,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,295,"                System.arraycopy(x, start, x, 0, nbPoints);",0.05882,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);",0.05882,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,                signChangeIndex -= start;,0.05882,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,260,                    if (signChangeIndex - start >= end - signChangeIndex) {,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,                    nextX = Double.NaN;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,299,            } else  if (nbPoints == x.length) {,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,317,            x[signChangeIndex] = nextX;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,318,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,319,            y[signChangeIndex] = nextY;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,320,            ++nbPoints;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,323,            if (nextY * yA <= 0) {,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,325,                xB = nextX;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,326,                yB = nextY;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,327,                absYB = FastMath.abs(yB);,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,328,                ++agingA;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,329,                agingB = 0;,0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,343,        },0.05556,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,172,            nbPoints        = 2;,0.05263,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,173,            signChangeIndex = 1;,0.05263,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,195,        final double[] tmpX = new double[x.length];,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,198,        double xA    = x[signChangeIndex - 1];,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,199,        double yA    = y[signChangeIndex - 1];,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,200,        double absYA = FastMath.abs(yA);,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,201,        int agingA   = 0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,202,        double xB    = x[signChangeIndex];,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,203,        double yB    = y[signChangeIndex];,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,204,        double absYB = FastMath.abs(yB);,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,205,        int agingB   = 0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,211,            final double xTol = getAbsoluteAccuracy() +,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,233,            if (agingA >= MAXIMAL_AGING) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,236,            } else if (agingB >= MAXIMAL_AGING) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,241,                targetY = 0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,246,            int start = 0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,247,            int end   = nbPoints;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,251,"                System.arraycopy(x, start, tmpX, start, end - start);",0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,252,"                nextX = guessX(targetY, tmpX, y, start, end);",0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,254,                if (!((nextX > xA) && (nextX < xB))) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,273,            } while (Double.isNaN(nextX) && (end - start > 1));,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,275,            if (Double.isNaN(nextX)) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,283,            final double nextY = computeObjectiveValue(nextX);,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,365,        for (int i = start; i < end - 1; ++i) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,366,            final int delta = i + 1 - start;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,367,            for (int j = end - 1; j > i; --j) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,373,        double x0 = 0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,374,        for (int j = end - 1; j >= start; --j) {,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,375,            x0 = x[j] + x0 * (targetY - y[j]);,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,378,        return x0;,0.04167,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,128,        return absoluteAccuracy;,0.04,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,134,        return relativeAccuracy;,0.04,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,140,        return functionValueAccuracy;,0.04,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,146,        final double[] x = new double[maximalOrder + 1];,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,147,        final double[] y = new double[maximalOrder + 1];,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,148,        x[0] = getMin();,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,149,        x[1] = getStartValue();,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,150,        x[2] = getMax();,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,151,"        verifySequence(x[0], x[1], x[2]);",0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,154,        y[1] = computeObjectiveValue(x[1]);,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,155,"        if (Precision.equals(y[1], 0.0, 1)) {",0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,161,        y[0] = computeObjectiveValue(x[0]);,0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0.03846,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,169,        if (y[0] * y[1] < 0) {,0.03846,0,,0
org/apache/commons/math/util/MathUtils,40,257,        if (o == null) {,0.03704,0,,0
org/apache/commons/math/util/MathUtils,40,260,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,110,        return searchMin;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,116,        return searchMax;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,122,        return searchStart;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,153,        incrementEvaluationCount();,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,154,        return function.value(point);,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,173,        MathUtils.checkNotNull(f);,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,176,        searchMin = min;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,177,        searchMax = max;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,178,        searchStart = startValue;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,179,        function = f;,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,180,        evaluations.setMaximalCount(maxEval);,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,181,        evaluations.resetCount();,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,182,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,187,"        setup(maxEval, f, min, max, startValue);",0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,190,        return doSolve();,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,269,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,294,            evaluations.incrementCount();,0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,297,        },0.03704,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,298,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,336,        if (lower >= upper) {,0.03704,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,340,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,354,"        verifyInterval(lower, initial);",0.03704,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,355,"        verifyInterval(initial, upper);",0.03704,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,356,    },0.03704,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,41,public enum AllowedSolution {,0.03448,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,48,"    ANY_SIDE,",0.03448,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,55,"    LEFT_SIDE,",0.03448,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,62,"    RIGHT_SIDE,",0.03448,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,68,"    BELOW_SIDE,",0.03448,0,,0
org/apache/commons/math/analysis/solvers/AllowedSolution,40,74,    ABOVE_SIDE;,0.03448,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,92,                                               final double functionValueAccuracy) {,0.03125,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,49,    private final Incrementor evaluations = new Incrementor();,0.03125,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,93,        this.absoluteAccuracy = absoluteAccuracy;,0.03125,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,94,        this.relativeAccuracy = relativeAccuracy;,0.03125,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,95,        this.functionValueAccuracy = functionValueAccuracy;,0.03125,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,96,    },0.03125,0,,0
org/apache/commons/math/util/Precision,40,282,            xInt = SGN_MASK - xInt;,0.02778,0,,0
org/apache/commons/math/util/FastMath,40,3539,            return a;,0.01639,0,,0
org/apache/commons/math/util/Precision,40,277,        long xInt = Double.doubleToLongBits(x);,0.01471,0,,0
org/apache/commons/math/util/Precision,40,278,        long yInt = Double.doubleToLongBits(y);,0.01471,0,,0
org/apache/commons/math/util/Precision,40,281,        if (xInt < 0) {,0.01471,0,,0
org/apache/commons/math/util/Precision,40,284,        if (yInt < 0) {,0.01471,0,,0
org/apache/commons/math/util/Precision,40,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.01471,0,,0
org/apache/commons/math/util/Precision,40,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.01471,0,,0
org/apache/commons/math/util/FastMath,40,3005,        return (x < 0l) ? -x : x;,0.01471,0,,0
org/apache/commons/math/util/FastMath,40,3542,            return b;,0.01389,0,,0
org/apache/commons/math/util/Incrementor,40,150,        if (++count > maximalCount) {,0.0137,0,,0
org/apache/commons/math/util/Incrementor,40,153,    },0.0137,0,,0
org/apache/commons/math/util/FastMath,40,3538,        if (a > b) {,0.01333,0,,0
org/apache/commons/math/util/FastMath,40,3541,        if (a < b) {,0.01333,0,,0
org/apache/commons/math/util/FastMath,40,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0122,0,,0
org/apache/commons/math/util/Incrementor,40,91,        maximalCount = max;,0.0119,0,,0
org/apache/commons/math/util/Incrementor,40,92,    },0.0119,0,,0
org/apache/commons/math/util/Incrementor,40,159,        count = 0;,0.0119,0,,0
org/apache/commons/math/util/Incrementor,40,160,    },0.0119,0,,0
org/apache/commons/math/util/FastMath,40,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,115,    private static final double LN_QUICK_COEF[][] = {,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,128,    private static final double LN_HI_PREC_COEF[][] = {,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,141,    private static final double SINE_TABLE_A[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,160,    private static final double SINE_TABLE_B[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,179,    private static final double COSINE_TABLE_A[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,198,    private static final double COSINE_TABLE_B[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,218,    private static final double TANGENT_TABLE_A[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,237,    private static final double TANGENT_TABLE_B[] =,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,256,    private static final long RECIP_2PI[] = new long[] {,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,277,    private static final long PI_O_4_BITS[] = new long[] {,0.0119,0,,0
org/apache/commons/math/util/FastMath,40,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.0119,0,,0
org/apache/commons/math/util/FastMath,40,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.0119,0,,0
org/apache/commons/math/util/Incrementor,40,52,        this(0);,0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,53,    },0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,61,"        this(max,",0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,68,    },0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,78,                       MaxCountExceededCallback cb) {,0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,40,    private int count = 0;,0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,79,        maximalCount = max;,0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,80,        maxCountCallback = cb;,0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,81,    },0.01136,0,,0
org/apache/commons/math/util/Incrementor,40,62,             new MaxCountExceededCallback() {,0.01136,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,60,        super(cause);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,63,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalStateException,40,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,46,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,59,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,63,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,40,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,37,    public MathInternalError() {,0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,39,    },0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,47,    },0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,56,"        super(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathInternalError,40,57,    },0.0,0,,0
org/apache/commons/math/exception/NotStrictlyPositiveException,40,38,"        super(value, 0, false);",0.0,0,,0
org/apache/commons/math/exception/NotStrictlyPositiveException,40,39,    },0.0,0,,0
org/apache/commons/math/exception/NotStrictlyPositiveException,40,48,"        super(specific, value, 0, false);",0.0,0,,0
org/apache/commons/math/exception/NotStrictlyPositiveException,40,49,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,70,        this.min = min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,72,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,40,85,        return min;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,40,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,40,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,40,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,40,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,47,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,51,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,40,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,69,        this.max = max;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,71,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,40,84,        return max;,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,40,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,40,42,    },0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,40,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,40,51,    },0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,40,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,40,41,    },0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,40,53,"        super(specific, wrong, args);",0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,40,54,    },0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);",0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,52,    },0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,68,"        super(specific, lo, hi, fLo, fHi, args);",0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,69,        this.lo = lo;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,70,        this.hi = hi;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,71,        this.fLo = fLo;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,72,        this.fHi = fHi;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,73,    },0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,81,        return lo;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,89,        return hi;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,97,        return fLo;,0.0,0,,0
org/apache/commons/math/exception/NoBracketingException,40,105,        return fHi;,0.0,0,,0
org/apache/commons/math/util/Precision,40,52,    private Precision() {},0.0,0,,0
org/apache/commons/math/util/Precision,40,65,"        if (equals(x, y, eps)) {",0.0,0,,0
org/apache/commons/math/util/Precision,40,66,            return 0;,0.0,0,,0
org/apache/commons/math/util/Precision,40,67,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,68,            return -1;,0.0,0,,0
org/apache/commons/math/util/Precision,40,70,        return 1;,0.0,0,,0
org/apache/commons/math/util/Precision,40,91,"        if (equals(x, y, maxUlps)) {",0.0,0,,0
org/apache/commons/math/util/Precision,40,92,            return 0;,0.0,0,,0
org/apache/commons/math/util/Precision,40,93,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,94,            return -1;,0.0,0,,0
org/apache/commons/math/util/Precision,40,96,        return 1;,0.0,0,,0
org/apache/commons/math/util/Precision,40,108,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/Precision,40,121,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/Precision,40,135,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math/util/Precision,40,150,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math/util/Precision,40,172,        int xInt = Float.floatToIntBits(x);,0.0,0,,0
org/apache/commons/math/util/Precision,40,173,        int yInt = Float.floatToIntBits(y);,0.0,0,,0
org/apache/commons/math/util/Precision,40,176,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,177,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,,0
org/apache/commons/math/util/Precision,40,179,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,180,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,,0
org/apache/commons/math/util/Precision,40,183,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math/util/Precision,40,185,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,,0
org/apache/commons/math/util/Precision,40,201,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math/util/Precision,40,213,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/Precision,40,226,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/Precision,40,241,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math/util/Precision,40,256,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math/util/Precision,40,285,            yInt = SGN_MASK - yInt;,0.0,0,,0
org/apache/commons/math/util/Precision,40,306,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math/util/Precision,40,319,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math/util/Precision,40,341,            return (new BigDecimal,0.0,0,,0
org/apache/commons/math/util/Precision,40,345,        } catch (NumberFormatException ex) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,346,            if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,347,                return x;,0.0,0,,0
org/apache/commons/math/util/Precision,40,349,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/Precision,40,364,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math/util/Precision,40,379,"        final float sign = FastMath.copySign(1f, x);",0.0,0,,0
org/apache/commons/math/util/Precision,40,380,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,,0
org/apache/commons/math/util/Precision,40,381,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,,0
org/apache/commons/math/util/Precision,40,399,        switch (roundingMethod) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,401,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,402,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,404,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,406,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,408,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,409,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,411,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,412,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,414,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,416,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,418,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/Precision,40,419,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,420,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,421,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,423,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,425,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,428,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,429,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,430,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,431,            } else if (fraction < 0.5) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,432,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,435,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,,0
org/apache/commons/math/util/Precision,40,437,                    unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,439,                    unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,442,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,445,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/Precision,40,446,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,447,            if (fraction >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,448,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,450,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/Precision,40,452,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,455,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,,0
org/apache/commons/math/util/Precision,40,456,                throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/Precision,40,460,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/Precision,40,461,            break;,0.0,0,,0
org/apache/commons/math/util/Precision,40,463,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,,0
org/apache/commons/math/util/Precision,40,474,        return unscaled;,0.0,0,,0
org/apache/commons/math/util/Precision,40,494,        return x + originalDelta - x;,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,100,        return maximalCount;,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,109,        return count;,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,120,        return count < maximalCount;,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,131,        for (int i = 0; i < value; i++) {,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,132,            incrementCount();,0.0,0,,0
org/apache/commons/math/util/Incrementor,40,134,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,40,47,    private MathUtils() {},0.0,0,,0
org/apache/commons/math/util/MathUtils,40,57,        return new Double(value).hashCode();,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,68,        return Arrays.hashCode(value);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,113,        final double p = FastMath.abs(period);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,128,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,130,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,131,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,135,            return (byte) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,150,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,152,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,153,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,157,            return (short) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,172,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,174,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,175,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,179,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,194,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,196,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,197,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,201,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,213,            throw new NotFiniteNumberException(x);,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,215,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,40,225,        for (int i = 0; i < val.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,226,            final double x = val[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,,0
org/apache/commons/math/util/MathUtils,40,231,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,40,244,        if (o == null) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,40,245,"            throw new NullArgumentException(pattern, args);",0.0,0,,0
org/apache/commons/math/util/MathUtils,40,247,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,40,258,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math/util/FastMath,40,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,40,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,40,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,40,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,375,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,384,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,402,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,427,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,430,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,434,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,444,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,461,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,465,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,466,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,499,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,502,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,506,      },0.0,0,,0
org/apache/commons/math/util/FastMath,40,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,40,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,40,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,536,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,539,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,545,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,546,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,549,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,560,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,570,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,574,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,578,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,582,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,583,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,600,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,607,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,628,      },0.0,0,,0
org/apache/commons/math/util/FastMath,40,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,638,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,646,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,669,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,670,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,673,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,691,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,692,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,721,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,722,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,40,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,40,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,783,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,807,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,826,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,834,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,40,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,844,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,40,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,854,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,857,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,864,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,866,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,899,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,902,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,910,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,917,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,919,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,922,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,925,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,931,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,40,949,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,973,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,974,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1005,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1010,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1148,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1173,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1176,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1177,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1178,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1184,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1185,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1186,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1190,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1193,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1194,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1195,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1197,                return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1215,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1216,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1218,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1221,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1222,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1223,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1224,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1230,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1238,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1241,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1242,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1243,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1249,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1250,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1251,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1255,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1264,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1265,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1266,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1269,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1275,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1292,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1293,        double b = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1294,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1295,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1296,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1297,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1299,        c = a + lnza;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1300,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1301,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1302,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1304,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1306,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1307,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1309,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1310,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1311,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1312,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1314,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1315,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1316,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1317,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1319,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1320,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1321,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1324,        return a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1333,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1334,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1342,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1345,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1349,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1354,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1357,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1364,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1365,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1367,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1375,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1377,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1379,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1386,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1409,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1420,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1422,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1423,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1426,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1427,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1431,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1435,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1442,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1446,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1447,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1449,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1450,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1453,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1457,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1458,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1460,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1461,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1463,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1468,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1469,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1472,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1473,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1481,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1484,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1485,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1487,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1490,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1493,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1494,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1499,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1505,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1506,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1509,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1510,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1512,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1517,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1520,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1523,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1527,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1535,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1536,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1537,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1538,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1542,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1546,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1548,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1551,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1552,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1557,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1558,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1561,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1564,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1565,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1567,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1570,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1571,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1572,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1574,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1588,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1590,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1596,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1598,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1608,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1610,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1614,        p *= x2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1616,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1637,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1638,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1639,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1646,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1672,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1673,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1675,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1676,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1677,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1678,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1679,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1681,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1682,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1683,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1684,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1685,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1729,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1732,            c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1733,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1734,            a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1735,            b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1738,        result = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1740,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1751,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1754,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1755,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1756,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1758,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1781,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1782,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1783,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1790,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1815,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1816,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1819,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1820,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1821,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1822,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1823,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1825,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1826,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1827,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1828,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1829,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1834,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1835,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1839,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1841,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1842,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1843,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1844,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1845,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1847,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1848,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1849,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1850,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1851,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1856,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1857,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1859,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1876,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1879,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1880,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1881,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1883,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1885,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1892,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1895,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1896,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1897,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1900,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1903,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1925,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1928,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1929,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1935,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1936,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1938,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1945,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1950,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1951,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1953,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1954,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1956,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1957,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1958,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1959,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1961,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1962,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1969,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1971,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1977,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1978,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1983,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1985,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1989,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1990,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1991,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1992,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1993,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2000,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2003,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2005,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2009,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2010,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2012,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2013,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2014,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2031,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2032,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2033,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2036,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2037,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2042,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2043,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2044,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2045,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2047,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2055,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2057,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2063,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2069,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2071,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2077,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2086,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2089,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2091,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2095,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2096,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2099,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2100,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2101,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2108,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2111,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2113,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2120,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2124,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2125,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2126,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2127,    },0.0,0,,0
org/apache/commons/math/util/FastMath,40,2135,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2136,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2138,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2141,        xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2142,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2143,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2144,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2148,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2150,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2151,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2153,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2157,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2161,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2165,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2168,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2169,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2181,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2182,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2183,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2185,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2186,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2187,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2188,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2190,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2191,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2192,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2193,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2195,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2196,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2202,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2203,            },0.0,0,,0
org/apache/commons/math/util/FastMath,40,2204,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2205,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2206,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2209,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2213,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2215,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2217,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2219,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2221,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2223,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2233,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2236,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2237,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2238,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2242,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2246,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2247,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2251,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2254,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2255,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2267,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2268,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2269,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2271,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2272,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2273,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2274,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2276,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2277,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2278,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2279,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2281,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2282,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2288,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2289,            },0.0,0,,0
org/apache/commons/math/util/FastMath,40,2290,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2291,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2292,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2298,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2300,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2302,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2304,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2306,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2308,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2318,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2319,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2322,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2323,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2324,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2325,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2329,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2331,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2332,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2334,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2338,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2342,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2343,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2347,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2350,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2351,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2363,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2364,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2365,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2367,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2368,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2369,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2370,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2372,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2373,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2374,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2375,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2377,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2378,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2384,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2385,            },0.0,0,,0
org/apache/commons/math/util/FastMath,40,2386,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2387,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2388,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2391,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2393,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2396,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2397,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2398,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2400,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2401,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2402,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2403,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2407,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2408,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2410,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2413,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2414,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2417,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2426,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2436,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2443,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2445,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2446,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2447,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2451,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2455,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2458,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2459,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2465,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2466,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2467,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2470,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2471,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2472,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2473,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2474,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2477,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2480,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2482,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2483,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2484,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2486,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2487,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2489,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2490,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2491,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2494,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2496,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2497,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2498,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2500,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2501,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2502,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2507,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2508,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2512,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2513,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2516,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2527,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2533,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2536,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2538,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2539,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2540,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2543,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2549,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2550,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2551,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2552,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2553,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2555,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2556,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2558,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2560,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2561,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2563,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2564,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2565,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2567,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2568,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2572,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2573,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2586,        if (x !=x || y != y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2587,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2590,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2591,            double result = x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2592,            double invx = 1.0/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2593,            double invy = 1.0/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2595,            if (invx == 0.0) { // X is infinite,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2596,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2597,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2599,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2603,            if (x < 0.0 || invx < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2604,                if (y < 0.0 || invy < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2605,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2607,                    return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2610,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2616,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2617,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2618,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2621,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2622,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2625,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2628,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2629,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2630,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2633,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2634,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2637,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2640,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2641,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2642,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2645,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2646,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2650,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,40,2652,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2653,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2656,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2657,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2663,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2664,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2665,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2668,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2669,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2674,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2675,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2676,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2679,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2680,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2683,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2684,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2686,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2688,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2689,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2690,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2692,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2693,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2697,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2699,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2707,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2708,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2711,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2712,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2715,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2716,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2719,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2720,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2723,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2724,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2730,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2731,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2732,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2735,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2736,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2739,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2740,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2742,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2743,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2745,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2746,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2747,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2751,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2752,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2753,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2754,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2757,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2760,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2763,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2764,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2765,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2766,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2768,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2769,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2771,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2772,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2773,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2775,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2783,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2784,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2787,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2788,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2791,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2792,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2795,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2796,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2799,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2800,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2806,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2807,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2808,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2811,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2812,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2815,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2816,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2818,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2819,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2821,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2822,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2823,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2826,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2827,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2828,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2829,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2832,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2835,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2836,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2837,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2840,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2843,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2844,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2847,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2848,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2850,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2851,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2853,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2854,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2855,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2857,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,2866,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2867,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2868,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2870,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2871,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2872,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2876,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2877,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2878,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2879,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2882,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2884,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2888,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2891,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2895,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2898,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2899,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2900,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2901,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2902,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2904,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2909,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2910,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2911,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2914,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2915,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2916,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2918,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2919,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2920,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2921,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2922,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2923,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2925,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2926,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2928,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2929,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2930,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2932,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2935,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2937,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2938,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2941,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2951,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2952,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2956,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2957,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2959,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2960,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2962,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2963,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2964,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2966,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2976,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2977,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2981,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2982,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2984,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2985,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2987,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,2996,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3014,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3032,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3033,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3035,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3044,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3045,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3047,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3059,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3060,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3064,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3065,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3067,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3068,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3070,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3071,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3075,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3076,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3077,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3078,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3081,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3083,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3085,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3087,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3088,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3092,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3095,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3096,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3097,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3099,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3101,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3105,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3109,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3112,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3113,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3114,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3116,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3117,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3119,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3120,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3122,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3125,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3126,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3128,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3143,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3144,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3148,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3149,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3151,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3152,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3154,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3155,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3159,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3160,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3161,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3162,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3165,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3167,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3169,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3171,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3172,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3176,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3179,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3180,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3181,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3183,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3185,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3189,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3193,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3196,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3197,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3198,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3200,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3201,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3203,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3204,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3206,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3209,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3210,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3212,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3252,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3253,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3254,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3255,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3256,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3257,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3258,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3259,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3264,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3265,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3266,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3267,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3308,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3309,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3310,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3311,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3312,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3313,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3314,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3315,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3320,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3321,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3322,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3323,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3337,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3341,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3342,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3345,        y = (long) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3346,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3347,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3350,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3351,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3354,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3364,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3365,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3368,        y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3369,        if (y == x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3370,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3373,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3375,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3376,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3379,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3387,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3388,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3390,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3391,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3392,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3394,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3396,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3397,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3401,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3402,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3410,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3418,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3427,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3436,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3445,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3446,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3448,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3449,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3452,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3453,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3457,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3458,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3459,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3461,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3470,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3471,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3473,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3474,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3477,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3478,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3482,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3483,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3484,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3486,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3495,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3504,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3513,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3514,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3516,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3517,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3520,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3521,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3525,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3526,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3527,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3529,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3545,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3546,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3550,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3551,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3552,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3554,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3572,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3573,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3574,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3575,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3578,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3579,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3580,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3582,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3583,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3585,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3589,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3592,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3593,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3596,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3599,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3639,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3640,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3641,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3642,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3644,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3656,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3657,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3658,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3659,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3661,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3674,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3687,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3696,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3708,    },0.0,0,,0
org/apache/commons/math/util/FastMath,40,80,public class FastMath {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3791,    private static class lnMant {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3797,                LN_MANT = new double[FastMath.LN_MANT_LEN][];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3800,                for (int i = 0; i < LN_MANT.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3801,                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3802,                    LN_MANT[i] = FastMathCalc.slowLog(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3804,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3805,                LN_MANT = FastMathResources.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3809,        },0.0,0,,0
org/apache/commons/math/util/FastMath,40,3711,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3723,                EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3724,                EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3726,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3727,                final double recip[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3730,                for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3731,"                    FastMathCalc.expint(i, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3732,                    EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3733,                    EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3735,                    if (i != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3737,"                        FastMathCalc.splitReciprocal(tmp, recip);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3738,                        EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3739,                        EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3742,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3743,                final double[][] expInt = FastMathResources.loadExpInt();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3744,                EXP_INT_TABLE_A = expInt[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3745,                EXP_INT_TABLE_B = expInt[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3746,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3750,        },0.0,0,,0
org/apache/commons/math/util/FastMath,40,3754,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3770,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,40,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3779,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3781,                EXP_FRAC_TABLE_A = expFrac[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3782,                EXP_FRAC_TABLE_B = expFrac[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3783,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math/util/FastMath,40,3787,        },0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,214,                switch (allowed) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,69,"        this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,70,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,82,        super(absoluteAccuracy);,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,83,        if (maximalOrder < 2) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,84,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,86,        this.maximalOrder = maximalOrder;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,87,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,88,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,102,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,103,        if (maximalOrder < 2) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,104,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,106,        this.maximalOrder = maximalOrder;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,107,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,108,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,126,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,136,        return maximalOrder;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,157,            return x[1];,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,164,            return x[0];,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,178,            y[2] = computeObjectiveValue(x[2]);,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,179,"            if (Precision.equals(y[2], 0.0, 1)) {",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,181,                return x[2];,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,184,            if (y[1] * y[2] < 0) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,186,                nbPoints        = 3;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,187,                signChangeIndex = 2;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,189,"                throw new NoBracketingException(x[0], x[2], y[0], y[2]);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,214,                switch (allowed) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,216,                    return absYA < absYB ? xA : xB;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,218,                    return xA;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,220,                    return xB;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,222,                    return (yA <= 0) ? xA : xB;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,224,                    return (yA <  0) ? xB : xA;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,227,                    throw new MathInternalError(null);,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,0.0,1,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,262,                        ++start;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,277,                nextX = xA + 0.5 * (xB - xA);,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,278,                start = signChangeIndex - 1;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,279,                end   = signChangeIndex;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,287,                return nextX;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,302,                nbPoints--;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,305,                if (signChangeIndex >= (x.length + 1) / 2) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,307,"                    System.arraycopy(x, 1, x, 0, nbPoints);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,308,"                    System.arraycopy(y, 1, y, 0, nbPoints);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,309,                    --signChangeIndex;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,332,                xA = nextX;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,333,                yA = nextY;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,334,                absYA = FastMath.abs(yA);,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,335,                agingA = 0;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,336,                ++agingB;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,339,                signChangeIndex++;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,385,        this.allowed = allowedSolution;,0.0,0,,0
org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,386,"        return super.solve(maxEval, f, min, max);",0.0,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,37,        super(absoluteAccuracy);,0.0,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,38,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,47,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,48,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,65,"        this(DEFAULT_RELATIVE_ACCURACY,",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,68,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,78,"        this(relativeAccuracy,",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,81,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,100,        return evaluations.getMaximalCount();,0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,104,        return evaluations.getCount();,0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,200,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,226,"        return UnivariateRealSolverUtils.isBracketing(function, lower, upper);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,240,"        return UnivariateRealSolverUtils.isSequence(start, mid, end);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,253,"        UnivariateRealSolverUtils.verifyInterval(lower, upper);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,254,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0.0,0,,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,283,    },0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,36,    private UnivariateRealSolverUtils() {},0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,50,        if (function == null) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,51,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,53,        final UnivariateRealSolver solver = new BrentSolver();,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,54,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,73,        if (function == null) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,74,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,76,        final UnivariateRealSolver solver = new BrentSolver(absoluteAccuracy);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,99,        if (allowedSolution == AllowedSolution.ANY_SIDE) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,101,            return baseRoot;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,105,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,107,"        double xLo        = FastMath.max(min, baseRoot - step);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,108,        double fLo        = f.value(xLo);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,109,"        double xHi        = FastMath.min(max, baseRoot + step);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,110,        double fHi        = f.value(xHi);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,111,        int remainingEval = maxEval - 2;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,112,        while (remainingEval > 0) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,114,            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,116,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,120,            boolean changeLo = false;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,121,            boolean changeHi = false;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,122,            if (fLo < fHi) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,124,                if (fLo >= 0) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,125,                    changeLo = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,127,                    changeHi = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,129,            } else if (fLo > fHi) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,131,                if (fLo <= 0) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,132,                    changeLo = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,134,                    changeHi = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,138,                changeLo = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,139,                changeHi = true;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,143,            if (changeLo) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,144,"                xLo = FastMath.max(min, xLo - step);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,145,                fLo  = f.value(xLo);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,146,                remainingEval--;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,150,            if (changeHi) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,151,"                xHi = FastMath.min(max, xHi + step);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,152,                fHi  = f.value(xHi);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,153,                remainingEval--;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,156,        },0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,158,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,207,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,246,        if (function == null) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,247,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,249,        if (maximumIterations <= 0)  {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,250,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,252,"        verifySequence(lowerBound, initial, upperBound);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,254,        double a = initial;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,255,        double b = initial;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,258,        int numIterations = 0;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,261,"            a = FastMath.max(a - 1.0, lowerBound);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,262,"            b = FastMath.min(b + 1.0, upperBound);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,263,            fa = function.value(a);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,265,            fb = function.value(b);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,266,            ++numIterations;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,267,        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,270,        if (fa * fb > 0.0) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,271,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,277,"        return new double[] {a, b};",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,288,        return (a + b) * 0.5;,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,305,        if (function == null) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,306,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,308,        final double fLo = function.value(lower);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,309,        final double fHi = function.value(upper);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,324,        return (start < mid) && (mid < end);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,337,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,371,        if (function == null) {,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,372,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,374,"        verifyInterval(lower, upper);",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,375,"        if (!isBracketing(function, lower, upper)) {",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,376,"            throw new NoBracketingException(lower, upper,",0.0,0,,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,380,    },0.0,0,,0
