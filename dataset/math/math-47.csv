project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/complex/Complex,47,257,            return NaN;,2.0,1,,0
org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,0.5,0,,0
org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,0.5,0,,0
org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0.33333,1,,1
org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,0.30769,1,,0
org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0.26667,0,,0
org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,0.26667,0,,0
org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,0.25,0,,0
org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,0.2,0,,0
org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,0.2,0,,0
org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",0.2,0,,0
org/apache/commons/math/util/FastMath,47,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.14286,0,,0
org/apache/commons/math/complex/Complex,47,747,            return NaN;,0.14286,0,,0
org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,0.125,0,,0
org/apache/commons/math/util/FastMath,47,2997,                return result;,0.125,0,,0
org/apache/commons/math/util/FastMath,47,2978,            double result = x*y;,0.11111,0,,0
org/apache/commons/math/util/FastMath,47,2979,            double invx = 1.0/x;,0.11111,0,,0
org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,0.11111,0,,0
org/apache/commons/math/util/FastMath,47,2982,            if (invx == 0.0) { // X is infinite,0.11111,0,,0
org/apache/commons/math/complex/Complex,47,273,            double q = d / c;,0.11111,0,,0
org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,0.11111,0,,0
org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",0.11111,0,,0
org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1433,            lnza = lnza * epsilon + -0.5;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1434,            lnza = lnza * epsilon + 1.0;,0.09091,0,,0
org/apache/commons/math/util/FastMath,47,1435,            lnza = lnza * epsilon;,0.09091,0,,0
org/apache/commons/math/complex/Complex,47,260,        if (divisor.isInfinite() && !isInfinite()) {,0.08333,0,,0
org/apache/commons/math/complex/Complex,47,264,        final double c = divisor.getReal();,0.08333,0,,0
org/apache/commons/math/complex/Complex,47,265,        final double d = divisor.getImaginary();,0.08333,0,,0
org/apache/commons/math/complex/Complex,47,267,        if (FastMath.abs(c) < FastMath.abs(d)) {,0.08333,0,,0
org/apache/commons/math/complex/Complex,47,419,            return NaN;,0.08333,0,,0
org/apache/commons/math/util/MathUtils,47,2337,    },0.0678,0,,0
org/apache/commons/math/util/MathUtils,47,2334,        if (o == null) {,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);",0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1375,        double lnza = 0.0;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1376,        double lnzb = 0.0;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1378,        if (hiPrec != null) {,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1452,        double a = LN_2_A*exp;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1453,        double b = 0.0;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1454,        double c = a+lnm[0];,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1455,        double d = -(c-a-lnm[0]);,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1456,        a = c;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1457,        b = b + d;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1459,        c = a + lnza;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1460,        d = -(c - a - lnza);,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1461,        a = c;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1462,        b = b + d;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1464,        c = a + LN_2_B*exp;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1465,        d = -(c - a - LN_2_B*exp);,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1466,        a = c;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1467,        b = b + d;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1469,        c = a + lnm[1];,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1470,        d = -(c - a - lnm[1]);,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1471,        a = c;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1472,        b = b + d;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1474,        c = a + lnzb;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1475,        d = -(c - a - lnzb);,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1476,        a = c;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1477,        b = b + d;,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1479,        if (hiPrec != null) {,0.06667,0,,0
org/apache/commons/math/util/FastMath,47,1484,        return a + b;,0.06667,0,,0
org/apache/commons/math/complex/Complex,47,750,"        return createComplex(FastMath.log(abs()),",0.06667,0,,0
org/apache/commons/math/complex/Complex,47,132,            double q = imaginary / real;,0.0625,0,,0
org/apache/commons/math/complex/Complex,47,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,0.0625,0,,0
org/apache/commons/math/util/FastMath,47,1292,        int exp = (int)(bits >> 52)-1023;,0.05882,0,,0
org/apache/commons/math/util/FastMath,47,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0.05882,0,,0
org/apache/commons/math/util/FastMath,47,1314,        if (exp == -1 || exp == 0) {,0.05882,0,,0
org/apache/commons/math/complex/Complex,47,129,            if (real == 0.0) {,0.05882,0,,0
org/apache/commons/math/util/FastMath,47,1269,        long bits = Double.doubleToLongBits(x);,0.05556,0,,0
org/apache/commons/math/util/FastMath,47,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.05556,0,,0
org/apache/commons/math/util/FastMath,47,1283,        if (x == Double.POSITIVE_INFINITY) {,0.05556,0,,0
org/apache/commons/math/util/FastMath,47,1266,        if (x==0) { // Handle special case of +0/-0,0.05263,0,,0
org/apache/commons/math/complex/Complex,47,162,"        return createComplex(real + addend.getReal(),",0.05263,0,,0
org/apache/commons/math/util/MathUtils,47,85,    private static final long[] FACTORIALS = new long[] {,0.05,0,,0
org/apache/commons/math/util/FastMath,47,2977,        if (y == 0.0) {,0.04762,0,,0
org/apache/commons/math/complex/Complex,47,746,        if (isNaN) {,0.04762,0,,0
org/apache/commons/math/util/FastMath,47,2973,        if (x !=x || y != y) {,0.04545,0,,0
org/apache/commons/math/complex/Complex,47,428,"        return createComplex(real * factor.real - imaginary * factor.imaginary,",0.04545,0,,0
org/apache/commons/math/complex/Complex,47,493,"        return createComplex(real - subtrahend.getReal(),",0.04545,0,,0
org/apache/commons/math/complex/Complex,47,157,        MathUtils.checkNotNull(addend);,0.04348,0,,0
org/apache/commons/math/complex/Complex,47,158,        if (isNaN || addend.isNaN) {,0.04348,0,,0
org/apache/commons/math/complex/Complex,47,488,        MathUtils.checkNotNull(subtrahend);,0.04,0,,0
org/apache/commons/math/complex/Complex,47,489,        if (isNaN || subtrahend.isNaN) {,0.04,0,,0
org/apache/commons/math/complex/Complex,47,421,        if (Double.isInfinite(real) ||,0.03704,0,,0
org/apache/commons/math/complex/Complex,47,364,        return real;,0.03604,0,,0
org/apache/commons/math/complex/Complex,47,355,        return imaginary;,0.03571,0,,0
org/apache/commons/math/complex/Complex,47,122,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0.03448,0,,0
org/apache/commons/math/complex/Complex,47,119,        if (isInfinite()) {,0.02941,0,,0
org/apache/commons/math/util/FastMath,47,302,        return Math.sqrt(a);,0.02857,0,,0
org/apache/commons/math/complex/Complex,47,116,        if (isNaN) {,0.02857,0,,0
org/apache/commons/math/complex/Complex,47,417,        MathUtils.checkNotNull(factor);,0.02857,0,,0
org/apache/commons/math/complex/Complex,47,418,        if (isNaN || factor.isNaN) {,0.02857,0,,0
org/apache/commons/math/complex/Complex,47,327,                return (real == c.real) && (imaginary == c.imaginary);,0.02564,0,,0
org/apache/commons/math/util/FastMath,47,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.02439,0,,0
org/apache/commons/math/complex/Complex,47,323,            Complex c = (Complex)other;,0.02381,0,,0
org/apache/commons/math/complex/Complex,47,324,            if (c.isNaN) {,0.02381,0,,0
org/apache/commons/math/complex/Complex,47,322,        if (other instanceof Complex){,0.02273,0,,0
org/apache/commons/math/complex/Complex,47,388,        return isInfinite;,0.02273,0,,0
org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",0.02174,1,,1
org/apache/commons/math/complex/Complex,47,99,        this.real = real;,0.02174,0,,0
org/apache/commons/math/complex/Complex,47,100,        this.imaginary = imaginary;,0.02174,0,,0
org/apache/commons/math/complex/Complex,47,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,0.02174,0,,0
org/apache/commons/math/complex/Complex,47,103,        isInfinite = !isNaN &&,0.02174,0,,0
org/apache/commons/math/complex/Complex,47,105,    },0.02174,0,,0
org/apache/commons/math/complex/Complex,47,58,"    public static final Complex I = new Complex(0.0, 1.0);",0.02174,0,,0
org/apache/commons/math/complex/Complex,47,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",0.02174,0,,0
org/apache/commons/math/complex/Complex,47,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0.02174,0,,0
org/apache/commons/math/complex/Complex,47,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",0.02174,0,,0
org/apache/commons/math/complex/Complex,47,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0.02174,0,,0
org/apache/commons/math/complex/Complex,47,319,        if (this == other) {,0.01724,0,,0
org/apache/commons/math/util/FastMath,47,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,98,    private static final double FACT[] = new double[20];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,101,    private static final double LN_MANT[][] = new double[1024][];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,110,    private static final double LN_SPLIT_COEF[][] = {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,130,    private static final double LN_QUICK_COEF[][] = {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,143,    private static final double LN_HI_PREC_COEF[][] = {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,153,    private static final double SINE_TABLE_A[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,156,    private static final double SINE_TABLE_B[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,159,    private static final double COSINE_TABLE_A[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,162,    private static final double COSINE_TABLE_B[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,171,    private static final long RECIP_2PI[] = new long[] {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,192,    private static final long PI_O_4_BITS[] = new long[] {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,233,        FACT[0] = 1.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,234,        for (i = 1; i < FACT.length; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,235,            FACT[i] = FACT[i-1] * i;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,238,        double tmp[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,239,        double recip[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,242,        for (i = 0; i < 750; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,243,"            expint(i, tmp);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,247,            if (i != 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,249,"                splitReciprocal(tmp, recip);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,257,"            slowexp(i/1024.0, tmp);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,263,        for (i = 0; i < LN_MANT.length; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,265,            LN_MANT[i] = slowLog(d);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,269,        buildSinCosTables();,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,270,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1012,        final double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1013,        final double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1014,        final double facts[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1015,        final double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1016,"        split(x, xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1017,        ys[0] = ys[1] = 0.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1019,        for (int i = 19; i >= 0; i--) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1020,"            splitMult(xs, ys, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1021,            ys[0] = as[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1022,            ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1024,"            split(FACT[i], as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1025,"            splitReciprocal(as, facts);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1027,"            splitAdd(ys, facts, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1028,            ys[0] = as[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1029,            ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1032,        if (result != null) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1033,            result[0] = ys[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1034,            result[1] = ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1037,        return ys[0] + ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1046,        if (d < 8e298 && d > -8e298) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1047,            final double a = d * HEX_40000000;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1048,            split[0] = (d + a) - a;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1049,            split[1] = d - split[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1050,        } else {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1055,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1062,        final double c = a[0] + a[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1063,        final double d = -(c - a[0] - a[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1065,        if (c < 8e298 && c > -8e298) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1066,            double z = c * HEX_40000000;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1067,            a[0] = (c + z) - z;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1068,            a[1] = c - a[0] + d;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1069,        } else {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1070,            double z = c * 9.31322574615478515625E-10;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1071,            a[0] = (c + z - c) * HEX_40000000;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1072,            a[1] = c - a[0] + d;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1074,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1082,        ans[0] = a[0] * b[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1086,        resplit(ans);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1087,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1095,        ans[0] = a[0] + b[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1096,        ans[1] = a[1] + b[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1098,        resplit(ans);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1099,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1120,        final double b = 1.0/4194304.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1121,        final double a = 1.0 - b;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1123,        if (in[0] == 0.0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1128,        result[0] = a / in[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1132,            result[1] = 0.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1136,        resplit(result);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1138,        for (int i = 0; i < 2; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1143,            err = err * (result[0] + result[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1145,            result[1] += err;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1147,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1155,        final double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1156,        final double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1157,        final double zs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1160,"        split(a[0], xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1161,"        split(b[0], ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1162,"        splitMult(xs, ys, zs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1164,        result[0] = zs[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1165,        result[1] = zs[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1168,"        split(b[1], ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1169,"        splitMult(xs, ys, zs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1171,        double tmp = result[0] + zs[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1173,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1174,        tmp = result[0] + zs[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1176,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1179,"        split(a[1], xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1180,"        split(b[0], ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1181,"        splitMult(xs, ys, zs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1183,        tmp = result[0] + zs[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1185,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1186,        tmp = result[0] + zs[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1188,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1191,"        split(a[1], xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1192,"        split(b[1], ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1193,"        splitMult(xs, ys, zs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1195,        tmp = result[0] + zs[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1197,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1198,        tmp = result[0] + zs[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1200,        result[0] = tmp;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1201,    },0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1210,        final double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1211,        final double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1212,        final double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1221,        xs[0] = 2.718281828459045;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1222,        xs[1] = 1.4456468917292502E-16;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1224,"        split(1.0, ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1226,        while (p > 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1227,            if ((p & 1) != 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1228,"                quadMult(ys, xs, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1229,                ys[0] = as[0]; ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1232,"            quadMult(xs, xs, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1233,            xs[0] = as[0]; xs[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1235,            p >>= 1;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1238,        if (result != null) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1239,            result[0] = ys[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1240,            result[1] = ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1242,            resplit(result);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1245,        return ys[0] + ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1743,        double x[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1744,        double x2[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1745,        double y[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1746,        double a[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1748,"        split(xi, x);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1751,        x[0] += 1.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1752,        resplit(x);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1753,"        splitReciprocal(x, a);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1754,        x[0] -= 2.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1755,        resplit(x);,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1756,"        splitMult(x, a, y);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1757,        x[0] = y[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1758,        x[1] = y[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1761,"        splitMult(x, x, x2);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1771,"            splitMult(y, x2, a);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1772,            y[0] = a[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1773,            y[1] = a[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1775,            y[0] = a[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1776,            y[1] = a[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1779,"        splitMult(y, x, a);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1780,        y[0] = a[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1781,        y[1] = a[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1783,        return y;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1793,        final double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1794,        final double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1795,        final double facts[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1796,        final double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1797,"        split(x, xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1798,        ys[0] = ys[1] = 0.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1800,        for (int i = 19; i >= 0; i--) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1801,"            splitMult(xs, ys, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1802,            ys[0] = as[0]; ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1804,            if ( (i & 1) == 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1805,                continue;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1808,"            split(FACT[i], as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1809,"            splitReciprocal(as, facts);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1811,            if ( (i & 2) != 0 ) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1812,                facts[0] = -facts[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1813,                facts[1] = -facts[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1816,"            splitAdd(ys, facts, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1817,            ys[0] = as[0]; ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1820,        if (result != null) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1821,            result[0] = ys[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1822,            result[1] = ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1825,        return ys[0] + ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1836,        final double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1837,        final double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1838,        final double facts[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1839,        final double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1840,"        split(x, xs);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1841,        ys[0] = ys[1] = 0.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1843,        for (int i = 19; i >= 0; i--) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1844,"            splitMult(xs, ys, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1845,            ys[0] = as[0]; ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1847,            if ( (i & 1) != 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1848,                continue;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1851,"            split(FACT[i], as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1852,"            splitReciprocal(as, facts);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1854,            if ( (i & 2) != 0 ) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1855,                facts[0] = -facts[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1856,                facts[1] = -facts[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1859,"            splitAdd(ys, facts, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1860,            ys[0] = as[0]; ys[1] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1863,        if (result != null) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1864,            result[0] = ys[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1865,            result[1] = ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1868,        return ys[0] + ys[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1874,        final double result[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1877,        for (int i = 0; i < 7; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1878,            double x = i / 8.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1880,"            slowSin(x, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1881,            SINE_TABLE_A[i] = result[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1882,            SINE_TABLE_B[i] = result[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1884,"            slowCos(x, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1885,            COSINE_TABLE_A[i] = result[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1886,            COSINE_TABLE_B[i] = result[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1890,        for (int i = 7; i < 14; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1891,            double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1892,            double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1893,            double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1894,            double bs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1895,            double temps[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1897,            if ( (i & 1) == 0) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1899,                xs[0] = SINE_TABLE_A[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1900,                xs[1] = SINE_TABLE_B[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1901,                ys[0] = COSINE_TABLE_A[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1902,                ys[1] = COSINE_TABLE_B[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1905,"                splitMult(xs, ys, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1906,                SINE_TABLE_A[i] = result[0] * 2.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1907,                SINE_TABLE_B[i] = result[1] * 2.0;,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1910,"                splitMult(ys, ys, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1911,"                splitMult(xs, xs, temps);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1912,                temps[0] = -temps[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1913,                temps[1] = -temps[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1914,"                splitAdd(as, temps, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1915,                COSINE_TABLE_A[i] = result[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1916,                COSINE_TABLE_B[i] = result[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1918,                xs[0] = SINE_TABLE_A[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1919,                xs[1] = SINE_TABLE_B[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1920,                ys[0] = COSINE_TABLE_A[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1921,                ys[1] = COSINE_TABLE_B[i/2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1922,                as[0] = SINE_TABLE_A[i/2+1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1923,                as[1] = SINE_TABLE_B[i/2+1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1924,                bs[0] = COSINE_TABLE_A[i/2+1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1925,                bs[1] = COSINE_TABLE_B[i/2+1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1928,"                splitMult(xs, bs, temps);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1929,"                splitMult(ys, as, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1930,"                splitAdd(result, temps, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1931,                SINE_TABLE_A[i] = result[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1932,                SINE_TABLE_B[i] = result[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1935,"                splitMult(ys, bs, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1936,"                splitMult(xs, as, temps);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1937,                temps[0] = -temps[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1938,                temps[1] = -temps[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1939,"                splitAdd(result, temps, result);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1940,                COSINE_TABLE_A[i] = result[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1941,                COSINE_TABLE_B[i] = result[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1946,        for (int i = 0; i < 14; i++) {,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1947,            double xs[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1948,            double ys[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1949,            double as[] = new double[2];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1951,            as[0] = COSINE_TABLE_A[i];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1952,            as[1] = COSINE_TABLE_B[i];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1954,"            splitReciprocal(as, ys);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1956,            xs[0] = SINE_TABLE_A[i];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1957,            xs[1] = SINE_TABLE_B[i];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1959,"            splitMult(xs, ys, as);",0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1961,            TANGENT_TABLE_A[i] = as[0];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1962,            TANGENT_TABLE_B[i] = as[1];,0.01351,0,,0
org/apache/commons/math/util/FastMath,47,1965,    },0.01351,0,,0
org/apache/commons/math/complex/Complex,47,1127,"        return new Complex(realPart, imaginaryPart);",0.0125,0,,0
org/apache/commons/math/util/MathUtils,47,2229,"            = new Comparator<Pair<Double, double[]>>() {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2233,                switch (dir) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2235,                    val = o1.getKey().compareTo(o2.getKey());,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2236,                break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2238,                    val = o2.getKey().compareTo(o1.getKey());,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2239,                break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2242,                    throw new IllegalArgumentException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2244,                return val;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,101,        super();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,102,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,115,        long s = (long)x + (long)y;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,116,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,117,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,119,        return (int)s;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,133,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,149,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,151,"            ret = addAndCheck(b, a, pattern);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,155,            if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,156,                if (b < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,158,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,159,                        ret = a + b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,161,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,165,                    ret = a + b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,172,                if (a <= Long.MAX_VALUE - b) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,173,                    ret = a + b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,175,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,179,        return ret;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,208,"        checkBinomial(n, k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,209,        if ((n == k) || (k == 0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,210,            return 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,212,        if ((k == 1) || (k == n - 1)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,213,            return n;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,216,        if (k > n / 2) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,217,"            return binomialCoefficient(n, n - k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,225,        long result = 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,226,        if (n <= 61) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,228,            int i = n - k + 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,229,            for (int j = 1; j <= k; j++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,230,                result = result * i / j;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,231,                i++;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,233,        } else if (n <= 66) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,236,            int i = n - k + 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,237,            for (int j = 1; j <= k; j++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,244,"                final long d = gcd(i, j);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,245,                result = (result / (j / d)) * (i / d);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,246,                i++;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,248,        } else {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,252,            int i = n - k + 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,253,            for (int j = 1; j <= k; j++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,254,"                final long d = gcd(i, j);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,255,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,256,                i++;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,259,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,285,"        checkBinomial(n, k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,286,        if ((n == k) || (k == 0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,287,            return 1d;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,289,        if ((k == 1) || (k == n - 1)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,290,            return n;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,292,        if (k > n/2) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,293,"            return binomialCoefficientDouble(n, n - k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,295,        if (n < 67) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,296,"            return binomialCoefficient(n,k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,299,        double result = 1d;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,300,        for (int i = 1; i <= k; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,301,             result *= (double)(n - k + i) / (double)i;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,304,        return FastMath.floor(result + 0.5);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,326,"        checkBinomial(n, k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,327,        if ((n == k) || (k == 0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,328,            return 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,330,        if ((k == 1) || (k == n - 1)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,331,            return FastMath.log(n);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,338,        if (n < 67) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,339,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,346,        if (n < 1030) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,350,        if (k > n / 2) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,351,"            return binomialCoefficientLog(n, n - k);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,357,        double logSum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,360,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,361,            logSum += FastMath.log(i);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,365,        for (int i = 2; i <= k; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,366,            logSum -= FastMath.log(i);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,369,        return logSum;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,381,        if (n < k) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,385,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,388,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,401,"        if (equals(x, y, eps)) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,402,            return 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,403,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,404,            return -1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,406,        return 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,427,"        if (equals(x, y, maxUlps)) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,428,            return 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,429,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,430,            return -1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,432,        return 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,443,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,455,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,468,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,482,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,497,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,519,        int xInt = Float.floatToIntBits(x);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,520,        int yInt = Float.floatToIntBits(y);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,523,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,524,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,526,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,527,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,530,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,532,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,548,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,562,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,563,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,565,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,566,            return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,568,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,569,"            if (!equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,570,                return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,573,        return true;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,588,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,589,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,591,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,592,            return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,594,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,595,"            if (!equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,596,                return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,599,        return true;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,611,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,624,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,639,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,654,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,675,        long xInt = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,676,        long yInt = Double.doubleToLongBits(y);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,679,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,680,            xInt = SGN_MASK - xInt;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,682,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,683,            yInt = SGN_MASK - yInt;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,686,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,688,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,704,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,718,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,719,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,721,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,722,            return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,724,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,725,"            if (!equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,726,                return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,729,        return true;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,744,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,745,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,747,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,748,            return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,750,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,751,"            if (!equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,752,                return false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,755,        return true;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,783,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,784,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,787,        if (n > 20) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,788,            throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,790,        return FACTORIALS[n];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,807,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,811,        if (n < 21) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,812,            return factorial(n);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,814,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,825,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,826,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,829,        if (n < 21) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,830,            return FastMath.log(factorial(n));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,832,        double logSum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,833,        for (int i = 2; i <= n; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,834,            logSum += FastMath.log(i);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,836,        return logSum;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,869,        int u = p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,870,        int v = q;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,871,        if ((u == 0) || (v == 0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,872,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,873,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,876,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,883,        if (u > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,884,            u = -u;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,886,        if (v > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,887,            v = -v;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,890,        int k = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,891,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,893,            u /= 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,894,            v /= 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,895,            k++; // cast out twos.,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,897,        if (k == 31) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,898,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,903,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,909,            while ((t & 1) == 0) { // while t is even..,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,910,                t /= 2; // cast out twos,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,913,            if (t > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,914,                u = -t;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,916,                v = t;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,919,            t = (v - u) / 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,922,        } while (t != 0);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,923,        return -u * (1 << k); // gcd is u*2^k,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,956,        long u = p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,957,        long v = q;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,958,        if ((u == 0) || (v == 0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,959,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,960,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,963,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,970,        if (u > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,971,            u = -u;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,973,        if (v > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,974,            v = -v;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,977,        int k = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,978,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,980,            u /= 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,981,            v /= 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,982,            k++; // cast out twos.,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,984,        if (k == 63) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,985,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,990,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,996,            while ((t & 1) == 0) { // while t is even..,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,997,                t /= 2; // cast out twos,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1000,            if (t > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1001,                u = -t;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1003,                v = t;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1006,            t = (v - u) / 2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1009,        } while (t != 0);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1010,        return -u * (1L << k); // gcd is u*2^k,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1020,        return new Double(value).hashCode();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1031,        return Arrays.hashCode(value);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1042,        return (x >= ZB) ? PB : NB;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1054,        if (Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1055,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1057,        return (x >= 0.0) ? 1.0 : -1.0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1068,        if (Float.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1069,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1071,        return (x >= 0.0F) ? 1.0F : -1.0F;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1081,        return (x >= 0) ? 1 : -1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1091,        return (x >= 0L) ? 1L : -1L;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1102,        return (x >= ZS) ? PS : NS;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1128,        if (a == 0 || b == 0){,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1129,            return 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1131,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1132,        if (lcm == Integer.MIN_VALUE) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1133,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1136,        return lcm;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1162,        if (a == 0 || b == 0){,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1163,            return 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1165,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1166,        if (lcm == Long.MIN_VALUE){,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1167,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1170,        return lcm;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1190,        return FastMath.log(x)/FastMath.log(base);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1204,        long m = ((long)x) * ((long)y);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1205,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1206,            throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1208,        return (int)m;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1223,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1225,"            ret = mulAndCheck(b, a);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1227,            if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1228,                if (b < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1230,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1231,                        ret = a * b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1233,                        throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1235,                } else if (b > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1237,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1238,                        ret = a * b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1240,                        throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1245,                    ret = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1247,            } else if (a > 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1252,                if (a <= Long.MAX_VALUE / b) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1253,                    ret = a * b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1255,                    throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1259,                ret = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1262,        return ret;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1285,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1307,        final double p = FastMath.abs(period);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1308,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1333,         if (Double.isInfinite(normalizedSum)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1334,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1336,         if (Double.isNaN(normalizedSum)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1337,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1339,         double sum = 0d;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1340,         final int len = values.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1341,         double[] out = new double[len];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1342,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1343,             if (Double.isInfinite(values[i])) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1344,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1346,             if (!Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1347,                 sum += values[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1350,         if (sum == 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1351,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1353,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1354,             if (Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1355,                 out[i] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1357,                 out[i] = values[i] * normalizedSum / sum;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1360,         return out;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1397,            return (new BigDecimal,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1401,        } catch (NumberFormatException ex) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1402,            if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1403,                return x;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1405,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1420,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1436,        float sign = indicator(x);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1437,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1438,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1456,        switch (roundingMethod) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1458,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1459,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1461,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1463,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1465,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1466,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1468,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1469,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1471,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1473,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1475,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1476,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1477,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1478,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1480,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1482,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1485,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1486,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1487,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1488,            } else if (fraction < 0.5) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1489,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1492,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1494,                    unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1496,                    unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1499,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1502,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1503,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1504,            if (fraction >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1505,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1507,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1509,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1512,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1513,                throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1517,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1518,            break;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1520,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1531,        return unscaled;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1545,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1561,        if (Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1562,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1564,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1579,        if (Float.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1580,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1582,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1596,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1610,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1621,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1632,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1646,        long s = (long)x - (long)y;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1647,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1648,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1650,        return (int)s;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1665,        if (b == Long.MIN_VALUE) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1666,            if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1667,                ret = a - b;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1669,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1673,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1675,        return ret;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1687,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1688,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1691,        int result = 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1692,        int k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1693,        while (e != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1694,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1695,                result *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1697,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1698,            e = e >> 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1701,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1713,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1714,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1717,        int result = 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1718,        int k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1719,        while (e != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1720,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1721,                result *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1723,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1724,            e = e >> 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1727,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1739,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1740,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1743,        long result = 1l;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1744,        long k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1745,        while (e != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1746,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1747,                result *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1749,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1750,            e = e >> 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1753,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1765,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1766,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1769,        long result = 1l;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1770,        long k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1771,        while (e != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1772,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1773,                result *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1775,            k2p *= k2p;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1776,            e = e >> 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1779,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1791,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1792,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1795,        return k.pow(e);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1807,        if (e < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1808,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1811,        BigInteger result = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1812,        BigInteger k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1813,        while (e != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1814,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1815,                result = result.multiply(k2p);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1817,            k2p = k2p.multiply(k2p);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1818,            e = e >> 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1821,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1834,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1835,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1838,        BigInteger result = BigInteger.ONE;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1839,        BigInteger k2p    = k;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1840,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1841,            if (e.testBit(0)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1842,                result = result.multiply(k2p);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1844,            k2p = k2p.multiply(k2p);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1845,            e = e.shiftRight(1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1848,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1859,        double sum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1860,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1861,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1863,        return sum;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1874,      int sum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1875,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1876,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1878,      return sum;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1889,        double sum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1890,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1891,            final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1892,            sum += dp * dp;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1894,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1905,      double sum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1906,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1907,          final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1908,          sum += dp * dp;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1910,      return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1921,        double max = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1922,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1923,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1925,        return max;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1936,        int max = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1937,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1938,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1940,        return max;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1966,        double previous = val[0];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1967,        boolean ok = true;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1969,        int max = val.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1970,        for (int i = 1; i < max; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1971,            switch (dir) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1973,                if (strict) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1974,                    if (val[i] <= previous) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1975,                        ok = false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1978,                    if (val[i] < previous) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1979,                        ok = false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1984,                if (strict) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1985,                    if (val[i] >= previous) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1986,                        ok = false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1989,                    if (val[i] > previous) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1990,                        ok = false;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1996,                throw new IllegalArgumentException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1999,            if (!ok &&,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2001,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2003,            previous = val[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2006,        return ok;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2020,"        checkOrder(val, dir, strict, true);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2021,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2031,"        checkOrder(val, OrderDirection.INCREASING, true);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2032,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2042,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2043,            throw new NotFiniteNumberException(x);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2045,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2055,        for (int i = 0; i < val.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2056,            final double x = val[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2057,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2058,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2061,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2124,        double rdwarf = 3.834e-20;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2125,        double rgiant = 1.304e+19;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2126,        double s1 = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2127,        double s2 = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2128,        double s3 = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2129,        double x1max = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2130,        double x3max = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2131,        double floatn = (double) v.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2132,        double agiant = rgiant / floatn;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2133,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2134,            double xabs = Math.abs(v[i]);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2135,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2136,                if (xabs > rdwarf) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2137,                    if (xabs > x1max) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2138,                        double r = x1max / xabs;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2139,                        s1= 1 + s1 * r * r;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2140,                        x1max = xabs;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2141,                    } else {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2142,                        double r = xabs / x1max;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2143,                        s1 += r * r;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2144,                    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2146,                    if (xabs > x3max) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2147,                        double r = x3max / xabs;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2148,                        s3= 1 + s3 * r * r;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2149,                        x3max = xabs;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2150,                    } else {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2151,                        if (xabs != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2152,                            double r = xabs / x3max;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2153,                            s3 += r * r;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2154,                        },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2158,                s2 += xabs * xabs;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2162,        if (s1 != 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2163,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2165,            if (s2 == 0) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2166,                norm = x3max * Math.sqrt(s3);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2168,                if (s2 >= x3max) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2169,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2171,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2175,        return norm;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2190,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2191,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2206,        if (x == null ||,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2208,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2211,        final int len = x.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2212,"        final List<Pair<Double, double[]>> list",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2215,        final int yListLen = yList.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2216,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2217,            final double[] yValues = new double[yListLen];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2218,            for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2219,                double[] y = yList[j];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2220,                if (y.length != len) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2221,"                    throw new DimensionMismatchException(y.length, len);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2223,                yValues[j] = y[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2225,"            list.add(new Pair<Double, double[]>(x[i], yValues));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2228,"        final Comparator<Pair<Double, double[]>> comp",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2248,"        Collections.sort(list, comp);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2250,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2251,"            final Pair<Double, double[]> e = list.get(i);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2252,            x[i] = e.getKey();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2253,            final double[] yValues = e.getValue();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2254,            for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2255,                yList[j][i] = yValues[j];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2258,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2267,"         return copyOf(source, source.length);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2277,"         return copyOf(source, source.length);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2290,         final int[] output = new int[len];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2291,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2292,         return output;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2305,         final double[] output = new double[len];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2306,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2307,         return output;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2321,        if (o == null) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2322,"            throw new NullArgumentException(pattern, args);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2324,    },0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2335,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2375,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2376,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2377,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2378,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2379,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2380,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2383,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2387,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2388,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2389,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2390,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2391,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2392,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2395,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2399,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2400,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2405,        double result = s12High + (prod1Low + prod2Low + s12Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2407,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2410,            result = a1 * b1 + a2 * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2413,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2456,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2457,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2458,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2459,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2460,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2461,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2464,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2465,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2468,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2469,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2470,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2471,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2472,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2473,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2476,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2477,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2480,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2481,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2482,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2483,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2484,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2485,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2488,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2489,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2492,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2493,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2494,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2497,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2498,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2499,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2503,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2505,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2508,            result = a1 * b1 + a2 * b2 + a3 * b3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2511,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2559,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2560,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2561,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2562,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2563,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2564,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2567,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2568,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2571,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2572,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2573,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2574,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2575,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2576,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2579,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2580,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2583,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2584,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2585,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2586,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2587,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2588,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2591,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2592,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2595,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2596,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2597,        final double a4Low      = a4 - a4High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2598,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2599,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2600,        final double b4Low      = b4 - b4High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2603,        final double prod4High  = a4 * b4;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2604,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2607,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2608,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2609,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2612,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2613,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2614,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2617,        final double s1234High  = s123High + prod4High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2618,        final double s1234Prime = s1234High - prod4High;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2619,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2623,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2625,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2628,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2631,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2652,        final int len = a.length;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2653,        if (len != b.length) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2654,"            throw new DimensionMismatchException(len, b.length);",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2657,        final double[] prodHigh = new double[len];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2658,        double prodLowSum = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2660,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2661,            final double ai = a[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2662,            final double ca = SPLIT_FACTOR * ai;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2663,            final double aHigh = ca - (ca - ai);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2664,            final double aLow = ai - aHigh;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2666,            final double bi = b[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2667,            final double cb = SPLIT_FACTOR * bi;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2668,            final double bHigh = cb - (cb - bi);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2669,            final double bLow = bi - bHigh;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2670,            prodHigh[i] = ai * bi;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2671,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2675,            prodLowSum += prodLow;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2679,        final double prodHighCur = prodHigh[0];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2680,        double prodHighNext = prodHigh[1];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2681,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2682,        double sPrime = sHighPrev - prodHighNext;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2683,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2685,        final int lenMinusOne = len - 1;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2686,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2687,            prodHighNext = prodHigh[i + 1];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2688,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2689,            sPrime = sHighCur - prodHighNext;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2690,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2691,            sHighPrev = sHighCur;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2694,        double result = sHighPrev + (prodLowSum + sLowSum);,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2696,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2699,            result = 0;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2700,            for (int i = 0; i < len; ++i) {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2701,                result += a[i] * b[i];,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,2705,        return result;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1971,            switch (dir) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,275,    private FastMath() {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,276,    },0.0,0,,0
org/apache/commons/math/util/FastMath,47,288,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,47,289,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,47,291,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,292,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,47,293,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,310,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,311,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,314,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,315,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,318,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,319,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,322,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,323,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,324,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,326,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,328,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,329,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,331,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,332,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,333,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,336,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,337,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,338,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,339,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,342,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,344,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,347,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,348,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,349,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,350,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,351,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,352,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,354,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,355,      result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,356,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,364,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,365,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,366,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,369,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,370,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,373,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,374,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,377,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,378,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,381,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,382,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,383,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,388,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,389,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,390,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,392,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,393,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,395,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,396,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,397,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,400,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,401,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,402,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,403,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,406,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,408,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,410,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,411,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,414,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,415,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,416,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,417,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,418,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,419,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,421,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,422,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,423,      },0.0,0,,0
org/apache/commons/math/util/FastMath,47,425,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,426,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,428,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,429,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,432,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,433,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,434,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,435,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,436,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,437,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,438,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,440,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,441,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,442,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,444,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,447,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,47,448,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,47,451,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,452,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,453,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,454,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,455,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,456,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,458,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,459,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,462,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,463,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,466,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,474,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,476,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,477,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,480,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,481,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,484,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,485,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,488,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,489,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,492,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,493,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,494,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,498,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,499,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,501,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,503,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,504,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,507,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,508,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,509,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,510,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,511,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,514,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,515,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,516,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,517,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,518,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,520,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,521,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,522,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,525,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,526,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,527,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,528,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,531,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,534,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,536,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,538,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,539,      },0.0,0,,0
org/apache/commons/math/util/FastMath,47,541,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,543,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,545,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,546,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,549,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,550,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,553,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,554,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,555,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,556,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,557,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,559,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,560,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,561,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,564,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,565,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,566,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,567,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,570,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,573,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,575,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,577,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,580,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,581,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,584,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,592,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,601,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,602,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,603,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,604,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,608,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,609,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,611,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,612,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,613,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,614,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,615,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,616,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,617,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,619,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,623,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,633,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,634,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,635,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,636,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,640,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,641,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,643,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,644,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,645,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,646,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,647,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,648,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,649,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,651,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,655,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,665,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,47,674,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,47,682,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,690,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,698,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,47,722,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,741,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,742,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,744,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,745,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,746,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,747,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,749,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,752,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,754,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,47,755,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,756,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,757,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,759,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,762,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,764,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,47,765,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,766,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,767,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,769,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,772,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,774,            intPartA = EXP_INT_TABLE_A[750-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,775,            intPartB = EXP_INT_TABLE_B[750-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,777,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,779,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,781,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,782,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,783,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,784,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,786,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,789,            intPartA = EXP_INT_TABLE_A[750+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,790,            intPartB = EXP_INT_TABLE_B[750+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,797,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,798,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,799,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,805,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,814,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,815,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,816,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,817,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,818,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,825,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,826,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,832,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,834,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,835,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,837,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,840,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,842,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,843,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,846,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,854,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,863,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,47,864,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,867,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,870,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,871,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,872,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,873,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,875,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,876,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,877,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,878,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,885,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,887,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,888,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,889,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,893,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,894,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,895,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,897,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,898,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,899,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,901,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,902,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,903,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,905,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,910,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,911,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,912,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,913,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,914,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,915,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,917,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,918,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,919,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,920,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,922,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,923,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,924,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,925,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,928,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,930,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,931,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,932,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,934,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,935,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,936,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,938,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,939,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,940,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,944,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,945,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,946,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,948,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,950,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,951,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,953,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,955,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,956,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,958,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,960,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,961,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,963,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,965,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,966,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,967,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,968,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,969,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,970,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,971,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,973,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,974,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,975,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,977,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,988,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,47,989,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,47,992,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,993,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,996,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,997,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,998,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1001,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1051,            final double a = d * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1052,            split[0] = (d + a - d) * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1053,            split[1] = d - split[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1124,            in[0] = in[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1125,            in[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1267,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1273,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1274,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1275,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1278,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1284,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1285,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1288,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1296,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1298,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1299,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1302,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1306,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1307,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1308,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1309,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1320,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1321,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1322,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1323,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1324,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1325,                xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1326,                xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1328,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1329,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1331,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1333,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1334,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1336,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1337,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1338,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1341,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1342,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1344,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1345,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1346,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1350,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1351,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1353,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1354,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1355,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1357,                return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1380,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1381,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1382,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1383,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1384,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1387,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1388,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1389,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1390,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1393,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1394,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1396,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1398,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1399,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1401,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1402,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1403,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1406,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1407,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1409,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1410,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1411,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1415,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1416,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1424,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1425,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1426,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1480,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1481,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1493,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1494,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1497,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1498,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1501,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1502,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1503,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1505,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1507,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1508,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1509,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1514,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1516,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1517,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1519,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1523,        double y = x * 0.333333333333333 - 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1524,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1525,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1527,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1535,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1537,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1538,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1539,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1542,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1543,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1544,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1546,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1547,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1549,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1560,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1562,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1563,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1566,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1567,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1571,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1572,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1573,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1575,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1577,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1578,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1581,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1582,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1585,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1586,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1590,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1591,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1593,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1594,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1597,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1600,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1601,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1602,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1604,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1605,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1607,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1611,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1612,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1613,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1616,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1617,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1619,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1623,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1624,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1625,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1628,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1629,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1630,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1631,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1634,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1637,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1638,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1639,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1640,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1643,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1647,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1649,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1650,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1653,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1654,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1656,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1661,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1663,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1664,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1667,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1669,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1671,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1678,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1679,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1680,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1681,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1682,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1683,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1684,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1685,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1686,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1690,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1691,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1692,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1695,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1696,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1699,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1700,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1701,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1702,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1705,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1706,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1708,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1709,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1711,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1712,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1713,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1714,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1715,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1716,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1718,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,1720,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1975,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1977,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1978,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1979,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1980,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1983,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1985,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1995,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1997,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1998,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,1999,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2000,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2001,        p *= x2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2003,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2014,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2015,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2018,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2019,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2020,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2021,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2024,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2025,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2026,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2027,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2030,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2031,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2032,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2033,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2059,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2060,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2062,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2063,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2064,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2065,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2066,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2068,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2069,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2070,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2071,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2072,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2074,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2089,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2116,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2117,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2119,            c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2120,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2121,            a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2122,            b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2125,        result = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2127,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2138,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2139,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2141,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2142,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2143,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2145,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2158,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2159,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2162,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2163,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2164,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2165,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2168,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2169,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2170,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2171,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2174,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2175,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2176,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2177,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2202,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2203,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2206,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2207,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2208,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2209,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2210,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2212,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2213,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2214,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2215,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2216,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2218,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2219,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2221,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2222,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2226,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2228,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2229,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2230,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2231,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2232,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2234,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2235,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2236,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2237,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2238,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2240,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2241,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2243,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2244,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2246,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2248,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2249,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2263,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2266,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2267,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2268,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2270,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2271,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2272,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2275,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2276,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2277,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2279,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2282,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2283,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2284,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2287,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2290,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2307,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2308,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2311,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2312,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2315,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2316,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2322,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2323,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2325,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2326,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2327,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2328,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2329,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2331,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2332,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2333,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2337,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2338,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2340,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2341,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2343,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2344,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2345,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2346,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2348,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2349,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2351,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2352,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2353,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2356,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2358,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2361,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2362,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2364,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2365,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2367,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2370,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2372,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2376,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2377,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2378,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2379,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2380,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2383,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2385,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2386,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2387,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2388,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2390,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2392,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2396,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2397,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2399,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2400,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2401,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2403,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2415,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2418,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2419,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2420,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2423,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2424,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2426,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2427,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2429,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2430,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2431,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2432,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2434,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2435,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2437,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2438,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2439,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2442,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2444,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2447,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2448,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2450,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2451,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2453,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2456,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2458,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2462,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2463,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2464,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2465,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2466,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2469,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2471,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2472,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2473,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2474,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2476,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2478,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2482,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2483,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2484,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2485,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2486,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2487,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2488,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2491,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2493,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2494,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2495,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2496,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2498,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2500,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2504,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2505,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2507,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2508,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2511,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2512,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2513,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2514,    },0.0,0,,0
org/apache/commons/math/util/FastMath,47,2522,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2523,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2525,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2528,        xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2529,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2530,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2531,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2535,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2536,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2537,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2538,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2540,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2543,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2544,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2548,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2552,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2553,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2554,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2555,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2556,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2557,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2562,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2568,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2569,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2570,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2572,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2573,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2574,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2575,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2577,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2578,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2579,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2580,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2582,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2583,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2589,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2590,            },0.0,0,,0
org/apache/commons/math/util/FastMath,47,2591,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2592,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2593,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2596,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2597,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2600,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2602,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2604,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2606,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2608,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2610,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2620,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2623,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2624,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2625,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2628,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2629,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2633,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2634,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2638,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2639,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2640,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2641,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2642,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2643,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2648,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2654,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2655,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2656,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2658,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2659,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2660,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2661,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2663,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2664,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2665,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2666,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2668,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2669,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2675,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2676,            },0.0,0,,0
org/apache/commons/math/util/FastMath,47,2677,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2678,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2679,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2685,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2687,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2689,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2691,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2693,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2695,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2705,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2706,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2709,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2710,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2711,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2712,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2716,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2717,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2718,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2719,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2721,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2724,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2725,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2729,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2730,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2734,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2735,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2736,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2737,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2738,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2739,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2744,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2750,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2751,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2752,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2754,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2755,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2756,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2757,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2759,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2760,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2761,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2762,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2764,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2765,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2771,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2772,            },0.0,0,,0
org/apache/commons/math/util/FastMath,47,2773,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2774,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2775,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2778,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2780,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2781,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2783,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2784,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2785,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2787,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2788,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2789,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2790,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2794,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2795,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2797,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2800,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2801,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2804,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2813,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2823,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2826,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2827,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2830,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2832,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2833,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2834,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2837,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2838,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2842,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2843,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2845,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2846,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2848,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2849,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2850,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2852,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2853,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2854,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2857,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2858,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2859,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2860,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2861,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2864,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2867,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2869,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2870,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2871,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2872,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2873,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2874,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2875,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2876,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2877,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2878,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2880,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2881,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2883,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2884,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2885,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2887,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2888,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2889,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2892,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2894,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2895,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2899,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2900,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2903,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2914,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2915,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2916,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2917,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2918,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2919,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2920,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2923,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2925,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2926,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2927,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2930,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2936,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2937,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2938,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2939,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2940,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2942,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2943,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2945,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2947,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2948,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2950,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2951,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2952,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2954,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2955,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2959,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2960,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2963,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2974,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2983,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2984,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,47,2986,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,2992,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3003,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3004,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3005,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3008,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3009,                return Math.PI*3.0/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3012,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3015,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3016,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3017,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3020,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3021,                return -Math.PI*3.0/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3024,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3027,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3028,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3029,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3032,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3033,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3037,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,47,3039,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3040,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3043,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3044,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3050,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3051,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3052,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3055,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3056,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3061,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3062,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3063,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3066,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3067,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3070,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3071,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3073,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3075,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3076,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3077,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3079,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3080,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3084,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3086,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3094,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3095,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3098,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3099,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3102,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3103,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3106,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3107,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3110,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3111,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3117,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3118,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3119,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3122,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3123,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3126,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3127,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3129,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3130,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3132,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3133,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3134,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3138,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3139,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3140,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3141,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3144,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3147,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3150,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3151,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3152,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3153,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3155,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3156,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3158,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3159,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3160,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3162,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3170,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3171,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3174,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3175,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3178,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3179,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3182,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3183,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3186,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3187,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3193,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3194,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3195,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3198,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3199,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3202,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3203,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3205,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3206,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3208,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3209,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3210,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3213,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3214,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3215,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3216,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3219,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3222,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3223,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3224,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3227,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3230,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3231,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3234,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3235,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3237,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3238,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3240,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3241,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3242,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3244,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3253,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3254,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3255,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3257,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3258,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3259,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3263,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3264,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3265,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3266,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3269,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3271,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3275,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3278,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3282,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3285,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3286,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3287,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3288,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3289,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3291,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3296,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3297,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3298,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3301,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3302,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3303,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3305,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3306,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3307,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3308,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3309,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3310,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3312,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3313,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3315,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3316,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3317,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3319,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3322,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3324,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3325,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3328,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3338,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3339,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3343,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3344,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3346,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3347,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3349,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3350,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3351,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3353,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3363,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3364,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3368,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3369,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3371,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3372,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3374,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3383,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3392,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3401,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3419,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3420,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3422,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3431,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3432,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3434,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3446,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3447,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3451,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3452,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3454,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3455,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3457,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3458,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3462,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3463,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3464,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3465,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3468,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3470,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3472,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3474,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3475,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3479,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3482,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3483,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3484,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3486,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3488,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3492,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3496,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3499,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3500,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3501,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3503,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3504,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3506,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3507,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3509,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3512,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3513,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3515,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3530,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3531,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3535,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3536,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3538,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3539,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3541,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3542,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3546,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3547,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3548,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3549,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3552,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3554,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3556,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3558,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3559,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3563,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3566,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3567,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3568,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3570,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3572,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3576,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3580,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3583,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3584,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3585,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3587,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3588,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3590,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3591,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3593,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3596,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3597,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3599,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3639,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3640,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3641,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3642,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3643,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3644,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3645,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3646,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3651,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3652,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3653,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3654,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3656,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3695,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3696,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3697,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3698,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3699,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3700,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3701,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3702,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3707,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3708,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3709,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3710,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3712,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3724,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3725,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3728,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3729,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3732,        y = (long) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3733,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3734,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3737,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3738,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3741,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3751,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3752,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3755,        y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3756,        if (y == x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3757,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3760,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3762,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3763,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3766,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3774,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3775,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3777,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3778,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3779,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3781,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3783,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3784,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3788,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3789,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3797,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3805,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3814,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3823,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3832,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3833,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3835,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3836,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3839,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3840,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3844,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3845,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3846,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3848,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3857,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3858,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3860,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3861,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3864,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3865,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3869,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3870,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3871,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3873,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3882,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3891,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3900,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3901,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3903,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3904,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3907,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3908,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3912,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3913,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3914,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3916,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3925,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3926,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3928,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3929,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3932,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3933,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3937,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3938,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3939,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3941,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3959,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3960,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3961,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3962,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3965,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3966,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3967,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3969,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3970,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3972,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3976,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3979,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3980,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,3983,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,3986,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,47,4014,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,47,4026,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4027,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4028,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4029,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4031,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4043,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4044,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4045,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4046,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4048,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4061,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,47,4074,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1946,    public static enum OrderDirection {,0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1948,"        INCREASING,",0.0,0,,0
org/apache/commons/math/util/MathUtils,47,1950,        DECREASING,0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,47,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,47,38,    },0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,47,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,47,48,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,70,        this.min = min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,72,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,47,85,        return min;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,47,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,47,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,47,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,47,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,37,    private final ExceptionContext context = new ExceptionContext();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,45,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,46,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,50,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,55,        return this;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,61,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,47,67,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,46,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,57,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,47,63,        return dimension;,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,47,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,47,42,    },0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,47,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,47,51,    },0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,47,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,47,41,    },0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,47,53,"        super(specific, wrong, args);",0.0,0,,0
org/apache/commons/math/exception/NotFiniteNumberException,47,54,    },0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,62,    },0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,89,        this.direction = direction;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,90,        this.strict = strict;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,91,        this.index = index;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,92,        this.previous = previous;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,93,    },0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,99,        return direction;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,105,        return strict;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,113,        return index;,0.0,0,,0
org/apache/commons/math/exception/NonMonotonousSequenceException,47,119,        return previous;,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,38,    private final ExceptionContext context = new ExceptionContext();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,44,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,45,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,55,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,56,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,57,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,61,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,66,        return this;,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,72,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,47,78,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,69,        this.max = max;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,71,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,47,84,        return max;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,89,"        this(real, 0.0);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,90,    },0.0,0,,0
org/apache/commons/math/complex/Complex,47,117,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,120,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,123,            if (imaginary == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,124,                return FastMath.abs(real);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,126,            double q = real / imaginary;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,127,            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,130,                return FastMath.abs(imaginary);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,159,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,175,        if (isNaN || Double.isNaN(addend)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,176,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,179,"        return createComplex(real + addend, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,197,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,198,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,201,"        return createComplex(real, -imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,253,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,261,            return ZERO;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,289,        if (isNaN || Double.isNaN(divisor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,290,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,292,        if (divisor == 0d) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,293,            return NaN;,0.0,1,,0
org/apache/commons/math/complex/Complex,47,295,        if (Double.isInfinite(divisor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,296,            return !isInfinite() ? ZERO : NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,298,"        return createComplex(real / divisor,",0.0,0,,0
org/apache/commons/math/complex/Complex,47,320,            return true;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,325,                return isNaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,330,        return false;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,342,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,343,            return 7;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,345,        return 37 * (17 * MathUtils.hash(imaginary) +,0.0,0,,0
org/apache/commons/math/complex/Complex,47,375,        return isNaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,426,            return INF;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,441,        if (isNaN || Double.isNaN(factor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,442,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,444,        if (Double.isInfinite(real) ||,0.0,0,,0
org/apache/commons/math/complex/Complex,47,448,            return INF;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,450,"        return createComplex(real * factor, imaginary * factor);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,461,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,462,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,465,"        return createComplex(-real, -imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,490,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,506,        if (isNaN || Double.isNaN(subtrahend)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,507,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,509,"        return createComplex(real - subtrahend, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,529,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,530,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,533,        return this.add(this.sqrt1z().multiply(I)).log(),0.0,0,,0
org/apache/commons/math/complex/Complex,47,554,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,555,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,558,        return sqrt1z().add(this.multiply(I)).log(),0.0,0,,0
org/apache/commons/math/complex/Complex,47,580,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,620,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,621,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,624,"        return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,660,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,661,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,664,"        return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,701,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,702,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,705,        double expReal = FastMath.exp(real);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,706,"        return createComplex(expReal *  FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,776,        MathUtils.checkNotNull(x);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,777,        return this.log().multiply(x).exp();,0.0,0,,0
org/apache/commons/math/complex/Complex,47,788,        return this.log().multiply(x).exp();,0.0,0,,0
org/apache/commons/math/complex/Complex,47,824,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,825,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,828,"        return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,864,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,865,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,868,"        return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,907,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,908,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,911,        if (real == 0.0 && imaginary == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,912,"            return createComplex(0.0, 0.0);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,915,        double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,916,        if (real >= 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,917,"            return createComplex(t, imaginary / (2.0 * t));",0.0,0,,0
org/apache/commons/math/complex/Complex,47,919,"            return createComplex(FastMath.abs(imaginary) / (2.0 * t),",0.0,0,,0
org/apache/commons/math/complex/Complex,47,942,"        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",0.0,0,,0
org/apache/commons/math/complex/Complex,47,978,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,979,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,982,        double real2 = 2.0 * real;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,983,        double imaginary2 = 2.0 * imaginary;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,984,        double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,986,"        return createComplex(FastMath.sin(real2) / d,",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1023,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1024,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1027,        double real2 = 2.0 * real;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1028,        double imaginary2 = 2.0 * imaginary;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1029,        double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1031,"        return createComplex(MathUtils.sinh(real2) / d,",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1055,"        return FastMath.atan2(getImaginary(), getReal());",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1082,        if (n <= 0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1083,"            throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1087,        final List<Complex> result = new ArrayList<Complex>();,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1089,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1090,            result.add(NaN);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1091,            return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1093,        if (isInfinite()) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1094,            result.add(INF);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1095,            return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1099,"        final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1102,        final double nthPhi = getArgument() / n;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1103,        final double slice = 2 * FastMath.PI / n;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1104,        double innerPart = nthPhi;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1105,        for (int k = 0; k < n ; k++) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1107,            final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1108,            final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1109,"            result.add(createComplex(realPart, imaginaryPart));",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1110,            innerPart += slice;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1113,        return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1139,        if (Double.isNaN(realPart) ||,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1141,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1143,"        return new Complex(realPart, imaginaryPart);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1153,        if (Double.isNaN(realPart)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1154,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1156,        return new Complex(realPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1168,"        return createComplex(real, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,47,1173,        return ComplexField.getInstance();,0.0,0,,0
org/apache/commons/math/complex/Complex,47,1179,"        return ""("" + real + "", "" + imaginary + "")"";",0.0,0,,0
org/apache/commons/math/complex/Complex,47,56,"public class Complex implements FieldElement<Complex>, Serializable  {",0.0,0,,0
