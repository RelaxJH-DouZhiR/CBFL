project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",4.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,4.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,4.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,4.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,528,    },4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },4.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3508,            return a;,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3511,            return b;,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,4.0,0,,0
org/apache/commons/math3/util/FastMath,21,3523,        return a;,4.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2.0,1,,1
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,2.0,1,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },2.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,2.0,0,,0
org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,2.0,0,,0
org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,2.0,0,,0
org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,1.33333,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,1.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,1.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,1.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,1.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,1.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0.66667,0,,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0.66667,0,,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0.66667,0,,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0.66667,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0.66667,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,0.66667,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,545,    },0.66667,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,62,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0.57143,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,63,        if (rowDimension < 1) {,0.57143,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,66,        if (columnDimension < 1) {,0.57143,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,69,    },0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,56,"        super(rowDimension, columnDimension);",0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,57,        data = new double[rowDimension][columnDimension];,0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,58,    },0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,246,        return copyOut();,0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,303,        data[row][column] = value;,0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,304,    },0.57143,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,81,        return (rows * columns <= 4096) ?,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,113,    private static final double LN_QUICK_COEF[][] = {,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,126,    private static final double LN_HI_PREC_COEF[][] = {,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,139,    private static final double SINE_TABLE_A[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,158,    private static final double SINE_TABLE_B[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,177,    private static final double COSINE_TABLE_A[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,196,    private static final double COSINE_TABLE_B[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,216,    private static final double TANGENT_TABLE_A[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,235,    private static final double TANGENT_TABLE_B[] =,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,254,    private static final long RECIP_2PI[] = new long[] {,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,275,    private static final long PI_O_4_BITS[] = new long[] {,0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.57143,0,,0
org/apache/commons/math3/util/FastMath,21,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.57143,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,296,        return data[row][column];,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,323,        return (data == null) ? 0 : data.length;,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,506,        final int nRows = this.getRowDimension();,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,509,        for (int i = 0; i < nRows; i++) {,0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.5,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,512,        return out;,0.5,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0.5,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,117,    },0.5,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,215,        return getInstance(Locale.getDefault());,0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,389,"        checkRowIndex(m, row);",0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,390,"        checkColumnIndex(m, column);",0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,391,    },0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,402,        if (row < 0 ||,0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,407,    },0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,418,        if (column < 0 || column >= m.getColumnDimension()) {,0.5,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,422,    },0.5,0,,0
org/apache/commons/math3/util/CompositeFormat,21,43,        return getDefaultNumberFormat(Locale.getDefault());,0.5,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,53,    protected AbstractRealMatrix() {},0.18182,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,44,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0.18182,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,47,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0.18182,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,48,    },0.18182,0,,0
org/apache/commons/math3/linear/RealLinearOperator,21,53,public abstract class RealLinearOperator {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,75,        copyIn(d);,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,76,    },0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,262,        if (data == null) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,263,            if (row > 0) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,266,            if (column > 0) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,269,            MathUtils.checkNotNull(subMatrix);,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,270,            final int nRows = subMatrix.length;,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,271,            if (nRows == 0) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,275,            final int nCols = subMatrix[0].length;,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,276,            if (nCols == 0) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,279,            data = new double[subMatrix.length][nCols];,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,280,            for (int i = 0; i < data.length; ++i) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,281,                if (subMatrix[i].length != nCols) {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,286,        } else {,0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,290,    },0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,526,"        setSubMatrix(in, 0, 0);",0.18182,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,527,    },0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,101,    },0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,133,                            final NumberFormat format) {,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,134,        this.prefix            = prefix;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,135,        this.suffix            = suffix;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,136,        this.rowPrefix         = rowPrefix;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,137,        this.rowSuffix         = rowSuffix;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,138,        this.rowSeparator      = rowSeparator;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,139,        this.columnSeparator   = columnSeparator;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,140,        this.format            = format;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,142,        this.format.setGroupingUsed(false);,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,143,    },0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,207,        return format;,0.18182,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.18182,0,,0
org/apache/commons/math3/util/MathUtils,21,264,        if (o == null) {,0.18182,0,,0
org/apache/commons/math3/util/MathUtils,21,267,    },0.18182,0,,0
org/apache/commons/math3/util/CompositeFormat,21,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.18182,0,,0
org/apache/commons/math3/util/CompositeFormat,21,55,        nf.setMaximumFractionDigits(10);,0.18182,0,,0
org/apache/commons/math3/util/CompositeFormat,21,56,        return nf;,0.18182,0,,0
org/apache/commons/math3/linear/RealVector,21,1046,        public Entry() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1047,            setIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1048,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1056,            return getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1065,"            setEntry(getIndex(), value);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1066,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1074,            return index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1083,            this.index = index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1084,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,60,public abstract class RealVector {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,99,"        setEntry(index, getEntry(index) + increment);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,100,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,165,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,166,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,177,        int d = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,178,        if (d != n) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,179,"            throw new DimensionMismatchException(d, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,181,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,190,        if (index < 0 ||,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,195,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,207,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,208,        if ((start < 0) || (start >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,209,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,212,        if ((end < 0) || (end >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,213,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,216,        if (end < start) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,218,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,221,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,233,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,234,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,235,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,236,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,237,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,238,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,239,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,240,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,241,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,254,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,255,        RealVector result = v.mapMultiply(-1d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,256,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,257,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,258,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,259,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,260,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,261,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,262,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,273,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,284,        if (d != 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,285,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,287,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,306,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,307,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,308,        final int n = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,309,        for (int i = 0; i < n; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,310,            d += getEntry(i) * v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,312,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,328,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,329,        final double vNorm = v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,331,        if (norm == 0 ||,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,333,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,335,        return dotProduct(v) / (norm * vNorm);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,395,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,396,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,397,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,398,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,399,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,400,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,401,            d += diff * diff;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,402,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,403,        return FastMath.sqrt(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,417,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,418,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,419,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,420,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,421,            final double value = e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,422,            sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,423,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,424,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,438,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,439,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,440,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,441,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,442,            norm += FastMath.abs(e.getValue());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,443,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,444,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,458,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,459,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,460,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,461,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,462,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,463,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,464,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,480,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,481,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,482,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,483,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,484,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,485,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,486,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,487,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,506,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,507,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,508,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,509,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,510,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,511,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,512,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,513,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,523,        int minIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,524,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,525,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,526,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,527,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,528,            if (entry.getValue() <= minValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,529,                minIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,530,                minValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,532,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,533,        return minIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,543,        final int minIndex = getMinIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,544,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,554,        int maxIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,555,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,556,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,557,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,558,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,559,            if (entry.getValue() >= maxValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,560,                maxIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,561,                maxValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,563,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,564,        return maxIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,574,        final int maxIndex = getMaxIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,575,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,587,        return copy().mapMultiplyToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,598,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,609,        return copy().mapSubtractToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,620,        return mapAddToSelf(-d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,631,        return copy().mapDivideToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,642,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,652,        final int m = this.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,653,        final int n = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,655,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,656,"            product = new OpenMapRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,658,"            product = new Array2DRowRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,660,        for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,661,            for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,662,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,665,        return product;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,680,        final double norm2 = v.dotProduct(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,681,        if (norm2 == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,682,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,684,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,693,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,694,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,695,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,696,            e.setValue(value);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,697,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,698,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,708,        int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,709,        double[] values = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,710,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,711,            values[i] = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,713,        return values;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,724,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,725,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,726,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,728,        return mapDivide(norm);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,738,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,739,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,740,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,742,        mapDivideToSelf(getNorm());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,743,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,761,        return new SparseEntryIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,775,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,776,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,821,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,838,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,839,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,840,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,841,            e.setValue(function.value(e.getValue()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,842,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,843,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,861,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,878,        checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,879,        for (int i = 0; i < getDimension(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,880,            final double xi = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,881,            final double yi = y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,882,"            setEntry(i, a * xi + b * yi);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,884,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,898,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,899,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,900,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,901,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,903,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,921,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,922,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,923,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,924,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,926,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,941,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,961,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,974,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,975,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,976,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,977,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,979,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,997,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,998,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,999,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1000,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1002,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1017,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1037,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1112,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1125,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1230,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1150,        protected SparseEntryIterator() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1151,            dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1152,            current = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1153,            next = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1154,            if (next.getValue() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1155,                advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1157,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1165,            if (e == null) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1166,                return;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1169,                e.setIndex(e.getIndex() + 1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1170,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1171,            if (e.getIndex() >= dim) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1172,                e.setIndex(-1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1174,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1178,            return next.getIndex() >= 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1183,            int index = next.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1184,            if (index < 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1185,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1187,            current.setIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1188,            advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1189,            return current;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1198,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,94,"        super(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,95,        this.rows = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,96,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,103,"        blocks = createBlocksLayout(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,104,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,121,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,139,"        super(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,140,        this.rows = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,141,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,147,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,149,            blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,152,            blocks = blockData;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,155,        int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,157,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,159,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,160,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,163,                if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,164,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,168,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,192,        final int rows = rawData.length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,193,        final int columns = rawData[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,194,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,195,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,198,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,199,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,200,            if (length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,201,"                throw new DimensionMismatchException(columns, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,206,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,207,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,208,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,209,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,211,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,212,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,213,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,215,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,218,                final double[] block = new double[iHeight * jWidth];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,219,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,222,                int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,223,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,225,                    index += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,227,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,231,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,247,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,248,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,250,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,251,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,252,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,253,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,255,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,256,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,257,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,259,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,260,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,261,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,265,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,271,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,278,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,281,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,282,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,285,        return copied;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,292,            return add((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,293,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,295,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,297,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,300,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,301,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,302,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,305,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,306,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,307,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,308,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,309,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,310,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,311,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,312,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,313,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,314,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,315,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,319,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,323,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,337,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,339,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,342,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,343,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,344,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,345,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,346,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,347,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,351,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,358,            return subtract((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,359,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,361,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,363,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,366,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,367,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,368,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,371,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,372,                    final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,373,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,374,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,375,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,376,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,377,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,378,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,379,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,380,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,381,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,385,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,389,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,403,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,405,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,408,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,409,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,410,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,411,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,412,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,413,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,417,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,424,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,428,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,429,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,430,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,431,                outBlock[k] = tBlock[k] + d;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,435,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,448,                outBlock[k] = tBlock[k] * d;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,452,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,459,            return multiply((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,460,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,462,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,464,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,467,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,468,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,469,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,470,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,472,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,473,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,474,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,477,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,480,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,481,                        final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,482,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,483,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,484,                        int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,485,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,486,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,487,                            final int lEnd = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,488,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,489,                                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,490,                                int r = rStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,491,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,492,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,493,                                    ++r;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,495,                                outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,496,                                ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,501,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,505,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,519,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,521,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,524,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,525,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,527,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,528,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,530,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,531,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,532,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,533,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,534,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,537,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,540,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,541,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,542,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,543,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,544,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,545,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,546,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,547,                        final int lEnd = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,548,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,549,                            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,550,                            int l = lStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,551,                            int n = nStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,552,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,553,                                sum += tBlock[l] * mBlock[n] +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,557,                                l += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,558,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,560,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,561,                                sum += tBlock[l++] * mBlock[n];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,562,                                n += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,564,                            outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,565,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,570,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,574,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,580,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,581,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,583,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,584,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,585,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,586,            int regularPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,587,            int lastPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,588,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,589,                final double[] dataP = data[p];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,590,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,591,                int dataPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,592,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,593,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,594,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,596,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,597,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,598,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,602,        return data;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,608,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,609,        double maxColSum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,610,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,611,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,612,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,613,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,614,                final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,615,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,616,                for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,617,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,618,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,619,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,621,                    colSums[j] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,624,            for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,625,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,628,        return maxColSum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,634,        double sum2 = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,635,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,636,            for (final double entry : blocks[blockIndex]) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,637,                sum2 += entry * entry;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,640,        return FastMath.sqrt(sum2);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,648,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,651,        final BlockRealMatrix out =,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,655,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,656,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,657,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,658,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,661,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,662,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,663,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,664,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,665,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,666,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,669,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,670,                final double[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,671,                final int index = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,672,                final int width = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,674,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,675,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,676,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,678,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,680,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,681,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,685,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,689,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,693,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,697,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,699,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,710,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,712,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,713,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,717,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,721,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,723,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,729,                ++qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,731,            ++pBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,734,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,757,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,758,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,759,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,760,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,761,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,762,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,763,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,765,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,772,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,773,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,774,        if (refLength == 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,775,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,777,        final int endRow = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,778,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,779,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,780,        for (final double[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,781,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,782,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,787,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,788,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,789,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,790,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,793,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,794,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,795,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,796,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,797,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,799,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,800,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,801,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,802,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,803,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,804,                final int jLength = jEnd - jStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,807,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,808,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,809,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,816,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,821,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,822,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,825,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,826,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,827,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,828,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,829,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,830,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,831,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,832,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,833,            final int available = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,834,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,835,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,836,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,837,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,838,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,840,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,841,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,845,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,852,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,855,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,853,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,854,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,856,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,871,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,872,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,873,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,875,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,881,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,882,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,883,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,884,        int mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,885,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,886,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,887,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,888,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,889,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,890,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,891,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,892,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,893,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,894,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,896,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,897,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,900,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,905,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,906,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,909,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,910,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,911,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,912,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,913,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,914,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,915,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,916,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,917,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,918,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,919,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,920,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,921,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,923,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,927,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,934,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,937,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,935,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,936,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,938,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,953,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,954,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,955,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,957,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,963,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,964,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,965,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,966,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,967,        int mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,968,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,969,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,970,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,971,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,972,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,973,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,974,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,975,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,977,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,980,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,985,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,986,        final double[] outData = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,989,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,990,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,991,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,992,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,993,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,994,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,995,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,996,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,999,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1006,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1009,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1007,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1008,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1010,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1015,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1016,        final double[] outData = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1019,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1020,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1021,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1022,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1023,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1024,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1025,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1026,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1027,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1031,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1038,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1041,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1039,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1040,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1042,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1047,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1048,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1051,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1052,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1053,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1054,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1055,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1056,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1057,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1058,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1061,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1067,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1068,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1069,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1070,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1074,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1075,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1076,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1077,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1078,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1079,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1080,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1081,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1083,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1088,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1089,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1092,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1093,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1094,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1095,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1096,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1097,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1098,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1099,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1100,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1104,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1110,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1111,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1112,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1113,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1119,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1120,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1123,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1125,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1128,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1133,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1134,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1135,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1136,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1138,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1144,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1145,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1146,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1147,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1149,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1150,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1155,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1156,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1157,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1158,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1160,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1161,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1171,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1172,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1177,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1178,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1179,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1182,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1183,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1184,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1186,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1187,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1188,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1189,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1190,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1191,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1192,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1193,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1194,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1195,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1196,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1197,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1198,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1199,                        l+= lInc;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1203,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1207,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1213,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1219,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1225,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1226,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1228,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1231,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1232,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1233,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1235,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1236,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1237,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1238,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1240,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1241,                    int q = qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1242,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1243,                        sum += block[k]     * v[q]     +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1247,                        k += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1248,                        q += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1250,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1251,                        sum += block[k++] * v[q++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1253,                    out[p] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1258,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1264,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1265,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1267,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1270,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1271,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1272,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1273,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1274,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1275,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1276,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1277,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1278,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1279,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1280,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1281,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1282,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1283,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1284,                    int p = pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1285,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1286,                        sum += block[k]           * v[p]     +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1290,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1291,                        p += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1293,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1294,                        sum += block[k] * v[p++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1295,                        k += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1297,                    out[q] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1302,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1308,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1309,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1310,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1311,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1312,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1313,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1314,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1315,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1316,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1317,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1318,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1319,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1320,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1321,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1326,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1332,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1333,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1334,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1335,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1336,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1337,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1338,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1339,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1340,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1341,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1342,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1343,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1344,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1345,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1350,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1358,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1359,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1360,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1361,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1362,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1363,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1365,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1367,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1368,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1369,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1370,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1371,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1372,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1373,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1374,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1379,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1387,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1388,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1389,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1390,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1391,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1392,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1393,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1394,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1395,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1396,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1397,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1398,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1399,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1400,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1401,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1402,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1403,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1408,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1414,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1415,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1416,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1417,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1418,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1419,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1420,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1421,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1422,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1423,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1424,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1427,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1430,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1433,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1439,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1440,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1441,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1442,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1443,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1444,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1445,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1446,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1447,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1448,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1449,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1450,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1451,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1452,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1455,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1458,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1466,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1467,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1468,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1469,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1470,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1471,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1472,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1473,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1474,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1475,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1476,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1477,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1479,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1480,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1481,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1482,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1487,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1495,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1496,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1497,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1498,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1499,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1500,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1501,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1502,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1503,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1504,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1505,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1506,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1507,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1508,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1509,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1510,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1511,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1516,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1525,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,1534,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,21,69,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,64,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,67,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,82,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,83,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,85,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,86,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,91,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,113,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,114,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,115,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,116,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,117,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,118,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,122,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,127,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,128,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,129,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,130,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,131,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,132,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,136,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,163,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,168,        if (p < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,169,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,172,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,173,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,176,        if (p == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,177,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,180,        if (p == 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,181,            return this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,184,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,193,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,194,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,195,        int maxI = -1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,197,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,198,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,199,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,200,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,203,                if (maxI == -1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,204,                    maxI = pos;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,209,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,210,        results[0] = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,212,        for (int i = 1; i <= maxI; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,213,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,216,        RealMatrix result = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,218,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,219,            result = result.multiply(results[i]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,220,        },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,222,        return result;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,227,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,229,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,230,            final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,231,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,232,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,236,        return data;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,279,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,306,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,308,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,310,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,311,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,312,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,316,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,322,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,325,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,327,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,337,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,345,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,346,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,347,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,348,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,349,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,354,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,378,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,383,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,384,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,386,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,391,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,392,            final double[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,393,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,394,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,397,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,402,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,403,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,404,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,405,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,408,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,409,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,410,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,413,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,414,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,415,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,419,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,420,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,421,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,422,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,424,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,425,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,426,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,429,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,433,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,434,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,435,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,436,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,437,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,440,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,445,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,446,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,447,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,449,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,453,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,454,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,456,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,460,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,461,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,462,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,463,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,464,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,467,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,472,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,473,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,474,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,476,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,480,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,481,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,483,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,487,"        return new ArrayRealVector(getRow(row), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,492,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,493,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,494,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,495,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,498,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,499,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,501,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,505,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,510,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,511,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,512,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,513,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,516,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,517,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,519,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,523,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,524,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,525,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,526,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,527,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,530,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,535,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,536,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,537,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,538,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,540,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,541,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,543,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,547,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,548,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,549,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,550,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,551,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,554,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,559,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,560,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,561,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,562,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,564,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,565,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,567,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,577,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,578,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,579,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,583,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,584,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,585,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,607,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,630,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,631,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,632,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,633,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,635,        double trace = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,636,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,637,"            trace += getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,639,        return trace;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,644,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,645,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,646,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,647,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,650,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,651,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,652,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,653,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,654,"                sum += getEntry(row, i) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,656,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,659,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,666,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,667,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,668,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,669,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,670,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,671,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,674,            final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,675,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,676,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,677,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,678,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,680,                out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,683,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,690,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,691,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,692,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,693,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,696,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,697,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,698,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,699,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,700,"                sum += getEntry(i, col) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,702,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,705,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,711,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,712,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,714,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,715,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,716,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,717,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,720,            final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,721,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,722,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,723,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,724,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,726,                out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,729,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,735,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,736,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,737,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,738,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,739,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,740,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,741,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,742,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,745,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,750,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,751,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,752,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,753,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,754,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,755,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,758,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,765,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,766,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,768,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,769,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,770,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,771,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,772,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,775,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,782,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,783,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,785,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,786,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,787,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,790,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,795,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,796,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,798,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,799,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,800,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,801,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,802,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,805,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,810,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,811,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,812,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,813,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,814,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,815,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,818,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,825,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,826,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,828,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,829,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,830,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,831,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,832,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,835,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,842,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,843,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,845,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,846,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,847,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,850,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,855,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,867,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,874,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,883,        final StringBuilder res = new StringBuilder();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,884,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,885,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,886,        res.append(shortClassName);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,887,        res.append(DEFAULT_FORMAT.format(this));,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,888,        return res.toString();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,901,        if (object == this ) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,902,            return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,904,        if (object instanceof RealMatrix == false) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,905,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,907,        RealMatrix m = (RealMatrix) object;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,908,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,909,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,910,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,911,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,913,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,914,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,915,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,916,                    return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,920,        return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,930,        int ret = 7;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,931,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,932,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,933,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,934,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,935,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,936,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,937,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,941,        return ret;,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,21,94,        throw new UnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,21,107,        return false;,0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,21,38,"        super(value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,21,39,    },0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,21,48,"        super(specific, value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,21,49,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,21,85,        return min;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,21,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,21,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,21,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,21,54,        return argument;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,21,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/linear/NonSquareMatrixException,21,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,,0
org/apache/commons/math3/linear/NonSquareMatrixException,21,41,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,46,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,57,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,21,63,        return dimension;,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,48,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,54,        return getWrongDimension(0);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,60,        return getExpectedDimension(0);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,66,        return getWrongDimension(1);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,21,72,        return getExpectedDimension(1);,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,46,    },0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,59,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,60,        this.wrong = wrong.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,61,        this.expected = expected.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,62,    },0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,68,        return wrong.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,74,        return expected.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,82,        return wrong[index];,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,21,89,        return expected[index];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,56,    public ArrayRealVector() {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,57,        data = new double[0];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,58,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,65,    public ArrayRealVector(int size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,66,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,67,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,75,"    public ArrayRealVector(int size, double preset) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,76,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,77,"        Arrays.fill(data, preset);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,78,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,85,    public ArrayRealVector(double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,86,        data = d.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,87,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,104,        throws NullArgumentException {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,105,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,106,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,108,        data = copyArray ? d.clone() :  d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,109,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,122,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,123,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,124,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,126,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,129,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,130,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,131,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,138,    public ArrayRealVector(Double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,139,        data = new double[d.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,140,        for (int i = 0; i < d.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,141,            data[i] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,143,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,156,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,157,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,158,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,160,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,163,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,164,        for (int i = pos; i < pos + size; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,165,            data[i - pos] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,167,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,175,    public ArrayRealVector(RealVector v) throws NullArgumentException {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,176,        if (v == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,177,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,179,        data = new double[v.getDimension()];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,180,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,181,            data[i] = v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,183,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,192,"        this(v, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,193,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,203,        data = deep ? v.data.clone() : v.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,204,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,212,        data = new double[v1.data.length + v2.data.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,215,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,223,        final int l1 = v1.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,224,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,225,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,226,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,227,        for (int i = 0; i < l2; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,228,            data[l1 + i] = v2.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,230,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,238,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,239,        final int l2 = v2.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,240,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,241,        for (int i = 0; i < l1; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,242,            data[i] = v1.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,244,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,245,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,253,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,254,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,255,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,256,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,257,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,258,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,266,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,267,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,268,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,269,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,270,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,271,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,278,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,279,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,280,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,281,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,282,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,283,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,284,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,289,"        return new ArrayRealVector(this, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,296,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,297,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,298,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,299,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,300,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,301,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,302,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,303,                resultData[i] = data[i] + vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,305,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,307,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,308,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,309,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,310,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,311,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,312,                out[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,313,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,314,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,322,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,323,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,324,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,325,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,326,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,327,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,328,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,329,                resultData[i] = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,331,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,333,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,334,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,335,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,336,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,337,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,338,                out[e.getIndex()] -= e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,339,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,340,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,347,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,353,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,354,            data[i] = function.value(data[i]);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,356,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,362,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,363,            data[i] = data[i] + d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,365,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,371,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,372,            data[i] = data[i] - d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,374,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,380,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,381,            data[i] = data[i] * d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,383,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,389,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,390,            data[i] = data[i] / d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,392,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,399,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,400,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,401,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,402,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,403,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,404,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,405,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,406,                resultData[i] = data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,408,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,410,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,411,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,412,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,413,                out[i] *= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,415,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,423,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,424,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,425,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,426,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,427,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,428,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,429,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,430,                resultData[i] = data[i] / vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,432,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,434,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,435,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,436,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,437,                out[i] /= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,439,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,450,        return data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,456,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,457,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,458,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,459,            double dot = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,460,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,461,                dot += data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,463,            return dot;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,465,        return super.dotProduct(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,471,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,472,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,473,            sum += a * a;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,475,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,481,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,482,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,483,            sum += FastMath.abs(a);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,485,        return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,491,        double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,492,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,493,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,495,        return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,501,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,502,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,503,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,504,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,505,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,506,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,507,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,509,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,511,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,512,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,513,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,514,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,515,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,517,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,525,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,526,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,527,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,528,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,529,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,530,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,531,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,533,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,535,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,536,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,537,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,538,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,539,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,541,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,549,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,550,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,551,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,552,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,553,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,554,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,555,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,557,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,559,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,560,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,561,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,562,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,563,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,565,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,572,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,573,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,574,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,575,            final int n = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,577,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,578,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,579,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,582,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,584,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,585,            final int n = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,587,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,588,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,592,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,600,            return data[index];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,601,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,610,        return data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,618,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,619,"            return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,630,"        return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,636,        final double[] out = new double[data.length + 1];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,637,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,638,        out[data.length] = in;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,639,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,646,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,649,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,651,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,655,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,652,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,653,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,654,            checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,656,        return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,663,            data[index] = value;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,666,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,664,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,665,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,667,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,674,        data[index] += increment;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,678,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,675,        } catch(IndexOutOfBoundsException e){,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,679,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,685,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,686,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,689,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,690,                    data[i] = v.getEntry(i - index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,695,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,692,            } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,693,                checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,694,                checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,697,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,710,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,714,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,711,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,712,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,713,            checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,715,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,720,"        Arrays.fill(data, value);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,721,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,726,        return data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,732,        return DEFAULT_FORMAT.format(this);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,745,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,746,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,758,        if (data.length != n) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,759,"            throw new DimensionMismatchException(data.length, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,761,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,771,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,772,            if (Double.isNaN(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,773,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,776,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,788,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,789,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,792,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,793,            if (Double.isInfinite(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,794,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,798,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,804,        if (this == other) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,805,            return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,808,        if (!(other instanceof RealVector)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,809,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,812,        RealVector rhs = (RealVector) other;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,813,        if (data.length != rhs.getDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,814,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,817,        if (rhs.isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,818,            return this.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,821,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,822,            if (data[i] != rhs.getEntry(i)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,823,                return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,826,        return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,834,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,835,            return 9;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,837,        return MathUtils.hash(data);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,844,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,851,        if (y instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,852,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,853,            checkVectorDimensions(yData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,854,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,855,                data[i] = a * data[i] + b * yData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,857,        } else {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,858,            checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,859,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,860,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,863,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,869,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,870,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,871,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,873,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,881,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,882,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,883,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,884,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,886,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,896,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,908,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,914,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,915,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,916,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,918,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,926,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,927,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,928,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,929,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,931,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,941,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,953,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,21,39,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,21,37,        this(LocalizedFormats.NO_DATA);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,21,38,    },0.0,0,,0
org/apache/commons/math3/exception/NoDataException,21,45,        super(specific);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,21,46,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,21,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,21,42,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,21,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,21,51,    },0.0,0,,0
org/apache/commons/math3/exception/ZeroException,21,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/ZeroException,21,38,    },0.0,0,,0
org/apache/commons/math3/exception/ZeroException,21,47,"        super(specific, 0, arguments);",0.0,0,,0
org/apache/commons/math3/exception/ZeroException,21,48,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,47,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,62,"        super(specific, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,63,        this.lo = lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,64,        this.hi = hi;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,65,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,71,        return lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,21,77,        return hi;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,354,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,367,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,368,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,369,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,374,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,375,            },0.0,0,,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,37,"    public void visit(int row, int column, double value) {}",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,45,    public Array2DRowRealMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,95,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,96,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,97,            copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,99,            if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,100,                throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,102,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,103,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,104,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,106,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,107,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,108,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,110,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,111,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,112,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,115,            data = d;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,117,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,126,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,127,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,128,        data = new double[nRows][1];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,129,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,130,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,132,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,144,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,157,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,159,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,160,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,161,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,162,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,163,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,164,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,165,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,166,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,167,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,171,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,184,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,186,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,187,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,188,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,189,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,190,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,191,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,192,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,193,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,194,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,198,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,211,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,213,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,214,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,215,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,217,        final double[][] outData = new double[nRows][nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,219,        final double[] mCol = new double[nSum];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,220,        final double[][] mData = m.data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,223,        for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,226,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,227,                mCol[mRow] = mData[mRow][col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,230,            for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,231,                final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,232,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,233,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,234,                    sum += dataRow[i] * mCol[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,236,                outData[row][col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,240,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,255,        return data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,264,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,267,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,272,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,277,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,282,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,287,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,309,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,310,        data[row][column] += increment;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,311,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,316,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,317,        data[row][column] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,318,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,335,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,336,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,337,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,338,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,340,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,341,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,342,            final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,343,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,344,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,345,                sum += dataRow[i] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,347,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,349,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,355,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,356,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,357,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,358,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,361,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,362,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,363,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,364,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,365,                sum += data[i][col] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,367,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,370,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,377,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,378,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,379,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,380,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,381,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,382,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,383,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,386,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,409,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,410,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,412,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,413,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,414,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,415,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,418,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,426,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,427,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,429,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,430,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,431,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,432,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,435,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,441,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,442,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,443,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,444,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,445,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,446,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,447,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,450,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,472,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,473,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,475,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,476,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,477,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,481,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,489,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,490,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,492,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,493,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,494,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,21,497,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,45,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,46,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,47,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,60,        super(cause);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,63,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,70,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,74,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,21,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,21,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1230,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1611,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1239,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1245,                return v.map(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1251,                final Iterator<Entry> i = v.iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1252,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1282,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1284,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1315,                return v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1322,                return v.add(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1329,                return v.subtract(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1335,                return v.mapAdd(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1347,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1353,                return v.mapSubtract(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1365,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1371,                return v.mapMultiply(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1383,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1389,                return v.mapDivide(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1401,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1408,                return v.ebeMultiply(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1415,                return v.ebeDivide(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1422,                return v.dotProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1429,                return v.cosine(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1435,                return v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1441,                return v.getL1Norm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1447,                return v.getLInfNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1454,                return v.getDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1461,                return v.getL1Distance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1468,                return v.getLInfDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1474,                return v.unitVector();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1485,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1491,                return v.outerProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1497,                return v.getEntry(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1509,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1521,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1527,                return v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1533,                return v.append(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1539,                return v.append(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1546,"                return v.getSubVector(index, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1558,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1570,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1576,                return v.toArray();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1582,                return v.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1588,                return v.isInfinite();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1595,"                return v.combine(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1607,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,55,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,56,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,70,"        super(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,71,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,72,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,89,"        this(extractField(d), d);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,90,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,108,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,109,        copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,110,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,129,"        this(extractField(d), d, copyArray);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,130,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,150,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,151,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,152,            copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,154,            MathUtils.checkNotNull(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,155,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,156,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,157,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,159,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,160,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,161,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,163,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,164,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,165,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,168,            data = d;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,170,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,180,"        this(extractField(v), v);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,181,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,192,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,193,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,194,"        data = buildArray(getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,195,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,196,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,198,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,203,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,209,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,222,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,224,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,225,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,226,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,227,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,228,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,229,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,230,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,231,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,232,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,236,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,249,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,251,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,252,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,253,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,254,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,255,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,256,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,257,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,258,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,259,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,263,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,277,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,279,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,280,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,281,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,282,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,283,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,284,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,285,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,286,            for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,287,                T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,288,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,289,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,291,                outDataRow[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,295,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,302,        return copyOut();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,312,        return data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,318,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,319,            if (row > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,320,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,322,            if (column > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,323,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,325,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,326,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,327,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,330,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,331,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,332,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,334,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,335,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,336,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,337,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,339,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,341,        } else {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,342,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,345,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,350,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,351,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,353,        return data[row][column];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,359,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,360,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,362,        data[row][column] = value;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,363,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,368,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,369,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,371,        data[row][column] = data[row][column].add(increment);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,372,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,377,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,378,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,380,        data[row][column] = data[row][column].multiply(factor);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,381,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,386,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,392,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,398,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,399,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,400,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,401,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,403,"        final T[] out = buildArray(getField(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,404,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,405,            final T[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,406,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,407,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,408,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,410,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,412,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,418,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,419,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,420,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,421,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,424,"        final T[] out = buildArray(getField(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,425,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,426,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,427,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,428,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,430,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,433,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,439,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,440,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,441,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,442,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,443,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,444,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,445,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,448,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,454,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,455,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,457,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,458,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,459,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,460,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,463,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,471,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,472,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,474,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,475,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,476,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,480,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,488,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,489,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,491,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,492,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,493,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,494,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,497,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,503,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,504,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,505,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,506,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,507,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,508,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,509,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,512,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,518,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,519,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,520,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,521,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,522,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,523,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,526,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,534,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,535,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,537,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,538,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,539,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,543,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,552,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,554,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,555,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,556,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,559,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,568,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,569,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,571,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,572,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,574,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,587,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,21,588,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,53,    protected AbstractFieldMatrix() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,54,        field = null;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,55,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,61,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,62,        this.field = field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,63,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,77,        throws NotStrictlyPositiveException {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,78,        if (rowDimension <= 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,82,        if (columnDimension <= 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,86,        this.field = field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,87,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,100,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,101,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,103,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,106,        if (d[0].length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,107,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,109,        return d[0][0].getField();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,122,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,123,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,125,        return d[0].getField();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,143,        if (columns < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,147,        T[][] array =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,149,        for (int i = 0; i < array.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,150,"            Arrays.fill(array[i], field.getZero());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,152,        return array;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,168,"        Arrays.fill(array, field.getZero());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,169,        return array;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,174,        return field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,187,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,189,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,190,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,191,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,192,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,193,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,194,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,198,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,205,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,207,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,208,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,209,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,210,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,211,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,212,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,216,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,222,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,223,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,224,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,225,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,226,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,227,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,231,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,236,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,237,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,238,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,239,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,240,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,241,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,245,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,252,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,254,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,255,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,256,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,257,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,258,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,259,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,260,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,261,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,262,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,264,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,268,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,274,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,280,        if (p < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,281,            throw new NotPositiveException(p);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,284,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,285,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,288,        if (p == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,289,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,292,        if (p == 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,293,            return this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,296,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,305,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,307,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,309,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,310,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,311,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,312,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,316,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,319,"        results.add(0, this.copy());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,321,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,322,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,323,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,324,"            results.add(i, r);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,327,        FieldMatrix<T> result = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,329,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,330,            result = result.multiply(results.get(i));,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,331,        },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,333,        return result;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,338,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,340,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,341,            final T[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,342,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,343,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,347,        return data;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,354,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,356,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,358,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,359,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,360,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,364,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,374,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,377,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,379,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,389,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,401,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,402,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,403,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,404,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,411,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,436,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,443,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,444,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,446,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,453,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,454,            final T[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,455,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,456,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,460,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,469,        if (subMatrix == null) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,470,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,472,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,473,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,474,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,477,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,478,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,479,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,482,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,483,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,488,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,489,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,490,        checkRowIndex(nRows + row - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,491,        checkColumnIndex(nCols + column - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,494,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,495,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,498,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,502,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,503,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,505,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,506,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,509,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,516,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,517,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,518,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,524,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,525,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,528,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,534,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,535,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,537,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,538,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,541,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,548,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,549,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,550,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,556,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,557,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,560,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,564,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,570,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,571,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,572,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,573,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,576,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,577,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,580,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,584,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,591,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,592,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,593,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,594,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,597,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,598,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,601,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,605,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,606,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,607,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,608,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,609,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,612,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,618,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,619,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,620,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,621,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,623,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,624,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,627,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,631,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,632,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,633,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,634,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,635,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,638,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,645,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,646,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,647,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,648,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,650,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,651,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,653,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,669,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,670,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,671,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,672,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,680,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,685,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,696,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,697,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,698,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,699,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,701,        T trace = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,702,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,703,"            trace = trace.add(getEntry(i, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,705,        return trace;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,711,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,712,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,713,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,714,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,717,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,718,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,719,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,720,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,721,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,723,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,726,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,733,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,734,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,735,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,736,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,737,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,738,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,741,"            final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,742,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,743,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,744,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,745,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,747,                out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,750,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,757,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,758,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,759,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,760,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,763,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,764,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,765,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,766,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,767,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,769,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,772,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,779,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,780,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,781,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,782,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,783,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,784,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,787,"            final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,788,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,789,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,790,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,791,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,793,                out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,796,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,802,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,803,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,804,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,805,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,806,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,807,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,808,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,809,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,812,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,817,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,818,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,819,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,820,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,821,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,822,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,825,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,832,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,833,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,835,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,836,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,837,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,838,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,839,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,842,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,849,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,850,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,852,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,853,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,854,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,857,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,862,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,863,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,864,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,865,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,866,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,867,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,868,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,869,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,872,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,877,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,878,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,879,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,880,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,881,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,882,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,885,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,893,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,894,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,896,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,897,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,898,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,899,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,900,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,903,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,911,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,912,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,914,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,915,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,916,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,919,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,924,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,929,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,936,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,943,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,952,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,953,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,954,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,955,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,956,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,957,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,959,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,960,            if (i > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,961,"                res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,963,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,964,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,965,                if (j > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,966,"                    res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,968,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,970,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,973,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,974,        return res.toString();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,987,        if (object == this ) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,988,            return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,990,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,991,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,993,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,994,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,995,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,996,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,997,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,999,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1000,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1001,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1002,                    return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1006,        return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1016,        int ret = 322562;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1017,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1018,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1019,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1020,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1021,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1022,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1023,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1026,        return ret;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1036,        if (row < 0 || row >= getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1037,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1040,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1050,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1051,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1054,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1071,        checkRowIndex(startRow);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1072,        checkRowIndex(endRow);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1073,        if (endRow < startRow) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1074,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1078,        checkColumnIndex(startColumn);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1079,        checkColumnIndex(endColumn);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1080,        if (endColumn < startColumn) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1084,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1098,        if (selectedRows == null ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1100,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1102,        if (selectedRows.length == 0 ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1104,            throw new NoDataException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1107,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1108,            checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1110,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1111,            checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1113,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1124,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1126,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1129,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1140,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1142,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1145,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1156,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1157,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,1159,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,96,"        super(field, rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,97,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,98,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,101,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,102,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,105,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,106,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,122,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,123,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,142,"        super(extractField(blockData), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,143,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,144,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,147,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,148,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,150,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,152,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,155,            blocks = blockData;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,158,        int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,159,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,160,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,161,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,162,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,163,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,166,                if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,167,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,171,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,199,        final int rows         = rawData.length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,200,        final int columns      = rawData[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,201,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,202,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,205,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,206,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,207,            if (length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,208,"                throw new DimensionMismatchException(columns, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,213,        final Field<T> field = extractField(rawData);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,214,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,215,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,216,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,217,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,218,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,219,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,220,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,221,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,222,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,223,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,226,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,227,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,230,                int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,232,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,233,                    index += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,236,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,240,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,260,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,261,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,263,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,264,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,265,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,266,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,267,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,268,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,269,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,270,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,271,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,272,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,273,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,274,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,278,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,284,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,292,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,295,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,296,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,299,        return copied;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,306,            return add((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,307,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,310,            checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,312,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,315,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,316,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,317,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,320,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,321,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,322,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,323,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,324,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,325,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,326,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,327,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,328,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,329,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,330,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,335,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,340,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,354,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,356,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,359,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,360,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,361,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,362,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,363,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,364,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,368,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,375,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,376,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,379,            checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,381,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,384,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,385,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,386,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,389,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,390,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,391,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,392,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,393,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,394,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,395,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,396,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,397,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,398,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,399,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,404,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,409,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,422,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,424,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,428,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,429,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,430,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,431,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,432,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,436,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,442,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,446,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,447,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,448,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,449,                outBlock[k] = tBlock[k].add(d);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,453,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,460,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,463,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,464,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,465,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,466,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,467,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,471,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,478,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,479,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,482,            checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,484,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,485,            final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,488,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,489,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,491,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,492,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,494,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,496,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,497,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,500,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,503,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,504,                        final int kWidth      = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,505,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,506,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,507,                        int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,508,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,509,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,510,                            final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,511,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,512,                                T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,513,                                int r = rStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,514,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,515,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,516,                                    ++r;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,518,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,519,                                ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,525,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,530,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,545,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,547,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,548,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,551,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,552,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,554,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,555,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,557,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,558,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,559,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,560,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,561,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,564,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,567,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,568,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,569,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,570,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,571,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,572,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,573,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,574,                        final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,575,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,576,                            T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,577,                            int l = lStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,578,                            int n = nStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,579,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,580,                                sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,585,                                l += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,586,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,588,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,589,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,590,                                n += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,592,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,593,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,599,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,603,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,610,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,611,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,613,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,614,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,615,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,616,            int regularPos   = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,617,            int lastPos      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,618,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,619,                final T[] dataP = data[p];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,620,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,621,                int dataPos    = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,622,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,623,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,624,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,626,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,627,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,628,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,632,        return data;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,640,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,643,        final BlockFieldMatrix<T> out =,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,647,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,648,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,649,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,650,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,653,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,654,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,655,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,656,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,657,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,658,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,661,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,662,                final T[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,663,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,664,                final int      width    = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,666,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,667,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,668,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,670,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,672,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,673,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,677,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,681,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,685,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,689,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,691,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,695,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,702,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,704,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,705,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,709,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,713,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,715,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,721,                ++qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,723,            ++pBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,726,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,749,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,750,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,751,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,752,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,753,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,754,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,755,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,757,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,763,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,764,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,765,        if (refLength == 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,766,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,768,        final int endRow    = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,769,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,770,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,771,        for (final T[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,772,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,773,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,778,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,779,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,780,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,781,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,784,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,785,            final int iHeight  = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,786,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,787,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,788,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,790,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,791,                final int jWidth      = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,792,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,793,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,794,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,795,                final int jLength     = jEnd - jStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,798,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,799,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,800,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,807,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,812,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,813,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,816,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,817,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,818,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,819,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,820,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,821,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,822,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,823,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,824,            final int available  = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,825,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,826,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,827,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,828,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,829,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,831,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,832,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,836,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,843,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,846,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,844,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,845,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,847,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,862,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,863,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,864,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,866,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,872,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,873,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,874,        int mBlockIndex  = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,875,        int mIndex       = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,876,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,877,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,878,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,879,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,880,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,881,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,882,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,883,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,884,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,885,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,887,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,888,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,891,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,896,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,897,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,900,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,901,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,902,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,903,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,904,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,905,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,906,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,907,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,908,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,909,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,910,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,911,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,912,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,914,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,918,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,925,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,928,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,926,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,927,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,929,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,944,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,945,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,946,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,948,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,954,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,955,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,956,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,957,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,958,        int mIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,959,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,960,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,961,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,962,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,963,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,964,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,965,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,966,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,968,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,971,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,976,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,977,"        final T[] outData = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,980,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,981,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,982,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,983,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,984,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,985,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,986,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,987,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,990,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,997,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1000,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,998,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,999,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1001,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1006,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1007,"        final T[] outData = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1010,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1011,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1012,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1013,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1014,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1015,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1016,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1017,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1018,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1022,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1029,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1032,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1030,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1031,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1033,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1038,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1039,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1042,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1043,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1044,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1045,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1046,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1047,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1048,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1049,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1052,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1058,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1059,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1060,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1061,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1065,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1066,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1067,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1068,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1069,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1070,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1071,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1072,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1074,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1079,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1080,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1083,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1084,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1085,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1086,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1087,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1088,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1089,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1090,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1091,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1095,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1101,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1102,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1103,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1104,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1108,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1109,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1110,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1111,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1112,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1113,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1114,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1115,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1116,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1119,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1124,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1125,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1127,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1128,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1129,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1132,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1138,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1139,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1141,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1142,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1143,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1146,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1147,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1152,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1153,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1155,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1156,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1157,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1159,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1161,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1162,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1167,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1168,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1170,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1171,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1172,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1174,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1176,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1177,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1182,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1183,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1184,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1187,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1188,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1189,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1192,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1193,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1194,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1195,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1196,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1197,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1198,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1199,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1200,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1201,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1202,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1203,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1204,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1205,                        l+= lInc;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1210,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1215,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1221,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1227,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1233,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1234,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1236,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1237,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1240,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1241,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1242,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1243,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1244,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1245,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1246,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1247,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1248,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1249,                    T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1250,                    int q = qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1251,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1252,                        sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1257,                        k += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1258,                        q += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1260,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1261,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1263,                    out[p] = out[p].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1268,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1275,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1276,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1278,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1279,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1282,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1283,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1284,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1285,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1286,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1287,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1288,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1289,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1290,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1291,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1292,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1293,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1294,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1295,                    T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1296,                    int p = pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1297,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1298,                        sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1303,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1304,                        p += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1306,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1307,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1308,                        k += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1310,                    out[q] = out[q].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1315,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1321,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1322,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1323,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1324,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1325,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1326,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1327,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1328,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1329,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1330,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1331,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1332,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1333,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1334,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1339,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1345,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1346,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1347,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1348,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1349,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1350,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1351,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1352,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1353,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1354,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1355,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1356,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1357,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1358,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1363,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1371,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1372,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1373,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1374,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1375,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1376,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1377,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1378,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1379,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1380,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1381,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1382,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1383,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1384,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1385,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1386,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1387,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1392,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1401,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1402,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1403,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1404,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1405,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1406,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1407,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1408,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1409,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1410,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1411,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1412,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1413,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1414,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1415,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1416,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1421,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1427,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1428,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1429,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1430,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1431,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1432,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1433,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1434,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1435,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1436,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1437,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1438,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1439,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1440,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1443,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1446,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1453,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1454,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1455,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1456,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1457,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1458,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1459,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1460,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1461,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1462,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1463,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1464,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1465,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1468,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1471,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1479,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1480,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1481,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1482,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1483,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1484,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1485,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1486,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1487,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1488,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1489,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1490,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1492,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1493,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1494,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1495,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1500,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1509,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1510,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1511,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1512,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1513,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1514,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1515,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1516,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1517,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1518,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1519,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1520,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1521,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1522,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1523,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1524,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1529,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1538,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,21,1547,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1611,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1615,                    return v.getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1627,                    throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,776,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,779,            private int i = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,782,            private Entry e = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,786,                return i < dim;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,791,                if (i < dim) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,792,                    e.setIndex(i++);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,793,                    return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,795,                    throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,805,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,92,    },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,151,        return NumberFormat.getAvailableLocales();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,159,        return prefix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,167,        return suffix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,175,        return rowPrefix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,183,        return rowSuffix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,191,        return rowSeparator;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,199,        return columnSeparator;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,248,        pos.setBeginIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,249,        pos.setEndIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,252,        toAppendTo.append(prefix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,255,        final int rows = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,256,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,257,            toAppendTo.append(rowPrefix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,258,            for (int j = 0; j < matrix.getColumnDimension(); ++j) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,259,                if (j > 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,260,                    toAppendTo.append(columnSeparator);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,264,            toAppendTo.append(rowSuffix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,265,            if (i < rows - 1) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,266,                toAppendTo.append(rowSeparator);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,271,        toAppendTo.append(suffix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,273,        return toAppendTo;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,285,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,286,"        final RealMatrix result = parse(source, parsePosition);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,287,        if (parsePosition.getIndex() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,288,"            throw new MathParseException(source,",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,292,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,303,        int initialIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,305,        final String trimmedPrefix = prefix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,306,        final String trimmedSuffix = suffix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,307,        final String trimmedRowPrefix = rowPrefix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,308,        final String trimmedRowSuffix = rowSuffix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,309,        final String trimmedColumnSeparator = columnSeparator.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,310,        final String trimmedRowSeparator = rowSeparator.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,315,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,319,        List<List<Number>> matrix = new ArrayList<List<Number>>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,320,        List<Number> rowComponents = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,321,        for (boolean loop = true; loop;){,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,323,            if (!rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,326,                    if (trimmedRowSuffix.length() != 0 &&,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,328,                        return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,332,                            matrix.add(rowComponents);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,333,                            rowComponents = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,334,                            continue;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,336,                            loop = false;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,342,                if (trimmedRowPrefix.length() != 0 &&,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,344,                    return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,348,            if (loop) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,351,                if (component != null) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,352,                    rowComponents.add(component);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,354,                    if (rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,355,                        loop = false;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,359,                        pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,360,                        return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,363,            },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,367,        if (!rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,368,            matrix.add(rowComponents);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,374,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,378,        if (matrix.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,379,            pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,380,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,384,        double[][] data = new double[matrix.size()][];,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,385,        int row = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,386,        for (List<Number> rowList : matrix) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,387,            data[row] = new double[rowList.size()];,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,388,            for (int i = 0; i < rowList.size(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,389,                data[row][i] = rowList.get(i).doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,391,            row++;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,392,        },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,21,393,        return MatrixUtils.createRealMatrix(data);,0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,42,                              Class<?> type) {,0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,45,    },0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,53,                              int position) {,0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,,0
org/apache/commons/math3/exception/MathParseException,21,56,    },0.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,101,"                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);",0.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,109,"                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);",0.0,0,,0
org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,171,        return rank;,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,47,"        super(wrong, threshold, false);",0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,48,        this.index = index;,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,49,        this.threshold = threshold;,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,51,        final ExceptionContext context = getContext();,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,52,        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,53,"        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);",0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,54,    },0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,60,        return index;,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,66,        return index;,0.0,0,,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,21,72,        return threshold;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,411,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,424,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,425,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,426,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,431,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,432,            },0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1252,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1254,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1258,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1263,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1264,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1274,                        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,379,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,384,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1284,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1286,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1290,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1295,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1296,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,21,1307,                        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,64,        super();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,65,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,103,        return (rows * columns <= 4096) ?,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,132,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,159,        if (data == null ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,161,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,163,        return (data.length * data[0].length <= 4096) ?,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,177,        for (int i = 0; i < dimension; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,178,"            m.setEntry(i, i, 1.0);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,180,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,195,        final T zero = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,196,        final T one  = field.getOne();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,199,        for (int row = 0; row < dimension; row++) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,200,            final T[] dRow = d[row];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,201,"            Arrays.fill(dRow, zero);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,202,            dRow[row] = one;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,217,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,218,"            m.setEntry(i, i, diagonal[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,220,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,234,        final FieldMatrix<T> m =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,236,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,237,"            m.setEntry(i, i, diagonal[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,239,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,252,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,253,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,255,"        return new ArrayRealVector(data, true);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,270,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,271,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,273,        if (data.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,274,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,290,        if (rowData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,291,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,293,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,294,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,295,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,296,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,298,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,314,        if (rowData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,315,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,317,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,318,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,319,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,322,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,323,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,325,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,339,        if (columnData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,340,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,342,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,344,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,345,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,347,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,363,        if (columnData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,364,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,366,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,367,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,368,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,371,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,372,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,374,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,404,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,419,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,441,"        checkRowIndex(m, startRow);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,442,"        checkRowIndex(m, endRow);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,443,        if (endRow < startRow) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,444,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,448,"        checkColumnIndex(m, startColumn);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,449,"        checkColumnIndex(m, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,450,        if (endColumn < startColumn) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,451,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,456,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,475,        if (selectedRows == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,476,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,478,        if (selectedColumns == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,479,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,481,        if (selectedRows.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,482,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,484,        if (selectedColumns.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,485,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,488,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,489,"            checkRowIndex(m, row);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,491,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,492,"            checkColumnIndex(m, column);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,494,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,506,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,508,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,511,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,525,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,542,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,553,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,554,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,555,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,598,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,599,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,600,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,678,        final int n = vector.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,679,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,680,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,681,            oos.writeDouble(vector.getEntry(i));,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,683,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,709,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,710,            final double[] data = new double[n];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,711,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,712,                data[i] = ois.readDouble();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,716,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,719,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,721,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,722,"            f.set(instance, vector);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,732,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,724,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,725,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,726,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,727,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,728,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,729,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,730,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,731,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,734,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,779,        final int n = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,780,        final int m = matrix.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,781,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,782,        oos.writeInt(m);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,783,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,784,            for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,785,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,788,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,814,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,815,            final int m = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,816,            final double[][] data = new double[n][m];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,817,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,818,                final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,819,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,820,                    dataI[j] = ois.readDouble();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,825,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,828,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,830,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,831,"            f.set(instance, matrix);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,841,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,833,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,834,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,835,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,836,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,837,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,838,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,839,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,840,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,842,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,865,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,866,            throw new DimensionMismatchException(,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,870,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,871,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,874,        int rows = rm.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,875,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,876,"            double diag = rm.getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,877,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,878,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,880,            double bi = b.getEntry(i)/diag;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,881,"            b.setEntry(i,  bi );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,882,            for( int j = i+1; j< rows; j++ ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,883,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,886,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,910,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,911,            throw new DimensionMismatchException(,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,915,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,916,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,919,        int rows = rm.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,920,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,921,"            double diag = rm.getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,922,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,923,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,925,            double bi = b.getEntry(i)/diag;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,926,"            b.setEntry(i,  bi );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,927,            for( int j = i-1; j>-1; j-- ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,928,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,931,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,279,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,288,                sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,289,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,293,                sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,294,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,298,                return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,564,            super(Fraction.ZERO);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,565,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,571,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,572,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,577,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,578,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,586,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,559,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,672,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,676,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,21,677,            },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,609,            super(BigFraction.ZERO);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,610,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,616,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,617,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,622,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,623,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,631,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,21,604,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,327,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,21,332,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3752,    private static class lnMant {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3766,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3768,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math3/util/FastMath,21,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,384,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,402,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,427,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,430,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,434,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,444,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,461,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,465,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,466,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,499,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,502,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,506,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,536,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,539,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,545,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,546,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,549,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,560,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,570,          return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,574,          return -1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,578,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,582,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,583,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,600,          na = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,607,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,628,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,638,          double na = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,646,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,669,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,670,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,673,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,691,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,692,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,721,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,722,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,783,        return Math.random();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,807,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,826,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,834,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,844,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,854,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,857,            intVal++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,864,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,866,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,899,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,902,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,910,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,917,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,919,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,922,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,925,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,931,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,949,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,973,            x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,974,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1005,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1010,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1148,                --exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1168,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1169,                double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1170,                double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1172,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1174,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1175,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1177,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1178,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1179,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1182,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1183,                    aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1184,                    ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1186,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1187,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1188,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1192,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1193,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1195,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1196,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1197,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1199,                return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1204,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1215,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1217,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1218,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1220,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1222,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1223,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1224,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1225,            double xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1226,            double xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1229,            final double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1231,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1232,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1236,            double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1237,            double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1241,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1242,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1244,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1245,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1246,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1250,                aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1251,                ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1253,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1254,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1255,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1259,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1260,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1268,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1269,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1270,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1273,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1274,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1275,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1276,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1277,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1278,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1279,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1296,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1297,        double b = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1298,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1299,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1300,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1301,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1303,        c = a + lnza;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1304,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1305,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1306,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1308,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1309,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1310,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1311,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1313,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1314,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1315,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1316,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1318,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1319,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1320,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1321,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1323,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1324,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1325,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1328,        return a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1338,        if (x == -1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1339,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1342,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1343,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1346,        if (x > 1e-6 ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1348,            final double xpa = 1 + x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1349,            final double xpb = -(xpa - 1 - x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1351,            final double[] hiPrec = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1352,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1354,                return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1359,            final double fx1 = xpb / xpa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1360,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1365,            return y * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1374,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1376,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1377,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1378,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1381,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1382,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1383,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1385,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1386,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1388,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1408,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1419,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1421,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1422,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1425,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1426,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1430,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1431,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1432,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1434,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1436,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1437,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1440,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1441,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1445,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1446,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1448,            if (y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1449,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1452,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1455,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1456,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1457,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1459,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1460,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1462,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1466,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1467,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1468,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1471,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1472,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1474,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1478,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1479,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1480,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1483,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1484,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1485,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1486,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1489,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1492,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1493,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1494,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1495,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1498,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1502,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1504,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1505,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1508,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1509,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1511,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1516,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1518,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1519,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1522,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1524,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1526,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1533,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1534,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1535,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1536,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1537,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1538,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1539,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1540,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1541,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1545,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1546,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1547,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1550,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1551,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1554,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1555,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1556,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1557,        lna = tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1560,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1561,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1563,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1564,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1566,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1567,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1568,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1569,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1570,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1571,        z = z * lnb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1573,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1575,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1588,        if (e == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1589,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1590,        } else if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1591,            e = -e;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1592,            d = 1.0 / d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1597,        final int splitFactor = 0x8000001;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1598,        final double cd       = splitFactor * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1599,        final double d1High   = cd - (cd - d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1600,        final double d1Low    = d - d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1603,        double resultHigh = 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1604,        double resultLow  = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1607,        double d2p     = d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1608,        double d2pHigh = d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1609,        double d2pLow  = d1Low;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1611,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1613,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1616,                final double tmpHigh = resultHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1617,                final double cRH     = splitFactor * resultHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1618,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1619,                final double rHL     = resultHigh - rHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1620,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1621,                resultHigh = tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1622,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1627,            final double tmpHigh = d2pHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1628,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1629,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1630,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1631,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1632,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1633,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1634,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1635,            d2p     = d2pHigh + d2pLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1637,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1639,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1641,        return resultHigh + resultLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1653,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1655,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1656,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1657,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1658,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1661,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1663,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1673,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1675,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1676,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1677,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1678,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1679,        p *= x2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1681,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1696,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1697,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1698,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1699,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1702,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1703,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1704,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1705,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1708,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1709,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1710,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1711,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1737,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1738,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1740,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1741,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1742,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1743,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1744,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1746,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1747,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1748,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1749,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1750,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1794,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1797,            c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1798,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1799,            a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1800,            b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1803,        result = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1805,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1816,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1817,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1819,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1820,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1821,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1823,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1836,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1837,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1840,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1841,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1842,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1843,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1846,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1847,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1848,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1849,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1852,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1853,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1854,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1855,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1880,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1881,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1884,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1885,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1886,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1887,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1888,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1890,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1891,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1892,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1893,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1894,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1896,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1897,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1899,        double sina = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1900,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1904,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1906,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1907,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1908,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1909,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1910,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1912,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1913,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1914,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1915,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1916,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1918,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1919,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1921,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1922,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1924,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1926,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1927,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1941,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1944,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1945,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1946,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1948,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1949,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1950,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1953,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1954,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1955,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1957,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1960,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1961,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1962,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1965,            err += xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1968,        return est+err;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1985,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1986,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1989,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1990,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1993,        exponent++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,1994,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2000,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2001,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2003,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2004,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2005,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2006,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2007,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2009,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2010,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2011,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2015,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2016,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2018,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2019,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2021,        long ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2022,        long bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2023,        long bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2024,        long ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2026,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2027,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2029,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2030,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2031,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2034,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2036,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2039,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2040,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2042,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2043,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2045,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2048,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2050,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2054,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2055,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2056,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2057,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2058,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2061,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2063,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2064,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2065,        prodB += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2066,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2068,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2070,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2074,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2075,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2077,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2081,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2093,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2096,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2097,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2098,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2101,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2102,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2104,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2105,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2107,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2108,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2109,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2110,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2112,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2113,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2115,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2116,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2117,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2120,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2122,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2125,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2126,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2128,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2129,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2131,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2134,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2136,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2140,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2141,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2142,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2143,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2144,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2147,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2149,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2150,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2151,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2152,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2154,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2156,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2160,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2161,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2162,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2163,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2164,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2165,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2166,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2169,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2171,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2172,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2173,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2174,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2176,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2178,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2182,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2183,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2185,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2186,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2189,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2190,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2191,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2192,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2201,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2202,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2204,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2207,        xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2208,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2209,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2210,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2214,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2215,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2216,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2217,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2219,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2223,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2227,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2231,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2232,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2233,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2234,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2235,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2236,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2238,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2239,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2240,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2243,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2244,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2247,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2249,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2251,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2253,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2255,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2257,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2268,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2271,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2272,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2273,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2277,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2281,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2282,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2286,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2289,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2290,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2293,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2294,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2295,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2301,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2303,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2305,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2307,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2309,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2311,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2322,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2323,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2326,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2327,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2328,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2329,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2333,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2334,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2335,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2336,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2338,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2341,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2342,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2346,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2347,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2351,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2352,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2353,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2354,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2355,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2356,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2357,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2358,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2359,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2360,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2363,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2365,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2366,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2368,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2369,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2370,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2372,            xa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2373,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2374,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2375,            negative ^= true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2379,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2380,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2382,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2385,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2386,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2389,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2398,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2408,        boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2411,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2412,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2415,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2417,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2418,            xb = -xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2419,            negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2422,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2423,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2427,        if (xa < 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2428,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2430,            final double oneOverXa = 1 / xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2431,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2433,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2434,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2435,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2437,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2438,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2439,        epsA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2442,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2443,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2444,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2445,        xa = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2446,        xb += yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2449,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2452,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2454,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2455,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2456,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2457,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2458,            double za = 1d + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2459,            double zb = -(za - 1d - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2460,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2461,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2462,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2463,            za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2465,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2466,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2468,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2469,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2470,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2472,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2473,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2474,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2477,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2479,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2480,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2484,        epsA = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2485,        epsB = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2488,        final double epsA2 = epsA * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2499,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2500,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2501,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2502,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2503,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2504,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2505,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2508,        ya = epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2510,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2511,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2512,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2515,        yb += epsB / (1d + epsA * epsA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2518,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2519,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2520,        temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2521,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2522,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2524,        double result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2525,        double resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2527,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2529,            final double pia = 1.5707963267948966 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2530,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2532,            za = pia - result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2533,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2534,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2536,            result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2537,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2541,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2542,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2545,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2555,        if (x != x || y != y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2556,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2559,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2560,            final double result = x * y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2561,            final double invx = 1d / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2562,            final double invy = 1d / y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2564,            if (invx == 0) { // X is infinite,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2565,                if (x > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2566,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2568,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2572,            if (x < 0 || invx < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2573,                if (y < 0 || invy < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2574,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2576,                    return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2579,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2585,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2586,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2587,                return Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2590,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2591,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2594,            return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2597,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2598,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2599,                return -Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2602,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2603,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2606,            return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2609,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2610,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2611,                return 0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2614,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2615,                return -0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2619,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2621,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2622,                return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2625,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2626,                return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2632,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2633,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2634,                return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2637,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2638,                return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2643,        final double r = y / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2644,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2645,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2648,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2649,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2652,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2653,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2655,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2657,        final double temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2658,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2659,        ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2661,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2662,"            ra = copySign(0d, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2666,"        final double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2668,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2676,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2677,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2680,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2681,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2684,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2685,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2688,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2689,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2692,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2693,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2699,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2700,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2701,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2704,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2705,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2708,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2709,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2711,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2712,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2714,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2715,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2716,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2720,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2721,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2722,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2723,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2726,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2729,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2732,      double r = x/y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2733,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2734,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2735,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2737,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2738,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2740,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2741,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2742,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2744,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2752,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2753,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2756,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2757,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2760,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2761,          return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2764,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2765,          return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2768,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2769,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2775,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2776,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2777,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2780,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2781,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2784,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2785,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2787,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2788,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2790,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2791,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2792,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2795,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2796,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2797,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2798,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2801,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2804,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2805,      y = ya+yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2806,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2809,      double r = y/x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2812,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2813,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2816,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2817,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2819,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2820,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2822,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2823,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2824,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2826,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2835,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2836,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2837,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2839,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2840,          if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2841,              return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2845,          subnormal = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2846,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2847,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2848,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2851,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2853,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2857,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2860,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2864,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2867,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2868,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2869,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2870,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2871,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2873,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2878,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2879,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2880,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2883,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2884,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2885,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2887,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2888,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2889,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2890,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2891,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2892,      za = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2894,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2895,      za = za * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2897,      double na = xs - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2898,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2899,      nb -= zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2901,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2904,      est *= p2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2906,      if (subnormal) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2907,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2910,      return est;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2920,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2921,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2925,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2926,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2928,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2929,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2931,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2932,        if (result == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2933,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2935,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2946,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2950,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2951,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2953,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2954,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2956,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2965,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2974,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,2983,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3001,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3002,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3004,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3013,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3014,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3016,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3028,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3029,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3033,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3034,            return d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3036,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3037,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3039,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3040,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3044,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3045,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3046,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3047,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3050,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3052,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3054,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3056,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3057,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3061,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3064,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3065,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3066,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3068,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3070,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3074,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3078,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3081,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3082,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3083,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3085,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3086,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3088,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3089,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3091,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3094,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3095,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3097,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3112,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3113,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3117,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3118,            return f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3120,        if (n < -277) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3121,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3123,        if (n > 276) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3124,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3128,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3129,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3130,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3131,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3134,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3136,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3138,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3140,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3141,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3145,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3148,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3149,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3150,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3152,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3154,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3158,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3162,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3165,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3166,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3167,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3169,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3170,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3172,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3173,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3175,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3178,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3179,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3181,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3221,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3222,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3223,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3224,            return direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3225,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3226,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3227,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3228,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3233,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3234,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3235,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3236,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3238,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3277,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3278,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3279,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3280,            return (float) direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3281,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3282,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3283,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3284,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3289,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3290,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3291,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3292,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3294,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3306,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3307,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3311,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3314,        y = (long) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3315,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3316,            y--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3319,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3320,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3323,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3333,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3334,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3337,        y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3338,        if (y == x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3339,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3342,        y += 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3344,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3345,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3348,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3356,        double y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3357,        double d = x - y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3359,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3360,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3361,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3363,            return y+1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3365,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3366,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3370,        long z = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3371,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3379,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3387,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3396,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3405,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3414,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3415,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3417,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3418,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3421,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3422,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3426,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3427,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3428,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3430,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3439,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3440,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3442,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3443,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3446,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3447,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3451,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3452,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3453,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3455,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3464,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3473,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3482,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3483,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3485,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3486,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3489,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3490,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3494,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3495,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3496,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3498,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3515,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3521,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3541,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3542,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3543,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3544,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3547,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3548,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3549,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3551,                return abs(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3552,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3554,                return abs(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3558,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3561,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3562,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3565,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3568,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3596,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3608,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3609,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3610,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3611,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3613,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3625,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3626,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3627,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3628,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3630,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3643,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3656,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3665,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3666,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3667,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3668,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3669,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3670,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3671,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3672,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3673,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3674,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3675,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3676,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3677,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,47,    private MathUtils() {},0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,57,        return new Double(value).hashCode();,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,68,        return Arrays.hashCode(value);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,113,        final double p = FastMath.abs(period);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,131,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,132,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,136,            return (byte) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,154,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,155,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,159,            return (short) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,177,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,178,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,182,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,200,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,201,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,205,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,218,            throw new NotFiniteNumberException(x);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,220,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,231,        for (int i = 0; i < val.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,232,            final double x = val[i];,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,237,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,251,        if (o == null) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,252,"            throw new NullArgumentException(pattern, args);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,254,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,21,265,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,21,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,21,41,    },0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,21,53,"        super(specific, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,21,54,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3719,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3745,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3746,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3748,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3785,                  double xb) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3788,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3794,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3795,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3796,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3798,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3799,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3800,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3801,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3803,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3804,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3805,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3806,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3808,                if (remA > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3809,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3815,                --k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3816,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3818,            this.finalK = k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3819,            this.finalRemA = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3820,            this.finalRemB = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3821,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3827,            return finalK;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3833,            return finalRemA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3839,            return finalRemB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3680,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3712,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3713,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,21,3715,        },0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,34,    private CompositeFormat() {},0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,68,"        parseNextCharacter(source, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,70,    },0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,81,         int index = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,82,         final int n = source.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,83,         char ret = 0;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,85,         if (index < n) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,88,                 c = source.charAt(index++);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,90,             pos.setIndex(index);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,92,             if (index < n) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,93,                 ret = c;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,97,         return ret;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,111,        Number ret = null;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,113,        StringBuilder sb = new StringBuilder();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,114,        sb.append('(');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,115,        sb.append(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,116,        sb.append(')');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,118,        final int n = sb.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,119,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,120,        final int endIndex = startIndex + n;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,121,        if (endIndex < source.length()) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,123,                ret = Double.valueOf(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,124,                pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,128,        return ret;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,143,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,144,"        Number number = format.parse(source, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,145,        final int endIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,148,        if (startIndex == endIndex) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,150,            final double[] special = {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,154,"                number = parseNumber(source, special[i], pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,155,                if (number != null) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,156,                    break;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,161,        return number;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,175,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,176,        final int endIndex = startIndex + expected.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,177,        if ((startIndex >= source.length()) ||,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,181,            pos.setIndex(startIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,182,            pos.setErrorIndex(startIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,183,            return false;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,187,        pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,188,        return true;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,212,            toAppendTo.append('(');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,213,            toAppendTo.append(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,214,            toAppendTo.append(')');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,216,"            format.format(value, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,21,218,        return toAppendTo;,0.0,0,,0
