project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,273,            return true;,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,296,    },1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,307,    },1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,1.0,0,,0
org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,1.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,80,    },1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,1.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,1.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,0.25,1,,1
org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0.2,0,,0
org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0.2,0,,0
org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.2,0,,0
org/apache/commons/math3/util/MathArrays,23,569,         return output;,0.2,0,,0
org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",0.2,0,,0
org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0.2,0,,0
org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1663,        return p;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1681,        return p;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1799,            a = c;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1805,        return result;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3809,                    break;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3821,        },0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,0.16667,0,,0
org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,0.16667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,0.16667,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,0.14286,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,0.14286,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,0.14286,1,,1
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,0.14286,0,,0
org/apache/commons/math3/util/Incrementor,23,114,        return count;,0.125,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,266,                    } else if (fu <= fv ||,0.125,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,274,                return,0.1,1,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,110,"        this(rel, abs, null);",0.09091,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,111,    },0.09091,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,258,                        b = u;,0.08333,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,185,                        d = p / q;,0.07692,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,186,                        u = x + d;,0.07692,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,189,                        if (u - a < tol2 || b - u < tol2) {,0.07692,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,201,                            e = a - x;,0.07692,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,305,            return a.getValue() <= b.getValue() ? a : b;,0.07692,1,,1
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,173,                        p = -p;,0.07143,0,,0
org/apache/commons/math3/util/FastMath,23,2974,        return (x < 0l) ? -x : x;,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,78,    },0.06667,0,,0
org/apache/commons/math3/util/Precision,23,244,"        return equals(x, y, 1);",0.06667,0,,0
org/apache/commons/math3/util/Precision,23,308,        long xInt = Double.doubleToLongBits(x);,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,309,        long yInt = Double.doubleToLongBits(y);,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,312,        if (xInt < 0) {,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,315,        if (yInt < 0) {,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,319,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.06667,0,,0
org/apache/commons/math3/util/Precision,23,321,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,45,                                    final double value) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,46,        this.point = point;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,47,        this.value = value;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,48,    },0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,56,        return point;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,65,        return value;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,141,        if (!isMinim) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,144,        double fv = fx;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,145,        double fw = fx;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,147,        UnivariatePointValuePair previous = null;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,148,        UnivariatePointValuePair current,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,152,        int iter = 0;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,154,            final double m = 0.5 * (a + b);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,155,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,156,            final double tol2 = 2 * tol1;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,159,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,160,            if (!stop) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,161,                double p = 0;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,162,                double q = 0;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,163,                double r = 0;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,164,                double u = 0;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,166,                if (FastMath.abs(e) > tol1) { // Fit parabola.,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,167,                    r = (x - w) * (fx - fv);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,168,                    q = (x - v) * (fx - fw);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,169,                    p = (x - v) * q - (x - w) * r;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,170,                    q = 2 * (q - r);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,172,                    if (q > 0) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,175,                        q = -q;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,178,                    r = e;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,179,                    e = d;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,181,                    if (p > q * (a - x) &&,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,198,                        if (x < m) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,203,                        d = GOLDEN_SECTION * e;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,207,                    if (x < m) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,212,                    d = GOLDEN_SECTION * e;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,216,                if (FastMath.abs(d) < tol1) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,223,                    u = x + d;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,226,                double fu = computeObjectiveValue(u);,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,227,                if (!isMinim) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,232,                previous = current;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,233,"                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,235,                if (checker != null) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,242,                if (fu <= fx) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,255,                    if (u < x) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,256,                        a = u;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,260,                    if (fu <= fw ||,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,262,                        v = w;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,263,                        fv = fw;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,264,                        w = u;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,265,                        fw = fu;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,273,            } else { // Default termination (Brent's criterion).,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,279,            ++iter;,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,280,        },0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,297,        if (a == null) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,300,        if (b == null) {,0.06667,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,304,        if (isMinim) {,0.06667,0,,0
org/apache/commons/math3/util/FastMath,23,113,    private static final double LN_QUICK_COEF[][] = {,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,126,    private static final double LN_HI_PREC_COEF[][] = {,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,139,    private static final double SINE_TABLE_A[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,158,    private static final double SINE_TABLE_B[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,177,    private static final double COSINE_TABLE_A[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,196,    private static final double COSINE_TABLE_B[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,216,    private static final double TANGENT_TABLE_A[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,235,    private static final double TANGENT_TABLE_B[] =,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,254,    private static final long RECIP_2PI[] = new long[] {,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,275,    private static final long PI_O_4_BITS[] = new long[] {,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,375,        return Math.sqrt(a);,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,3001,        if (Double.isInfinite(x)) {,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,3004,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,53,        this(0);,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,54,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,62,"        this(max,",0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,69,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,80,                       MaxCountExceededCallback cb) {,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,41,    private int count = 0;,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,81,        if (cb == null){,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,84,        maximalCount = max;,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,85,        maxCountCallback = cb;,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,86,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,96,        maximalCount = max;,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,97,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,155,        if (++count > maximalCount) {,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,158,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,164,        count = 0;,0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,165,    },0.0625,0,,0
org/apache/commons/math3/util/Incrementor,23,63,             new MaxCountExceededCallback() {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,55,    protected BaseAbstractUnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair> checker) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,40,    private final Incrementor evaluations = new Incrementor();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,56,        this.checker = checker;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,57,    },0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,73,        return goal;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,79,        return searchMin;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,85,        return searchMax;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,91,        return searchStart;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,104,            evaluations.incrementCount();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,107,        },0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,108,        return function.value(point);,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,117,        if (f == null) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,120,        if (goalType == null) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,125,        searchMin = min;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,126,        searchMax = max;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,127,        searchStart = startValue;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,128,        goal = goalType;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,129,        function = f;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,130,        evaluations.setMaximalCount(maxEval);,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,131,        evaluations.resetCount();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,134,        return doOptimize();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,149,        return checker;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,81,        super(checker);,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,83,        if (rel < MIN_RELATIVE_TOLERANCE) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,86,        if (abs <= 0) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,90,        relativeThreshold = rel;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,91,        absoluteThreshold = abs;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,92,    },0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,48,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,52,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,116,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,117,        final double lo = getMin();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,118,        final double mid = getStartValue();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,119,        final double hi = getMax();,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,122,        final ConvergenceChecker<UnivariatePointValuePair> checker,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,127,        if (lo < hi) {,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,128,            a = lo;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,129,            b = hi;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,135,        double x = mid;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,136,        double v = x;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,137,        double w = x;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,138,        double d = 0;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,139,        double e = 0;,0.0625,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,140,        double fx = computeObjectiveValue(x);,0.0625,0,,0
org/apache/commons/math3/optimization/GoalType,23,28,public enum GoalType implements Serializable {,0.0625,0,,0
org/apache/commons/math3/optimization/GoalType,23,31,"    MAXIMIZE,",0.0625,0,,0
org/apache/commons/math3/optimization/GoalType,23,34,    MINIMIZE,0.0625,0,,0
org/apache/commons/math3/util/FastMath,23,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math3/util/FastMath,23,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,384,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,402,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,427,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,430,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,434,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,444,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,461,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,465,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,466,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,499,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,502,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,506,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,23,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,536,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,539,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,545,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,546,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,549,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,560,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,570,          return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,574,          return -1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,578,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,582,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,583,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,600,          na = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,607,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,628,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,23,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,638,          double na = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,646,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,669,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,670,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,673,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,691,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,692,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,721,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,722,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,783,        return Math.random();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,807,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,826,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,834,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,844,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,854,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,857,            intVal++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,864,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,866,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,899,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,902,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,910,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,917,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,919,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,922,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,925,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,931,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,949,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,973,            x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,974,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1005,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1010,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1148,                --exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1168,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1169,                double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1170,                double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1172,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1174,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1175,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1177,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1178,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1179,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1182,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1183,                    aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1184,                    ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1186,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1187,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1188,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1192,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1193,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1195,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1196,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1197,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1199,                return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1204,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1215,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1217,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1218,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1220,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1222,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1223,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1224,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1225,            double xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1226,            double xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1229,            final double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1231,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1232,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1236,            double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1237,            double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1241,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1242,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1244,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1245,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1246,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1250,                aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1251,                ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1253,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1254,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1255,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1259,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1260,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1268,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1269,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1270,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1273,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1274,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1275,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1276,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1277,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1278,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1279,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1296,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1297,        double b = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1298,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1299,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1300,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1301,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1303,        c = a + lnza;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1304,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1305,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1306,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1308,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1309,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1310,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1311,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1313,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1314,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1315,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1316,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1318,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1319,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1320,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1321,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1323,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1324,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1325,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1328,        return a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1338,        if (x == -1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1339,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1342,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1343,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1346,        if (x > 1e-6 ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1348,            final double xpa = 1 + x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1349,            final double xpb = -(xpa - 1 - x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1351,            final double[] hiPrec = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1352,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1354,                return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1359,            final double fx1 = xpb / xpa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1360,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1365,            return y * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1374,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1376,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1377,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1378,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1381,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1382,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1383,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1385,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1386,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1388,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1408,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1419,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1421,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1422,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1425,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1426,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1430,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1431,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1432,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1434,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1436,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1437,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1440,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1441,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1445,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1446,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1448,            if (y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1449,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1452,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1455,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1456,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1457,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1459,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1460,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1462,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1466,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1467,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1468,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1471,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1472,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1474,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1478,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1479,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1480,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1483,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1484,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1485,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1486,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1489,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1492,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1493,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1494,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1495,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1498,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1502,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1504,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1505,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1508,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1509,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1511,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1516,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1518,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1519,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1522,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1524,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1526,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1533,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1534,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1535,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1536,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1537,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1538,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1539,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1540,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1541,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1545,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1546,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1547,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1550,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1551,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1554,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1555,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1556,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1557,        lna = tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1560,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1561,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1563,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1564,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1566,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1567,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1568,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1569,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1570,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1571,        z = z * lnb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1573,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1575,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1588,        if (e == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1589,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1590,        } else if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1591,            e = -e;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1592,            d = 1.0 / d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1597,        final int splitFactor = 0x8000001;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1598,        final double cd       = splitFactor * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1599,        final double d1High   = cd - (cd - d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1600,        final double d1Low    = d - d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1603,        double resultHigh = 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1604,        double resultLow  = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1607,        double d2p     = d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1608,        double d2pHigh = d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1609,        double d2pLow  = d1Low;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1611,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1613,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1616,                final double tmpHigh = resultHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1617,                final double cRH     = splitFactor * resultHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1618,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1619,                final double rHL     = resultHigh - rHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1620,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1621,                resultHigh = tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1622,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1627,            final double tmpHigh = d2pHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1628,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1629,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1630,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1631,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1632,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1633,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1634,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1635,            d2p     = d2pHigh + d2pLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1637,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1639,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1641,        return resultHigh + resultLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1836,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1837,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1840,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1841,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1842,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1843,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1846,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1847,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1848,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1849,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1852,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1853,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1854,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1855,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1880,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1881,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1884,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1885,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1886,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1887,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1888,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1890,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1891,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1892,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1893,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1894,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1896,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1897,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1899,        double sina = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1900,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1904,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1906,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1907,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1908,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1909,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1910,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1912,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1913,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1914,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1915,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1916,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1918,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1919,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1921,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1922,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1924,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1926,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1927,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1941,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1944,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1945,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1946,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1948,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1949,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1950,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1953,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1954,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1955,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1957,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1960,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1961,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1962,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1965,            err += xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1968,        return est+err;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1985,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1986,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1989,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1990,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1993,        exponent++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,1994,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2000,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2001,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2003,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2004,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2005,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2006,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2007,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2009,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2010,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2011,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2015,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2016,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2018,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2019,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2021,        long ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2022,        long bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2023,        long bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2024,        long ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2026,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2027,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2029,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2030,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2031,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2034,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2036,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2039,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2040,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2042,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2043,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2045,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2048,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2050,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2054,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2055,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2056,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2057,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2058,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2061,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2063,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2064,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2065,        prodB += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2066,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2068,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2070,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2074,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2075,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2077,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2081,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2093,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2096,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2097,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2098,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2101,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2102,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2104,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2105,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2107,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2108,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2109,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2110,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2112,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2113,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2115,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2116,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2117,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2120,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2122,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2125,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2126,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2128,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2129,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2131,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2134,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2136,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2140,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2141,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2142,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2143,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2144,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2147,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2149,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2150,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2151,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2152,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2154,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2156,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2160,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2161,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2162,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2163,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2164,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2165,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2166,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2169,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2171,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2172,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2173,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2174,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2176,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2178,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2182,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2183,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2185,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2186,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2189,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2190,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2191,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2192,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2209,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2210,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2215,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2216,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2217,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2219,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2223,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2231,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2232,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2233,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2234,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2235,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2236,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2244,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2249,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2251,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2257,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2268,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2271,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2272,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2273,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2277,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2281,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2282,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2286,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2289,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2290,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2293,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2294,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2295,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2301,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2303,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2305,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2307,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2309,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2311,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2322,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2323,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2326,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2327,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2328,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2329,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2333,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2334,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2335,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2336,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2338,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2341,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2342,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2346,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2347,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2351,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2352,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2353,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2354,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2355,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2356,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2357,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2358,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2359,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2360,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2363,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2365,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2366,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2368,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2369,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2370,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2372,            xa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2373,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2374,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2375,            negative ^= true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2379,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2380,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2382,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2385,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2386,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2389,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2398,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2408,        boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2411,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2412,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2415,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2417,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2418,            xb = -xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2419,            negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2422,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2423,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2427,        if (xa < 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2428,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2430,            final double oneOverXa = 1 / xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2431,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2433,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2434,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2435,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2437,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2438,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2439,        epsA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2442,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2443,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2444,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2445,        xa = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2446,        xb += yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2449,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2452,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2454,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2455,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2456,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2457,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2458,            double za = 1d + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2459,            double zb = -(za - 1d - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2460,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2461,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2462,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2463,            za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2465,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2466,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2468,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2469,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2470,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2472,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2473,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2474,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2477,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2479,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2480,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2484,        epsA = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2485,        epsB = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2488,        final double epsA2 = epsA * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2499,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2500,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2501,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2502,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2503,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2504,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2505,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2508,        ya = epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2510,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2511,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2512,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2515,        yb += epsB / (1d + epsA * epsA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2518,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2519,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2520,        temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2521,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2522,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2524,        double result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2525,        double resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2527,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2529,            final double pia = 1.5707963267948966 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2530,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2532,            za = pia - result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2533,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2534,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2536,            result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2537,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2541,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2542,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2545,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2555,        if (x != x || y != y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2556,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2559,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2560,            final double result = x * y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2561,            final double invx = 1d / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2562,            final double invy = 1d / y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2564,            if (invx == 0) { // X is infinite,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2565,                if (x > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2566,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2568,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2572,            if (x < 0 || invx < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2573,                if (y < 0 || invy < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2574,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2576,                    return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2579,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2585,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2586,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2587,                return Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2590,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2591,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2594,            return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2597,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2598,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2599,                return -Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2602,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2603,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2606,            return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2609,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2610,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2611,                return 0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2614,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2615,                return -0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2619,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2621,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2622,                return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2625,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2626,                return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2632,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2633,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2634,                return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2637,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2638,                return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2643,        final double r = y / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2644,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2645,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2648,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2649,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2652,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2653,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2655,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2657,        final double temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2658,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2659,        ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2661,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2662,"            ra = copySign(0d, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2666,"        final double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2668,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2676,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2677,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2680,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2681,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2684,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2685,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2688,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2689,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2692,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2693,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2699,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2700,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2701,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2704,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2705,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2708,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2709,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2711,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2712,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2714,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2715,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2716,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2720,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2721,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2722,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2723,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2726,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2729,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2732,      double r = x/y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2733,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2734,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2735,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2737,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2738,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2740,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2741,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2742,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2744,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2752,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2753,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2756,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2757,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2760,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2761,          return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2764,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2765,          return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2768,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2769,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2775,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2776,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2777,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2780,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2781,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2784,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2785,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2787,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2788,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2790,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2791,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2792,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2795,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2796,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2797,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2798,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2801,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2804,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2805,      y = ya+yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2806,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2809,      double r = y/x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2812,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2813,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2816,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2817,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2819,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2820,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2822,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2823,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2824,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2826,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2835,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2836,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2837,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2839,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2840,          if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2841,              return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2845,          subnormal = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2846,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2847,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2848,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2851,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2853,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2857,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2860,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2864,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2867,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2868,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2869,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2870,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2871,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2873,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2878,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2879,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2880,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2883,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2884,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2885,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2887,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2888,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2889,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2890,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2891,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2892,      za = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2894,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2895,      za = za * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2897,      double na = xs - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2898,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2899,      nb -= zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2901,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2904,      est *= p2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2906,      if (subnormal) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2907,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2910,      return est;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2920,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2921,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2925,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2926,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2928,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2929,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2931,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2932,        if (result == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2933,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2935,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2946,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2950,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2951,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2953,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2954,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2956,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2965,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,2983,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3002,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3013,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3014,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3016,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3028,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3029,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3033,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3034,            return d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3036,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3037,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3039,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3040,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3044,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3045,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3046,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3047,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3050,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3052,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3054,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3056,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3057,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3061,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3064,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3065,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3066,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3068,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3070,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3074,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3078,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3081,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3082,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3083,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3085,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3086,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3088,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3089,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3091,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3094,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3095,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3097,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3112,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3113,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3117,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3118,            return f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3120,        if (n < -277) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3121,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3123,        if (n > 276) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3124,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3128,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3129,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3130,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3131,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3134,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3136,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3138,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3140,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3141,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3145,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3148,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3149,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3150,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3152,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3154,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3158,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3162,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3165,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3166,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3167,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3169,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3170,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3172,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3173,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3175,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3178,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3179,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3181,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3221,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3222,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3223,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3224,            return direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3225,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3226,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3227,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3228,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3233,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3234,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3235,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3236,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3238,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3277,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3278,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3279,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3280,            return (float) direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3281,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3282,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3283,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3284,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3289,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3290,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3291,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3292,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3294,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3306,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3307,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3311,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3314,        y = (long) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3315,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3316,            y--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3319,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3320,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3323,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3333,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3334,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3337,        y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3338,        if (y == x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3339,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3342,        y += 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3344,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3345,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3348,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3356,        double y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3357,        double d = x - y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3359,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3360,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3361,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3363,            return y+1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3365,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3366,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3370,        long z = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3371,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3379,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3387,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3405,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3414,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3415,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3417,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3418,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3421,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3422,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3426,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3427,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3428,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3430,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3439,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3440,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3442,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3443,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3446,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3447,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3451,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3452,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3453,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3455,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3464,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3473,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3482,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3483,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3485,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3486,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3489,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3490,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3494,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3495,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3496,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3498,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3507,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3508,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3510,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3511,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3514,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3515,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3519,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3520,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3521,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3523,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3541,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3542,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3543,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3544,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3547,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3548,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3549,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3551,                return abs(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3552,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3554,                return abs(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3558,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3561,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3562,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3565,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3568,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3596,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3608,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3609,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3610,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3611,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3613,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3625,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3626,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3627,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3628,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3630,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3643,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3656,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3665,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3666,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3667,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3668,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3669,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3670,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3671,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3672,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3673,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3674,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3675,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3676,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3677,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,82,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,105,        return maximalCount;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,125,        return count < maximalCount;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,136,        for (int i = 0; i < value; i++) {,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,137,            incrementCount();,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,139,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,156,            maxCountCallback.trigger(maximalCount);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,23,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,23,42,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,23,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,23,51,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,23,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3752,    private static class lnMant {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3766,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3768,        },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,46,    private MathArrays() {},0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,56,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,57,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,58,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,60,        return sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,71,      int sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,72,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,73,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,75,      return sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,86,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,87,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,88,            final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,89,            sum += dp * dp;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,91,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,102,      double sum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,103,      for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,104,          final double dp = p1[i] - p2[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,105,          sum += dp * dp;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,107,      return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,118,        double max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,119,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,120,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,122,        return max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,133,        int max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,134,        for (int i = 0; i < p1.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,135,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,137,        return max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,162,        T previous = val[0];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,163,        final int max = val.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,164,        for (int i = 1; i < max; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,168,                comp = previous.compareTo(val[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,169,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,170,                    if (comp >= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,171,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,174,                    if (comp > 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,175,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,180,                comp = val[i].compareTo(previous);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,181,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,182,                    if (comp >= 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,183,                        return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,186,                    if (comp > 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,187,                       return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,193,                throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,196,            previous = val[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,198,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,213,"            return checkOrder(val, dir, strict, false);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,214,        } catch (NonMonotonicSequenceException e) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,216,            throw new MathInternalError(e);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,244,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,247,                    if (val[index] < previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,248,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,253,                if (strict) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,254,                    if (val[index] >= previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,255,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,258,                    if (val[index] > previous) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,259,                        break ITEM;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,265,                throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,277,        if (abort) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,278,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,280,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,370,        double rdwarf = 3.834e-20;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,371,        double rgiant = 1.304e+19;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,372,        double s1 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,373,        double s2 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,374,        double s3 = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,375,        double x1max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,376,        double x3max = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,377,        double floatn = v.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,378,        double agiant = rgiant / floatn;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,379,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,380,            double xabs = Math.abs(v[i]);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,381,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,382,                if (xabs > rdwarf) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,383,                    if (xabs > x1max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,384,                        double r = x1max / xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,385,                        s1= 1 + s1 * r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,386,                        x1max = xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,387,                    } else {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,388,                        double r = xabs / x1max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,389,                        s1 += r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,390,                    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,392,                    if (xabs > x3max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,393,                        double r = x3max / xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,394,                        s3= 1 + s3 * r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,395,                        x3max = xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,396,                    } else {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,397,                        if (xabs != 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,398,                            double r = xabs / x3max;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,399,                            s3 += r * r;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,400,                        },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,404,                s2 += xabs * xabs;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,408,        if (s1 != 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,409,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,411,            if (s2 == 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,412,                norm = x3max * Math.sqrt(s3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,414,                if (s2 >= x3max) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,415,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,417,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,421,        return norm;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,442,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,443,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,466,        if (x == null) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,467,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,470,        final int len = x.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,471,"        final List<Pair<Double, double[]>> list",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,474,        final int yListLen = yList.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,475,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,476,            final double[] yValues = new double[yListLen];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,477,            for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,478,                double[] y = yList[j];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,479,                if (y == null) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,480,                    throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,482,                if (y.length != len) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,483,"                    throw new DimensionMismatchException(y.length, len);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,485,                yValues[j] = y[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,487,"            list.add(new Pair<Double, double[]>(x[i], yValues));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,490,"        final Comparator<Pair<Double, double[]>> comp",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,510,"        Collections.sort(list, comp);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,512,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,513,"            final Pair<Double, double[]> e = list.get(i);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,514,            x[i] = e.getKey();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,515,            final double[] yValues = e.getValue();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,516,            for (int j = 0; j < yListLen; j++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,517,                yList[j][i] = yValues[j];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,520,    },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,529,"         return copyOf(source, source.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,552,         final int[] output = new int[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,553,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,554,         return output;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,591,        final int len = a.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,592,        if (len != b.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,593,"            throw new DimensionMismatchException(len, b.length);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,596,        final double[] prodHigh = new double[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,597,        double prodLowSum = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,599,        for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,600,            final double ai = a[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,601,            final double ca = SPLIT_FACTOR * ai;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,602,            final double aHigh = ca - (ca - ai);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,603,            final double aLow = ai - aHigh;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,605,            final double bi = b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,606,            final double cb = SPLIT_FACTOR * bi;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,607,            final double bHigh = cb - (cb - bi);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,608,            final double bLow = bi - bHigh;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,609,            prodHigh[i] = ai * bi;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,610,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,614,            prodLowSum += prodLow;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,618,        final double prodHighCur = prodHigh[0];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,619,        double prodHighNext = prodHigh[1];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,620,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,621,        double sPrime = sHighPrev - prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,622,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,624,        final int lenMinusOne = len - 1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,625,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,626,            prodHighNext = prodHigh[i + 1];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,627,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,628,            sPrime = sHighCur - prodHighNext;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,629,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,630,            sHighPrev = sHighCur;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,633,        double result = sHighPrev + (prodLowSum + sLowSum);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,635,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,638,            result = 0;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,639,            for (int i = 0; i < len; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,640,                result += a[i] * b[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,644,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,683,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,684,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,685,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,686,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,687,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,688,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,691,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,692,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,695,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,696,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,697,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,698,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,699,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,700,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,703,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,704,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,707,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,708,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,709,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,713,        double result = s12High + (prod1Low + prod2Low + s12Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,715,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,718,            result = a1 * b1 + a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,721,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,763,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,764,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,765,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,766,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,767,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,768,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,771,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,772,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,775,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,776,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,777,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,778,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,779,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,780,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,783,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,784,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,787,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,788,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,789,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,790,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,791,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,792,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,795,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,796,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,799,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,800,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,801,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,804,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,805,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,806,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,810,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,812,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,815,            result = a1 * b1 + a2 * b2 + a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,818,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,865,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,866,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,867,        final double a1Low      = a1 - a1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,868,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,869,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,870,        final double b1Low      = b1 - b1High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,873,        final double prod1High  = a1 * b1;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,874,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,877,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,878,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,879,        final double a2Low      = a2 - a2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,880,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,881,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,882,        final double b2Low      = b2 - b2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,885,        final double prod2High  = a2 * b2;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,886,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,889,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,890,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,891,        final double a3Low      = a3 - a3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,892,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,893,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,894,        final double b3Low      = b3 - b3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,897,        final double prod3High  = a3 * b3;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,898,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,901,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,902,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,903,        final double a4Low      = a4 - a4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,904,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,905,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,906,        final double b4Low      = b4 - b4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,909,        final double prod4High  = a4 * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,910,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,913,        final double s12High    = prod1High + prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,914,        final double s12Prime   = s12High - prod2High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,915,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,918,        final double s123High   = s12High + prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,919,        final double s123Prime  = s123High - prod3High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,920,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,923,        final double s1234High  = s123High + prod4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,924,        final double s1234Prime = s1234High - prod4High;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,925,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,929,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,931,        if (Double.isNaN(result)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,934,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,937,        return result;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,951,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,952,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,954,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,955,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,957,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,958,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,959,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,962,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,977,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,978,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,980,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,981,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,983,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,984,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,985,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,988,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1002,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1003,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1005,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1006,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1008,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1009,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1010,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1013,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1028,        if ((x == null) || (y == null)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1029,            return !((x == null) ^ (y == null));,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1031,        if (x.length != y.length) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1032,            return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1034,        for (int i = 0; i < x.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1035,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1036,                return false;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1039,        return true;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1066,         if (Double.isInfinite(normalizedSum)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1067,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1069,         if (Double.isNaN(normalizedSum)) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1070,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1072,         double sum = 0d;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1073,         final int len = values.length;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1074,         double[] out = new double[len];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1075,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1076,             if (Double.isInfinite(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1077,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1079,             if (!Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1080,                 sum += values[i];,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1083,         if (sum == 0) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1084,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1086,         for (int i = 0; i < len; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1087,             if (Double.isNaN(values[i])) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1088,                 out[i] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1090,                 out[i] = values[i] * normalizedSum / sum;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,1093,         return out;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,46,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,57,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,23,63,        return dimension;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,23,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,23,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,23,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,23,54,        return argument;,0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,37,    public MathInternalError() {,0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,39,    },0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,56,"        super(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathInternalError,23,57,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,45,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,46,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,47,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,60,        super(cause);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,63,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,70,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,74,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,23,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,62,    },0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,89,        this.direction = direction;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,90,        this.strict = strict;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,91,        this.index = index;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,92,        this.previous = previous;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,93,    },0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,99,        return direction;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,105,        return strict;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,113,        return index;,0.0,0,,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,23,119,        return previous;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,23,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/util/Incrementor,23,66,                     throw new MaxCountExceededException(max);,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,43,    },0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,53,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,54,"        getContext().addMessage(specific, max, args);",0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,55,        this.max = max;,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,56,    },0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,23,62,        return max;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,83,    private Precision() {},0.0,0,,0
org/apache/commons/math3/util/Precision,23,96,"        if (equals(x, y, eps)) {",0.0,0,,0
org/apache/commons/math3/util/Precision,23,97,            return 0;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,98,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,99,            return -1;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,101,        return 1;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,122,"        if (equals(x, y, maxUlps)) {",0.0,0,,0
org/apache/commons/math3/util/Precision,23,123,            return 0;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,124,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,125,            return -1;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,127,        return 1;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,139,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math3/util/Precision,23,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,203,        int xInt = Float.floatToIntBits(x);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,204,        int yInt = Float.floatToIntBits(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,207,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,210,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math3/util/Precision,23,287,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,313,            xInt = SGN_MASK - xInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,316,            yInt = SGN_MASK - yInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,337,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,350,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,372,            return (new BigDecimal,0.0,0,,0
org/apache/commons/math3/util/Precision,23,376,        } catch (NumberFormatException ex) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,377,            if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,378,                return x;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,380,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,396,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,397,        } catch (MathArithmeticException e) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,399,            throw new MathInternalError(e);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,400,        } catch (MathIllegalArgumentException e) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,402,            throw new MathInternalError(e);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,421,"        final float sign = FastMath.copySign(1f, x);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,422,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,,0
org/apache/commons/math3/util/Precision,23,423,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,,0
org/apache/commons/math3/util/Precision,23,443,        switch (roundingMethod) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,445,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,446,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,448,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,450,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,452,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,453,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,455,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,456,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,458,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,460,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,462,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,463,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,464,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,465,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,467,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,469,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,472,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,473,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,474,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,475,            } else if (fraction < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,476,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,479,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,,0
org/apache/commons/math3/util/Precision,23,481,                    unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,483,                    unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,486,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,489,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/Precision,23,490,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,491,            if (fraction >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,492,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,494,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,23,496,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,499,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,,0
org/apache/commons/math3/util/Precision,23,500,                throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/Precision,23,504,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,23,505,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,507,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,,0
org/apache/commons/math3/util/Precision,23,518,        return unscaled;,0.0,0,,0
org/apache/commons/math3/util/Precision,23,538,        return x + originalDelta - x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3815,                --k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3816,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3719,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3745,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3746,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3748,        },0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,491,"            = new Comparator<Pair<Double, double[]>>() {",0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,495,                switch (dir) {,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,497,                    val = o1.getKey().compareTo(o2.getKey());,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,498,                break;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,500,                    val = o2.getKey().compareTo(o1.getKey());,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,501,                break;,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,504,                    throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/util/MathArrays,23,506,                return val;,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3680,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3712,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3713,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,23,3715,        },0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,118,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,121,                        double p = 1;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,122,                        double r = x;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,123,                        for (int i = f.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,124,                            p *= f[i].derivative().value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,125,                            r = f[i].value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,127,                        return p;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,106,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,109,                double r = x;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,110,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,111,                    r = f[i].value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,113,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,118,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,161,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,165,                double r = f[0].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,166,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,167,                    r += f[i].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,169,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,174,                DerivativeStructure r = f[0].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,175,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,176,                    r = r.add(f[i].value(t));,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,178,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,38,    private FunctionUtils() {},0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,50,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,73,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,106,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,161,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,191,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,224,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,244,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,274,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,318,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,339,        return new MultivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,362,"        return collector(combiner, new Identity(), initialValue);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,374,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,390,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,418,        if (n <= 0) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,419,            throw new NotStrictlyPositiveException(,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,423,        if (min >= max) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,424,"            throw new NumberIsTooLargeException(min, max, false);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,427,        final double[] s = new double[n];,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,428,        final double h = (max - min) / n;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,429,        for (int i = 0; i < n; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,430,            s[i] = f.value(min + i * h);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,432,        return s;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,443,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,476,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,476,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,480,                return f.value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,489,                if (t.getFreeParameters() != 1) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,490,"                    throw new DimensionMismatchException(t.getFreeParameters(), 1);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,492,                if (t.getOrder() > 1) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,493,"                    throw new DimensionMismatchException(t.getOrder(), 1);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,495,                return t.compose(new double[] {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,50,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,53,                double r = x;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,54,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,55,                    r = f[i].value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,57,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,443,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,447,                return f.value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,452,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,274,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,277,                double r = f[0].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,278,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,279,                    r *= f[i].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,281,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,286,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,318,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,321,"                return combiner.value(f.value(x), g.value(x));",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,452,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,455,"                        return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,339,        return new MultivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,342,"                double result = combiner.value(initialValue, f.value(point[0]));",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,343,                for (int i = 1; i < point.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,344,"                    result = combiner.value(result, f.value(point[i]));",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,346,                return result;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,390,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,393,"                return f.value(x, fixed);",0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,203,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,206,                        double r = f[0].derivative().value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,207,                        for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,208,                            r += f[i].derivative().value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,210,                        return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,191,        return new DifferentiableUnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,194,                double r = f[0].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,195,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,196,                    r += f[i].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,198,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,203,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,244,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,248,                double r = f[0].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,249,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,250,                    r  *= f[i].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,252,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,257,                DerivativeStructure r = f[0].value(t);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,258,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,259,                    r = r.multiply(f[i].value(t));,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,261,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,374,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,377,"                return f.value(fixed, x);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,23,38,"        super(value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,23,39,    },0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,23,48,"        super(specific, value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,23,49,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,23,85,        return min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,69,        this.max = max;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,71,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,23,84,        return max;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,224,        return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,227,                double r = f[0].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,228,                for (int i = 1; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,229,                    r *= f[i].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,231,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,73,        return new UnivariateDifferentiable() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,77,                double r = t;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,78,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,79,                    r = f[i].value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,81,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,86,                DerivativeStructure r = t;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,87,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,88,                    r = f[i].value(r);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,90,                return r;,0.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,67,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,71,            throw new NoDataException();,0.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,74,"            throw new DimensionMismatchException(y.length, x.length);",0.0,0,,0
org/apache/commons/math3/analysis/function/StepFunction,23,92,            fx = ordinate[index];,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,23,37,        this(LocalizedFormats.NO_DATA);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,23,38,    },0.0,0,,0
org/apache/commons/math3/exception/NoDataException,23,45,        super(specific);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,23,46,    },0.0,0,,0
org/apache/commons/math3/analysis/function/Sin,23,44,        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();,0.0,0,,0
org/apache/commons/math3/analysis/function/Sin,23,51,        return t.sin();,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,286,                return new UnivariateFunction() {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,289,                        double sum = 0;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,290,                        for (int i = 0; i < f.length; i++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,291,                            double prod = f[i].derivative().value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,292,                            for (int j = 0; j < f.length; j++) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,293,                                if (i != j) {,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,294,                                    prod *= f[j].value(x);,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,297,                            sum += prod;,0.0,0,,0
org/apache/commons/math3/analysis/FunctionUtils,23,299,                        return sum;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,61,        return evaluations.getMaximalCount();,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,105,        } catch (MaxCountExceededException e) {,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,106,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,118,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,121,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,84,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,87,            throw new NotStrictlyPositiveException(abs);,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,131,            a = hi;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,132,            b = lo;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,142,            fx = -fx;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,191,                                d = tol1;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,199,                            e = b - x;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,210,                        e = a - x;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,217,                    if (d >= 0) {,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,218,                        u = x + tol1;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,220,                        u = x - tol1;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,228,                    fu = -fu;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,236,"                    if (checker.converged(iter, previous, current)) {",0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",0.0,1,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,243,                    if (u < x) {,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,244,                        b = x;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,246,                        a = x;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,248,                    v = w;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,249,                    fv = fw;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,250,                    w = x;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,251,                    fw = fx;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,252,                    x = u;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,253,                    fx = fu;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,298,            return b;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,301,            return a;,0.0,0,,0
org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,307,            return a.getValue() >= b.getValue() ? a : b;,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,23,37,        super(max);,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,23,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,23,39,    },0.0,0,,0
