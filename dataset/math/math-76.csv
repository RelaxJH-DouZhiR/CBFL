project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,4.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,2.0,1,,1
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2.0,1,,1
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,2.0,1,,1
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,0.8,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,0.8,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,0.8,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,0.8,0,,0
org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.8,0,,0
org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,0.8,0,,0
org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0.8,0,,0
org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,0.8,0,,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0.5,0,,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },0.5,0,,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,217,                columnSum += Math.abs(value);,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,222,            },0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,0.5,0,,0
org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.5,0,,0
org/apache/commons/math/linear/MatrixUtils,76,640,    },0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,        final int rowCount    = getRowDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,        final int columnCount = getColumnDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,            final double[] mRow       = m.data[row];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,            final double[] outDataRow = outData[row];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,            for (int j = 0; j < columns; ++j) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,        final int rows    = getRowDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,        final int columns = getColumnDimension();,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);",0.5,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",0.5,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,612,            },0.5,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,            final int p = singularValues.length;,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,                final double[][] eData = e.getData();,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,0.44444,1,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,0.44444,1,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,                cachedU =,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,186,            } else {,0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,196,        return cachedU;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,95,"            cachedU = MatrixUtils.createRealMatrix(m, m);",0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,105,"                cachedU.setEntry(k, k, 1);",0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,106,                if (hK[k - diagOffset] != 0.0) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,107,                    for (int j = k; j < m; ++j) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,115,"                            cachedU.addToEntry(i, j, -alpha * householderVectors[i][k - diagOffset]);",0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,188,                    for (int j = k; j < n; ++j) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,193,                        beta /= diagonal[k - diagOffset] * hK[k];,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,0.44444,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",0.44444,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,236,        if (cachedV == null) {,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,238,            final int p = singularValues.length;,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,239,            if (m >= n) {,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,241,                final RealMatrix e =,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,243,                cachedV = transformer.getV().multiply(e);,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,244,            } else {,0.4,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,0.4,1,,1
org/apache/commons/math/linear/BiDiagonalTransformer,76,169,        if (cachedV == null) {,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,171,            final int m = householderVectors.length;,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,172,            final int n = householderVectors[0].length;,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,173,            final int p = main.length;,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,174,            final int diagOffset    = (m >= n) ? 1 : 0;,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,175,            final double[] diagonal = (m >= n) ? secondary : main;,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,176,"            cachedV = MatrixUtils.createRealMatrix(n, n);",0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,179,            for (int k = n - 1; k >= p; --k) {,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,184,            for (int k = p - 1; k >= diagOffset; --k) {,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,185,                final double[] hK = householderVectors[k - diagOffset];,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,186,"                cachedV.setEntry(k, k, 1);",0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,187,                if (hK[k] != 0.0) {,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,201,            if (diagOffset > 0) {,0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,202,"                cachedV.setEntry(0, 0, 1);",0.4,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,208,        return cachedV;,0.4,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,55,        throws IllegalArgumentException {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,56,        if (rowDimension <= 0 ) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,61,        if (columnDimension <= 0) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,66,        lu = null;,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,67,    },0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,266,        final RealMatrix subMatrix =,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,268,        for (int i = startRow; i <= endRow; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,269,            for (int j = startColumn; j <= endColumn; ++j) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,274,        return subMatrix;,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,507,"        MatrixUtils.checkColumnIndex(this, column);",0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,508,        final int nRows = getRowDimension();,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,509,        if (vector.getDimension() != nRows) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,514,        for (int i = 0; i < nRows; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,515,"            setEntry(i, column, vector.getEntry(i));",0.36364,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,518,    },0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,95,    },0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,117,"                            final String separator, final NumberFormat format) {",0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,118,        this.prefix      = prefix;,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,119,        this.suffix      = suffix;,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,120,        this.separator   = separator;,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,121,        trimmedPrefix    = prefix.trim();,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,122,        trimmedSuffix    = suffix.trim();,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,123,        trimmedSeparator = separator.trim();,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,124,        this.format      = format;,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,125,    },0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,173,        return getInstance(Locale.getDefault());,0.36364,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0.36364,0,,0
org/apache/commons/math/util/CompositeFormat,76,30,public abstract class CompositeFormat extends Format {,0.36364,0,,0
org/apache/commons/math/util/CompositeFormat,76,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.36364,0,,0
org/apache/commons/math/util/CompositeFormat,76,54,        nf.setMaximumFractionDigits(2);,0.36364,0,,0
org/apache/commons/math/util/CompositeFormat,76,55,        return nf;,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,101,"        throws NullPointerException, IllegalArgumentException {",0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,102,        if (d == null) {,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,105,        if (d.length == 0) {,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,108,        data = copyArray ? d.clone() :  d;,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,109,    },0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,41,    private static final RealVectorFormat DEFAULT_FORMAT =,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,946,        return data[index];,0.36364,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,951,        return data.length;,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,34,public abstract class AbstractRealVector implements RealVector {,0.36364,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,819,    protected class SparseEntryIterator implements Iterator<Entry> {,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,61,        return (rows * columns <= 4096) ?,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,530,        if (row < 0 || row >= m.getRowDimension()) {,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,534,    },0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,544,        if (column < 0 || column >= m.getColumnDimension()) {,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,548,    },0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,564,"        checkRowIndex(m, startRow);",0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,565,"        checkRowIndex(m, endRow);",0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,566,        if (startRow > endRow) {,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,571,"        checkColumnIndex(m, startColumn);",0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,572,"        checkColumnIndex(m, endColumn);",0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,573,        if (startColumn > endColumn) {,0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,579,    },0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,96,"        super(rowDimension, columnDimension);",0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,97,        data = new double[rowDimension][columnDimension];,0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,98,    },0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,181,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,374,            return data[row][column];,0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,386,            data[row][column] = value;,0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,390,        },0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,391,    },0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,398,            data[row][column] += increment;,0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,402,        },0.36364,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,403,    },0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,257,        if (cachedV == null) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,259,            if (eigenvectors == null) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,260,                findEigenVectors();,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,263,            final int m = eigenvectors.length;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,264,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,265,            for (int k = 0; k < m; ++k) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,266,"                cachedV.setColumnVector(k, eigenvectors[k]);",0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,272,        return cachedV;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1732,        final int m = main.length;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1733,        eigenvectors = new ArrayRealVector[m];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1736,        final double[] d = new double[m];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1737,        final double[] l = new double[m - 1];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1739,        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1740,        double di = main[0]+mu;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1741,        d[0] = di;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1742,        for (int i = 1; i < m; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1743,            final double eiM1  = secondary[i - 1];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1744,            final double ratio = eiM1 / di;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1745,            di       = main[i] - eiM1 * ratio + mu;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1746,            l[i - 1] = ratio;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1747,            d[i]     = di;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1751,        for (int i = 0; i < m; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1752,"            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1755,    },0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1771,        final int m = main.length;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1772,"        stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1773,"        progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1777,        int r = m - 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1778,        double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1779,        int sixI = 0;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1780,        for (int i = 0; i < m - 1; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1781,            final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1782,            if (absG < minG) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1783,                r = i;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1784,                minG = absG;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1786,            sixI += 6;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1791,        double[] eigenvector = new double[m];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1792,        double n2 = 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1793,        eigenvector[r] = 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1794,        double z = 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1795,        for (int i = r - 1; i >= 0; --i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1796,            z *= -work[6 * i + 2];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1797,            eigenvector[i] = z;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1798,            n2 += z * z;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1800,        z = 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1801,        for (int i = r + 1; i < m; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1802,            z *= -work[6 * i - 1];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1803,            eigenvector[i] = z;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1804,            n2 += z * z;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1808,        final double inv = 1.0 / Math.sqrt(n2);,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1809,        for (int i = 0; i < m; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1810,            eigenvector[i] *= inv;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1813,        return (transformer == null) ?,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1829,        final int nM1 = d.length - 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1830,        double si = -lambda;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1831,        int sixI = 0;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1832,        for (int i = 0; i < nM1; ++i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1833,            final double di   = d[i];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1834,            final double li   = l[i];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1835,            final double ldi  = li * di;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1836,            final double diP1 = di + si;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1837,            final double liP1 = ldi / diP1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1838,            work[sixI]        = si;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1839,            work[sixI + 1]    = diP1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1840,            work[sixI + 2]    = liP1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1841,            si = li * liP1 * si - lambda;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1842,            sixI += 6;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1844,        if (Double.isNaN(si)) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1864,        work[6 * nM1 + 1] = d[nM1] + si;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1865,        work[6 * nM1]     = si;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1866,    },0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1878,        final int nM1 = d.length - 1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1879,        double pi = d[nM1] - lambda;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1880,        int sixI = 6 * (nM1 - 1);,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1881,        for (int i = nM1 - 1; i >= 0; --i) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1882,            final double di   = d[i];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1883,            final double li   = l[i];,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1884,            final double diP1 = di * li * li + pi;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1885,            final double t    = di / diP1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1886,            work[sixI +  9]   = pi;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1887,            work[sixI + 10]   = diP1;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1888,            work[sixI +  5]   = li * t;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1889,            pi = pi * t - lambda;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1890,            sixI -= 6;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1892,        if (Double.isNaN(pi)) {,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1911,        work[3] = pi;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1912,        work[4] = pi;,0.36364,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1913,    },0.36364,0,,0
org/apache/commons/math/linear/MatrixUtils,76,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0.30769,0,,0
org/apache/commons/math/linear/MatrixUtils,76,656,    },0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,134,"        throws IllegalArgumentException, NullPointerException {",0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,135,        if (copyArray) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,138,            if (d == null) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,141,            final int nRows = d.length;,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,142,            if (nRows == 0) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,146,            final int nCols = d[0].length;,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,147,            if (nCols == 0) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,151,            for (int r = 1; r < nRows; r++) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,152,                if (d[r].length != nCols) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,157,            data = d;,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,159,    },0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,275,            return multiply((Array2DRowRealMatrix) m);,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,294,        final int nRows = this.getRowDimension();,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,295,        final int nCols = m.getColumnDimension();,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,296,        final int nSum = this.getColumnDimension();,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,297,        final double[][] outData = new double[nRows][nCols];,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,298,        for (int row = 0; row < nRows; row++) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,299,            final double[] dataRow    = data[row];,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,300,            final double[] outDataRow = outData[row];,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,301,            for (int col = 0; col < nCols; col++) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,302,                double sum = 0;,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,303,                for (int i = 0; i < nSum; i++) {,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,304,                    sum += dataRow[i] * m.data[i][col];,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,306,                outDataRow[col] = sum;,0.30769,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,310,"        return new Array2DRowRealMatrix(outData, false);",0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,296,                    hK[k + 1] -= b;,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,297,                    for (int i = k + 1; i < m; ++i) {,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,298,                        final double[] hI = householderVectors[i];,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,299,                        double beta = 0;,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,300,                        for (int j = k + 1; j < n; ++j) {,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,301,                            beta -= hI[j] * hK[j];,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,303,                        beta /= b * hK[k + 1];,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,304,                        for (int j = k + 1; j < n; ++j) {,0.30769,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,305,                            hI[j] -= beta * hK[j];,0.30769,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,98,"        this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",0.28571,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,99,    },0.28571,0,,0
org/apache/commons/math/linear/MatrixUtils,76,106,        return (data.length * data[0].length <= 4096) ?,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,114,"        throws IllegalArgumentException, NullPointerException {",0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,115,        copyIn(d);,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,116,    },0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,335,        if (data == null) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,336,            if (row > 0) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,340,            if (column > 0) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,344,            final int nRows = subMatrix.length;,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,345,            if (nRows == 0) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,350,            final int nCols = subMatrix[0].length;,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,351,            if (nCols == 0) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,355,            data = new double[subMatrix.length][nCols];,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,356,            for (int i = 0; i < data.length; ++i) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,357,                if (subMatrix[i].length != nCols) {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,361,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,363,        } else {,0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,367,    },0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,636,"        setSubMatrix(in, 0, 0);",0.28571,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,637,    },0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,74,            transformToUpperBiDiagonal();,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,257,        final int m = householderVectors.length;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,258,        final int n = householderVectors[0].length;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,259,        for (int k = 0; k < n; k++) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,262,            double xNormSqr = 0;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,263,            for (int i = k; i < m; ++i) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,264,                final double c = householderVectors[i][k];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,265,                xNormSqr += c * c;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,267,            final double[] hK = householderVectors[k];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,268,            final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,269,            main[k] = a;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,270,            if (a != 0.0) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,271,                hK[k] -= a;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,272,                for (int j = k + 1; j < n; ++j) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,273,                    double alpha = 0;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,274,                    for (int i = k; i < m; ++i) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,275,                        final double[] hI = householderVectors[i];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,276,                        alpha -= hI[j] * hI[k];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,278,                    alpha /= a * householderVectors[k][k];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,279,                    for (int i = k; i < m; ++i) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,280,                        final double[] hI = householderVectors[i];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,281,                        hI[j] -= alpha * hI[k];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,286,            if (k < n - 1) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,288,                xNormSqr = 0;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,289,                for (int j = k + 1; j < n; ++j) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,290,                    final double c = hK[j];,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,291,                    xNormSqr += c * c;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,293,                final double b = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,294,                secondary[k] = b;,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,295,                if (b != 0.0) {,0.28571,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,312,    },0.28571,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,43,    protected AbstractRealMatrix() {,0.26667,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,44,        lu = null;,0.26667,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,45,    },0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,109,        throws InvalidMatrixException {,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,111,        m = matrix.getRowDimension();,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,112,        n = matrix.getColumnDimension();,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,114,        cachedU  = null;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,115,        cachedS  = null;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,116,        cachedV  = null;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,117,        cachedVt = null;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,120,        transformer         = new BiDiagonalTransformer(matrix);,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,121,        mainBidiagonal      = transformer.getMainDiagonalRef();,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,122,        secondaryBidiagonal = transformer.getSecondaryDiagonalRef();,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,125,        mainTridiagonal      = new double[mainBidiagonal.length];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,126,        secondaryTridiagonal = new double[mainBidiagonal.length - 1];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,127,        double a = mainBidiagonal[0];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,128,        mainTridiagonal[0] = a * a;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,129,        for (int i = 1; i < mainBidiagonal.length; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,130,            final double b  = secondaryBidiagonal[i - 1];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,131,            secondaryTridiagonal[i - 1] = a * b;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,132,            a = mainBidiagonal[i];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,133,            mainTridiagonal[i] = a * a + b * b;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,137,        eigenDecomposition =,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,140,        final double[] eigenValues = eigenDecomposition.getRealEigenvalues();,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,141,"        int p = Math.min(max, eigenValues.length);",0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,142,        while ((p > 0) && (eigenValues[p - 1] <= 0)) {,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,145,        singularValues = new double[p];,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,146,        for (int i = 0; i < p; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,147,            singularValues[i] = Math.sqrt(eigenValues[i]);,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,150,    },0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,317,        return copyOut();,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,420,        return (data == null) ? 0 : data.length;,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,616,        final int nRows = this.getRowDimension();,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,617,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,619,        for (int i = 0; i < nRows; i++) {,0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,620,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.26667,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,622,        return out;,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,60,    public BiDiagonalTransformer(RealMatrix matrix) {,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,62,        final int m = matrix.getRowDimension();,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,63,        final int n = matrix.getColumnDimension();,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,64,"        final int p = Math.min(m, n);",0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,65,        householderVectors = matrix.getData();,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,66,        main      = new double[p];,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,67,        secondary = new double[p - 1];,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,68,        cachedU   = null;,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,69,        cachedB   = null;,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,70,        cachedV   = null;,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,73,        if (m >= n) {,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,79,    },0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,229,        return main;,0.26667,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,239,        return secondary;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,191,        throws InvalidMatrixException {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,193,        this.main      = main.clone();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,194,        this.secondary = secondary.clone();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,195,        transformer    = null;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,198,        squaredSecondary = new double[secondary.length];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,200,            final double s = secondary[i];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,201,            squaredSecondary[i] = s * s;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,204,        this.splitTolerance = splitTolerance;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,205,        decompose();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,207,    },0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,237,        cachedV  = null;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,238,        cachedD  = null;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,239,        cachedVt = null;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,240,        work     = new double[6 * main.length];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,243,        computeGershgorinCircles();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,246,        findEigenvalues();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,249,        eigenvectors = null;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,251,    },0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,312,        return realEigenvalues.clone();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,571,        final int m     = main.length;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,572,        final int lowerStart = 4 * m;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,573,        final int upperStart = 5 * m;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,574,        lowerSpectra = Double.POSITIVE_INFINITY;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,575,        upperSpectra = Double.NEGATIVE_INFINITY;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,576,        double eMax = 0;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,578,        double eCurrent = 0;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,579,        for (int i = 0; i < m - 1; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,581,            final double dCurrent = main[i];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,582,            final double ePrevious = eCurrent;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,583,            eCurrent = Math.abs(secondary[i]);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,584,"            eMax = Math.max(eMax, eCurrent);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,585,            final double radius = ePrevious + eCurrent;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,587,            final double lower = dCurrent - radius;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,588,            work[lowerStart + i] = lower;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,589,"            lowerSpectra = Math.min(lowerSpectra, lower);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,591,            final double upper = dCurrent + radius;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,592,            work[upperStart + i] = upper;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,593,"            upperSpectra = Math.max(upperSpectra, upper);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,597,        final double dCurrent = main[m - 1];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,598,        final double lower = dCurrent - eCurrent;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,599,        work[lowerStart + m - 1] = lower;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,600,"        lowerSpectra = Math.min(lowerSpectra, lower);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,601,        final double upper = dCurrent + eCurrent;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,602,        work[upperStart + m - 1] = upper;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,603,"        upperSpectra = Math.max(upperSpectra, upper);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,604,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,606,    },0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,616,        List<Integer> splitIndices = computeSplits();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,619,        realEigenvalues = new double[main.length];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,620,        imagEigenvalues = new double[main.length];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,621,        int begin = 0;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,622,        for (final int end : splitIndices) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,623,            final int n = end - begin;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,624,            switch (n) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,672,            begin = end;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,673,        },0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,676,        Arrays.sort(realEigenvalues);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,677,        int j = realEigenvalues.length - 1;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,678,        for (int i = 0; i < j; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,679,            final double tmp = realEigenvalues[i];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,680,            realEigenvalues[i] = realEigenvalues[j];,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,681,            realEigenvalues[j] = tmp;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,682,            --j;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,685,    },0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,693,        final List<Integer> list = new ArrayList<Integer>();,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,696,        double absDCurrent = Math.abs(main[0]);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,697,        for (int i = 0; i < secondary.length; ++i) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,698,            final double absDPrevious = absDCurrent;,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,699,            absDCurrent = Math.abs(main[i + 1]);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,700,            final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,701,            if (Math.abs(secondary[i]) <= max) {,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,708,        list.add(secondary.length + 1);,0.26667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,709,        return list;,0.26667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,229,        return singularValues.clone();,0.2,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,638,                process3RowsBlock(begin);,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,639,                break;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,761,        final double q0       = main[index];,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,762,        final double q1       = main[index + 1];,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,763,        final double q2       = main[index + 2];,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,764,        final double e12      = squaredSecondary[index];,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,765,        final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,768,        final double b        = -(q0 + q1 + q2);,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,769,        final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,770,        final double d        = q2 * e12 - q0 * q1q2Me22;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,773,        final double b2       = b * b;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,774,        final double q        = (3 * c - b2) / 9;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,775,        final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,776,        final double delta    = q * q * q + r * r;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,777,        if (delta >= 0) {,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,783,        final double sqrtMq = Math.sqrt(-q);,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,784,        final double theta  = Math.acos(r / (-q * sqrtMq));,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,785,        final double alpha  = 2 * sqrtMq;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,786,        final double beta   = b / 3;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,788,        double z0 = alpha * Math.cos(theta / 3) - beta;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,789,        double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,790,        double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,791,        if (z0 < z1) {,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,796,        if (z1 < z2) {,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,797,            final double t = z1;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,798,            z1 = z2;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,799,            z2 = t;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,801,        if (z0 < z1) {,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,806,        realEigenvalues[index]     = z0;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,807,        realEigenvalues[index + 1] = z1;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,808,        realEigenvalues[index + 2] = z2;,0.16667,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,810,    },0.16667,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,168,                    final double mi = mainBidiagonal[i];,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,169,                    final double[] ei0 = ei1;,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,170,                    final double[] wi  = wData[i];,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,171,                        ei1 = eData[i + 1];,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,172,                        final double si = secondaryBidiagonal[i];,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,173,                        for (int j = 0; j < p; ++j) {,0.125,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,174,                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];,0.125,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,633,                process2RowsBlock(begin);,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,634,                break;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,733,        final double q0   = main[index];,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,734,        final double q1   = main[index + 1];,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,735,        final double e12  = squaredSecondary[index];,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,737,        final double s     = q0 + q1;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,738,        final double p     = q0 * q1 - e12;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,739,        final double delta = s * s - 4 * p;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,740,        if (delta < 0) {,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,744,        final double largestRoot = 0.5 * (s + Math.sqrt(delta));,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,745,        realEigenvalues[index]     = largestRoot;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,746,        realEigenvalues[index + 1] = p / largestRoot;,0.1,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,748,    },0.1,0,,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,40,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,60,        this.pattern   = pattern;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,62,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,72,        super(rootCause);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,73,        this.pattern   = getMessage();,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,74,        this.arguments = new Object[0];,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,75,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,88,        super(rootCause);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,89,        this.pattern   = pattern;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,91,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,102,            ResourceBundle bundle =,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,106,                return bundle.getString(s);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,111,        },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,109,        } catch (MissingResourceException mre) {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,115,        return s;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,136,        return pattern;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,144,        return arguments.clone();,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,154,"        return buildMessage(locale, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,160,        return getMessage(Locale.US);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,166,        return getMessage(Locale.getDefault());,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,174,        printStackTrace(System.err);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,175,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,184,        synchronized (out) {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,185,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,186,            printStackTrace(pw);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,188,            pw.flush();,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,189,        },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,190,    },0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,201,        return new ArithmeticException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,259,        return new EOFException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,292,        ioe.initCause(rootCause);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,293,        return ioe;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,305,        return new IllegalArgumentException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,334,        iae.initCause(rootCause);,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,335,        return iae;,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,347,        return new IllegalStateException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,376,        return new ConcurrentModificationException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,405,        return new NoSuchElementException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,434,        return new NullPointerException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,466,"        return new ParseException(null, offset) {",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,495,        return new RuntimeException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,37,public class MathRuntimeException extends RuntimeException {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,333,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,334,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,335,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,340,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,341,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,62,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,82,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,83,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,85,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,86,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,91,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,101,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,102,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,104,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,105,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,110,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,117,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,118,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,120,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,121,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,122,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,126,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,133,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,134,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,136,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,137,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,138,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,142,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,153,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,154,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,155,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,156,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,157,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,158,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,159,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,160,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,163,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,167,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,174,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,182,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,183,            final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,184,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,185,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,189,        return data;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,286,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,298,        return subMatrix;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,310,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,311,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,313,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,345,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,353,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,355,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,362,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,363,            final double[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,364,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,369,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,375,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,376,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,380,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,381,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,385,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,386,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,387,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,393,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,394,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,398,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,399,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,404,        lu = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,406,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,412,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,413,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,414,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,415,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,416,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,419,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,427,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,428,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,429,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,431,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,435,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,436,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,439,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,445,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,446,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,447,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,448,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,449,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,452,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,460,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,461,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,462,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,464,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,468,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,472,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,477,"        return new ArrayRealVector(getRow(row), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,484,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,485,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,486,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,487,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,491,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,492,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,495,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,500,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,510,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,524,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,525,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,526,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,527,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,528,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,531,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,539,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,540,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,541,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,542,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,546,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,547,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,550,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,556,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,557,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,558,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,559,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,560,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,563,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,571,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,572,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,573,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,574,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,578,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,579,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,582,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,624,        if (lu == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,627,        return lu.getInverse();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,639,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,645,        if (lu == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,648,        return !lu.isNonSingular();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,660,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,661,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,662,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,663,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,665,        double trace = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,666,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,667,"            trace += getEntry(i, i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,669,        return trace;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,676,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,677,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,678,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,679,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,684,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,685,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,686,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,687,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,688,"                sum += getEntry(row, i) * v[i];",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,690,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,693,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,702,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,703,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,704,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,705,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,706,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,711,            final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,712,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,713,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,714,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,715,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,717,                out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,720,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,728,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,729,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,730,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,731,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,736,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,737,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,738,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,739,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,740,"                sum += getEntry(i, col) * v[i];",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,742,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,745,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,754,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,756,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,757,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,758,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,759,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,764,            final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,765,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,766,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,767,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,768,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,770,                out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,773,            return new ArrayRealVector(out);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,781,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,782,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,784,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,785,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,786,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,787,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,788,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,791,        lu = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,792,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,798,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,799,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,801,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,802,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,803,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,806,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,817,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,818,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,819,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,820,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,821,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,824,        lu = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,825,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,836,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,837,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,841,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,847,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,848,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,850,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,851,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,852,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,853,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,854,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,857,        lu = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,858,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,864,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,865,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,867,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,868,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,869,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,872,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,885,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,886,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,887,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,890,        lu = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,891,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,902,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,903,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,904,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,907,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,913,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,942,        if (lu == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,945,        return lu.solve(b);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,952,        if (lu == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,955,        return lu.solve(b);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,980,        if (lu == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,983,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,991,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,992,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,993,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,994,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,996,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,998,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,999,            if (i > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1000,"                res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1002,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1003,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1004,                if (j > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1005,"                    res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1007,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1009,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1012,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1013,        return res.toString();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1027,        if (object == this ) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1028,            return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1030,        if (object instanceof RealMatrix == false) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1031,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1033,        RealMatrix m = (RealMatrix) object;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1034,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1035,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1037,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1039,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1040,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1042,                    return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1046,        return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1056,        int ret = 7;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1057,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1058,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1059,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1060,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1061,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1062,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,1067,        return ret;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,44,    protected AbstractFieldMatrix() {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,45,        field = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,46,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,52,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,53,        this.field = field;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,54,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,66,        throws IllegalArgumentException {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,67,        if (rowDimension <= 0 ) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,68,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,72,        if (columnDimension <= 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,73,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,77,        this.field = field;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,78,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,89,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,90,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,92,        if (d[0].length == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,93,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,95,        return d[0][0].getField();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,107,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,108,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,110,        return d[0].getField();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,128,        if (columns < 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,129,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,130,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,132,        T[][] array =,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,134,        for (int i = 0; i < array.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,135,"            Arrays.fill(array[i], field.getZero());",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,137,        return array;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,152,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,153,"        Arrays.fill(array, field.getZero());",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,154,        return array;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,159,        return field;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,173,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,175,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,176,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,177,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,178,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,179,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,180,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,184,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,192,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,194,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,195,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,196,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,197,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,198,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,199,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,203,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,210,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,211,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,212,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,213,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,214,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,215,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,219,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,226,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,227,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,228,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,229,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,230,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,231,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,235,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,244,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,246,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,247,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,248,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,250,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,251,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,252,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,253,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,256,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,260,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,267,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,273,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,275,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,276,            final T[] dataI = data[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,277,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,278,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,282,        return data;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,291,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,293,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,295,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,296,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,297,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,301,        return subMatrix;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,310,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,313,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,325,        return subMatrix;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,336,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,340,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,372,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,379,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,380,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,389,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,390,            final T[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,391,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,392,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,396,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,402,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,403,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,404,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,407,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,408,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,409,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,412,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,413,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,414,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,420,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,421,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,422,        checkRowIndex(nRows + row - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,423,        checkColumnIndex(nCols + column - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,425,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,426,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,427,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,431,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,437,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,438,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,439,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,444,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,452,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,453,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,454,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,456,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,460,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,461,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,464,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,470,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,471,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,472,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,473,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,474,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,477,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,485,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,486,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,487,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,489,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,494,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,497,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,502,"        return new ArrayFieldVector<T>(getRow(row), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,509,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,510,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,511,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,512,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,516,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,517,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,520,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,525,"        return new ArrayFieldVector<T>(getColumn(column), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,532,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,533,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,534,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,535,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,539,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,540,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,543,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,549,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,550,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,551,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,553,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,556,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,564,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,565,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,566,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,567,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,571,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,572,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,575,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,581,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,582,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,583,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,584,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,585,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,588,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,596,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,597,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,598,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,599,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,603,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,604,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,607,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,628,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,629,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,630,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,641,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,647,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,659,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,660,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,661,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,662,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,664,        T trace = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,665,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,666,"            trace = trace.add(getEntry(i, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,668,        return trace;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,675,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,676,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,677,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,678,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,683,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,684,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,685,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,686,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,687,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,689,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,692,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,700,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,701,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,702,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,703,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,704,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,705,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,710,"            final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,711,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,712,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,713,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,714,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,716,                out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,719,"            return new ArrayFieldVector<T>(out, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,727,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,728,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,729,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,730,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,735,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,737,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,741,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,744,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,752,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,753,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,755,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,756,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,757,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,758,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,763,"            final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,764,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,765,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,766,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,767,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,769,                out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,772,            return new ArrayFieldVector<T>(out);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,780,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,781,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,783,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,784,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,785,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,786,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,787,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,790,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,796,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,797,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,799,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,800,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,801,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,804,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,812,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,813,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,815,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,816,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,817,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,818,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,819,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,822,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,830,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,831,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,833,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,834,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,835,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,838,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,844,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,845,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,846,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,847,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,848,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,849,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,850,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,851,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,854,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,860,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,861,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,862,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,863,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,864,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,865,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,868,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,876,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,877,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,879,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,880,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,881,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,882,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,883,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,886,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,894,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,895,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,897,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,898,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,899,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,902,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,908,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,914,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,922,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,930,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,939,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,940,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,941,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,942,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,943,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,944,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,946,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,947,            if (i > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,948,"                res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,950,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,951,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,952,                if (j > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,953,"                    res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,955,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,957,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,960,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,961,        return res.toString();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,976,        if (object == this ) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,977,            return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,979,        if (object instanceof FieldMatrix == false) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,980,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,982,        FieldMatrix<T> m = (FieldMatrix<T>) object;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,983,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,984,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,985,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,986,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,988,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,989,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,990,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,991,                    return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,995,        return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1005,        int ret = 322562;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1006,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1007,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1008,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1009,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1010,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1011,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1012,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1015,        return ret;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1024,        if (row < 0 || row >= getRowDimension()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1025,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1028,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1037,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1038,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1041,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1055,        checkRowIndex(startRow);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1056,        checkRowIndex(endRow);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1057,        if (startRow > endRow) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1058,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1062,        checkColumnIndex(startColumn);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1063,        checkColumnIndex(endColumn);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1064,        if (startColumn > endColumn) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1065,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1070,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1081,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1082,            if (selectedRows.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1083,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1085,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1088,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1089,            checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1091,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1092,            checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1094,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1102,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1104,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1109,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1117,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1119,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1124,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1132,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1133,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,1138,    },0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,86,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,87,    },0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,105,"        this(prefix, suffix, separator, getDefaultNumberFormat());",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,106,    },0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,133,        return NumberFormat.getAvailableLocales();,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,141,        return prefix;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,149,        return suffix;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,157,        return separator;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,165,        return format;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,193,        return getInstance().format(v);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,207,        pos.setBeginIndex(0);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,208,        pos.setEndIndex(0);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,211,        toAppendTo.append(prefix);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,214,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,215,            if (i > 0) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,216,                toAppendTo.append(separator);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,218,"            formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,222,        toAppendTo.append(suffix);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,224,        return toAppendTo;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,244,        if (obj instanceof RealVector) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,245,"            return format( (RealVector)obj, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,248,        throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,262,        ParsePosition parsePosition = new ParsePosition(0);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,263,"        ArrayRealVector result = parse(source, parsePosition);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,264,        if (parsePosition.getIndex() == 0) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,265,            throw MathRuntimeException.createParseException(,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,269,        return result;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,279,        int initialIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,282,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,283,"        if (!parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,284,            return null;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,288,        List<Number> components = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,289,        for (boolean loop = true; loop;){,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,291,            if (!components.isEmpty()) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,292,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,293,"                if (!parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,294,                    loop = false;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,298,            if (loop) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,299,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,300,"                Number component = parseNumber(source, format, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,301,                if (component != null) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,302,                    components.add(component);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,306,                    pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,307,                    return null;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,309,            },0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,314,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,315,"        if (!parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,316,            return null;,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,320,        double[] data = new double[components.size()];,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,321,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,322,            data[i] = components.get(i).doubleValue();,0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,324,"        return new ArrayRealVector(data, false);",0.0,0,,0
org/apache/commons/math/linear/RealVectorFormat,76,337,"        return parse(source, pos);",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,42,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,67,"        parseNextCharacter(source, pos);",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,68,        pos.setIndex(pos.getIndex() - 1);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,69,    },0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,80,         int index = pos.getIndex();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,81,         final int n = source.length();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,82,         char ret = 0;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,84,         if (index < n) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,87,                 c = source.charAt(index++);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,88,             } while (Character.isWhitespace(c) && index < n);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,89,             pos.setIndex(index);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,91,             if (index < n) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,92,                 ret = c;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,96,         return ret;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,110,        Number ret = null;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,112,        StringBuffer sb = new StringBuffer();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,113,        sb.append('(');,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,114,        sb.append(value);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,115,        sb.append(')');,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,117,        final int n = sb.length();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,118,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,119,        final int endIndex = startIndex + n;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,120,        if (endIndex < source.length()) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,121,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,122,                ret = Double.valueOf(value);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,123,                pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,127,        return ret;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,142,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,143,"        Number number = format.parse(source, pos);",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,144,        final int endIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,147,        if (startIndex == endIndex) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,149,            final double[] special = {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,152,            for (int i = 0; i < special.length; ++i) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,153,"                number = parseNumber(source, special[i], pos);",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,154,                if (number != null) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,155,                    break;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,160,        return number;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,173,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,174,        final int endIndex = startIndex + expected.length();,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,175,        if ((startIndex >= source.length()) ||,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,179,            pos.setIndex(startIndex);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,180,            pos.setErrorIndex(startIndex);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,181,            return false;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,185,        pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,186,        return true;,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,210,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,211,            toAppendTo.append('(');,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,212,            toAppendTo.append(value);,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,213,            toAppendTo.append(')');,0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,215,"            format.format(value, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math/util/CompositeFormat,76,217,        return toAppendTo;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,56,    public ArrayRealVector() {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,57,        data = new double[0];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,58,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,64,    public ArrayRealVector(int size) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,65,        data = new double[size];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,66,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,73,"    public ArrayRealVector(int size, double preset) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,74,        data = new double[size];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,75,"        Arrays.fill(data, preset);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,76,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,82,    public ArrayRealVector(double[] d) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,83,        data = d.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,84,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,103,            throw new NullPointerException();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,106,"            throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,117,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,118,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,119,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,122,        data = new double[size];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,123,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,124,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,130,    public ArrayRealVector(Double[] d) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,131,        data = new double[d.length];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,132,        for (int i = 0; i < d.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,133,            data[i] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,135,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,143,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,144,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,145,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,148,        data = new double[size];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,149,        for (int i = pos; i < pos + size; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,150,            data[i-pos] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,152,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,158,    public ArrayRealVector(RealVector v) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,159,        data = new double[v.getDimension()];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,160,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,161,            data[i] = v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,163,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,170,"        this(v, true);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,171,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,178,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,179,        data = deep ? v.data.clone() : v.data;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,180,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,187,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,188,        data = new double[v1.data.length + v2.data.length];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,189,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,190,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,191,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,198,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,199,        final int l1 = v1.data.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,200,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,201,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,202,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,203,        for (int i = 0; i < l2; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,204,            data[l1 + i] = v2.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,206,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,213,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,214,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,215,        final int l2 = v2.data.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,216,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,217,        for (int i = 0; i < l1; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,218,            data[i] = v1.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,220,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,221,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,228,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,229,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,230,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,231,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,232,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,233,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,234,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,241,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,242,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,243,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,244,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,245,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,246,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,247,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,254,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,255,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,256,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,257,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,258,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,259,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,260,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,264,"        return new ArrayRealVector(this, true);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,270,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,271,            return add((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,273,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,274,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,275,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,277,            while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,278,                out[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,280,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,287,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,288,        double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,289,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,290,            out[i] += v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,292,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,303,        return (ArrayRealVector) add(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,309,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,310,            return subtract((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,312,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,313,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,314,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,316,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,317,                out[e.getIndex()] -= e.getValue();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,319,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,326,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,327,        double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,328,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,329,            out[i] -= v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,331,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,342,        return (ArrayRealVector) subtract(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,347,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,348,            data[i] = data[i] + d;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,350,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,355,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,356,            data[i] = data[i] - d;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,358,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,363,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,364,            data[i] = data[i] * d;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,366,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,371,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,372,            data[i] = data[i] / d;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,374,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,379,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,380,"            data[i] = Math.pow(data[i], d);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,382,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,387,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,388,            data[i] = Math.exp(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,390,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,395,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,396,            data[i] = Math.expm1(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,398,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,403,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,404,            data[i] = Math.log(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,406,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,411,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,412,            data[i] = Math.log10(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,414,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,419,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,420,            data[i] = Math.log1p(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,422,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,427,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,428,            data[i] = Math.cosh(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,430,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,435,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,436,            data[i] = Math.sinh(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,438,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,443,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,444,            data[i] = Math.tanh(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,446,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,451,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,452,            data[i] = Math.cos(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,454,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,459,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,460,            data[i] = Math.sin(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,462,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,467,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,468,            data[i] = Math.tan(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,470,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,475,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,476,            data[i] = Math.acos(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,478,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,483,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,484,            data[i] = Math.asin(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,486,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,491,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,492,            data[i] = Math.atan(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,494,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,499,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,500,            data[i] = 1.0 / data[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,502,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,507,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,508,            data[i] = Math.abs(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,510,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,515,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,516,            data[i] = Math.sqrt(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,518,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,523,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,524,            data[i] = Math.cbrt(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,526,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,531,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,532,            data[i] = Math.ceil(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,534,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,539,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,540,            data[i] = Math.floor(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,542,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,547,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,548,            data[i] = Math.rint(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,550,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,555,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,556,            data[i] = Math.signum(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,558,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,563,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,564,            data[i] = Math.ulp(data[i]);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,566,        return this;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,572,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,573,            return ebeMultiply((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,575,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,576,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,577,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,578,                out[i] *= v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,580,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,587,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,588,        double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,589,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,590,            out[i] *= v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,592,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,603,        return (ArrayRealVector) ebeMultiply(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,609,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,610,            return ebeDivide((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,612,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,613,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,614,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,615,                out[i] /= v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,617,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,624,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,625,        double[] out = data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,626,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,627,                out[i] /= v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,629,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,640,        return (ArrayRealVector) ebeDivide(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,645,        return data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,654,        return data;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,660,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,661,            return dotProduct((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,663,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,664,            double dot = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,665,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,667,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,668,                dot += data[e.getIndex()] * e.getValue();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,670,            return dot;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,677,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,678,        double dot = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,679,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,680,            dot += data[i] * v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,682,        return dot;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,693,        return dotProduct(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,699,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,700,        for (double a : data) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,701,            sum += a * a;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,703,        return Math.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,709,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,710,        for (double a : data) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,711,            sum += Math.abs(a);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,713,        return sum;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,719,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,720,        for (double a : data) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,721,"            max = Math.max(max, Math.abs(a));",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,723,        return max;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,729,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,730,            return getDistance((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,732,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,733,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,734,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,735,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,736,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,738,            return Math.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,745,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,746,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,747,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,748,            final double delta = data[i] - v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,749,            sum += delta * delta;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,751,        return Math.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,769,        return getDistance(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,775,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,776,            return getL1Distance((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,778,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,779,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,780,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,781,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,782,                sum += Math.abs(delta);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,784,            return sum;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,791,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,792,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,793,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,794,            final double delta = data[i] - v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,795,            sum += Math.abs(delta);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,797,        return sum;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,815,        return getL1Distance(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,821,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,822,            return getLInfDistance((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,824,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,825,            double max = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,826,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,827,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,828,"                max = Math.max(max, Math.abs(delta));",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,830,            return max;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,837,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,838,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,839,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,840,            final double delta = data[i] - v[i];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,841,"            max = Math.max(max, Math.abs(delta));",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,843,        return max;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,861,        return getLInfDistance(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,866,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,867,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,868,"            throw MathRuntimeException.createArithmeticException(""zero norm"");",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,870,        return mapDivide(norm);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,875,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,876,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,877,"            throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,879,        mapDivideToSelf(norm);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,880,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,884,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,889,"        return projection(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,898,        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,904,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,905,            return outerProduct((ArrayRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,907,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,908,            final int m = data.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,909,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,910,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,911,                for (int j = 0; j < data.length; j++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,912,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,915,            return out;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,927,        return outerProduct(v.data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,933,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,934,        final int m = data.length;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,935,"        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,936,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,937,            for (int j = 0; j < data.length; j++) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,938,"                out.setEntry(i, j, data[i] * v[j]);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,941,        return out;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,957,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,958,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,959,"            return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,969,"        return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,974,        final double[] out = new double[data.length + 1];,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,975,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,976,        out[data.length] = in;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,977,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,982,"        return new ArrayRealVector(this, in);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,987,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,989,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,993,        },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,990,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,991,            checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,992,            checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,994,        return out;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1000,            data[index] = value;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1003,        },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1001,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1002,            checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1004,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1010,"                set(index, (ArrayRealVector) v);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1015,            },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1011,            } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1012,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1013,                    data[i] = v.getEntry(i-index);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1019,        },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1016,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1017,            checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1018,            checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1020,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1025,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1029,        },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1026,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1027,            checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1028,            checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1030,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1042,"        setSubVector(index, v.data);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1043,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1047,"        Arrays.fill(data, value);",0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1048,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1052,        return data.clone();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1058,        return DEFAULT_FORMAT.format(this);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1069,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1070,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1081,        if (data.length != n) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1082,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1086,    },0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1093,        for (double v : data) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1094,            if (Double.isNaN(v)) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1095,                return true;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1098,        return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1109,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1110,            return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1113,        for (double v : data) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1114,            if (Double.isInfinite(v)) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1115,                return true;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1119,        return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1145,      if (this == other) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1146,        return true;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1149,      if (other == null || !(other instanceof RealVector)) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1150,        return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1154,      RealVector rhs = (RealVector) other;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1155,      if (data.length != rhs.getDimension()) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1156,        return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1159,      if (rhs.isNaN()) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1160,        return this.isNaN();,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1163,      for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1164,        if (data[i] != rhs.getEntry(i)) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1165,          return false;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1168,      return true;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1178,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1179,            return 9;,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,1181,        return MathUtils.hash(data);,0.0,0,,0
org/apache/commons/math/linear/ArrayRealVector,76,31,public class ArrayRealVector extends AbstractRealVector implements Serializable {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,43,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,44,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,55,        double d = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,56,        if (d != n) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,61,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,70,        if (index < 0 || index >= getDimension()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,71,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,75,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,79,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,80,        checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,81,"        setSubVector(index, v.getData());",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,82,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,86,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,87,        checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,88,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,89,"            setEntry(i + index, v[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,91,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,95,        double[] result = v.clone();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,96,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,98,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,99,            result[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,101,"        return new ArrayRealVector(result, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,106,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,107,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,108,            return add(values);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,110,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,111,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,113,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,114,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,115,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,116,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,117,        return result;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,122,        double[] result = v.clone();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,123,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,125,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,126,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,127,            result[index] = e.getValue() - result[index];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,128,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,129,"        return new ArrayRealVector(result, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,134,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,135,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,136,            return add(values);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,138,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,139,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,141,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,142,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,143,"            v.setEntry(index, e.getValue() - result.getEntry(index));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,144,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,145,        return result;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,150,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,155,        if (d != 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,157,                return mapToSelf(BinaryFunction.ADD.fix1stArgument(d));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,158,            } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,159,                throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,162,        return this;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,170,"        return dotProduct(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,175,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,176,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,177,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,179,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,180,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,182,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,187,"        return ebeDivide(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,192,"        return ebeMultiply(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,197,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,198,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,199,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,201,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,202,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,203,            d += diff * diff;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,204,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,205,        return Math.sqrt(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,210,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,211,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,213,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,214,            final double value = e.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,215,            sum += value * value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,216,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,217,        return Math.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,222,        double norm = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,223,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,225,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,226,            norm += Math.abs(e.getValue());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,228,        return norm;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,233,        double norm = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,234,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,236,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,237,"            norm = Math.max(norm, Math.abs(e.getValue()));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,239,        return norm;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,244,"        return getDistance(new ArrayRealVector(v,false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,249,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,250,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,251,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,253,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,254,            d += Math.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,256,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,261,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,262,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,263,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,265,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,266,            d += Math.abs(e.getValue() - v[e.getIndex()]);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,268,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,273,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,274,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,275,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,277,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,278,"            d = Math.max(Math.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,280,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,285,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,286,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,287,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,289,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,290,"            d = Math.max(Math.abs(e.getValue() - v[e.getIndex()]), d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,292,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,297,        return copy().mapAbsToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,303,            return mapToSelf(ComposableFunction.ABS);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,304,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,305,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,311,        return copy().mapAcosToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,317,            return mapToSelf(ComposableFunction.ACOS);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,318,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,319,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,325,        return copy().mapAsinToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,331,            return mapToSelf(ComposableFunction.ASIN);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,332,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,333,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,339,        return copy().mapAtanToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,345,            return mapToSelf(ComposableFunction.ATAN);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,346,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,347,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,353,        return copy().mapCbrtToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,359,            return mapToSelf(ComposableFunction.CBRT);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,360,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,361,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,367,        return copy().mapCeilToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,373,            return mapToSelf(ComposableFunction.CEIL);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,374,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,375,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,381,        return copy().mapCosToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,387,            return mapToSelf(ComposableFunction.COS);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,388,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,389,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,395,        return copy().mapCoshToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,401,            return mapToSelf(ComposableFunction.COSH);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,402,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,403,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,409,        return copy().mapDivideToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,415,            return mapToSelf(BinaryFunction.DIVIDE.fix2ndArgument(d));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,416,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,417,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,423,        return copy().mapExpToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,429,            return mapToSelf(ComposableFunction.EXP);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,430,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,431,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,437,        return copy().mapExpm1ToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,443,            return mapToSelf(ComposableFunction.EXPM1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,444,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,445,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,451,        return copy().mapFloorToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,457,            return mapToSelf(ComposableFunction.FLOOR);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,458,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,459,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,465,        return copy().mapInvToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,471,            return mapToSelf(ComposableFunction.INVERT);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,472,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,473,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,479,        return copy().mapLogToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,485,            return mapToSelf(ComposableFunction.LOG);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,486,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,487,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,493,        return copy().mapLog10ToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,499,            return mapToSelf(ComposableFunction.LOG10);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,500,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,501,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,507,        return copy().mapLog1pToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,513,            return mapToSelf(ComposableFunction.LOG1P);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,514,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,515,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,521,        return copy().mapMultiplyToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,527,            return mapToSelf(BinaryFunction.MULTIPLY.fix1stArgument(d));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,528,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,529,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,535,        return copy().mapPowToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,541,            return mapToSelf(BinaryFunction.POW.fix2ndArgument(d));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,542,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,543,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,549,        return copy().mapRintToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,555,            return mapToSelf(ComposableFunction.RINT);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,556,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,557,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,563,        return copy().mapSignumToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,569,            return mapToSelf(ComposableFunction.SIGNUM);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,570,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,571,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,577,        return copy().mapSinToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,583,            return mapToSelf(ComposableFunction.SIN);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,584,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,585,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,591,        return copy().mapSinhToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,597,            return mapToSelf(ComposableFunction.SINH);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,598,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,599,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,605,        return copy().mapSqrtToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,611,            return mapToSelf(ComposableFunction.SQRT);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,612,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,613,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,619,        return copy().mapSubtractToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,624,        return mapAddToSelf(-d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,629,        return copy().mapTanToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,635,            return mapToSelf(ComposableFunction.TAN);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,636,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,637,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,643,        return copy().mapTanhToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,649,            return mapToSelf(ComposableFunction.TANH);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,650,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,651,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,657,        return copy().mapUlpToSelf();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,663,            return mapToSelf(ComposableFunction.ULP);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,664,        } catch (FunctionEvaluationException e) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,665,            throw new IllegalArgumentException(e);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,672,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,673,"            product = new OpenMapRealMatrix(this.getDimension(), v.getDimension());",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,675,"            product = new Array2DRowRealMatrix(this.getDimension(), v.getDimension());",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,677,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,678,        Entry thisE = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,679,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,680,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,681,            Entry otherE = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,682,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,683,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,686,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,688,        return product;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,694,"        return outerProduct(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,699,"        return projection(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,704,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,705,        Entry e = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,706,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,707,            e.setValue(value);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,709,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,713,        int dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,714,        double[] values = new double[dim];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,715,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,716,            values[i] = getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,718,        return values;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,723,        return toArray();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,728,        RealVector copy = copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,729,        copy.unitize();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,730,        return copy;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,735,        mapDivideToSelf(getNorm());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,736,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,740,        return new SparseEntryIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,745,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,746,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,774,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,779,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,781,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,782,            e.setValue(function.value(e.getValue()));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,784,        return this;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,188,                final RealMatrix e =,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,190,                cachedU = transformer.getU().multiply(e);,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,204,        if (cachedUt == null) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,205,            cachedUt = getU().transpose();,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,209,        return cachedUt;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,247,                final RealMatrix e =,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,249,                final double[][] eData = e.getData();,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,250,                final double[][] wData = new double[n][p];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,251,                double[] ei1 = eData[0];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,0.0,1,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,253,                    final double mi = mainBidiagonal[i];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,254,                    final double[] ei0 = ei1;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,255,                    final double[] wi  = wData[i];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,256,                        ei1 = eData[i + 1];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,257,                        final double si = secondaryBidiagonal[i];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,258,                        for (int j = 0; j < p; ++j) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,259,                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,262,                        for (int j = 0; j < p; ++j) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,263,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,0.0,1,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,265,                for (int i = p; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,266,                    wData[i] = new double[p];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,268,                cachedV =,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,296,        final int p = singularValues.length;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,297,        int dimension = 0;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,298,        while ((dimension < p) && (singularValues[dimension] >= minSingularValue)) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,299,            ++dimension;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,302,        if (dimension == 0) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,303,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,308,        final double[][] data = new double[dimension][p];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,309,        getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,317,"        RealMatrix jv = new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,318,        return jv.transpose().multiply(jv);,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,325,        return singularValues[0];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,331,        return singularValues[0] / singularValues[singularValues.length - 1];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,338,"        final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);",0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,340,        for (int i = singularValues.length - 1; i >= 0; --i) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,341,           if (singularValues[i] > threshold) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,342,              return i + 1;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,345,        return 0;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,351,"        return new Solver(singularValues, getUT(), getV(),",0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,46,public class SingularValueDecompositionImpl implements SingularValueDecomposition {,0.0,0,,0
org/apache/commons/math/linear/InvalidMatrixException,76,40,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/linear/InvalidMatrixException,76,41,    },0.0,0,,0
org/apache/commons/math/linear/InvalidMatrixException,76,50,        super(cause);,0.0,0,,0
org/apache/commons/math/linear/InvalidMatrixException,76,51,    },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,636,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,637,            },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,360,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,361,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,362,            },0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,367,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,368,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,834,        protected SparseEntryIterator() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,825,        private EntryImpl tmp = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,835,            dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,836,            current = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,837,            if (current.getValue() == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,838,                advance(current);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,840,            if(current.getIndex() >= 0){,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,842,                next = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,843,                next.setIndex(current.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,844,                advance(next);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,847,                current = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,849,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,855,            if (e == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,856,                return;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,859,                e.setIndex(e.getIndex() + 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,860,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,861,            if (e.getIndex() >= dim) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,862,                e.setIndex(-1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,864,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,868,            return current != null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,873,            tmp.setIndex(current.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,874,            if (next != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,875,                current.setIndex(next.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,876,                advance(next);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,877,                if (next.getIndex() < 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,878,                    next = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,881,                current = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,883,            return tmp;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,888,"            throw new UnsupportedOperationException(""Not supported"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,819,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,,0
org/apache/commons/math/linear/RealVector,76,72,    public abstract class Entry {,0.0,0,,0
org/apache/commons/math/linear/RealVector,76,91,            return index;,0.0,0,,0
org/apache/commons/math/linear/RealVector,76,98,            this.index = index;,0.0,0,,0
org/apache/commons/math/linear/RealVector,76,99,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,791,        public EntryImpl() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,792,            setIndex(0);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,793,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,797,            return getEntry(getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,802,"            setEntry(getIndex(), newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,803,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,721,            super(BigFraction.ZERO);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,722,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,728,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,729,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,734,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,735,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,741,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,495,        return new RuntimeException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,503,"                return buildMessage(Locale.US, pattern, argument);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,509,"                return buildMessage(Locale.getDefault(), pattern, argument);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,466,"        return new ParseException(null, offset) {",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,474,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,434,        return new NullPointerException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,442,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,405,        return new NoSuchElementException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,413,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,376,        return new ConcurrentModificationException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,384,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,390,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,347,        return new IllegalStateException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,355,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,305,        return new IllegalArgumentException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,313,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,319,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,259,        return new EOFException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,267,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,273,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,238,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,201,        return new ArithmeticException() {,0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,209,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,,0
org/apache/commons/math/MathRuntimeException,76,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,98,"        super(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,99,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,100,        this.columns = columns;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,107,"        blocks = createBlocksLayout(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,109,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,127,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,148,"        super(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,149,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,150,        this.columns = columns;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,156,        if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,158,            blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,161,            blocks = blockData;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,164,        int index = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,166,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,169,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,173,                if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,174,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,179,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,206,        final int rows         = rawData.length;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,207,        final int columns      = rawData[0].length;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,212,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,213,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,214,            if (length != columns) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,215,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,222,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,223,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,225,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,227,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,229,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,231,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,234,                final double[] block = new double[iHeight * jWidth];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,235,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,238,                int index = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,241,                    index += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,244,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,249,        return blocks;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,270,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,271,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,273,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,275,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,277,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,279,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,280,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,281,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,285,        return blocks;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,293,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,301,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,304,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,305,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,308,        return copied;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,317,            return add((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,318,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,321,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,323,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,326,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,327,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,328,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,331,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,332,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,333,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,334,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,335,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,336,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,337,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,338,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,339,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,340,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,341,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,346,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,351,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,367,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,369,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,372,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,373,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,374,            final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,375,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,376,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,377,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,381,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,390,            return subtract((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,391,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,394,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,396,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,399,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,400,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,401,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,404,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,405,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,406,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,407,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,408,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,409,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,410,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,411,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,412,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,413,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,414,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,419,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,424,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,440,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,442,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,446,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,447,            final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,448,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,449,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,450,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,454,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,463,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,466,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,467,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,468,            final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,469,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,470,                outBlock[k] = tBlock[k] + d;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,474,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,483,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,486,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,487,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,488,            final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,489,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,490,                outBlock[k] = tBlock[k] * d;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,494,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,503,            return multiply((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,504,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,507,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,509,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,512,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,513,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,515,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,516,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,518,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,520,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,521,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,524,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,527,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,528,                        final int kWidth      = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,529,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,530,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,531,                        int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,532,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,533,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,534,                            final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,535,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,536,                                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,537,                                int r = rStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,538,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,539,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,540,                                    ++r;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,542,                                outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,543,                                ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,549,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,554,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,570,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,572,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,575,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,576,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,578,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,579,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,581,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,582,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,583,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,584,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,585,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,588,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,591,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,592,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,593,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,594,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,595,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,596,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,597,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,598,                        final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,599,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,600,                            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,601,                            int l = lStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,602,                            int n = nStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,603,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,604,                                sum += tBlock[l] * mBlock[n] +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,608,                                l += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,609,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,611,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,612,                                sum += tBlock[l++] * mBlock[n];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,613,                                n += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,615,                            outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,616,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,622,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,627,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,635,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,636,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,638,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,639,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,640,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,641,            int regularPos   = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,642,            int lastPos      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,643,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,644,                final double[] dataP = data[p];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,645,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,646,                int dataPos    = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,647,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,648,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,649,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,651,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,652,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,653,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,657,        return data;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,664,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,665,        double maxColSum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,666,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,667,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,668,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,669,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,670,                final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,671,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,672,                for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,673,                    double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,674,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,675,                        sum += Math.abs(block[i * jWidth + j]);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,677,                    colSums[j] += sum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,680,            for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,681,"                maxColSum = Math.max(maxColSum, colSums[j]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,684,        return maxColSum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,690,        double sum2 = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,691,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,692,            for (final double entry : blocks[blockIndex]) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,693,                sum2 += entry * entry;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,696,        return Math.sqrt(sum2);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,706,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,709,        final BlockRealMatrix out =,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,713,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,714,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,715,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,716,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,719,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,720,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,721,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,722,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,723,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,724,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,727,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,728,                final double[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,729,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,730,                final int      width    = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,732,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,733,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,734,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,736,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,738,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,739,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,743,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,747,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,751,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,755,                    } else {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,757,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,761,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,768,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,770,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,771,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,775,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,779,                    } else {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,781,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,788,                ++qBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,792,            ++pBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,796,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,820,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,821,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,822,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,823,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,824,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,825,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,826,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,828,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,836,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,837,        if (refLength < 1) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,838,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,840,        final int endRow    = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,841,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,842,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,843,        for (final double[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,844,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,845,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,852,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,853,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,854,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,855,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,858,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,859,            final int iHeight  = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,860,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,861,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,862,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,864,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,865,                final int jWidth      = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,866,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,867,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,868,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,869,                final int jLength     = jEnd - jStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,872,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,873,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,874,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,881,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,888,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,889,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,892,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,893,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,894,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,895,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,896,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,897,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,898,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,899,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,900,            final int available  = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,901,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,902,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,903,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,904,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,905,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,907,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,908,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,912,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,921,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,924,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,922,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,923,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,925,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,941,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,942,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,943,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,945,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,952,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,953,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,954,        int mBlockIndex  = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,955,        int mIndex       = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,956,        double[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,957,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,958,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,959,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,960,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,961,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,962,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,963,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,964,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,965,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,967,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,968,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,972,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,980,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,986,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,987,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,988,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,990,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,991,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,993,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,994,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,995,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,997,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1001,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1010,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1013,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1011,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1012,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1014,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1030,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1031,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1032,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1034,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1041,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1042,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1043,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1044,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1045,        int mIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1046,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1047,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1048,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1049,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1050,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1051,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1052,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1053,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1055,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1059,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1066,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1067,        final double[] outData = new double[columns];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1070,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1071,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1072,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1073,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1074,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1075,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1076,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1077,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1080,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1089,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1092,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1090,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1091,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1093,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1100,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1101,        final double[] outData = new double[rows];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1104,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1105,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1106,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1107,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1108,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1109,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1111,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1112,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1116,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1125,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1128,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1126,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1127,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1129,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1136,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1137,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1140,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1141,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1142,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1143,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1144,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1145,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1146,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1147,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1150,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1159,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1160,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1161,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1162,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1168,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1169,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1170,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1171,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1172,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1173,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1174,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1175,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1178,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1185,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1186,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1189,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1191,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1192,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1194,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1196,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1197,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1201,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1210,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1211,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1212,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1213,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1219,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1220,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1221,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1222,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1223,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1224,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1225,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1226,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1227,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1231,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1238,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1239,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1242,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1243,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1244,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1255,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1256,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1264,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1260,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1261,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1265,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1272,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1273,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1274,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1276,            blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1281,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1277,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1278,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1282,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1289,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1290,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1291,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1293,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1298,        },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1294,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1295,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1299,    },0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1305,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1306,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1307,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1310,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1311,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1312,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1315,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1316,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1317,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1318,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1319,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1320,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1321,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1322,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1323,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1324,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1325,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1326,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1327,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1328,                        l+= lInc;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1333,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1338,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1345,        return rows;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1351,        return columns;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1359,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1360,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1364,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1367,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1368,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1369,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1370,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1371,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1372,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1373,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1374,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1375,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1376,                    double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1377,                    int q = qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1378,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1379,                        sum += block[k]     * v[q]     +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1383,                        k += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1384,                        q += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1386,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1387,                        sum += block[k++] * v[q++];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1389,                    out[p] += sum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1394,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1403,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1404,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1408,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1411,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1412,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1413,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1414,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1415,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1416,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1417,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1418,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1419,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1420,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1421,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1422,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1423,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1424,                    double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1425,                    int p = pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1426,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1427,                        sum += block[k]           * v[p]     +,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1431,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1432,                        p += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1434,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1435,                        sum += block[k] * v[p++];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1436,                        k += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1438,                    out[q] += sum;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1443,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1451,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1452,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1453,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1454,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1455,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1456,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1457,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1458,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1459,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1460,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1461,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1462,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1463,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1464,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1469,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1477,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1478,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1479,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1480,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1481,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1482,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1483,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1484,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1485,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1486,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1487,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1488,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1489,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1494,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1503,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1504,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1505,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1506,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1507,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1508,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1509,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1510,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1511,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1512,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1513,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1514,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1515,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1516,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1517,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1518,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1519,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1524,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1533,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1534,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1535,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1536,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1537,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1538,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1539,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1540,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1541,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1542,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1543,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1544,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1545,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1546,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1547,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1548,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1549,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1554,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1561,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1562,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1563,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1564,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1565,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1566,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1567,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1568,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1569,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1570,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1571,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1572,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1573,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1574,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1577,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1580,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1587,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1588,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1589,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1592,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1593,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1594,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1595,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1596,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1597,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1598,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1599,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1600,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1603,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1606,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1615,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1616,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1617,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1618,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1619,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1620,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1621,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1622,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1623,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1624,"                final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1625,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1626,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1627,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1628,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1629,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1630,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1631,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1636,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1645,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1646,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1647,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1648,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1649,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1650,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1651,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1652,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1653,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1654,"                final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1655,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1656,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1657,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1658,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1659,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1660,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1661,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1666,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockRealMatrix,76,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,,0
org/apache/commons/math/linear/NonSquareMatrixException,76,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0.0,0,,0
org/apache/commons/math/linear/NonSquareMatrixException,76,39,    },0.0,0,,0
org/apache/commons/math/linear/MatrixIndexException,76,38,"      super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/linear/MatrixIndexException,76,39,    },0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,309,        getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,313,                data[row][column] = value / singularValues[row];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,314,            },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,101,"        super(field, rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,102,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,103,        this.columns = columns;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,106,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,107,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,110,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,112,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,130,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,151,"        super(extractField(blockData), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,152,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,153,        this.columns = columns;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,156,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,157,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,159,        if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,161,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,164,            blocks = blockData;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,167,        int index = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,169,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,170,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,171,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,172,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,176,                if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,177,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,182,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,211,        final int rows         = rawData.length;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,212,        final int columns      = rawData[0].length;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,213,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,214,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,217,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,218,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,219,            if (length != columns) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,220,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,227,        final Field<T> field = extractField(rawData);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,228,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,229,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,230,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,231,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,232,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,233,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,235,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,236,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,237,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,240,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,241,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,244,                int index = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,245,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,246,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,247,                    index += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,250,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,255,        return blocks;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,277,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,278,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,280,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,281,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,282,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,283,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,284,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,285,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,286,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,287,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,288,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,289,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,290,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,291,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,295,        return blocks;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,303,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,311,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,314,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,315,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,318,        return copied;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,327,            return add((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,328,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,331,            checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,333,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,336,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,337,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,338,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,341,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,342,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,343,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,344,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,345,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,346,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,347,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,348,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,349,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,350,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,351,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,356,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,361,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,377,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,379,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,382,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,383,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,384,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,385,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,386,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,387,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,391,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,400,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,401,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,404,            checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,406,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,409,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,410,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,411,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,414,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,415,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,416,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,417,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,418,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,419,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,420,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,421,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,422,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,423,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,424,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,429,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,434,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,450,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,452,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,455,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,456,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,457,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,458,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,459,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,460,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,464,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,473,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,476,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,477,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,478,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,479,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,480,                outBlock[k] = tBlock[k].add(d);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,484,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,493,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,496,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,497,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,498,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,499,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,500,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,504,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,513,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,514,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,517,            checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,519,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,520,            final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,523,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,524,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,526,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,527,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,529,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,531,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,532,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,535,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,538,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,539,                        final int kWidth      = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,540,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,541,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,542,                        int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,543,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,544,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,545,                            final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,546,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,547,                                T sum = zero;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,548,                                int r = rStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,549,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,550,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,551,                                    ++r;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,553,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,554,                                ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,560,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,565,            return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,581,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,583,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,584,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,587,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,588,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,593,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,594,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,595,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,596,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,597,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,600,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,603,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,604,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,605,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,606,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,607,                    int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,608,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,609,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,610,                        final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,611,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,612,                            T sum = zero;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,613,                            int l = lStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,614,                            int n = nStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,615,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,616,                                sum = sum.,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,621,                                l += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,622,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,624,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,625,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,626,                                n += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,628,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,629,                            ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,635,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,640,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,648,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,649,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,651,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,652,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,653,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,654,            int regularPos   = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,655,            int lastPos      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,656,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,657,                final T[] dataP = data[p];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,658,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,659,                int dataPos    = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,660,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,661,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,662,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,664,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,665,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,666,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,670,        return data;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,681,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,684,        final BlockFieldMatrix<T> out =,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,688,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,689,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,690,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,691,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,694,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,695,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,696,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,697,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,698,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,699,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,702,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,703,                final T[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,704,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,705,                final int      width    = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,707,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,708,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,709,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,711,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,713,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,714,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,718,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,722,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,726,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,730,                    } else {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,732,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,736,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,743,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,745,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,746,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,750,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,754,                    } else {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,756,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,763,                ++qBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,766,            ++pBlock;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,770,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,794,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,795,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,796,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,797,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,798,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,799,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,800,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,802,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,810,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,811,        if (refLength < 1) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,812,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,814,        final int endRow    = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,815,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,816,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,817,        for (final T[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,818,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,819,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,826,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,827,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,828,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,829,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,832,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,833,            final int iHeight  = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,834,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,835,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,836,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,838,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,839,                final int jWidth      = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,840,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,841,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,842,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,843,                final int jLength     = jEnd - jStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,846,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,847,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,848,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,855,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,862,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,863,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,866,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,867,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,868,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,869,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,870,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,871,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,872,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,873,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,874,            final int available  = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,875,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,876,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,877,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,878,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,879,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,881,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,882,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,886,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,895,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,898,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,896,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,897,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,899,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,915,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,916,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,917,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,919,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,926,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,927,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,928,        int mBlockIndex  = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,929,        int mIndex       = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,930,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,931,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,932,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,933,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,934,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,935,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,936,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,937,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,938,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,939,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,941,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,942,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,946,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,953,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,954,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,957,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,958,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,959,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,960,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,961,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,962,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,963,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,964,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,965,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,966,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,967,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,968,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,969,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,971,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,975,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,984,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,987,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,985,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,986,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,988,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1004,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1005,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1006,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1008,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1015,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1016,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1017,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1018,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1019,        int mIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1020,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1021,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1022,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1023,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1024,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1025,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1026,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1027,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1029,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1033,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1040,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1041,"        final T[] outData = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1044,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1045,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1046,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1047,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1048,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1049,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1050,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1051,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1054,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1063,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1066,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1064,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1065,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1067,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1074,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1075,"        final T[] outData = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1078,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1079,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1080,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1081,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1082,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1083,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1084,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1085,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1086,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1090,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1099,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1102,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1100,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1101,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1103,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1110,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1111,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1114,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1115,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1116,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1117,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1118,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1119,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1120,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1121,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1124,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1133,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1134,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1135,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1136,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1142,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1143,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1144,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1145,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1146,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1147,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1148,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1149,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1152,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1159,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1160,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1163,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1164,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1165,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1166,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1167,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1168,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1169,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1170,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1171,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1175,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1184,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1185,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1186,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1187,            throw new InvalidMatrixException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1193,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1194,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1195,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1196,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1197,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1198,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1199,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1200,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1201,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1205,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1212,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1213,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1214,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1216,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1217,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1218,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1229,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1230,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1231,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1233,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1238,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1234,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1235,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1239,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1246,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1247,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1248,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1250,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1251,            blockIJ[k] = blockIJ[k].add(increment);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1256,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1252,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1253,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1257,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1264,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1265,            final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1266,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1268,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1269,            blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1274,        },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1270,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1271,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1275,    },0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1281,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1282,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1283,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1286,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1287,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1288,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1291,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1292,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1293,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1294,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1295,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1296,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1297,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1298,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1299,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1300,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1301,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1302,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1303,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1304,                        l+= lInc;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1309,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1314,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1321,        return rows;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1327,        return columns;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1335,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1336,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1340,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1341,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1344,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1345,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1346,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1347,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1348,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1349,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1350,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1351,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1352,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1353,                    T sum = zero;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1354,                    int q = qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1355,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1356,                        sum = sum.,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1361,                        k += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1362,                        q += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1364,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1365,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1367,                    out[p] = out[p].add(sum);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1372,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1381,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1386,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1387,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1390,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1391,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1392,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1393,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1394,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1395,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1396,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1397,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1398,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1399,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1400,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1401,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1402,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1403,                    T sum = zero;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1404,                    int p = pStart;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1405,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1406,                        sum = sum.,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1411,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1412,                        p += 4;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1414,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1415,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1416,                        k += jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1418,                    out[q] = out[q].add(sum);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1423,        return out;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1431,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1432,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1433,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1434,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1436,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1438,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1439,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1440,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1441,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1442,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1443,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1444,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1449,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1457,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1458,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1459,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1460,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1461,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1462,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1463,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1464,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1465,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1466,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1468,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1469,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1474,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1483,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1484,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1485,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1486,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1487,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1488,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1489,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1490,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1491,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1492,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1493,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1494,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1495,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1496,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1497,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1498,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1499,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1504,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1513,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1514,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1515,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1516,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1517,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1518,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1519,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1520,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1521,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1522,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1523,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1524,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1525,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1526,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1527,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1528,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1529,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1534,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1542,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1543,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1544,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1545,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1546,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1547,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1548,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1549,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1550,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1551,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1552,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1553,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1554,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1557,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1560,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1567,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1568,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1569,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1570,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1571,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1572,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1573,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1574,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1575,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1576,                int k = 0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1577,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1578,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1579,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1580,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1583,                ++blockIndex;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1586,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1595,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1596,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1597,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1598,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1599,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1600,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1601,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1602,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1603,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1604,"                final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1605,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1606,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1607,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1608,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1609,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1610,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1611,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1616,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1625,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1626,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1627,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1628,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1629,"            final int pStart = Math.max(startRow, p0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1630,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1631,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1632,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1633,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1634,"                final int qStart = Math.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1635,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1636,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1637,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1638,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1639,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1640,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1641,                        ++k;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1646,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1655,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/BlockFieldMatrix,76,1664,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,381,                       final ArrayRealVector[] eigenvectors) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,382,            this.realEigenvalues = realEigenvalues;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,383,            this.imagEigenvalues = imagEigenvalues;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,384,            this.eigenvectors    = eigenvectors;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,385,        },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,363,    private static class Solver implements DecompositionSolver {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,398,            if (!isNonSingular()) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,399,                throw new SingularMatrixException();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,402,            final int m = realEigenvalues.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,403,            if (b.length != m) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,404,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,409,            final double[] bp = new double[m];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,410,            for (int i = 0; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,411,                final ArrayRealVector v = eigenvectors[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,412,                final double[] vData = v.getDataRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,413,                final double s = v.dotProduct(b) / realEigenvalues[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,414,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,415,                    bp[j] += s * vData[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,419,            return bp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,434,            if (!isNonSingular()) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,435,                throw new SingularMatrixException();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,438,            final int m = realEigenvalues.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,439,            if (b.getDimension() != m) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,440,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,445,            final double[] bp = new double[m];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,446,            for (int i = 0; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,447,                final ArrayRealVector v = eigenvectors[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,448,                final double[] vData = v.getDataRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,449,                final double s = v.dotProduct(b) / realEigenvalues[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,450,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,451,                    bp[j] += s * vData[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,455,"            return new ArrayRealVector(bp, false);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,470,            if (!isNonSingular()) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,471,                throw new SingularMatrixException();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,474,            final int m = realEigenvalues.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,475,            if (b.getRowDimension() != m) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,476,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,481,            final int nColB = b.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,482,            final double[][] bp = new double[m][nColB];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,483,            for (int k = 0; k < nColB; ++k) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,484,                for (int i = 0; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,485,                    final ArrayRealVector v = eigenvectors[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,486,                    final double[] vData = v.getDataRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,487,                    double s = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,488,                    for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,489,"                        s += v.getEntry(j) * b.getEntry(j, k);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,491,                    s /= realEigenvalues[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,492,                    for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,493,                        bp[j][k] += s * vData[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,498,            return MatrixUtils.createRealMatrix(bp);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,507,            for (int i = 0; i < realEigenvalues.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,508,                if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,509,                    return false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,512,            return true;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,522,            if (!isNonSingular()) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,523,                throw new SingularMatrixException();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,526,            final int m = realEigenvalues.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,527,            final double[][] invData = new double[m][m];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,529,            for (int i = 0; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,530,                final double[] invI = invData[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,531,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,532,                    double invIJ = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,533,                    for (int k = 0; k < m; ++k) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,534,                        final double[] vK = eigenvectors[k].getDataRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,535,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,537,                    invI[j] = invIJ;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,540,            return MatrixUtils.createRealMatrix(invData);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,50,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,51,        this.rows    = rowDimension;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,52,        this.columns = columnDimension;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,53,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,54,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,61,        this.rows    = matrix.rows;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,62,        this.columns = matrix.columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,64,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,69,        return new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,76,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,82,        return columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,90,            return add((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,91,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,92,            return (OpenMapRealMatrix) super.add(m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,106,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,108,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,109,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,110,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,111,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,112,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,113,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,114,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,116,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,125,            return subtract((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,126,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,127,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,141,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,143,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,144,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,145,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,146,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,147,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,148,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,149,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,151,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,160,            return multiply((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,161,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,164,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,166,            final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,167,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,168,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,169,                iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,170,                final double value = iterator.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,171,                final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,172,                final int i        = key / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,173,                final int k        = key % columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,174,                for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,175,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,177,            },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,179,            return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,195,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,197,        final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,198,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,199,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,200,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,201,            final double value = iterator.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,202,            final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,203,            final int i        = key / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,204,            final int k        = key % columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,205,            for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,206,"                final int rightKey = m.computeKey(k, j);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,207,                if (m.entries.containsKey(rightKey)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,208,"                    final int outKey = out.computeKey(i, j);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,209,                    final double outValue =,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,211,                    if (outValue == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,212,                        out.entries.remove(outKey);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,214,"                        out.entries.put(outKey, outValue);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,218,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,220,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,227,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,228,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,229,"        return entries.get(computeKey(row, column));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,235,        return rows;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,242,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,243,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,244,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,245,"            entries.remove(computeKey(row, column));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,247,"            entries.put(computeKey(row, column), value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,249,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,255,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,256,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,257,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,258,        final double value = entries.get(key) + increment;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,259,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,260,            entries.remove(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,262,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,264,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,270,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,271,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,272,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,273,        final double value = entries.get(key) * factor;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,274,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,275,            entries.remove(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,277,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,279,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,288,        return row * columns + column;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,76,30,"public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable {",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,44,        super();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,45,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,83,        return (rows * columns <= 4096) ?,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,129,        return (data.length * data[0].length <= 4096) ?,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,142,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,143,        for (int i = 0; i < dimension; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,144,"            m.setEntry(i, i, 1.0);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,146,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,162,        final T zero = field.getZero();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,163,        final T one  = field.getOne();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,164,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,165,        for (int row = 0; row < dimension; row++) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,166,            final T[] dRow = d[row];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,167,"            Arrays.fill(dRow, zero);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,168,            dRow[row] = one;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,170,"        return new Array2DRowFieldMatrix<T>(d, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,184,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,185,        for (int row = 0; row < dimension; row++) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,186,            final BigDecimal[] dRow = d[row];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,187,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,188,            dRow[row] = BigMatrixImpl.ONE;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,190,"        return new BigMatrixImpl(d, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,220,        final FieldMatrix<T> m =,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,222,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,223,"            m.setEntry(i, i, diagonal[i]);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,225,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,241,        return new BigMatrixImpl(data);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,257,        return new BigMatrixImpl(data);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,279,"        return new BigMatrixImpl(data, copyArray);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,295,        return new BigMatrixImpl(data);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,307,"        return new ArrayRealVector(data, true);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,320,"        return new ArrayFieldVector<T>(data, true);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,333,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,334,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,335,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,336,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,338,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,353,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,354,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,355,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,357,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,358,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,359,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,361,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,376,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,377,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,378,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,379,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,381,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,396,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,397,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,398,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,399,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,414,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,415,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,416,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,417,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,419,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,432,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,433,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,434,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,435,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,437,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,452,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,453,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,454,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,456,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,457,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,458,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,460,        return m;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,475,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,476,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,477,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,478,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,480,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,495,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,496,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,497,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,498,            data[row][0] = columnData[row];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,500,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,515,        int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,516,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,517,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,518,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,520,"        return new BigMatrixImpl(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,531,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,545,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,567,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,574,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,593,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,594,            if (selectedRows.length == 0) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,595,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,597,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,600,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,601,"            checkRowIndex(m, row);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,603,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,604,"            checkColumnIndex(m, column);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,606,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,616,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,618,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,623,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,635,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,651,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,664,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,665,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,666,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,708,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,709,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,710,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,789,        final int n = vector.getDimension();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,790,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,791,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,792,            oos.writeDouble(vector.getEntry(i));,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,794,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,820,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,821,            final double[] data = new double[n];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,822,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,823,                data[i] = ois.readDouble();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,827,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,830,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,832,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,833,"            f.set(instance, vector);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,843,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,835,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,836,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,837,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,838,            throw ioe;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,839,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,840,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,841,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,842,            throw ioe;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,845,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,890,        final int n = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,891,        final int m = matrix.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,892,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,893,        oos.writeInt(m);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,894,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,895,            for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,896,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,899,    },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,925,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,926,            final int m = ois.readInt();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,927,            final double[][] data = new double[n][m];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,928,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,929,                final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,930,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,931,                    dataI[j] = ois.readDouble();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,936,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,939,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,941,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,942,"            f.set(instance, matrix);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,952,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,944,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,945,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,946,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,947,            throw ioe;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,948,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,949,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,950,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,951,            throw ioe;,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,954,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,70,        super(field);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,71,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,85,"        super(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,86,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,87,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,104,        super(extractField(d));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,105,        copyIn(d);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,106,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,125,        super(extractField(d));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,126,        if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,127,            copyIn(d);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,129,            if (d == null) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,130,                throw new NullPointerException();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,132,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,133,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,134,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,137,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,138,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,139,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,142,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,143,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,144,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,148,            data = d;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,150,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,161,        super(extractField(v));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,162,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,163,"        data = buildArray(getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,164,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,165,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,167,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,173,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,179,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,187,            return add((Array2DRowFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,188,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,189,            return super.add(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,204,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,206,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,207,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,208,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,209,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,210,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,211,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,212,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,213,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,214,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,218,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,227,            return subtract((Array2DRowFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,228,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,229,            return super.subtract(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,244,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,246,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,247,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,248,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,249,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,250,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,251,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,252,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,253,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,254,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,258,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,267,            return multiply((Array2DRowFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,268,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,269,            return super.multiply(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,284,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,286,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,287,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,288,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,289,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,290,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,291,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,292,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,293,            for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,294,                T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,295,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,296,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,298,                outDataRow[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,302,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,309,        return copyOut();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,320,        return data;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,327,        if (data == null) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,328,            if (row > 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,329,                throw MathRuntimeException.createIllegalStateException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,332,            if (column > 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,333,                throw MathRuntimeException.createIllegalStateException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,336,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,337,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,338,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,342,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,343,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,344,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,347,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,348,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,349,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,350,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,355,        } else {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,356,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,359,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,366,            return data[row][column];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,367,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,368,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,378,            data[row][column] = value;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,382,        },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,379,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,380,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,383,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,390,            data[row][column] = data[row][column].add(increment);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,394,        },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,391,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,392,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,395,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,402,            data[row][column] = data[row][column].multiply(factor);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,406,        },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,403,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,404,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,407,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,412,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,418,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,425,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,426,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,427,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,428,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,431,"        final T[] out = buildArray(getField(), nRows);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,432,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,433,            final T[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,434,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,435,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,436,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,438,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,440,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,448,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,449,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,450,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,451,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,455,"        final T[] out = buildArray(getField(), nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,456,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,457,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,458,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,459,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,461,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,464,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,472,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,473,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,475,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,476,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,477,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,481,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,488,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,489,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,490,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,491,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,492,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,493,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,494,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,497,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,506,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,507,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,509,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,510,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,511,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,512,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,515,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,524,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,525,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,527,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,528,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,529,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,530,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,533,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,540,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,541,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,542,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,543,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,544,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,545,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,546,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,549,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,556,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,557,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,558,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,559,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,560,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,561,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,564,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,576,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,577,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,578,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,579,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,582,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,591,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,592,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,594,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,595,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,596,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,599,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,608,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,609,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,611,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,612,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,614,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,628,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,76,629,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,83,    public Array2DRowRealMatrix() {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,84,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,136,            copyIn(d);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,139,                throw new NullPointerException();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,143,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,148,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,153,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,169,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,170,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,171,        data = new double[nRows][1];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,172,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,173,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,175,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,187,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,195,            return add((Array2DRowRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,196,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,197,            return super.add(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,212,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,214,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,215,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,216,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,217,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,218,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,219,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,220,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,221,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,222,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,226,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,236,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,237,            return super.subtract(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,276,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,277,            return super.multiply(m);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,328,        return data;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,337,                throw MathRuntimeException.createIllegalStateException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,341,                throw MathRuntimeException.createIllegalStateException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,346,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,352,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,358,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,364,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,375,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,376,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,387,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,388,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,399,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,400,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,410,            data[row][column] *= factor;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,414,        },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,411,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,412,            throw new MatrixIndexException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,415,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,433,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,434,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,435,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,436,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,439,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,440,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,441,            final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,442,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,443,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,444,                sum += dataRow[i] * v[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,446,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,448,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,456,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,457,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,458,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,459,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,463,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,464,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,465,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,466,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,467,                sum += data[i][col] * v[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,469,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,472,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,480,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,481,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,482,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,483,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,484,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,485,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,486,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,489,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,514,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,515,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,517,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,518,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,519,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,520,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,523,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,532,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,533,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,535,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,536,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,537,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,538,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,541,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,548,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,549,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,550,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,551,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,552,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,553,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,554,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,557,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,581,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,582,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,584,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,585,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,586,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,587,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,590,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,599,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,600,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,602,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,603,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,604,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,76,607,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,76,            transformToLowerBiDiagonal();,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,99,"                cachedU.setEntry(k, k, 1);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,121,"                cachedU.setEntry(0, 0, 1);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,137,        if (cachedB == null) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,139,            final int m = householderVectors.length;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,140,            final int n = householderVectors[0].length;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,141,"            cachedB = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,142,            for (int i = 0; i < main.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,143,"                cachedB.setEntry(i, i, main[i]);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,144,                if (m < n) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,145,                    if (i > 0) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,146,"                        cachedB.setEntry(i, i - 1, secondary[i - 1]);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,149,                    if (i < main.length - 1) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,150,"                        cachedB.setEntry(i, i + 1, secondary[i]);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,158,        return cachedB;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,180,"                cachedV.setEntry(k, k, 1);",0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,219,        return householderVectors;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,247,        return householderVectors.length >=  householderVectors[0].length;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,321,        final int m = householderVectors.length;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,322,        final int n = householderVectors[0].length;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,323,        for (int k = 0; k < m; k++) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,326,            final double[] hK = householderVectors[k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,327,            double xNormSqr = 0;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,328,            for (int j = k; j < n; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,329,                final double c = hK[j];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,330,                xNormSqr += c * c;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,332,            final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,333,            main[k] = a;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,334,            if (a != 0.0) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,335,                hK[k] -= a;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,336,                for (int i = k + 1; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,337,                    final double[] hI = householderVectors[i];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,338,                    double alpha = 0;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,339,                    for (int j = k; j < n; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,340,                        alpha -= hI[j] * hK[j];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,342,                    alpha /= a * householderVectors[k][k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,343,                    for (int j = k; j < n; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,344,                        hI[j] -= alpha * hK[j];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,349,            if (k < m - 1) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,351,                final double[] hKp1 = householderVectors[k + 1];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,352,                xNormSqr = 0;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,353,                for (int i = k + 1; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,354,                    final double c = householderVectors[i][k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,355,                    xNormSqr += c * c;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,357,                final double b = (hKp1[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,358,                secondary[k] = b;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,359,                if (b != 0.0) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,360,                    hKp1[k] -= b;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,361,                    for (int j = k + 1; j < n; ++j) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,362,                        double beta = 0;,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,363,                        for (int i = k + 1; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,364,                            final double[] hI = householderVectors[i];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,365,                            beta -= hI[j] * hI[k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,367,                        beta /= b * hKp1[k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,368,                        for (int i = k + 1; i < m; ++i) {,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,369,                            final double[] hI = householderVectors[i];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,370,                            hI[j] -= beta * hI[k];,0.0,0,,0
org/apache/commons/math/linear/BiDiagonalTransformer,76,377,    },0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,372,                       final boolean nonSingular) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,373,            double[][] suT      = uT.getData();,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,374,            for (int i = 0; i < singularValues.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,375,                final double a      = 1.0 / singularValues[i];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,376,                final double[] suTi = suT[i];,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,377,                for (int j = 0; j < suTi.length; ++j) {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,378,                    suTi[j] *= a;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,381,"            pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));",0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,382,            this.nonSingular = nonSingular;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,383,        },0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,356,    private static class Solver implements DecompositionSolver {,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,394,            return pseudoInverse.operate(b);,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,406,            return pseudoInverse.operate(b);,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,418,            return pseudoInverse.multiply(b);,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,426,            return nonSingular;,0.0,0,,0
org/apache/commons/math/linear/SingularValueDecompositionImpl,76,433,            return pseudoInverse;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,167,        throws InvalidMatrixException {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,168,        if (isSymmetric(matrix)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,169,            this.splitTolerance = splitTolerance;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,170,            transformToTridiagonal(matrix);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,171,            decompose();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,175,"            throw new InvalidMatrixException(""eigen decomposition of assymetric matrices not supported yet"");",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,177,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,215,        final int rows    = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,216,        final int columns = matrix.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,217,        final double eps  = 10 * rows * columns * MathUtils.EPSILON;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,218,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,219,            for (int j = i + 1; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,220,"                final double mij = matrix.getEntry(i, j);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,221,"                final double mji = matrix.getEntry(j, i);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,222,"                if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps)) {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,223,                    return false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,227,        return true;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,279,        if (cachedD == null) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,281,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,283,        return cachedD;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,290,        if (cachedVt == null) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,292,            if (eigenvectors == null) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,293,                findEigenVectors();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,296,            final int m = eigenvectors.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,297,"            cachedVt = MatrixUtils.createRealMatrix(m, m);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,298,            for (int k = 0; k < m; ++k) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,299,"                cachedVt.setRowVector(k, eigenvectors[k]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,305,        return cachedVt;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,318,        return realEigenvalues[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,324,        return imagEigenvalues.clone();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,330,        return imagEigenvalues[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,336,        if (eigenvectors == null) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,337,            findEigenVectors();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,339,        return eigenvectors[i].copy();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,347,        double determinant = 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,348,        for (double lambda : realEigenvalues) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,349,            determinant *= lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,351,        return determinant;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,356,        if (eigenvectors == null) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,357,            findEigenVectors();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,359,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,553,        transformer = new TriDiagonalTransformer(matrix);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,554,        main      = transformer.getMainDiagonalRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,555,        secondary = transformer.getSecondaryDiagonalRef();,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,558,        squaredSecondary = new double[secondary.length];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,559,        for (int i = 0; i < squaredSecondary.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,560,            final double s = secondary[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,561,            squaredSecondary[i] = s * s;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,564,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,628,                process1RowBlock(begin);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,629,                break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,644,"                final double[] range       = eigenvaluesRange(begin, n);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,645,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,646,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,647,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,648,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,649,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,650,                final double lambda        = chooseLeft ? range[0] : range[1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,652,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,655,"                ldlTDecomposition(lambda, begin, n);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,658,                processGeneralBlock(n);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,661,                if (chooseLeft) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,662,                    for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,663,                        realEigenvalues[begin + i] = lambda + work[4 * i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,666,                    for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,667,                        realEigenvalues[begin + i] = lambda - work[4 * i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,702,                list.add(i + 1);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,703,                secondary[i] = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,704,                squaredSecondary[i] = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,719,        realEigenvalues[index] = main[index];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,720,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,741,"            throw new InvalidMatrixException(""cannot solve degree {0} equation"", 2);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,781,"            throw new InvalidMatrixException(""cannot solve degree {0} equation"", 3);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,792,            final double t = z0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,793,            z0 = z1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,794,            z1 = t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,802,            final double t = z0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,803,            z0 = z1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,804,            z1 = t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,827,        double sumOffDiag = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,828,        for (int i = 0; i < n - 1; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,829,            final int fourI = 4 * i;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,830,            final double ei = work[fourI + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,831,            sumOffDiag += ei;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,834,        if (sumOffDiag == 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,836,            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,840,        flipEveryOtherIfWarranted(n);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,843,        initialSplits(n);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,846,        tType = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,847,        dMin1 = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,848,        dMin2 = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,849,        dN    = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,850,        dN1   = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,851,        dN2   = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,852,        tau   = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,855,        int i0 = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,856,        int n0 = n;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,857,        while (n0 > 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,860,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,861,            sigmaLow = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,864,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,865,            double offDiagMax = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,866,            double diagMax    = work[4 * n0 - 4];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,867,            double diagMin    = diagMax;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,868,            i0 = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,869,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,870,                if (work[i + 2] <= 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,871,                    i0 = 1 + i / 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,872,                    break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,874,                if (diagMin >= 4 * offDiagMax) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,875,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,876,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,878,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,879,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,881,            work[4 * n0 - 2] = offDiagMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,884,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,886,            pingPong = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,887,            int maxIter = 30 * (n0 - i0);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,888,            for (int k = 0; i0 < n0; ++k) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,889,                if (k >= maxIter) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,890,                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,894,"                n0 = goodStep(i0, n0);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,895,                pingPong = 1 - pingPong;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,899,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,902,                    int split  = i0 - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,903,                    diagMax    = work[4 * i0];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,904,                    offDiagMin = work[4 * i0 + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,905,                    double previousEMin = work[4 * i0 + 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,906,                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,907,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,910,                            work[i + 2]  = -sigma;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,911,                            split        = i / 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,912,                            diagMax      = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,913,                            offDiagMin   = work[i + 6];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,914,                            previousEMin = work[i + 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,916,"                            diagMax      = Math.max(diagMax, work[i + 4]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,917,"                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,918,"                            previousEMin = Math.min(previousEMin, work[i + 3]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,921,                    work[4 * n0 - 2] = offDiagMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,922,                    work[4 * n0 - 1] = previousEMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,923,                    i0 = split + 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,927,        },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,929,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,937,        pingPong = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,938,        for (int k = 0; k < 2; ++k) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,941,            double d = work[4 * (n - 1) + pingPong];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,942,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,943,                if (work[i + 2] <= TOLERANCE_2 * d) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,944,                    work[i + 2] = -0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,945,                    d = work[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,947,                    d *= work[i] / (d + work[i + 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,952,            d = work[pingPong];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,953,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,954,                final int j = i - 2 * pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,955,                work[j] = d + work[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,956,                if (work[i] <= TOLERANCE_2 * d) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,957,                    work[i]     = -0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,958,                    work[j]     = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,959,                    work[j + 2] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,960,                    d = work[i + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,961,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,963,                    final double tmp = work[i + 2] / work[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,964,                    work[j + 2] = work[i] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,965,                    d *= tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,966,                } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,967,                    work[j + 2] = work[i + 2] * (work[i] / work[j]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,968,                    d *= work[i + 2] / work[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,971,            work[4 * n - 3 - pingPong] = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,974,            pingPong = 1 - pingPong;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,978,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,993,        g = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,996,        int deflatedEnd = end;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,997,        for (boolean deflating = true; deflating;) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,999,            if (start >= deflatedEnd) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1001,                return deflatedEnd;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1004,            final int k = 4 * deflatedEnd + pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1006,            if ((start == deflatedEnd - 1) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1012,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1013,                deflatedEnd -= 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1015,            } else if ((start == deflatedEnd - 2) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1020,                if (work[k - 3] > work[k - 7]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1021,                    final double tmp = work[k - 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1022,                    work[k - 3] = work[k - 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1023,                    work[k - 7] = tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1026,                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1027,                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1028,                    double s = work[k - 3] * (work[k - 5] / t);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1029,                    if (s <= t) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1030,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1032,                        s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1034,                    t = work[k - 7] + (s + work[k - 5]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1035,                    work[k - 3] *= work[k - 7] / t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1036,                    work[k - 7]  = t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1038,                work[4 * deflatedEnd - 8] = sigma + work[k - 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1039,                work[4 * deflatedEnd - 4] = sigma + work[k - 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1040,                deflatedEnd -= 2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1044,                deflating = false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1048,        },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1050,        final int l = 4 * deflatedEnd + pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1053,        if ((dMin <= 0) || (deflatedEnd < end)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1054,            if (flipAllIfWarranted(deflatedEnd)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1055,"                dMin2 = Math.min(dMin2, work[l - 1]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1056,                work[l - 1] =,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1059,                work[l - 2 * pingPong] =,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1062,"                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1063,                dMin  = -0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1067,        if ((dMin < 0) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1072,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1075,            for (boolean loop = true; loop;) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1078,"                dqds(start, deflatedEnd);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1081,                if ((dMin >= 0) && (dMin1 > 0)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1083,                    updateSigma(tau);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1084,                    return deflatedEnd;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1085,                } else if ((dMin < 0.0) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1091,                    dMin = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1092,                    updateSigma(tau);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1093,                    return deflatedEnd;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1094,                } else if (dMin < 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1096,                    if (tType < -22) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1098,                        tau = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1099,                    } else if (dMin1 > 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1101,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1102,                        tType -= 11;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1105,                        tau *= 0.25;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1106,                        tType -= 12;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1108,                } else if (Double.isNaN(dMin)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1109,                    tau = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1112,                    loop = false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1119,"        dqd(start, deflatedEnd);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1121,        return deflatedEnd;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1131,        if (1.5 * work[pingPong] >= work[4 * (n - 1) + pingPong]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1132,            return false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1135,        int j = 4 * (n - 1);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1136,        for (int i = 0; i < j; i += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1137,            final double tmp1 = work[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1138,            work[i] = work[j];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1139,            work[j] = tmp1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1140,            final double tmp2 = work[i+1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1141,            work[i+1] = work[j+1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1142,            work[j+1] = tmp2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1143,            final double tmp3 = work[i+2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1144,            work[i+2] = work[j-2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1145,            work[j-2] = tmp3;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1146,            final double tmp4 = work[i+3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1147,            work[i+3] = work[j-1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1148,            work[j-1] = tmp4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1149,            j -= 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1152,        return true;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1162,        if (1.5 * work[pingPong] >= work[4 * (n - 1) + pingPong]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1163,            return false;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1167,        int j = 4 * (n - 1);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1168,        for (int i = 0; i < j; i += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1169,            for (int k = 0; k < 4; k += 2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1170,                final double tmp = work[i + k];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1171,                work[i + k] = work[j - k];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1172,                work[j - k] = tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1174,            j -= 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1177,        return true;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1190,        final int lowerStart = 4 * main.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1191,        final int upperStart = 5 * main.length;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1192,        double lower = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1193,        double upper = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1194,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1195,"            lower = Math.min(lower, work[lowerStart + index +i]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1196,"            upper = Math.max(upper, work[upperStart + index +i]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1200,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1201,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1202,        final double absoluteTolerance = 4 * minPivot;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1203,        final int maxIter =,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1205,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1208,        double left  = lower - margin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1209,        double right = upper + margin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1210,        for (int i = 0; i < maxIter; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1212,            final double range = right - left;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1213,            if ((range < absoluteTolerance) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1216,                break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1219,            final double middle = 0.5 * (left + right);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1220,"            if (countEigenValues(middle, index, n) >= 1) {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1221,                right = middle;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1223,                left = middle;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1227,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1230,        left  = lower - margin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1231,        right = upper + margin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1232,        for (int i = 0; i < maxIter; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1234,            final double range = right - left;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1235,            if ((range < absoluteTolerance) ||,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1238,                break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1241,            final double middle = 0.5 * (left + right);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1242,"            if (countEigenValues(middle, index, n) >= n) {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1243,                right = middle;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1245,                left = middle;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1249,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1251,"        return new double[] { lower, upper };",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1263,        double ratio = main[index] - t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1264,        int count = (ratio > 0) ? 0 : 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1265,        for (int i = 1; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1266,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1267,            if (ratio <= 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1268,                ++count;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1271,        return count;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1286,        double di = main[index] - lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1287,        work[0] = Math.abs(di);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1288,        for (int i = 1; i < n; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1289,            final int    fourI = 4 * i;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1290,            final double eiM1  = secondary[index + i - 1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1291,            final double ratio = eiM1 / di;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1292,            work[fourI - 2] = ratio * ratio * Math.abs(di);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1293,            di = (main[index + i] - lambda) - eiM1 * ratio;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1294,            work[fourI] = Math.abs(di);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1296,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1306,        eMin = work[4 * start + pingPong + 4];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1307,        double d = work[4 * start + pingPong] - tau;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1308,        dMin = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1309,        dMin1 = -work[4 * start + pingPong];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1311,        if (pingPong == 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1312,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1313,                work[j4 - 2] = d + work[j4 - 1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1314,                final double tmp = work[j4 + 1] / work[j4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1315,                d = d * tmp - tau;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1316,"                dMin = Math.min(dMin, d);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1317,                work[j4] = work[j4 - 1] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1318,"                eMin = Math.min(work[j4], eMin);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1321,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1322,                work[j4 - 3] = d + work[j4];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1323,                final double tmp = work[j4 + 2] / work[j4 - 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1324,                d = d * tmp - tau;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1325,"                dMin = Math.min(dMin, d);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1326,                work[j4 - 1] = work[j4] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1327,"                eMin = Math.min(work[j4 - 1], eMin);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1332,        dN2 = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1333,        dMin2 = dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1334,        int j4 = 4 * (end - 2) - pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1335,        int j4p2 = j4 + 2 * pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1336,        work[j4 - 2] = dN2 + work[j4p2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1337,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1338,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1339,"        dMin = Math.min(dMin, dN1);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1341,        dMin1 = dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1342,        j4 = j4 + 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1343,        j4p2 = j4 + 2 * pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1344,        work[j4 - 2] = dN1 + work[j4p2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1345,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1346,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1347,"        dMin = Math.min(dMin, dN);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1349,        work[j4 + 2] = dN;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1350,        work[4 * end - pingPong - 1] = eMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1352,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1363,        eMin = work[4 * start + pingPong + 4];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1364,        double d = work[4 * start + pingPong];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1365,        dMin = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1367,        if (pingPong == 0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1368,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1369,                work[j4 - 2] = d + work[j4 - 1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1370,                if (work[j4 - 2] == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1371,                    work[j4] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1372,                    d = work[j4 + 1];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1373,                    dMin = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1374,                    eMin = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1375,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1377,                    final double tmp = work[j4 + 1] / work[j4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1378,                    work[j4] = work[j4 - 1] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1379,                    d *= tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1380,                } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1381,                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1382,                    d *= work[j4 + 1] / work[j4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1384,"                dMin = Math.min(dMin, d);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1385,"                eMin = Math.min(eMin, work[j4]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1388,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1389,                work[j4 - 3] = d + work[j4];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1390,                if (work[j4 - 3] == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1391,                    work[j4 - 1] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1392,                    d = work[j4 + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1393,                    dMin = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1394,                    eMin = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1395,                } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1397,                    final double tmp = work[j4 + 2] / work[j4 - 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1398,                    work[j4 - 1] = work[j4] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1399,                    d *= tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1400,                } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1401,                    work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1402,                    d *= work[j4 + 2] / work[j4 - 3];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1404,"                dMin = Math.min(dMin, d);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1405,"                eMin = Math.min(eMin, work[j4 - 1]);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1410,        dN2   = d;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1411,        dMin2 = dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1412,        int j4 = 4 * (end - 2) - pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1413,        int j4p2 = j4 + 2 * pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1414,        work[j4 - 2] = dN2 + work[j4p2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1415,        if (work[j4 - 2] == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1416,            work[j4] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1417,            dN1  = work[j4p2 + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1418,            dMin = dN1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1419,            eMin = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1420,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1422,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1423,            work[j4] = work[j4p2] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1424,            dN1 = dN2 * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1425,        } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1426,            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1427,            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1429,"        dMin = Math.min(dMin, dN1);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1431,        dMin1 = dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1432,        j4 = j4 + 4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1433,        j4p2 = j4 + 2 * pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1434,        work[j4 - 2] = dN1 + work[j4p2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1435,        if (work[j4 - 2] == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1436,            work[j4] = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1437,            dN   = work[j4p2 + 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1438,            dMin = dN;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1439,            eMin = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1440,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1442,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1443,            work[j4] = work[j4p2] * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1444,            dN = dN1 * tmp;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1445,        } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1446,            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1447,            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1449,"        dMin = Math.min(dMin, dN);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1451,        work[j4 + 2] = dN;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1452,        work[4 * end - pingPong - 1] = eMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1454,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1465,        final double cnst1 = 0.563;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1466,        final double cnst2 = 1.010;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1467,        final double cnst3 = 1.05;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1471,        if (dMin <= 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1472,            tau = -dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1473,            tType = -1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1474,            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1477,        int nn = 4 * end + pingPong - 1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1478,        switch (deflated) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1481,            if (dMin == dN || dMin == dN1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1483,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1484,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1485,                double a2 = work[nn - 7] + work[nn - 5];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1487,                if (dMin == dN && dMin1 == dN1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1489,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1490,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1491,                    if (gap1 > 0.0 && gap1 > b1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1492,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1493,                        tType = -2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1495,                        double s = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1496,                        if (dN > b1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1497,                            s = dN - b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1499,                        if (a2 > (b1 + b2)) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1500,"                            s = Math.min(s, a2 - (b1 + b2));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1502,"                        tau   = Math.max(s, 0.333 * dMin);",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1503,                        tType = -3;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1505,                } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1507,                    tType = -4;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1508,                    double s = 0.25 * dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1511,                    if (dMin == dN) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1512,                        gam = dN;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1513,                        a2 = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1514,                        if (work[nn - 5]  >  work[nn - 7]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1515,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1517,                        b2 = work[nn - 5] / work[nn - 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1518,                        np = nn - 9;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1520,                        np = nn - 2 * pingPong;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1521,                        b2 = work[np - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1522,                        gam = dN1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1523,                        if (work[np - 4]  >  work[np - 2]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1524,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1526,                        a2 = work[np - 4] / work[np - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1527,                        if (work[nn - 9]  >  work[nn - 11]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1528,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1530,                        b2 = work[nn - 9] / work[nn - 11];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1531,                        np = nn - 13;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1535,                    a2 = a2 + b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1536,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1537,                        if(b2 == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1538,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1540,                        b1 = b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1541,                        if (work[i4]  >  work[i4 - 2]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1542,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1544,                        b2 = b2 * (work[i4] / work[i4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1545,                        a2 = a2 + b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1546,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1547,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1550,                    a2 = cnst3 * a2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1553,                    if (a2 < cnst1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1554,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1556,                    tau = s;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1559,            } else if (dMin == dN2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1562,                tType = -5;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1563,                double s = 0.25 * dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1566,                final int np = nn - 2 * pingPong;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1567,                double b1 = work[np - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1568,                double b2 = work[np - 6];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1569,                final double gam = dN2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1570,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1571,                    return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1573,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1576,                if (end - start > 3) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1577,                    b2 = work[nn - 13] / work[nn - 15];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1578,                    a2 = a2 + b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1579,                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1580,                        if (b2 == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1581,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1583,                        b1 = b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1584,                        if (work[i4]  >  work[i4 - 2]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1585,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1587,                        b2 = b2 * (work[i4] / work[i4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1588,                        a2 = a2 + b2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1589,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1590,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1593,                    a2 = cnst3 * a2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1596,                if (a2 < cnst1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1597,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1599,                    tau = s;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1602,            } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1605,                if (tType == -6) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1606,                    g += 0.333 * (1 - g);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1607,                } else if (tType == -18) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1608,                    g = 0.25 * 0.333;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1610,                    g = 0.25;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1612,                tau   = g * dMin;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1613,                tType = -6;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1616,            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1619,            if (dMin1 == dN1 && dMin2 == dN2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1622,                tType = -7;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1623,                double s = 0.333 * dMin1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1624,                if (work[nn - 5] > work[nn - 7]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1625,                    return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1627,                double b1 = work[nn - 5] / work[nn - 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1628,                double b2 = b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1629,                if (b2 != 0.0) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1630,                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1631,                        final double oldB1 = b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1632,                        if (work[i4] > work[i4 - 2]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1633,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1635,                        b1 = b1 * (work[i4] / work[i4 - 2]);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1636,                        b2 = b2 + b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1637,"                        if (100 * Math.max(b1, oldB1) < b2) {",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1638,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1642,                b2 = Math.sqrt(cnst3 * b2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1643,                final double a2 = dMin1 / (1 + b2 * b2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1644,                final double gap2 = 0.5 * dMin2 - a2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1645,                if (gap2 > 0.0 && gap2 > b2 * a2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1646,"                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1648,"                    tau = Math.max(s, a2 * (1 - cnst2 * b2));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1649,                    tType = -8;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1651,            } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1654,                tau = 0.25 * dMin1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1655,                if (dMin1 == dN1) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1656,                    tau = 0.5 * dMin1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1658,                tType = -9;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1660,            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1665,            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1666,                tType = -10;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1667,                final double s = 0.333 * dMin2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1668,                if (work[nn - 5] > work[nn - 7]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1669,                    return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1671,                double b1 = work[nn - 5] / work[nn - 7];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1672,                double b2 = b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1673,                if (b2 != 0.0){,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1674,                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1675,                        if (work[i4] > work[i4 - 2]) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1676,                            return;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1678,                        b1 *= work[i4] / work[i4 - 2];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1679,                        b2 += b1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1680,                        if (100 * b1 < b2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1681,                            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1685,                b2 = Math.sqrt(cnst3 * b2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1686,                final double a2 = dMin2 / (1 + b2 * b2);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1687,                final double gap2 = work[nn - 7] + work[nn - 9] -,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1689,                if (gap2 > 0.0 && gap2 > b2 * a2) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1690,"                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1692,"                    tau = Math.max(s, a2 * (1 - cnst2 * b2));",0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1694,            } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1695,                tau   = 0.25 * dMin2;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1696,                tType = -11;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1698,            break;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1701,            tau   = 0.0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1702,            tType = -12;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1705,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1715,        if (shift < sigma) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1716,            sigmaLow += shift;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1717,            final double t = sigma + sigmaLow;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1718,            sigmaLow -= t - sigma;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1719,            sigma = t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1720,        } else {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1721,            final double t = sigma + shift;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1722,            sigmaLow += sigma - (t - shift);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1723,            sigma = t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1725,    },0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1846,            si = -lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1847,            sixI = 0;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1848,            for (int i = 0; i < nM1; ++i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1849,                final double di   = d[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1850,                final double li   = l[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1851,                final double ldi  = li * di;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1852,                double diP1 = di + si;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1853,                if (Math.abs(diP1) < minPivot) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1854,                    diP1 = -minPivot;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1856,                final double liP1 = ldi / diP1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1857,                work[sixI]        = si;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1858,                work[sixI + 1]    = diP1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1859,                work[sixI + 2]    = liP1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1860,                si = li * ((liP1 == 0) ? li * di : liP1 * si) - lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1861,                sixI += 6;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1894,            pi = d[nM1] - lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1895,            sixI = 6 * (nM1 - 1);,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1896,            for (int i = nM1 - 1; i >= 0; --i) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1897,                final double di   = d[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1898,                final double li   = l[i];,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1899,                double diP1 = di * li * li + pi;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1900,                if (Math.abs(diP1) < minPivot) {,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1901,                    diP1 = -minPivot;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1903,                final double t    = di / diP1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1904,                work[sixI +  9]   = pi;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1905,                work[sixI + 10]   = diP1;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1906,                work[sixI +  5]   = li * t;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1907,                pi = ((t == 0) ? di : pi * t) - lambda;,0.0,0,,0
org/apache/commons/math/linear/EigenDecompositionImpl,76,1908,                sixI -= 6;,0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,44,        this.maxIterations = maxIterations;,0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,45,    },0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,56,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,57,        this.maxIterations = maxIterations;,0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,58,    },0.0,0,,0
org/apache/commons/math/MaxIterationsExceededException,76,64,        return maxIterations;,0.0,0,,0
org/apache/commons/math/ConvergenceException,76,34,"        super(""Convergence failed"");",0.0,0,,0
org/apache/commons/math/ConvergenceException,76,35,    },0.0,0,,0
org/apache/commons/math/ConvergenceException,76,45,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/ConvergenceException,76,46,    },0.0,0,,0
org/apache/commons/math/ConvergenceException,76,53,        super(cause);,0.0,0,,0
org/apache/commons/math/ConvergenceException,76,54,    },0.0,0,,0
org/apache/commons/math/ConvergenceException,76,65,"        super(cause, pattern, arguments);",0.0,0,,0
org/apache/commons/math/ConvergenceException,76,66,    },0.0,0,,0
org/apache/commons/math/MathException,76,55,    public MathException() {,0.0,0,,0
org/apache/commons/math/MathException,76,56,        this.pattern   = null;,0.0,0,,0
org/apache/commons/math/MathException,76,57,        this.arguments = new Object[0];,0.0,0,,0
org/apache/commons/math/MathException,76,58,    },0.0,0,,0
org/apache/commons/math/MathException,76,67,"    public MathException(String pattern, Object ... arguments) {",0.0,0,,0
org/apache/commons/math/MathException,76,68,      this.pattern   = pattern;,0.0,0,,0
org/apache/commons/math/MathException,76,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,,0
org/apache/commons/math/MathException,76,70,    },0.0,0,,0
org/apache/commons/math/MathException,76,80,        super(rootCause);,0.0,0,,0
org/apache/commons/math/MathException,76,81,        this.pattern   = getMessage();,0.0,0,,0
org/apache/commons/math/MathException,76,82,        this.arguments = new Object[0];,0.0,0,,0
org/apache/commons/math/MathException,76,83,    },0.0,0,,0
org/apache/commons/math/MathException,76,96,      super(rootCause);,0.0,0,,0
org/apache/commons/math/MathException,76,97,      this.pattern   = pattern;,0.0,0,,0
org/apache/commons/math/MathException,76,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,,0
org/apache/commons/math/MathException,76,99,    },0.0,0,,0
org/apache/commons/math/MathException,76,110,            ResourceBundle bundle =,0.0,0,,0
org/apache/commons/math/MathException,76,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,,0
org/apache/commons/math/MathException,76,114,                return bundle.getString(s);,0.0,0,,0
org/apache/commons/math/MathException,76,119,        },0.0,0,,0
org/apache/commons/math/MathException,76,117,        } catch (MissingResourceException mre) {,0.0,0,,0
org/apache/commons/math/MathException,76,123,        return s;,0.0,0,,0
org/apache/commons/math/MathException,76,133,        return pattern;,0.0,0,,0
org/apache/commons/math/MathException,76,142,        return arguments.clone();,0.0,0,,0
org/apache/commons/math/MathException,76,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,,0
org/apache/commons/math/MathException,76,159,        return getMessage(Locale.US);,0.0,0,,0
org/apache/commons/math/MathException,76,165,        return getMessage(Locale.getDefault());,0.0,0,,0
org/apache/commons/math/MathException,76,173,        printStackTrace(System.err);,0.0,0,,0
org/apache/commons/math/MathException,76,174,    },0.0,0,,0
org/apache/commons/math/MathException,76,183,        synchronized (out) {,0.0,0,,0
org/apache/commons/math/MathException,76,184,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,,0
org/apache/commons/math/MathException,76,185,            printStackTrace(pw);,0.0,0,,0
org/apache/commons/math/MathException,76,187,            pw.flush();,0.0,0,,0
org/apache/commons/math/MathException,76,188,        },0.0,0,,0
org/apache/commons/math/MathException,76,189,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,48,"        super(FAILED_EVALUATION_MESSAGE, argument);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,49,        this.argument = new double[] { argument };,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,50,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,60,"        super(FAILED_EVALUATION_MESSAGE, new ArrayRealVector(argument));",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,61,        this.argument = argument.clone();,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,62,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,74,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,75,        this.argument = new double[] { argument };,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,76,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,88,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,89,        this.argument = argument.clone();,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,90,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,100,        super(cause);,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,101,        this.argument = new double[] { argument };,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,102,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,112,        super(cause);,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,113,        this.argument = argument.clone();,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,114,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,128,"        super(cause, pattern, arguments);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,129,        this.argument = new double[] { argument };,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,130,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,144,"        super(cause, pattern, arguments);",0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,145,        this.argument = argument.clone();,0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,146,    },0.0,0,,0
org/apache/commons/math/FunctionEvaluationException,76,154,        return argument.clone();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,677,            super(Fraction.ZERO);,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,678,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,684,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,685,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,690,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,691,        },0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math/linear/MatrixUtils,76,670,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,746,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,749,            private int i = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,752,            private EntryImpl e = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,756,                return i < dim;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,761,                e.setIndex(i++);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,762,                return e;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,76,767,"                throw new UnsupportedOperationException(""Not supported"");",0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractFieldMatrix,76,320,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,243,                sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,244,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,248,                sum += value * value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,249,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,76,253,                return Math.sqrt(sum);,0.0,0,,0
