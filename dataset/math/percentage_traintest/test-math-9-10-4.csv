dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/FastMath,28,3733,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3734,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3735,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3736,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3738,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3739,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3741,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3743,                if (remA > 0) {,4,1,0,1,3,0,0,0,0,5,15,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3744,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3750,                --k;,2,0,0,0,0,0,0,0,0,3,4,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3751,            },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3753,            this.finalK = k;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3754,            this.finalRemA = remA;,0,0,0,0,0,0,12,0,0,12,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3755,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3756,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3762,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3768,            return finalRemA;,6,1,0,0,0,2,0,0,0,8,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3774,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,75,    private Precision() {},0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,131,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,144,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,0,0,0,1,2,0,0,0,0,3,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,0,0,1,1,2,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.9,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,                growTable();,0,0,0,1,2,0,0,0,0,3,12,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,        final int oldLength      = states.length;,0,0,0,0,0,0,0,0,0,0,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,        final int[] oldKeys      = keys;,16,5,0,1,2,0,0,0,0,21,32,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,        final double[] oldValues = values;,2,0,0,1,2,0,0,2,0,4,34,13,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,        final byte[] oldStates   = states;,0,0,0,1,2,0,0,0,0,3,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0,0,0,0,0,0,0,0,0,0,52,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,        final int[] newKeys = new int[newLength];,2,0,1,2,4,1,0,0,0,5,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,        final double[] newValues = new double[newLength];,0,0,0,2,4,0,0,0,0,6,49,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,        final byte[] newStates = new byte[newLength];,4,0,1,2,4,4,0,0,0,10,45,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,        final int newMask = newLength - 1;,0,0,0,0,0,0,0,0,0,0,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,        for (int i = 0; i < oldLength; ++i) {,8,1,0,1,3,0,0,0,0,10,37,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,            if (oldStates[i] == FULL) {,0,0,0,2,5,0,0,0,0,7,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,                final int key = oldKeys[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,447,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",8,1,0,1,2,0,0,0,0,10,71,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,448,                newKeys[index]   = key;,0,0,0,1,2,0,0,0,0,3,23,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,449,                newValues[index] = oldValues[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,450,                newStates[index] = FULL;,0,0,0,1,2,0,0,0,0,3,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,454,        mask   = newMask;,0,0,0,0,0,0,0,0,0,0,17,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,455,        keys   = newKeys;,2,0,0,0,0,0,0,0,0,3,17,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,456,        values = newValues;,8,0,0,0,0,0,0,0,0,11,19,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,457,        states = newStates;,4,0,0,0,0,0,0,0,0,5,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,459,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,179,    public OpenMapRealVector(OpenMapRealVector v) {,0,0,0,1,3,0,12,0,0,12,47,10,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,180,        virtualSize = v.getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,4,2,0,2,4,0,0,0,0,6,53,6,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,182,        epsilon = v.epsilon;,2,0,0,0,0,0,0,0,0,3,20,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,183,    },0,0,0,0,1,0,0,0,0,1,1,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,591,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,0,0,0,8,40,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,207,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,208,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,209,"        if (containsKey(key, index)) {",0,0,0,2,5,0,0,0,0,7,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,208,        return entries;,0,0,0,0,0,1,0,0,0,1,15,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,130,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0,0,0,1,3,0,0,0,0,4,68,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,131,        final int length = source.keys.length;,0,0,0,0,0,0,0,0,0,0,38,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,132,        keys = new int[length];,8,1,1,1,2,1,0,0,0,13,23,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,133,"        System.arraycopy(source.keys, 0, keys, 0, length);",2,0,0,1,2,0,6,0,0,8,50,5,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,134,        values = new double[length];,4,0,0,1,2,0,0,2,0,7,28,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,135,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,136,        states = new byte[length];,2,0,1,1,2,0,0,0,0,5,26,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,137,"        System.arraycopy(source.states, 0, states, 0, length);",8,1,0,1,2,0,8,0,0,17,54,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,138,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,139,        size  = source.size;,12,4,0,0,0,0,0,0,0,17,20,9,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,140,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,141,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,526,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,529,            if (current < 0) {,2,1,0,1,3,0,4,0,0,7,18,1,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,532,            return keys[current];,2,0,0,1,2,2,4,0,0,7,21,4,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,274,            return changeIndexSign(index);,0,0,0,1,2,1,0,0,0,4,30,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,332,        return -index - 1;,2,1,0,0,0,1,0,0,0,4,18,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,411,            index = changeIndexSign(index);,6,0,0,1,2,0,4,0,0,12,31,3,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,412,            previous = values[index];,2,0,1,1,2,0,0,0,0,7,25,6,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,413,            newMapping = false;,2,0,0,0,0,0,0,0,0,3,19,2,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,176,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,177,        if (d != n) {,2,0,0,1,3,0,0,0,0,2,13,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,273,        } else if (states[index] == FULL && keys[index] == key) {,4,3,1,3,8,0,4,0,0,19,57,3,0.3913,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,238,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,37,public class OpenIntToDoubleHashMap implements Serializable {,2,1,1,0,1,0,0,0,0,9,61,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,495,        private Iterator() {,0,0,0,1,3,0,0,0,0,4,20,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,498,            referenceCount = count;,12,1,0,0,0,0,0,0,0,14,23,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,501,            next = -1;,4,0,0,0,0,0,4,0,0,11,10,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,503,                advance();,8,0,0,1,2,0,2,0,0,10,10,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,506,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,508,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,481,    public class Iterator {,2,0,0,0,1,1,0,0,0,3,23,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,515,            return next >= 0;,0,0,0,0,0,1,0,0,0,1,17,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,543,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,546,            if (current < 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,549,            return values[current];,0,0,1,1,2,1,0,0,0,4,23,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,560,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,565,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,569,                while (states[++next] != FULL) {,6,1,1,2,5,0,0,0,0,15,32,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,577,            },2,0,1,0,1,0,0,0,0,7,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,572,            } catch (ArrayIndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,44,7,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,573,                next = -2;,2,0,0,0,0,0,0,0,0,4,10,8,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,574,                if (current < 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,579,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,183,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,184,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,343,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,1,1,2,0,0,4,0,17,52,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,351,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,354,        return res;,2,0,0,0,0,1,0,0,0,3,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,34,public class OpenMapRealVector extends SparseRealVector,2,0,0,0,0,1,0,2,0,5,55,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,589,        if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,590,"            entries.put(index, value);",4,0,0,1,2,0,0,0,0,5,26,8,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,594,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,588,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.26471,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,449,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.25714,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,342,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,177,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,178,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,179,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,382,        return (key != 0 || states[index] == FULL) && keys[index] == key;,6,5,1,3,6,1,0,0,0,19,65,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,448,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.23077,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,194,    },2,0,0,0,1,1,0,2,0,5,1,3,0.2093,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,140,"                entries.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,9,0.18,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,189,        if (index < 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,256,"        return findInsertionIndex(keys, states, key, mask);",0,0,0,1,2,1,0,0,0,4,51,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,269,        final int hash = hashOf(key);,2,0,0,1,2,1,4,0,0,7,29,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,270,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,271,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,272,            return index;,18,3,1,0,0,2,6,0,0,39,13,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,407,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,408,        double previous = missingEntries;,2,0,0,0,0,0,0,0,0,2,33,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,409,        boolean newMapping = true;,2,0,0,0,0,0,0,0,0,3,26,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,410,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,415,        keys[index]   = key;,0,0,0,1,2,0,0,0,0,3,20,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,416,        states[index] = FULL;,2,0,1,1,2,0,0,0,0,7,21,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,417,        values[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,418,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,419,            ++size;,2,0,0,0,0,0,0,0,0,3,7,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,420,            if (shouldGrowTable()) {,8,1,0,2,5,0,2,0,0,12,24,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,423,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,425,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,466,        return size > (mask + 1) * LOAD_FACTOR;,8,3,0,1,2,1,0,0,0,11,39,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,475,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,476,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,123,"        this(values, DEFAULT_ZERO_TOLERANCE);",4,0,0,1,2,0,0,0,0,4,37,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,133,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,134,        virtualSize = values.length;,2,0,0,0,0,0,0,0,0,3,28,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,135,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,0,0,2,0,8,42,0,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,136,        this.epsilon = epsilon;,6,2,1,0,0,0,0,0,0,18,23,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,137,        for (int key = 0; key < values.length; key++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,138,            double value = values[key];,2,0,0,1,2,0,0,0,0,3,27,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,139,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,401,        return virtualSize;,2,0,0,0,0,1,0,0,0,2,19,4,0.12676,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,100,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",4,0,0,1,2,0,0,0,0,4,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,117,                                  final double missingEntries) {,2,0,0,0,2,1,0,0,0,3,30,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,118,        final int capacity = computeCapacity(expectedSize);,8,3,0,1,2,2,4,0,0,17,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,119,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,120,        values = new double[capacity];,0,0,0,1,2,0,0,0,0,3,30,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,121,        states = new byte[capacity];,2,0,1,1,2,0,0,0,0,5,28,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,122,        this.missingEntries = missingEntries;,0,0,0,0,0,0,0,0,0,0,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,123,        mask   = capacity - 1;,4,1,0,0,0,0,0,0,0,6,22,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,150,        if (expectedSize == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,153,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,154,        final int powerOfTwo = Integer.highestOneBit(capacity);,2,0,0,1,2,1,6,0,0,9,55,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,155,        if (powerOfTwo == capacity) {,6,1,0,1,3,3,0,0,0,10,29,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,156,            return capacity;,8,1,0,0,0,1,4,0,0,14,16,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,3,49,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,126,    private static final double LN_HI_PREC_COEF[][] = {,2,2,1,2,5,0,0,0,0,13,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,6,0,0,6,44,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,158,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,177,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,196,    private static final double COSINE_TABLE_B[] =,6,2,1,1,2,6,0,0,0,23,46,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,216,    private static final double TANGENT_TABLE_A[] =,8,1,0,1,2,4,8,0,0,21,47,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3334,        if (x != x) { // NaN,2,0,1,1,3,0,4,0,0,9,20,0,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3343,        if (x < 0 && y != x) {,10,6,0,1,3,0,0,0,0,16,22,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3347,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3366,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3367,            return y;,4,1,0,0,0,1,6,0,0,11,9,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,1049,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,6,0,10,64,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,220,        return FastMath.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SparseRealVector,29,25,public abstract class SparseRealVector extends RealVector {},0,0,0,1,2,0,0,0,0,3,60,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,180,            return values[index];,0,0,1,1,2,1,0,0,0,4,21,7,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3747,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,2,0,0,1,2,0,4,0,0,7,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3776,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,92,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",6,0,0,1,2,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,108,"        this(expectedSize, Double.NaN);",6,0,0,1,2,0,0,0,0,6,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,151,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,158,        return nextPowerOfTwo(capacity);,0,0,0,1,2,1,4,0,0,4,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,167,        return Integer.highestOneBit(i) << 1;,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,187,        int j = index;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,188,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,8,1,1,3,7,0,4,0,0,18,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,189,"            j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,190,            index = j & mask;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,191,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,192,                return values[index];,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,196,        return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,213,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,214,            return false;,4,1,1,0,0,2,0,0,0,11,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,217,        int j = index;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,218,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0,0,0,3,7,0,0,0,0,10,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,219,"            j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,220,            index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,221,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,222,                return true;,0,3,1,0,0,1,0,0,0,11,12,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,226,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,286,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,293,        } else if (states[index] == FULL) {,2,1,1,2,6,0,0,0,0,7,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,296,            return changeIndexSign(index);,0,0,0,1,2,1,4,0,0,4,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,299,        final int firstRemoved = index;,4,0,0,0,0,1,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,301,"            j = probe(perturb, j);",2,0,0,1,2,0,6,0,0,9,22,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,302,            index = j & mask;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,304,            if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,305,                return firstRemoved;,2,0,0,0,0,1,0,0,0,2,20,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,306,            } else if (states[index] == FULL && keys[index] == key) {,4,3,1,3,8,0,0,0,0,15,57,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,307,                return changeIndexSign(index);,0,0,0,1,2,1,4,0,0,4,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,310,            perturb >>= PERTURB_SHIFT;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,340,        return size;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,357,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,358,            return missingEntries;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,361,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,362,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,12,2,1,3,7,0,4,0,0,23,85,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,363,"            j = probe(perturb, j);",2,0,0,1,2,0,6,0,0,9,22,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,364,            index = j & mask;,8,1,0,0,0,1,2,0,0,13,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,365,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,366,                return doRemove(index);,6,0,0,1,2,3,4,2,0,15,23,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,370,        return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,592,        stream.defaultReadObject();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,593,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,594,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,349,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,362,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,1,0,0,0,2,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,365,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,375,        return Math.sqrt(a);,6,1,0,1,2,1,6,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,383,      if (x != x) {,12,2,0,1,3,0,0,0,0,16,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,384,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,392,      if (x > 20.0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,393,          return exp(x)/2.0;,10,1,0,1,2,1,0,0,0,12,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,396,      if (x < -20) {,2,2,1,1,3,0,0,0,0,14,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,397,          return exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,6,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,401,      if (x < 0.0) {,2,0,0,1,3,0,4,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,410,      double yaa = ya + temp - temp;,14,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,411,      double yab = ya - yaa;,12,2,0,0,0,0,0,0,0,14,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,415,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,416,      double recipa = recip + temp - temp;,10,2,0,0,0,3,0,0,0,15,36,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,417,      double recipb = recip - recipa;,0,1,0,0,0,0,4,0,0,5,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,422,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,425,      temp = ya + recipa;,10,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,426,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,428,      temp = ya + recipb;,8,1,0,0,0,0,0,0,0,11,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,432,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,433,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,434,      return result;,6,1,0,0,0,1,6,0,0,13,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,442,      boolean negate = false;,4,0,0,0,0,0,0,0,0,5,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,456,      if (x < -20) {,0,0,0,1,3,0,8,0,0,8,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,460,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,461,          return x;,2,0,0,0,0,2,4,2,0,9,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,464,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,465,          x = -x;,4,0,1,0,0,0,4,0,0,16,7,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,466,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,471,      if (x > 0.25) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0,0,0,0,0,0,8,0,0,8,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0,0,1,1,3,0,0,0,0,6,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0,0,0,0,1,0,0,0,0,1,54,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,147,            double n = numeratorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,4,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,148,            double m = denominatorDegreesOfFreedom;,4,0,0,0,0,0,4,0,0,8,39,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",0,0,0,2,5,0,0,0,0,7,49,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {",0,0,0,1,3,0,0,0,0,4,51,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,50,        if (trials < 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,54,        if (p < 0 || p > 1) {,6,1,0,1,3,0,0,0,0,8,21,12,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,58,        probabilityOfSuccess = p;,4,0,0,0,0,0,0,0,0,5,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,59,        numberOfTrials = trials;,4,0,0,0,0,0,0,0,0,5,24,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,60,    },2,1,0,0,1,0,0,0,0,3,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,144,        if (x <= 0) {,8,0,0,1,3,2,0,4,0,15,13,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,154,        return ret;,8,0,1,0,0,2,0,0,0,12,11,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,104,            double k = FastMath.sqrt((1.0 - p) / p);,6,2,0,2,4,0,4,0,0,12,40,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,105,            double tmp = mu - k * sigma;,4,1,0,0,0,1,6,2,0,14,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,106,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,107,                lower = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,109,            k = 1.0 / k;,0,0,0,0,0,0,0,0,0,0,12,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,110,            tmp = mu + k * sigma;,6,2,0,0,0,0,4,0,0,12,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,111,            if (tmp < upper) {,6,0,0,1,3,0,0,0,0,8,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,112,                upper = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,138,                        m = n / 2.0;,8,0,0,0,0,0,0,0,0,9,12,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,139,                        ret = (m * (b - m) * x) /,6,1,1,2,4,0,0,0,0,15,25,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,133,            int xm = (lower + upper) / 2;,6,2,0,1,2,0,0,0,0,8,29,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,134,            if (xm < lower || xm > upper) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,143,            double pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,6,45,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,200,        double result = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,201,        result = cumulativeProbability(argument);,6,1,0,1,2,0,0,0,0,8,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,128,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0,0,0,3,8,0,0,0,0,1,43,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,1,2,0,0,5,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,154,            ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -,6,1,0,4,9,0,6,4,0,17,72,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,137,                    if (n % 2 == 0) { // even,0,0,0,1,3,0,0,0,0,4,25,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,142,                        m = (n - 1.0) / 2.0;,0,0,0,1,2,0,0,0,0,3,20,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,143,                        ret = -((a + m) * (a + b + m) * x) /,0,0,0,3,6,0,0,0,0,9,36,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,146,                    return ret;,2,0,0,0,0,1,0,0,0,2,11,13,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,151,                    return 1.0;,2,0,0,0,0,1,0,0,0,2,11,7,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,1,2,4,0,2,0,0,11,45,6,0.0678,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,50,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,1,2,1,0,2,0,5,68,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,120,        if (Double.isNaN(x) ||,0,4,0,1,3,0,6,0,0,10,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,205,        return ret;,12,2,1,0,0,1,4,0,0,22,11,3,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,68,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",16,3,0,0,1,0,2,0,0,21,60,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,70,    },2,0,0,0,1,0,6,0,0,8,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,88,        throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,52,    private double numericalVariance = Double.NaN;,2,0,0,0,0,0,0,0,0,3,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,55,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,89,        if (numeratorDegreesOfFreedom <= 0) {,4,1,0,1,3,1,0,0,0,6,37,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,93,        if (denominatorDegreesOfFreedom <= 0) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,97,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,98,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,99,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,108,        double yMax = computeObjectiveValue(max);,2,0,0,1,2,0,4,0,0,6,41,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,99,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,100,        final double sigma = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,59,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,101,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,103,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,116,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,132,        while (lower + 1 < upper) {,4,2,0,1,3,0,0,0,0,6,27,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0,0,0,2,4,0,0,0,0,6,52,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,830,                if (hiPrec != null) {,6,4,0,1,3,0,0,0,0,10,21,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,834,                return 0.0;,4,1,0,0,0,1,0,0,0,5,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,139,            if (chebyshevApplies) {,22,2,0,1,3,0,0,0,0,27,23,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,190,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,191,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,79,        int lower = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,80,        if (p == 0.0) {,12,1,0,1,3,0,8,0,0,22,15,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,83,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,88,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,92,        int upper = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,93,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,138,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,156,"        double x = UnivariateSolverUtils.solve(toSolve,",0,0,0,0,1,0,0,0,0,1,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,61,"        this(max,",2,0,0,0,1,0,0,0,0,2,9,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,78,                       MaxCountExceededCallback cb) {,6,0,0,0,2,3,0,2,0,11,30,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,40,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,79,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,80,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,91,        maximalCount = max;,8,2,0,0,0,0,0,0,0,11,19,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,150,        if (++count > maximalCount) {,8,1,0,1,3,0,0,0,0,11,29,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,153,    },4,1,0,0,1,0,0,0,0,7,1,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,160,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,62,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,73,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,76,        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);,4,0,0,1,2,1,0,4,0,9,66,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",4,0,0,1,2,1,10,0,0,14,57,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,336,        if (lower >= upper) {,6,1,0,1,3,0,0,0,0,8,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,355,"        verifyInterval(initial, upper);",10,1,0,1,2,0,6,0,0,18,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,53,        super(absoluteAccuracy);,0,0,0,1,2,0,0,0,0,3,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,83,        double min = getMin();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,84,        double max = getMax();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,85,        final double initial = getStartValue();,2,0,0,1,2,1,2,0,0,5,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,86,        final double functionValueAccuracy = getFunctionValueAccuracy();,4,0,0,1,2,1,2,0,0,7,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,88,"        verifySequence(min, initial, max);",0,0,0,1,2,0,0,0,0,3,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,91,        double yInitial = computeObjectiveValue(initial);,0,0,0,1,2,0,0,0,0,3,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,92,        if (FastMath.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,97,        double yMin = computeObjectiveValue(min);,2,0,0,1,2,0,4,0,0,6,41,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,98,        if (FastMath.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,103,        if (yInitial * yMin < 0) {,16,6,0,1,3,3,0,0,0,26,26,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,0,0,0,2,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,92,                                               final double functionValueAccuracy) {,2,0,0,0,2,1,0,0,0,3,37,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,49,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,93,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,94,        this.relativeAccuracy = relativeAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,95,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,116,        return searchMax;,2,0,0,0,0,1,6,0,0,8,17,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,122,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,173,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,177,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,178,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,179,        function = f;,8,1,0,0,0,0,6,0,0,17,13,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,187,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,12,0,0,12,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,190,        return doSolve();,0,0,0,1,2,1,0,0,0,4,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,268,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,269,    },4,1,1,0,1,0,0,0,0,10,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,294,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,297,        },2,0,0,0,1,0,0,0,0,3,1,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,125,"        double hPrev = getA(0, x);",0,0,0,1,2,0,0,0,0,3,26,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,132,        int n = 1;,2,2,0,0,0,0,0,0,0,4,10,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,133,        double dPrev = 0.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,135,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,136,        double cPrev = hPrev;,0,0,0,0,0,0,0,0,0,0,21,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,137,        double hN = hPrev;,2,0,0,0,0,0,0,0,0,2,18,8,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,139,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,140,"            final double a = getA(n, x);",10,2,0,1,2,4,6,0,0,23,28,1,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,141,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,145,            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {,0,0,0,3,7,0,0,0,0,10,53,4,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,172,            if (Double.isInfinite(hN)) {,0,0,0,2,5,0,6,0,0,6,28,7,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,176,            if (Double.isNaN(hN)) {,0,0,0,2,5,0,6,0,0,6,23,7,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,181,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,0,0,10,43,6,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,18,0,0,27,53,3,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3002,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,301,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,302,        long yInt = Double.doubleToLongBits(y);,4,1,1,1,2,0,6,0,0,16,39,1,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,305,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,308,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,1,0,2,4,1,8,0,0,9,55,6,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,31,257,        if (o == null) {,4,1,0,1,3,0,0,0,0,5,16,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,31,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,111,        double lowerBound = getSupportLowerBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,112,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,116,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,117,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,75,        if (p < 0.0 || p > 1.0) {,10,3,0,1,3,0,0,0,0,13,25,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,99,            double sum = lanczos(x);,2,0,0,1,2,0,4,0,0,6,24,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,100,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,0,0,0,3,6,0,0,0,0,9,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,95,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.02878,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,105,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.02878,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,352,            sum = sum + (LANCZOS[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,6,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,354,        return sum + LANCZOS[0];,0,0,0,1,2,1,0,0,0,4,24,4,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,107,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,375,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.02516,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,45,    private static final double[] LANCZOS = {,0,0,0,1,3,0,0,0,0,4,41,4,0.02469,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,6,2,0,1,2,3,4,0,0,15,82,2,0.02469,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.02395,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.02353,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,922,            result = tempC*z + tempB + tempA;,16,6,1,0,0,0,0,0,0,26,33,6,0.02326,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,126,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,129,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,169,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,2,4,0,0,10,35,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,141,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,151,        while (qi < 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",2,1,0,2,4,0,14,0,0,18,58,6,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,153,            ra.addElement(qi);,0,0,0,1,2,0,6,0,0,6,18,7,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,157,        EXPONENTIAL_SA_QI = ra.getElements();,2,0,0,1,2,0,4,0,0,7,37,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,158,    },0,0,0,0,1,0,4,0,0,4,1,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,35,    static final long[] FACTORIALS = new long[] {,8,1,0,2,5,2,0,0,0,12,45,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,303,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3334,        if (x != x) { // NaN,14,3,0,1,3,0,0,0,0,19,20,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,12,6,0,1,3,0,2,0,0,21,46,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3342,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3343,        if (x < 0 && y != x) {,14,4,1,1,3,0,4,0,0,27,22,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3347,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3365,        y = floor(x);,0,0,0,1,2,0,0,0,0,3,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3366,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3367,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,93,    private float contractionCriteria = 2.5f;,2,0,0,0,0,1,0,0,0,3,41,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,103,    private float expansionFactor = 2.0f;,0,0,1,0,0,0,0,0,0,6,37,8,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,109,    private int expansionMode = MULTIPLICATIVE_MODE;,22,7,0,0,0,1,0,0,0,31,48,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,115,    private int initialCapacity = 16;,4,0,0,0,0,1,0,0,0,6,33,0,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,160,    public ResizableDoubleArray(int initialCapacity) {,0,0,0,1,3,0,0,0,0,4,50,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,0,0,0,0,0,1,4,0,0,4,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,0,0,0,1,2,0,0,0,0,3,72,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",0,0,0,1,2,0,0,0,0,3,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,6,0,0,6,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,78,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,        w      = plane.w;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);",0,0,0,1,2,0,0,0,0,3,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());",0,0,0,2,4,1,0,0,0,7,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,92,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,0,0,0,2,4,0,0,0,0,6,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,0,0,3,7,0,0,0,0,10,52,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,0,0,0,3,6,0,0,0,0,9,91,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,        public FacetsContributionVisitor() {,0,0,0,1,3,0,0,0,0,4,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,138,            setSize(0);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,        },2,0,0,0,1,1,0,0,0,3,1,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,            final BoundaryAttribute<Euclidean3D> attribute =,2,0,0,0,0,1,0,4,0,7,48,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,1,2,4,0,4,0,0,6,51,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,            if (attribute.getPlusInside() != null) {,0,0,0,2,5,0,0,0,0,7,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,158,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();,0,0,0,3,6,0,0,0,0,9,76,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,            if (Double.isInfinite(area)) {,0,0,0,2,5,0,6,0,0,6,30,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,                final Plane    plane  = (Plane) facet.getHyperplane();,0,0,0,2,4,0,0,0,0,6,54,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());,2,0,0,2,4,0,0,0,0,3,63,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,2,1,0,2,4,0,4,0,0,7,28,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",6,1,0,4,8,0,4,4,0,15,77,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,190,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,        final Line otherL = (Line) other;,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,8,1,0,1,2,1,0,0,0,11,52,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,        final Vector2D[][] v = getVertices();,2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,134,        if (v.length == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,1,0,0,0,0,0,0,0,0,1,16,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,            double sumX = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,            double sumY = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,            for (Vector2D[] loop : v) {,4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,                double x1 = loop[loop.length - 1].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,                double y1 = loop[loop.length - 1].getY();,8,1,1,2,4,0,2,0,0,14,41,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,                for (final Vector2D point : loop) {,0,0,0,1,3,0,0,0,0,4,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,14,2,0,0,0,1,6,0,0,25,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,4,0,0,1,2,3,4,0,0,12,18,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,                    final double factor = x0 * y1 - y0 * x1;,10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,                    sum  += factor;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,10,2,0,1,2,0,0,0,0,14,27,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,4,1,0,1,3,3,0,4,0,12,14,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,                    final Skew s = right.left.skew;,2,2,1,0,0,0,0,0,0,13,31,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,                    right.rotateCW();,0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,2,1,1,0,0,0,0,0,0,8,27,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,8,0,1,0,0,1,0,4,0,16,21,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2458,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0,0,0,4,8,0,0,0,0,12,89,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2570,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,198,                plusList.add(other);,2,0,0,1,2,3,6,4,0,15,20,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,199,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,500,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,9,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,501,                    skew      = Skew.BALANCED;,6,0,0,0,0,0,0,0,0,7,26,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,502,                    left.skew = Skew.BALANCED;,10,0,0,0,0,0,0,0,0,11,26,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,503,                    return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,504,                } else if (right.skew == Skew.BALANCED) {,8,1,0,1,4,0,0,0,0,9,41,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2446,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2447,            negate = true;,32,3,1,0,0,1,4,0,0,59,14,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2557,            final double pia = 1.5707963267948966 * 2;,0,0,0,0,0,0,0,0,0,0,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2558,            final double pib = 6.123233995736766E-17 * 2;,0,0,0,0,0,0,0,0,0,0,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2560,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2561,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2562,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2564,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,443,                skew = Skew.BALANCED;,10,0,0,0,0,0,0,0,0,12,21,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,444,                return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,461,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,462,                    skew      = Skew.BALANCED;,8,0,0,0,0,1,4,2,0,16,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,463,                    left.skew = Skew.BALANCED;,10,0,0,0,0,0,4,0,0,16,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,365,        xl = xl & MASK_30BITS; // Drop low order bits,8,2,0,0,0,0,6,0,0,17,45,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,366,        return Double.longBitsToDouble(xl);,6,0,0,1,2,1,6,0,0,12,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2306,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2436,        boolean negate = false;,4,0,0,0,0,1,0,4,0,10,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2443,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2450,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2455,        if (xa < 1) {,4,1,0,1,3,3,0,0,0,8,13,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,6,2,1,1,2,0,0,0,0,12,40,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,16,5,1,2,4,1,0,0,0,27,50,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2463,        epsB += xb - TANGENT_TABLE_B[idx];,8,2,1,1,2,0,4,0,0,20,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2465,        double temp = epsA + epsB;,8,2,0,0,0,0,0,0,0,10,26,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2466,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2467,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2470,        temp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2471,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2472,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2473,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2474,        xb += yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2477,        if (idx == 0) {,6,2,0,1,3,1,2,0,0,13,15,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,0,0,1,2,0,0,0,0,2,41,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2486,            double za = 1d + temp2;,4,1,1,0,0,0,0,0,0,12,23,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2487,            double zb = -(za - 1d - temp2);,10,1,0,1,2,0,0,0,0,13,31,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,14,4,1,2,4,0,0,0,0,28,62,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2490,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2491,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2493,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2494,            ya = epsA / za;,8,1,0,0,0,1,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2496,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2497,            final double yaa = (ya + temp) - temp;,2,1,0,1,2,0,4,0,0,7,38,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2498,            final double yab = ya - yaa;,12,2,0,0,0,1,0,0,0,16,28,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2500,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2501,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2502,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,6,0,0,38,65,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2507,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2508,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2512,        epsA = ya;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0,0,0,2,4,0,0,0,0,6,74,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,            columnsToDrop.add(col);,0,0,0,1,2,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,14,2,0,1,2,2,0,8,0,26,55,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);",10,3,0,1,2,0,0,0,0,13,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,0,0,2,5,0,0,0,0,7,50,4,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,3,2,4,0,19,55,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,          int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,        for (int i = 1; i < getHeight(); i++) {,2,0,1,2,5,1,0,0,0,9,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,          int col = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,0,0,0,2,5,0,0,0,0,7,53,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,          columnLabels.remove((int) columnsToDrop.get(i));,20,10,1,3,6,0,4,0,0,46,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,2,0,0,2,32,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,    },16,1,1,0,1,0,20,2,0,46,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,        if (o == null) {,8,1,0,1,3,3,0,0,0,12,16,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,    },4,0,0,0,1,0,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",2,0,0,0,1,3,0,0,0,5,75,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,        if (data == null) {,6,3,0,1,3,0,8,0,0,17,19,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,16,0,0,27,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,        } else {,8,0,0,0,2,0,0,0,0,8,8,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,    },10,3,0,0,1,0,8,0,0,22,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,    },4,0,0,0,1,0,0,4,0,10,1,0,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,            doIteration(tableau);,4,1,0,1,2,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);",4,0,0,1,2,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,55,        super(copyArray ? ((point == null) ? null :,0,0,0,1,4,0,0,0,0,5,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,59,    },8,1,0,0,1,0,0,0,0,10,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,43,        key = k;,16,1,0,0,0,0,0,0,0,19,8,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,44,        value = v;,0,0,0,0,0,0,0,0,0,0,10,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,45,    },6,0,0,0,1,0,0,0,0,7,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,                return null;,2,0,0,0,0,1,0,0,0,2,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,10,1,0,1,2,0,10,2,0,23,72,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,0,0,0,1,2,0,0,0,0,3,92,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,401,      Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,403,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",4,1,0,1,2,0,4,0,0,10,45,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,405,          if (colIndex < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,409,          Integer basicRow = getBasicRow(colIndex);,10,1,0,1,2,0,10,2,0,24,41,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,410,          if (basicRow != null && basicRow == 0) {,4,3,0,1,3,0,10,0,0,17,40,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,415,          } else if (basicRows.contains(basicRow)) {,4,0,0,2,6,0,0,2,0,6,42,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,420,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,10,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,421,              coefficients[i] =,12,1,0,1,2,0,0,0,0,16,17,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,426,"      return new PointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,66,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",4,1,0,2,4,1,4,2,0,12,81,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,448,        if (v instanceof ArrayRealVector) {,0,1,1,1,3,0,0,0,0,5,35,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,449,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,450,            checkVectorDimensions(vData.length);,0,0,0,1,2,0,0,0,0,3,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,451,            double dot = 0;,4,0,0,0,0,0,0,0,0,5,15,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,452,            for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,453,                dot += data[i] * vData[i];,2,1,1,2,4,0,0,0,0,12,26,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,455,            return dot;,2,0,0,0,0,1,0,0,0,2,11,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,173,        while (!tableau.isOptimal()) {,2,0,0,2,5,0,4,4,0,12,30,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,16,0,0,17,82,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,201,        return tableau.getSolution();,2,0,0,1,2,1,16,0,0,19,29,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,116,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,196,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,198,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,4,0,0,5,30,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,312,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,313,"            final double entry = getEntry(i, col);",4,1,0,1,2,1,10,0,0,16,38,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,315,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,328,        if (getNumObjectiveFunctions() == 1) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,439,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,3,0,0,0,10,38,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,440,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,442,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,456,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",4,1,0,1,3,0,16,0,0,21,65,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,458,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,127,        if (++iterations > maxIterations) {,6,1,0,1,3,0,4,0,0,13,35,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,130,    },2,0,0,0,1,0,0,0,0,2,1,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,70,        double minValue = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,71,        Integer minPos = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,73,"            final double entry = tableau.getEntry(0, i);",8,0,0,1,2,2,6,0,0,16,44,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,0,0,2,5,0,0,0,0,7,56,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,75,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,79,        return minPos;,14,4,0,0,0,2,4,0,0,23,14,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,0,0,2,4,0,0,0,0,2,63,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",8,1,0,2,5,0,0,2,0,11,50,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",2,0,0,1,2,1,10,0,0,13,62,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,101,                } else if (cmp < 0) {,2,1,0,1,4,0,0,0,0,3,21,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,102,                    minRatio = ratio;,8,1,1,0,0,0,8,0,0,24,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,103,                    minRatioPositions = new ArrayList<Integer>();,6,1,0,1,2,1,0,0,0,8,45,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,109,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,137,        incrementIterationsCounter();,2,0,0,1,2,0,2,0,0,5,29,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,139,        Integer pivotCol = getPivotColumn(tableau);,4,0,0,1,2,0,4,2,0,10,43,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,1,0,1,2,0,0,0,0,3,50,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,0,0,0,3,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,150,        for (int i = 0; i < tableau.getHeight(); i++) {,8,1,0,2,5,3,4,0,0,17,47,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,151,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,152,"                double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,0,8,0,0,10,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,153,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,0,0,0,3,45,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,92,            return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,309,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,6,1,0,2,6,3,8,2,0,20,62,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,0,2,4,0,8,0,0,12,73,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,508,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,516,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,115,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,0,0,0,7,28,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,117,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,118,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,120,        return 1;,0,0,1,0,0,1,0,0,0,10,9,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,165,"        columnLabels.add(""s"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,473,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,4,0,0,4,41,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,89,        return goal;,2,1,1,0,0,1,0,0,0,7,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,96,        return function;,6,0,1,0,0,1,10,2,0,27,16,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,103,        return Collections.unmodifiableCollection(linearConstraints);,0,0,0,1,2,1,6,0,0,6,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,141,        this.goal              = goalType;,0,0,0,0,0,0,0,0,0,0,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",8,0,0,1,2,0,0,0,0,9,36,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,52,    },0,0,0,0,1,0,8,0,0,8,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,169,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,195,        solvePhase1(tableau);,2,0,0,1,2,3,4,0,0,9,21,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,89,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,90,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,91,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,94,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,465,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,482,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,500,        return getNumObjectiveFunctions() + numDecisionVariables;,2,1,0,1,2,1,2,0,0,5,57,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,254,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,3,0,0,0,7,52,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,275,    private static final long PI_O_4_BITS[] = new long[] {,4,0,0,2,5,0,0,0,0,5,54,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3002,        return (x < 0l) ? -x : x;,10,4,0,1,2,1,0,0,0,16,25,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,71,    },0,0,1,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,301,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,302,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,305,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,306,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,308,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,6,2,0,2,4,1,12,0,0,22,55,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,265,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,63,    public ArrayRealVector(int size) {,6,0,0,1,3,1,0,0,0,7,34,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,64,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,316,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,16,2,0,20,35,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,317,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,318,            final int dim = vData.length;,6,0,1,0,0,1,0,0,0,12,29,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,319,            checkVectorDimensions(dim);,0,0,0,1,2,0,0,0,0,3,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,320,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,321,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,322,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,323,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,12,35,9,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,325,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,623,        return data[index];,4,0,0,1,2,1,8,0,0,12,19,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,478,"        return new ArrayRealVector(getRow(row), false);",0,0,1,2,4,1,4,2,0,12,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,483,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,484,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,485,        if (vector.getDimension() != nCols) {,0,0,0,2,5,0,0,0,0,7,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,489,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,516,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,517,        for (int i = 0; i < nCols; ++i) {,16,2,0,1,3,0,0,0,0,21,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,521,        return out;,2,0,0,0,0,1,0,2,0,4,11,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,102,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,103,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,106,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,763,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,766,    },0,0,0,0,1,0,2,0,0,2,1,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,27,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,134,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,84,    private final List<String> columnLabels = new ArrayList<String>();,0,0,0,1,2,0,0,0,0,3,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,135,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,136,        this.constraints            = normalizeConstraints(constraints);,2,0,0,1,2,0,4,0,0,7,64,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,137,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,138,        this.epsilon                = epsilon;,6,0,0,0,0,0,0,0,0,8,38,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,139,        this.maxUlps                = maxUlps;,0,0,0,0,0,0,0,0,0,0,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,0,0,0,2,4,0,0,0,0,6,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,6,1,0,1,2,0,2,0,0,10,73,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,8,1,0,1,2,0,2,0,0,12,72,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,18,3,0,1,2,0,2,0,0,24,60,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,147,        initializeColumnLabels();,2,0,0,1,2,0,0,0,0,4,25,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,154,      if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,157,"      columnLabels.add(""Z"");",4,1,1,1,2,1,4,0,0,15,22,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,159,"        columnLabels.add(""x"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,161,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,170,"      columnLabels.add(""RHS"");",0,0,0,1,2,0,4,0,0,5,24,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,171,    },2,0,0,0,1,0,2,0,0,5,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,181,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,183,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,0,0,1,2,0,0,4,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,187,        if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,2,1,0,2,4,0,2,0,0,5,55,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",2,0,0,1,2,0,8,0,0,11,51,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,192,        RealVector objectiveCoefficients =,0,0,0,0,0,0,0,0,0,0,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,4,8,0,10,0,0,12,72,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,195,"        matrix.setEntry(zIndex, width - 1,",2,1,0,0,1,0,6,0,0,9,34,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,198,        if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,204,        int slackVar = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,205,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,206,        for (int i = 0; i < constraints.size(); i++) {,6,1,0,2,5,0,4,0,0,12,46,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,207,            LinearConstraint constraint = constraints.get(i);,6,0,0,1,2,0,6,2,0,15,49,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,208,            int row = getNumObjectiveFunctions() + i;,4,1,0,1,2,0,2,0,0,7,41,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,211,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,0,5,10,0,0,0,0,15,76,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,214,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,220,"            matrix.setEntry(row, width - 1, constraint.getValue());",10,2,0,2,4,0,10,0,0,24,55,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,223,            if (constraint.getRelationship() == Relationship.LEQ) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,230,            if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,238,        return matrix;,2,0,0,0,0,1,0,0,0,2,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,247,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,248,        for (LinearConstraint constraint : originalConstraints) {,4,0,0,1,3,0,0,2,0,6,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,249,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,251,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,260,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,274,        return this.numArtificialVariables > 0 ? 2 : 1;,2,1,0,0,0,1,0,0,0,3,47,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,283,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,284,        for (final LinearConstraint constraint : constraints) {,4,0,0,1,3,1,0,2,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,285,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,286,                ++count;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,289,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,374,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,375,    },2,1,1,0,1,1,0,0,0,12,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,539,        return f.getCoefficients().getDimension();,8,2,1,2,4,1,6,0,0,22,42,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,547,        return numSlackVariables;,2,0,0,0,0,1,0,0,0,2,25,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,555,        return numArtificialVariables;,0,0,0,0,0,1,0,0,0,1,30,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,44,    },2,0,0,0,1,0,0,0,0,2,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,34,"    GEQ("">="");",4,1,1,1,2,1,2,0,0,14,10,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,58,public abstract class RealVector {,0,0,0,0,1,0,0,0,0,1,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,82,    },8,2,0,0,1,1,0,0,0,11,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,168,        return coefficients;,4,1,0,0,0,1,6,0,0,11,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,184,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,58,"        this(new ArrayRealVector(coefficients), constantTerm);",4,0,0,2,4,0,0,2,0,6,54,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0,0,0,1,3,0,0,0,0,4,78,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,67,        this.constantTerm = constantTerm;,4,1,1,0,0,0,0,0,0,19,33,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,75,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,83,        return constantTerm;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,84,    public ArrayRealVector(double[] d) {,10,0,0,2,5,1,6,0,0,18,36,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,85,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,198,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,199,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,285,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,374,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,375,            data[i] = data[i] * d;,0,0,0,2,4,0,0,0,0,6,22,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,377,        return this;,4,4,0,0,0,1,0,0,0,8,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,629,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,733,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,37,public class ArrayRealVector extends RealVector implements Serializable {,4,0,0,0,1,1,10,4,0,19,73,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,0,0,0,0,3,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",10,1,0,1,3,3,0,0,0,14,81,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,54,        if (rowDimension < 1) {,12,2,0,1,3,0,0,0,0,15,23,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,57,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,33,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,106,"                            final String separator, final NumberFormat format) {",2,0,0,0,2,0,0,0,0,3,52,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,113,        this.format      = format;,6,0,1,0,0,1,0,4,0,16,26,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,56,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,58,    },0,0,0,0,1,1,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,255,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,1,1,2,0,0,0,0,7,48,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,303,        data[row][column] = value;,4,0,1,2,4,0,0,0,0,11,26,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,4,1,5,10,1,0,0,0,17,66,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,367,"        checkRowIndex(m, row);",0,0,0,1,2,0,0,0,0,3,22,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,12,0,0,12,28,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,369,    },8,4,1,0,1,0,0,0,0,19,1,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,394,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,77,        return getKey();,0,0,0,1,2,1,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,52,"    public Pair(Pair<? extends K, ? extends V> entry) {",6,0,0,1,3,1,2,10,0,19,51,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,53,        key = entry.getKey();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,54,        value = entry.getValue();,2,0,1,1,2,0,8,0,0,20,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,72,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,84,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,85,            return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,87,        if (!(o instanceof Pair)) {,2,0,0,2,5,0,0,2,0,5,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,88,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,90,"            Pair<?, ?> oP = (Pair<?, ?>) o;",8,0,0,1,2,0,0,4,0,13,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,91,            return (key == null ?,4,1,0,0,1,1,6,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,107,        return (key == null ? 0 : key.hashCode()) ^,2,2,0,2,4,1,4,0,0,8,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,117,"        this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",12,0,0,1,2,0,0,0,0,12,77,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,118,    },10,3,0,0,1,0,0,0,0,13,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,329,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,414,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,418,              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,492,"        tableau.setEntry(row, column, value);",0,0,0,1,2,0,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,493,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,530,        return numDecisionVariables;,0,0,0,0,0,1,0,0,0,1,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,563,        return tableau.getData();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,570,      if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,571,        return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,574,      if (other instanceof SimplexTableau) {,2,0,0,1,3,0,0,2,0,4,38,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,575,          SimplexTableau rhs = (SimplexTableau) other;,4,0,0,1,2,0,0,4,0,8,44,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,576,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,6,2,0,1,2,1,0,0,0,8,63,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,586,      return false;,6,1,0,0,0,1,0,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,592,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0,1,0,2,4,1,8,0,0,9,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,609,        oos.defaultWriteObject();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,610,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,620,        ois.defaultReadObject();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,621,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0,0,0,1,2,0,6,0,0,7,56,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,622,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,49,        return stringValue;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,61,            return LEQ;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,63,            return EQ;,8,1,0,0,0,1,0,0,0,10,10,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,98,"        setEntry(index, getEntry(index) + increment);",2,1,0,2,4,0,8,0,0,11,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,162,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,173,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,174,        if (d != n) {,12,4,0,1,3,1,0,0,0,17,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,175,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,186,        if (index < 0 ||,8,2,0,0,1,0,0,0,0,11,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,188,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",8,0,0,0,1,1,0,14,0,23,53,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,203,        RealVector result = v.copy();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,204,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,206,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,18,0,0,23,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,207,            final int index = e.getIndex();,10,1,0,1,2,1,4,0,0,17,31,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,208,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,209,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,210,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,223,        RealVector result = v.copy();,4,0,0,1,2,0,4,4,0,13,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,224,        Iterator<Entry> it = sparseIterator();,4,0,0,1,2,0,2,4,0,10,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,226,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,8,0,0,16,49,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,227,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,228,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,229,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,230,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,241,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,252,        if (d != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,253,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,255,        return this;,2,0,0,0,0,2,4,0,0,7,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,274,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,275,        double d = 0;,14,3,0,0,0,1,0,0,0,18,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,276,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,278,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,279,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,281,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,292,        final double norm = getNorm();,4,0,0,1,2,1,2,0,0,8,30,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,293,        final double vNorm = v.getNorm();,8,2,0,1,2,1,4,0,0,15,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,295,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,297,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,299,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,337,        checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,338,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,339,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,341,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,342,            final double diff = e.getValue() - v.getEntry(e.getIndex());,6,1,0,3,6,1,12,0,0,21,60,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,343,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,344,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,345,        return FastMath.sqrt(d);,2,0,0,1,2,1,10,4,0,16,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,359,        double sum = 0;,2,0,0,0,0,0,6,0,0,8,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,360,        Iterator<Entry> it = sparseIterator();,4,1,0,1,2,0,2,4,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,362,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,363,            final double value = e.getValue();,4,0,0,1,2,0,0,0,0,5,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,364,            sum += value * value;,10,1,0,0,0,1,0,0,0,13,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,365,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,366,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,380,        double norm = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,381,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,8,4,0,14,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,383,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,384,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,14,0,0,17,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,386,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,400,        double norm = 0;,6,0,0,0,0,0,4,4,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,401,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,403,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,404,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,406,        return norm;,12,2,1,0,0,1,4,0,0,24,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,421,        checkVectorDimensions(v);,2,0,0,1,2,1,6,0,0,9,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,422,        double d = 0;,12,1,0,0,0,0,0,0,0,14,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,423,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,425,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,426,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,428,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,446,        checkVectorDimensions(v);,2,1,0,1,2,0,4,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,447,        double d = 0;,4,0,0,0,0,0,6,0,0,10,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,448,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,450,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,16,2,0,1,3,0,0,0,0,21,61,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,        checkValidity(representation);,12,2,0,1,2,1,8,4,0,28,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));,0,0,0,2,4,0,0,0,0,6,86,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,111,                bestChromosome = chromosome;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,113,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,122,        return this.populationLimit;,4,0,0,0,0,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,131,    },6,0,1,0,1,1,0,0,0,15,1,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,138,        return this.chromosomes.size();,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,155,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",4,0,1,0,1,2,0,6,0,20,76,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,2,1,0,0,0,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,45,        if (this.fitness == NO_FITNESS) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,47,            this.fitness = fitness();,2,0,0,1,2,0,2,0,0,5,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,49,        return this.fitness;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,65,        return ((Double)this.getFitness()).compareTo(another.getFitness());,0,0,0,5,10,1,0,0,0,16,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,76,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,90,            if (this.isSame(anotherChr)) {,0,0,0,2,5,0,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,0,0,0,2,4,0,0,0,0,6,59,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,1.23077,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,464,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,473,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,475,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,0,0,3,6,0,0,0,0,8,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,478,          double temp = ya * HEX_40000000;,4,1,1,0,0,0,8,0,0,19,32,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,479,          double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,483,          double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,484,          temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,486,          double recipb = recip - recipa;,8,2,0,0,0,0,0,0,0,11,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,24,9,0,1,2,0,0,0,0,35,76,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,491,          recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,493,          recipa = -recipa;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,494,          recipb = -recipb;,0,0,0,0,0,0,10,0,0,10,17,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,498,          yb += -(temp - ya - recipa);,2,0,0,1,2,0,0,0,0,3,28,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,499,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,500,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,502,          ya = temp;,2,0,1,0,0,0,0,0,0,11,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,504,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,505,          result *= 0.5;,2,0,0,0,0,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,506,      },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,396,      if (x < -20) {,2,2,0,1,3,0,10,0,0,14,14,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,400,      double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,401,      if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,415,      temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,416,      double recipa = recip + temp - temp;,2,1,0,0,0,0,0,0,0,3,36,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,422,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,425,      temp = ya + recipa;,10,1,0,0,0,0,4,0,0,16,19,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,428,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,432,      double result = ya + yb;,0,0,0,0,0,0,0,0,0,0,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,434,      return result;,2,0,0,0,0,4,0,0,0,5,14,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,460,      if (x == 0) {,2,0,0,1,3,0,0,0,0,3,13,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,2,0,1,1,2,0,0,0,0,7,58,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,826,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,864,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,866,            if (intVal > 709) {,10,1,0,1,3,0,0,0,0,12,19,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,922,            result = tempC*z + tempB + tempA;,2,0,0,0,0,0,2,0,0,5,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3754,    private static class ExpFracTable {,10,4,0,0,1,0,4,0,0,19,35,8,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3787,        },0,0,0,0,1,0,0,0,0,1,1,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,4,0,0,3,6,0,0,0,0,5,50,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,8,0,1,1,2,1,0,4,0,16,64,3,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,0,0,1,2,0,0,0,0,5,55,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,900,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,902,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,903,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,16,5,0,0,0,0,0,0,0,22,82,0,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,917,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3711,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,4,0,0,1,3,0,0,0,0,4,34,1,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,1,1,1,2,0,10,0,0,21,54,1,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3750,        },2,0,0,0,1,0,0,0,0,2,1,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2261,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2267,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2268,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2271,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2272,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,7,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2273,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2276,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2277,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2279,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2281,                if (remA > 0.0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2282,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2290,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2291,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,29,    private static final double[] EXP_INT_A = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,1535,    private static final double[] EXP_INT_B = new double[] {,6,3,0,2,5,0,0,0,0,9,56,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,3043,    private static final double[] EXP_FRAC_A = new double[] {,8,0,0,2,5,3,0,0,0,13,57,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,80,public class FastMath {,10,1,0,0,1,1,0,0,0,13,23,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2175,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2181,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2182,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2185,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2186,                double b = remA;,8,1,0,0,0,0,0,0,0,10,16,8,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2188,                remB += -(remA - b - a);,14,3,0,1,2,0,0,0,0,19,24,3,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2190,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,10,31,0,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2191,                b = remA;,6,0,0,0,0,0,0,0,0,8,9,0,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2192,                remA = a + b;,2,1,1,0,0,0,0,0,0,8,13,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2193,                remB += -(remA - b - a);,20,11,1,1,2,1,0,0,0,49,24,3,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2195,                if (remA > 0.0) {,0,0,0,1,3,0,0,2,0,2,17,11,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2196,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2246,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2247,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2233,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0,0,0,1,2,0,0,0,0,3,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0,0,0,1,3,0,0,0,0,4,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0,0,0,1,2,0,0,0,0,3,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0,0,0,0,1,0,0,0,0,1,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0,0,0,2,4,0,0,0,0,6,50,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0,0,0,2,4,0,0,0,0,6,51,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,0,0,3,6,0,0,0,0,9,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0,0,0,0,0,0,0,0,0,0,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
