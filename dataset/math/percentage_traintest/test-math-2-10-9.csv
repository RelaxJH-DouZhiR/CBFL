dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0,0,0,3,6,0,0,0,0,9,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,            return subtract((ArrayRealVector) v);,0,0,0,2,4,1,0,0,0,7,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,            out[i] = data[i] - v[i];,0,0,0,3,6,0,0,0,0,9,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,        return (ArrayRealVector) subtract(v.data);,0,0,0,2,4,1,0,0,0,7,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,            sum += a * a;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,2,0,0,1,2,1,8,0,0,11,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },14,2,0,0,1,0,0,0,0,17,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,                        np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,0,0,0,7,10,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,2,0,0,3,7,3,0,0,0,5,36,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,                        a2 = work[np - 4] / work[np - 2];,0,0,0,2,4,0,0,0,0,6,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,                        if (work[nn - 9]  >  work[nn - 11]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,10,2,0,2,4,0,0,0,0,13,34,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1085,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1094,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1096,                    if (tType < -22) {,0,0,0,1,3,0,0,0,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1099,                    } else if (dMin1 > 0.0) {,14,4,0,1,4,0,12,0,0,31,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1101,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,4,1,0,2,4,0,0,0,0,5,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1102,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,666,                    for (int i = 0; i < n; ++i) {,18,4,0,1,3,1,4,0,0,28,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,667,                        realEigenvalues[begin + i] = lambda - work[4 * i];,18,4,1,2,4,0,0,0,0,29,50,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1475,                    tType = -4;,16,3,0,0,0,0,0,0,0,22,11,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1476,                    double s = 0.25 * dMin;,0,0,0,0,0,0,6,0,0,6,23,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1479,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1503,                    a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1504,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,2,0,1,1,3,0,6,0,0,12,60,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1518,                    a2 = cnst3 * a2;,0,0,0,0,0,0,0,0,0,0,16,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1521,                    if (a2 < cnst1) {,6,0,0,1,3,0,2,0,0,9,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1522,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,8,3,0,3,6,0,0,0,0,11,41,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1524,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1027,                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);,0,0,0,5,10,0,0,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1028,                    double s = work[k - 3] * (work[k - 5] / t);,0,0,0,3,6,0,0,0,0,9,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1029,                    if (s <= t) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1030,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,4,0,0,5,10,0,0,0,0,5,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1034,                    t = work[k - 7] + (s + work[k - 5]);,2,0,0,3,6,0,0,0,0,2,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1035,                    work[k - 3] *= work[k - 7] / t;,0,0,0,2,4,0,0,2,0,2,31,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1036,                    work[k - 7]  = t;,0,0,0,1,2,0,8,0,0,8,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1356,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,193,        this.main      = main.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,194,        this.secondary = secondary.clone();,2,0,0,1,2,0,4,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,195,        transformer    = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,3,1,1,3,0,0,0,0,20,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0,0,0,4,8,0,0,0,0,12,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0,0,0,1,3,0,0,0,0,4,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0,0,0,0,0,0,8,0,0,8,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0,0,0,1,2,0,0,0,0,3,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0,0,0,3,6,0,0,0,0,9,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,4,0,0,5,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,        double[][] matrix = new double[height][width];,0,0,0,4,8,0,0,0,0,12,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,321,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,0,0,0,2,4,0,0,0,0,6,79,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,0,0,0,2,4,0,0,0,0,6,63,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,0,0,0,1,2,0,4,0,0,4,47,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,                basicRows.add(basicRow);,0,0,0,1,2,0,0,0,0,3,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0,0,0,0,0,1,0,0,0,1,79,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,367,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,369,        } else if (x < y) {,6,0,0,1,4,0,0,0,0,6,19,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,370,          return -1;,2,0,0,0,0,1,0,2,0,4,10,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,145,                    matrix[zIndex][getSlackVariableOffset() - 1] =,0,0,0,3,6,0,0,0,0,9,46,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0,0,0,3,6,0,0,0,0,9,66,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,6,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0,0,0,2,5,0,0,0,0,7,41,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",6,3,0,3,7,0,22,0,0,31,66,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,134,                return false;,10,1,0,0,0,1,0,0,0,12,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,137,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,146,        if (tableau.getNumArtificialVariables() > 0) {,4,1,0,2,5,0,4,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0,0,0,4,9,0,0,0,0,13,81,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0,0,0,3,7,0,0,0,0,10,59,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,4,44,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,0,0,0,5,10,0,0,0,0,15,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,0,0,0,0,0,0,0,0,0,0,25,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,0,0,0,1,4,1,0,0,0,6,40,4,0.14286,1,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,0,0,0,0,0,0,0,0,0,0,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1,-1
