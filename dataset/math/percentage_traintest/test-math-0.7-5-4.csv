dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);",0,0,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",0,0,0,1,2,0,0,0,0,3,29,4,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,0,0,0,2,4,0,0,0,0,6,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,0,0,0,4,8,0,0,0,0,12,59,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,0,0,4,8,0,0,0,0,12,61,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,0,0,0,3,7,0,0,0,0,10,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,0,0,0,1,2,0,0,0,0,3,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,0,0,3,7,0,0,0,0,10,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,0,0,0,0,0,1,0,0,0,1,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,0,0,0,0,0,0,0,0,0,0,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,0,0,0,1,3,0,0,0,0,4,23,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,0,0,0,1,2,0,0,0,0,3,63,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,                columnSum += Math.abs(value);,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,0,0,0,0,0,1,0,0,0,1,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,2,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,0,0,0,4,8,0,0,0,0,12,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,0,2,4,1,0,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0,0,0,3,6,0,0,0,0,9,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0,0,0,4,8,0,0,0,0,12,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,0,0,0,1,2,0,4,0,0,4,47,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0,0,0,3,6,0,0,0,0,9,66,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,4,44,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,0,0,0,1,4,1,0,0,0,6,40,4,0.14286,1,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
