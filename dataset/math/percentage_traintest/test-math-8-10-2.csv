dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/FastMath,14,663,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,666,          double da = 2.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,667,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,668,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,669,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,670,          da = temp;,6,1,0,0,0,0,16,0,0,24,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,672,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,673,          double daa = da + temp - temp;,6,1,0,0,0,0,0,0,0,8,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,674,          double dab = da - daa;,8,1,0,0,0,0,0,0,0,11,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,677,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,678,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,679,          double ratioa = ratio + temp - temp;,16,3,0,0,0,0,6,0,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,680,          double ratiob = ratio - ratioa;,14,2,1,0,0,0,0,0,0,19,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,686,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,688,          ratiob += -db * na / da / da;,12,3,0,0,0,0,0,0,0,19,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,690,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,693,      if (negate) {,0,0,0,1,3,0,4,0,0,4,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,694,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,697,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,713,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,714,        if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,715,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,716,            a = -a;,2,0,0,0,0,0,2,0,0,5,7,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,720,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,723,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,724,            if (a > 0.097) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,8,16,0,0,0,0,24,212,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,726,            } else if (a > 0.036) {,12,2,0,1,4,0,0,0,0,17,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,42,13,1,6,12,0,0,0,0,58,160,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,728,            } else if (a > 0.0036) {,10,2,0,1,4,0,0,0,0,13,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,735,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,743,        boolean negative = false;,8,1,1,0,0,0,0,0,0,13,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,744,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,745,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,746,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,750,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,1,3,6,0,4,0,0,18,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,753,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,754,            if (a > 0.087) {,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,756,            } else if (a > 0.031) {,4,2,0,1,4,0,0,0,0,6,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,0,0,0,42,109,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,758,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,12,5,0,2,4,0,0,2,0,20,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,765,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,87,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,91,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",8,0,0,1,2,1,4,0,0,13,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,807,        return Math.random();,6,1,0,1,2,1,10,0,0,17,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,831,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,851,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,853,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,854,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,855,                    hiPrec[0] = 0.0;,0,0,1,1,2,0,10,0,0,13,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,856,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,858,                return 0.0;,0,0,0,0,0,1,0,2,0,2,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,861,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",16,4,0,1,2,2,8,0,0,31,79,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,864,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,865,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,866,                    hiPrec[1] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,868,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",10,1,0,1,2,0,0,0,0,12,79,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,874,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,875,                    hiPrec[0] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,876,                    hiPrec[1] /= 4.455505956692756620;,4,1,1,1,2,1,0,0,0,9,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,878,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,881,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,886,            intVal = -intVal;,2,0,0,0,0,0,0,2,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,888,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,891,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,893,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,895,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,14,3,1,1,2,0,0,2,0,25,71,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,2,1,1,2,1,0,0,0,18,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,14,3,0,1,2,1,0,0,0,19,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,923,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,927,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,0,0,2,0,17,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,934,        double tempA = intPartA * fracPartA;,2,1,1,0,0,0,0,0,0,11,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,941,        final double tempC = tempB + tempA;,6,1,0,0,0,1,4,0,0,12,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0137,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,2,0,0,0,0,3,0,0,0,5,4,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,8,1,0,0,0,1,0,0,0,11,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,26,10,0,1,3,1,0,0,0,37,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,8,1,0,0,0,1,0,0,0,11,4,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,                if (striped[q] == '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,        if (!decimalFound) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,4,0,1,0,0,0,0,0,0,16,49,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,8,3,0,0,0,0,0,0,0,12,31,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,6,1,1,1,3,0,0,0,0,12,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,6,0,0,12,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,10,0,0,0,0,0,6,0,0,19,7,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,12,3,0,1,3,0,6,0,0,23,40,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,        return field.getRadixDigits();,2,0,0,1,2,1,0,0,0,3,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,        for (int i = mant.length - 1; i > 0; i--) {,14,5,0,1,3,0,0,0,0,20,43,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,673,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,        for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,6,0,0,19,43,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,10,0,0,10,26,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,685,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,686,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,        boolean inexact = false;,8,0,0,0,0,0,4,0,0,14,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,702,        int adiff = diff;,0,0,0,0,0,0,0,0,0,0,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,        if (adiff < 0) {,12,2,0,1,3,1,4,0,0,21,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,708,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,        if (adiff > (mant.length + 1)) {,8,2,0,2,5,0,0,0,0,11,32,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0,0,0,1,2,0,0,0,0,3,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,719,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,            if (diff < 0) {,4,1,0,1,3,1,6,2,0,14,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,                    inexact = true;,12,5,0,0,0,0,4,0,0,21,15,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,                shiftRight();,0,0,0,1,2,0,2,0,0,2,13,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,        if (inexact) {,2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,1,0,1,2,0,4,0,0,15,46,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,        if (isNaN() || x.isNaN()) {,2,0,0,3,7,1,4,0,0,7,27,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,        if (other instanceof Dfp) {,10,1,0,1,3,0,0,2,0,15,27,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,12,3,0,5,11,0,12,0,0,28,81,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,24,9,0,2,5,0,0,0,0,33,71,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,3,0,0,0,30,67,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,974,            if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,                return a.sign;,4,0,0,0,0,1,6,2,0,12,14,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,46,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,985,            if (a.mant[i] > b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,986,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,989,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,            final int r = mant[i] + rh;,2,6,1,1,2,0,0,0,0,16,27,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,            mant[i] = r - rh * RADIX;,12,3,1,1,2,0,0,0,0,21,25,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,        return extra;,12,0,0,0,0,1,0,0,0,15,13,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1262,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,        Dfp result = newInstance(getZero());,16,1,0,2,4,0,4,4,0,27,36,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,6,0,0,6,38,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0,0,0,3,6,0,0,0,0,9,42,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,2,0,0,0,0,0,0,0,0,3,6,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,2,0,0,2,4,1,4,0,0,7,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,0,0,2,5,0,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,1,0,0,0,0,16,0,0,17,6,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,4,1,1,0,0,0,10,0,0,25,7,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,16,4,0,1,2,0,0,0,0,22,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,4,1,0,1,2,1,12,0,0,17,30,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,2,0,1,1,2,0,0,0,0,6,12,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,4,1,0,0,0,1,0,0,0,6,6,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,686,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,8,1,1,0,0,0,0,0,0,12,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,708,            return 0;,0,0,0,0,0,1,6,0,0,6,9,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,711,        if (adiff > (mant.length + 1)) {,0,0,0,2,5,0,0,0,0,7,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,8,0,0,0,0,0,0,0,0,9,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0,0,1,0,0,1,14,0,0,21,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,4,1,0,1,3,3,0,0,0,8,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,4,0,0,0,0,0,0,0,0,6,15,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,4,0,1,1,2,2,0,0,0,9,20,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,0,0,0,1,2,0,10,0,0,10,13,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,740,        if (inexact) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,1,1,2,0,4,0,0,16,46,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,4,1,1,0,0,2,0,0,0,10,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,765,        if (isNaN() || x.isNaN()) {,0,0,0,3,7,0,0,0,0,10,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,2,1,0,3,7,0,6,0,0,10,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",2,1,0,1,2,1,4,0,0,7,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,16,4,0,1,3,3,0,0,0,23,47,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,6,0,0,1,3,1,0,0,0,7,20,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,2,1,3,7,0,0,0,0,24,28,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,8,2,0,1,3,0,0,0,0,11,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1233,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,10,2,0,0,0,0,0,0,0,13,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1239,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,385,                    negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,386,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,394,                sciexp = -sciexp;,0,0,0,0,0,0,0,0,0,0,17,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,907,                return false;,4,0,0,0,0,6,0,10,0,19,13,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2056,            if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2059,                return NAN_STRING;,0,0,0,0,0,1,0,0,0,1,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",2,0,0,1,2,0,6,0,0,9,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,7,32,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,2,0,0,0,0,0,4,0,0,7,25,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),10,1,0,2,4,1,4,4,0,21,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,383,                if (fpexp.charAt(i) == '-'),0,0,0,2,4,0,0,0,0,6,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0,0,0,3,7,0,0,0,0,10,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0,0,0,1,2,0,0,0,0,3,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,2,0,0,1,3,0,0,0,0,2,15,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,396,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,961,            return a.sign;,4,0,0,0,0,1,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,969,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2237,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2238,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2239,                def.nans = QNAN;,0,0,0,0,0,0,6,0,0,6,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2240,                break;,6,0,1,0,0,1,8,4,0,21,6,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,500,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2218,            buffer[--q] = '-';,6,3,0,1,2,0,0,0,0,9,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,284,        return ieeeFlags;,6,1,0,0,0,1,0,0,0,7,17,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1652,            lostdigit = result.mant[0];,4,0,0,1,2,0,0,0,0,6,27,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1653,            result.shiftRight();,10,3,0,1,2,1,0,2,0,17,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1654,            result.mant[mant.length-1] = rh;,6,1,0,1,2,0,4,0,0,12,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1603,            return multiplyFast(x);,6,0,0,1,2,1,0,0,0,6,23,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1612,        Dfp result = newInstance(this);,0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1615,        if (nans != FINITE) {,4,1,1,1,3,0,0,0,0,11,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1635,        if (x < 0 || x >= RADIX) {,6,3,0,1,3,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1643,        int rh = 0;,14,5,0,0,0,0,0,0,0,20,11,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1644,        for (int i = 0; i < mant.length; i++) {,6,1,0,1,3,0,4,4,0,16,39,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1645,            final int r = mant[i] * x + rh;,0,0,0,1,2,0,0,0,0,3,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1646,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1647,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1650,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1651,        if (rh != 0) {,0,0,0,1,3,0,6,0,0,6,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1657,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0,0,0,2,5,0,0,0,0,7,76,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1661,        final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1662,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1666,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2252,                    def = newInstance(getZero());,4,0,1,2,4,0,4,0,0,13,29,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2253,                    def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,386,"        return new Dfp(this, s);",0,0,0,1,2,1,0,0,0,4,24,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,396,"        return new Dfp(this, sign, nans);",0,0,0,1,2,1,0,0,0,4,33,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,541,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",8,0,0,1,3,4,0,2,0,14,71,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,542,        this.field = field;,4,0,0,0,0,0,2,0,0,7,19,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,543,        this.mant    = new int[field.getRadixDigits()];,4,0,0,2,4,0,6,2,0,12,47,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,544,        this.sign    = sign;,0,0,0,0,0,0,0,0,0,0,20,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,545,        this.exp     = 0;,6,0,1,0,0,0,0,0,0,12,17,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,546,        this.nans    = nans;,2,0,0,0,0,0,0,0,0,3,20,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,547,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,298,        ieeeFlags = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,299,    },8,0,0,0,1,0,8,0,0,16,1,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1728,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,4,0,0,1,2,0,4,0,0,8,47,7,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1729,            result = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,32,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1730,            result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,0,0,0,6,43,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1731,            result.nans = INFINITE;,14,1,0,0,0,0,0,0,0,17,23,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1732,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1733,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2243,                if (nans == FINITE && mant[mant.length-1] != 0) {,12,4,1,2,5,0,0,0,0,19,49,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2245,                    def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2246,                    def.sign = (byte)(sign*oper.sign);,10,1,0,2,4,0,0,0,0,12,34,7,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2247,                    def.nans = INFINITE;,2,0,0,0,0,0,0,0,0,3,20,2,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2250,                if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2256,                if (nans == INFINITE || nans == QNAN) {,8,3,0,1,3,0,0,0,0,11,39,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2261,                if (nans == INFINITE || nans == SNAN) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,953,                return -1;,20,6,0,0,0,1,0,0,0,28,10,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,952,            if (a.sign == -1) {,2,2,0,1,3,1,14,2,0,21,19,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,403,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,427,                break;,4,3,1,0,0,0,0,0,0,11,6,5,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,489,            decimalPos = q-offset;,0,0,0,0,0,0,0,0,0,0,22,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,177,"        this(decimalDigits, true);",2,0,0,1,2,0,0,0,0,3,26,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);",4,0,0,1,2,1,0,4,0,9,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,536,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);",4,0,0,2,4,0,0,0,0,5,26,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,    public ArrayRealVector(double[] d) {,12,1,0,2,5,1,10,10,0,35,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,    },10,1,0,0,1,0,0,0,0,13,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,86,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,    },0,0,0,0,1,0,10,0,0,10,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,        return copyOut();,0,0,0,1,2,1,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,            data = new double[subMatrix.length][nCols];,6,1,0,2,4,1,4,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,0,1,5,10,1,2,0,0,9,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,    private byte maxIter = 30;,2,0,0,0,0,0,0,0,0,2,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,            findEigenVectors(transformer.getQ().getData());,2,0,0,3,6,3,8,0,0,13,47,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,    },4,1,0,0,1,1,0,0,0,6,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,        final int rows = matrix.getRowDimension();,6,0,0,1,2,0,0,0,0,7,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,        final int columns = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,7,0,0,0,0,0,0,0,0,7,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,            for (int j = i + 1; j < columns; ++j) {,18,2,0,1,3,1,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,            final int m = eigenvectors.length;,2,1,0,0,0,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,247,        if (cachedD == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,10,1,0,1,2,3,6,0,0,22,64,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",12,5,1,3,8,1,10,0,0,32,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,        return cachedD;,4,0,0,0,0,1,0,0,0,5,15,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,    },8,2,0,0,1,0,10,0,0,20,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,        final double[][]z = householderMatrix.clone();,10,1,0,3,6,2,4,0,0,18,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,        final int n = main.length;,2,0,0,0,0,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,570,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,580,        double maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,581,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,590,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,591,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,601,        for (int j = 0; j < n; j++) {,14,3,1,1,3,0,0,0,0,21,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,612,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,672,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,675,            for (int j = i + 1; j < n; j++) {,10,2,1,1,3,0,4,0,0,19,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,681,            if (k != i) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,693,        maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,700,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,709,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,710,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,62,    public TriDiagonalTransformer(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,71,        secondary = new double[m - 1];,6,1,0,1,2,0,6,0,0,15,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,72,        cachedQ   = null;,6,1,0,0,0,0,0,0,0,8,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,74,        cachedT   = null;,2,0,1,0,0,1,0,0,0,7,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,77,        transform();,2,0,0,1,2,1,2,0,0,5,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,78,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,86,        if (cachedQ == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,131,        return cachedQt;,4,0,1,0,0,1,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,175,        return main;,4,0,0,0,0,1,6,0,0,11,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,185,        return secondary;,10,2,0,0,0,1,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,252,        main[m - 1] = householderVectors[m - 1][m - 1];,0,0,0,3,6,0,0,0,0,9,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,106,"                            final String separator, final NumberFormat format) {",8,2,1,0,2,2,0,4,0,21,52,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,114,    },8,4,1,0,1,0,0,0,0,19,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,130,        if (data == null ||,4,2,0,0,1,0,0,0,0,6,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",12,1,0,1,2,1,2,2,0,18,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,218,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,220,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,384,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,413,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,12,0,0,12,52,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,717,        double negccov = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,718,        if (ccov1 + ccovmu > 0) {,4,2,0,1,3,0,0,2,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,719,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",2,0,0,2,4,0,10,2,0,14,56,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,721,            RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,724,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,12,1,0,1,2,0,0,0,0,14,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,725,            oldFac += 1. - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,726,            if (isActiveCMA) {,6,0,0,1,3,1,0,2,0,9,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,728,                negccov = (1. - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,730,                double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,733,                double negalphaold = 0.5; // where to make up for the variance,8,1,0,0,0,1,0,0,0,10,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,736,                int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,0,4,0,0,6,40,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,737,                RealMatrix arzneg,2,0,0,0,0,0,0,2,0,4,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,739,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,740,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,8,2,0,3,6,0,10,0,0,21,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,741,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",8,2,0,1,2,1,6,2,0,19,60,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,742,                int[] idxReverse = reverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,37,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,743,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,744,"                arnorms = divide(arnormsReverse, arnormsSorted);",2,0,0,1,2,0,6,0,0,9,48,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,745,                int[] idxInv = inverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,33,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,746,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,0,6,2,0,10,55,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,748,                double negcovMax = (1. - negminresidualvariance) /,0,0,0,1,2,0,6,0,0,6,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,750,                if (negccov > negcovMax) {,4,1,0,1,3,0,0,0,0,5,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,753,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,754,                RealMatrix artmp = BD.multiply(arzneg);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,755,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,757,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,758,                C = C.scalarMultiply(oldFac),2,0,0,1,2,0,6,0,0,9,28,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,769,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,780,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,789,        if (ccov1 + ccovmu + negccov > 0 &&,6,3,0,0,1,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,792,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,794,            EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,0,0,4,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,795,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,796,            D = eig.getD();,6,1,0,1,2,0,0,0,0,7,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,797,            diagD = diag(D);,2,0,0,1,2,0,8,0,0,11,16,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,798,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,808,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,813,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,814,            diagD = sqrt(diagD); // D contains standard deviations now,0,0,0,1,2,0,0,0,0,3,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,815,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,817,    },0,0,0,0,1,0,4,0,0,4,1,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1109,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1110,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1111,            for (int c = 0; c < m.getColumnDimension(); c++) {,10,1,0,2,5,0,10,0,0,24,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1112,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",2,1,1,4,8,2,16,0,0,28,46,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1115,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1139,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1140,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1141,            for (int c = 0; c < m.getColumnDimension(); c++) {,8,1,0,2,5,1,6,0,0,17,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1142,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",10,4,1,3,6,0,8,0,0,39,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1145,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1153,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1154,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1155,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1156,            for (int r = 0; r < m.getRowDimension(); r++) {,12,4,1,2,5,0,4,0,0,26,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1157,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,16,0,0,19,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1159,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1161,"        return new Array2DRowRealMatrix(d, false);",6,2,1,1,2,1,0,2,0,20,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1338,        int[] inverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1339,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1340,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1342,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1350,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1351,        for (int i = 0; i < indices.length; i++) {,14,2,1,1,3,0,0,0,0,22,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1352,            reverse[i] = indices[indices.length - i - 1];,6,1,1,2,4,0,0,0,0,14,45,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1354,        return reverse;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,2974,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,267,    },6,0,0,0,1,0,0,0,0,7,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,331,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,337,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,4,2,0,2,4,1,12,0,0,20,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,233,        if (mti >= N) { // generate N words at one time,20,3,0,1,3,0,8,0,0,33,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,234,            int mtNext = mt[0];,4,0,1,1,2,0,0,0,0,6,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,235,            for (int k = 0; k < N - M; ++k) {,10,2,0,1,3,0,0,0,0,13,33,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,237,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,241,            for (int k = N - M; k < N - 1; ++k) {,12,3,0,1,3,0,0,0,0,16,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,4,0,0,33,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,6,3,1,3,6,1,4,0,0,17,49,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,5,1,4,8,0,0,0,0,20,51,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,250,            mti = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,253,        y = mt[mti++];,4,0,1,1,2,0,0,0,0,8,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,256,        y ^=  y >>> 11;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,258,        y ^= (y <<  15) & 0xefc60000;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,259,        y ^=  y >>> 18;,4,1,0,0,0,0,0,0,0,6,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,261,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,85,        final long high = ((long) next(26)) << 26;,6,0,0,3,6,0,4,0,0,11,42,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,86,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,87,        return (high | low) * 0x1.0p-52d;,2,0,0,1,2,1,0,0,0,2,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,99,        if (Double.isNaN(nextGaussian)) {,14,5,0,2,5,1,6,0,0,26,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,101,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,102,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,103,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,105,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,106,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,107,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,109,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,110,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,113,        return random;,16,6,0,0,0,1,0,0,0,23,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,67,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,18,3,0,1,2,3,4,2,0,32,95,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,4,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,82,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,84,        for (int row = 0; row < rowCount; ++row) {,12,5,0,1,3,0,0,0,0,18,42,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,98,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,99,        final int columnCount = getColumnDimension();,12,0,0,1,2,2,2,2,0,19,45,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,112,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,113,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",6,0,0,1,2,1,6,2,0,16,59,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,115,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,116,            for (int col = 0; col < columnCount; ++col) {,12,1,0,1,3,0,8,0,0,23,45,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,121,        return out;,4,0,0,0,0,1,4,0,0,9,11,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,126,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,127,        final int columnCount = getColumnDimension();,4,1,0,1,2,0,4,0,0,9,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,129,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,8,0,0,18,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,130,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,131,"                out.setEntry(row, col, getEntry(row, col) * d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,135,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,143,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,13,50,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,2,0,0,1,4,1,0,2,0,4,63,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,466,"        MatrixUtils.checkColumnIndex(this, column);",2,2,0,1,2,0,8,0,0,13,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,467,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,468,"        final RealMatrix out = createMatrix(nRows, 1);",18,3,0,1,2,1,4,2,0,31,46,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,473,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,561,        final double[] out = new double[nRows];,10,2,1,2,4,1,0,0,0,15,39,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,562,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,563,"            out[i] = getEntry(i, column);",0,0,0,2,4,0,0,0,0,6,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,566,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,598,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,611,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,873,        return walkInRowOrder(visitor);,4,1,0,1,2,1,4,0,0,9,31,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,18,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,6,2,0,0,1,0,0,0,0,9,88,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,41,        return 0;,6,1,0,0,0,1,0,0,0,7,9,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,62,        data = new double[rowDimension][columnDimension];,4,0,1,2,4,0,0,2,0,11,49,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,101,        NullArgumentException {,6,0,0,0,1,0,0,0,0,7,23,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,102,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,105,            if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,108,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,109,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,112,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,113,            if (nCols == 0) {,8,1,0,1,3,0,0,0,0,9,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,116,            for (int r = 1; r < nRows; r++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,117,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,121,            data = d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,307,        return data[row][column];,4,0,1,2,4,1,0,0,0,12,25,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,315,        data[row][column] = value;,4,0,1,2,4,0,0,0,0,11,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,339,        return (data == null) ? 0 : data.length;,2,0,0,1,2,1,0,0,0,2,40,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,10,4,1,5,10,1,0,0,0,19,66,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,415,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,416,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,419,        return visitor.end();,0,1,0,1,2,1,4,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,606,"                out.setEntry(column, row, value);",4,2,0,1,2,0,10,0,0,16,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",14,0,0,0,1,0,0,0,0,14,73,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,134,        this.prefix            = prefix;,12,2,0,0,0,0,0,0,0,15,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,136,        this.rowPrefix         = rowPrefix;,2,1,0,0,0,0,2,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,143,    },6,2,0,0,1,0,0,0,0,9,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,81,        return (rows * columns <= 4096) ?,6,2,0,1,2,1,0,0,0,8,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,339,        if (columnData == null) {,4,2,0,1,3,0,0,0,0,6,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,342,        final int nRows = columnData.length;,2,0,1,0,0,0,4,0,0,17,36,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,344,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,2,2,0,16,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,345,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,347,        return m;,10,1,0,0,0,1,0,0,0,12,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,389,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,2,0,6,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,407,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,418,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,506,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,511,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,2,3,0,3,7,0,8,0,0,13,61,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,528,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,0,0,3,7,0,8,0,0,10,59,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,289,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,290,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,294,                sum += value * value;,0,0,0,0,0,0,6,0,0,6,21,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,295,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,916,        public FitnessFunction() {,2,0,0,1,3,1,0,0,0,3,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,917,            valueRange = 1.0;,2,0,0,0,0,0,0,0,0,3,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,918,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,919,        },4,0,1,0,1,0,0,0,0,9,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,926,            if (boundaries == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,942,            return boundaries != null && isRepairMode ?,14,3,0,0,0,1,0,0,0,18,43,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,952,            if (boundaries == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,969,            if (boundaries != null && isRepairMode) {,4,1,0,1,3,0,0,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,978,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1006,            this.valueRange = valueRange;,4,0,0,0,0,0,0,0,0,5,29,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1007,        },2,1,0,0,1,0,8,0,0,11,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,123,            lowerBound = new double[dim];,0,0,0,1,2,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,124,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,125,                lowerBound[i] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,131,            upperBound = new double[dim];,0,0,0,1,2,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,132,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,133,                upperBound[i] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,9,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,72,        return evaluations.getMaximalCount();,0,0,0,1,2,1,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,82,        return checker;,6,0,0,0,0,1,0,0,0,7,15,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,95,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,98,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,99,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,155,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,358,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,16,1,0,2,4,0,4,2,0,25,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,359,        final FitnessFunction fitfun = new FitnessFunction();,4,1,1,1,2,1,0,4,0,14,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,360,        final double[] guess = fitfun.encode(getStartPoint());,2,0,0,3,6,1,6,0,0,9,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,362,        dimension = guess.length;,6,0,0,0,0,0,0,0,0,7,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,363,        initializeCMA(guess);,2,0,0,1,2,0,4,0,0,6,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,364,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,365,        double bestValue = fitfun.value(guess);,12,1,0,1,2,0,6,2,0,23,39,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,366,"        push(fitnessHistory, bestValue);",0,0,0,1,2,0,0,0,0,3,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,367,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",2,0,0,1,3,0,2,4,0,8,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,369,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,374,            for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,376,"                RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,377,"                RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,378,                double[] fitness = new double[lambda];,2,0,1,2,4,0,0,0,0,4,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,380,                for (int k = 0; k < lambda; k++) {,8,1,0,1,3,0,0,0,0,10,34,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,381,                    RealMatrix arxk = null;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,382,                    for (int i = 0; i < checkFeasableCount+1; i++) {,8,2,0,1,3,0,0,0,0,11,48,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,383,                        if (diagonalOnly <= 0) {,4,2,0,1,3,0,4,0,0,10,24,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,390,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,0,0,0,3,7,0,0,0,0,10,70,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,396,"                    copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,398,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,401,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,404,                int[] arindex = sortedIndices(fitness);,4,0,0,2,4,1,4,0,0,9,39,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,406,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),0,0,0,2,4,0,0,0,0,6,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,407,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,72,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,408,                xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,409,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,72,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,410,                RealMatrix zmean = bestArz.multiply(weights);,2,0,0,1,2,0,6,2,0,10,45,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,411,"                boolean hsig = updateEvolutionPaths(zmean, xold);",4,0,0,1,2,1,6,0,0,11,49,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,412,                if (diagonalOnly <= 0) {,8,2,0,1,3,0,0,0,0,11,24,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,418,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",10,4,0,3,6,0,8,0,0,23,61,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,419,                double bestFitness = fitness[arindex[0]];,2,0,1,2,4,0,0,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,420,                double worstFitness = fitness[arindex[arindex.length-1]];,0,0,0,2,4,0,0,0,0,6,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,421,                if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,422,                    bestValue = bestFitness;,4,0,0,0,0,0,0,0,0,5,24,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,423,                    lastResult = optimum;,4,0,0,0,0,0,0,0,0,5,21,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,424,                    optimum = new PointValuePair(,2,0,0,0,1,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,427,                    if (getConvergenceChecker() != null && lastResult != null) {,10,4,0,2,5,1,14,0,0,31,60,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,428,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",0,0,0,3,7,0,10,0,0,10,73,12,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,435,                if (stopFitness != 0) { // only if stopFitness is defined,2,1,0,1,3,0,0,0,0,3,57,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,440,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,441,                double[] pcCol = pc.getColumn(0);,2,0,0,2,4,0,4,0,0,6,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,442,                for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,443,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",4,2,1,6,13,0,8,0,0,22,68,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,444,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,450,                for (int i = 0; i < dimension; i++) {,2,0,0,1,3,1,0,0,0,3,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,451,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,455,                double historyBest = min(fitnessHistory);,2,0,0,1,2,0,4,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,456,                double historyWorst = max(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,457,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",4,3,0,1,3,0,18,0,0,25,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,461,                if (iterations > fitnessHistory.length &&,0,0,0,0,1,0,0,0,0,1,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,466,                if (max(diagD)/min(diagD) > 1e7) {,0,2,0,3,7,0,8,0,0,10,34,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,470,                if (getConvergenceChecker() != null) {,2,1,0,2,5,2,2,0,0,8,38,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,471,                    PointValuePair current =,4,1,0,0,0,0,4,2,0,11,24,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,474,                    if (lastResult != null &&,2,2,0,0,1,0,0,0,0,4,25,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,478,                    lastResult = current;,4,0,0,0,0,0,0,0,0,5,21,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,481,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,0,0,0,5,11,0,0,0,0,16,58,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,484,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,489,"                push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,490,                fitfun.setValueRange(worstFitness-bestFitness);,4,1,0,1,2,0,4,0,0,9,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,491,                if (generateStatistics) {,4,3,1,1,3,0,0,0,0,15,25,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,498,        return optimum;,4,2,0,0,0,1,0,0,0,6,15,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,556,            boundaries = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,574,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,36,4,1,1,3,1,4,4,0,56,31,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,2,0,2,0,10,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,66,        msgPatterns    = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,46,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,8,5,1,2,4,1,0,0,0,24,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },2,1,0,0,1,0,0,0,0,3,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,10,1,0,1,2,0,6,0,0,19,25,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,1,0,2,4,1,10,0,0,20,46,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,368,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,369,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,370,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,1,1,1,2,0,0,0,0,11,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,3,0,1,2,0,4,0,0,11,54,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,5,0,2,4,0,0,0,0,11,87,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",10,3,0,1,2,3,0,0,0,17,131,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,1,1,2,0,0,0,0,18,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,4,0,0,4,55,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,0,0,0,5,78,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,2,263,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",8,1,0,1,2,0,0,0,0,10,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,0,5,10,0,6,0,0,11,71,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,8,0,0,8,51,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,1,0,3,6,0,0,0,0,10,81,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,2,0,1,2,0,8,0,0,18,53,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,102,"    EVALUATION(""evaluation""), /* keep */",4,0,0,1,2,3,0,6,0,14,36,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,1,0,0,0,6,175,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,4,0,0,10,73,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,4,0,0,4,62,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",6,1,0,1,2,0,2,0,0,10,54,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",4,1,1,4,8,1,4,0,0,15,56,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",10,1,0,2,4,0,0,0,0,13,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,0,0,0,0,5,59,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,2,0,3,67,10,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,129,    @Deprecated,4,0,0,0,0,0,0,0,0,5,11,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,131,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",10,3,0,2,4,1,0,0,0,15,103,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,132,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",10,1,0,2,4,0,0,0,0,12,98,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,133,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,1,0,3,6,0,0,0,0,3,75,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,134,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,135,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",4,0,0,3,6,0,0,0,0,6,105,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,136,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,137,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",2,0,0,3,6,0,0,0,0,3,117,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,138,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,139,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,140,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",4,0,0,1,2,0,0,0,0,6,76,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,141,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,142,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,143,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,144,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,145,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,146,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,147,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,148,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",4,0,0,3,6,0,0,0,0,6,124,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,149,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",4,5,1,26,52,1,4,0,0,30,165,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,150,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,1,1,1,2,0,4,0,0,11,41,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,151,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",4,0,0,4,8,0,0,0,0,5,56,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,152,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,153,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",4,1,0,1,2,0,0,0,0,6,101,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,154,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,155,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,156,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,157,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,158,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,159,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,6,0,0,9,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,160,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,161,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",14,5,0,4,8,0,0,0,0,20,132,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,162,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,163,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,164,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,165,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,166,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",14,2,0,2,4,0,0,0,0,18,92,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,167,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,168,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,169,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,170,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,171,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,172,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,173,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,174,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,175,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,176,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,177,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,178,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",10,1,0,1,2,0,0,0,0,13,100,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,179,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",4,2,0,2,4,0,0,0,0,6,98,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,180,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,181,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,182,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,183,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,6,0,0,12,85,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,184,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",4,1,0,4,8,0,6,0,0,12,49,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,185,"    NORM(""Norm ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,30,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,186,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,187,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,188,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,189,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,190,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,191,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,192,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,193,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,194,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,195,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,73,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0,0,0,4,8,0,0,0,0,12,71,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",6,1,0,3,6,0,9,0,0,17,77,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",8,0,1,3,6,1,18,2,0,35,66,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,205,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,208,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,210,"    MEAN(""mean ({0})""), /* keep */",6,0,1,3,6,0,4,0,0,16,30,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,0,0,3,6,0,6,2,0,16,69,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0,0,0,3,6,0,0,0,0,9,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,                int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);",16,6,0,1,2,4,26,4,0,58,48,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,                int[] idxInv = inverse(idxnorms);,8,1,1,2,4,1,4,0,0,18,33,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",0,0,0,1,2,0,0,0,0,3,55,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,                double negcovMax = (1. - negminresidualvariance) /,8,2,0,1,2,1,12,2,0,25,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,                if (negccov > negcovMax) {,6,1,0,1,3,1,0,0,0,8,26,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,                RealMatrix artmp = BD.multiply(arzneg);,6,0,0,1,2,0,14,2,0,22,39,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,                C = C.scalarMultiply(oldFac),12,0,0,1,2,1,6,0,0,20,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,            } else {,2,1,0,0,2,0,0,0,0,3,8,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,    },2,0,1,0,1,0,0,0,0,7,1,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,        if (ccov1 + ccovmu + negccov > 0 &&,2,0,0,0,1,0,0,0,0,2,35,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,            EigenDecomposition eig = new EigenDecomposition(C);,10,1,0,1,2,0,0,4,0,16,51,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",8,0,0,1,2,0,4,0,0,15,66,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,            D = eig.getD();,0,0,0,1,2,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,            diagD = diag(D);,10,2,0,1,2,1,6,0,0,19,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,            if (min(diagD) <= 0) {,2,1,0,2,5,1,6,0,0,10,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,            if (max(diagD) > 1e14 * min(diagD)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,            diagC = diag(C);,4,0,0,1,2,0,4,0,0,9,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,            diagD = sqrt(diagD); // D contains standard deviations now,6,0,0,1,2,0,4,0,0,12,58,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,        for (int r = 0; r < m.getRowDimension(); r++) {,6,2,0,2,5,0,8,0,0,19,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,8,0,0,16,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,        for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,            for (int r = 0; r < m.getRowDimension(); r++) {,18,2,0,2,5,1,4,0,0,27,47,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,            d[0][c] = sum;,2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,        int[] inverse = new int[indices.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,            inverse[indices[i]] = i;,2,0,1,2,4,0,4,0,0,13,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,            reverse[i] = indices[indices.length - i - 1];,0,0,0,2,4,0,0,0,0,6,45,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,        final int nRows = getRowDimension();,4,0,0,1,2,0,0,0,0,4,36,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);",2,0,1,1,2,0,6,0,0,13,37,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);",0,0,0,2,4,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,        secondary = new double[m - 1];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,6,1,1,1,2,1,6,0,0,20,45,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,131,        return cachedQt;,0,0,0,0,0,1,0,0,0,1,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,175,        return main;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,        return secondary;,4,0,0,0,0,4,4,2,0,13,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,        final int m = householderVectors.length;,2,0,1,0,0,0,0,0,0,5,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,    public ArrayRealVector(double[] d) {,12,2,0,2,5,1,0,0,0,16,36,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,        data = d.clone();,2,0,0,1,2,3,0,0,0,5,17,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,130,        if (data == null ||,0,0,0,0,1,0,0,0,0,1,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);",8,2,1,2,4,0,6,0,0,21,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,        return m;,4,0,0,0,0,4,0,0,0,7,9,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,2,1,0,1,0,0,0,0,17,75,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,        copyIn(d);,2,0,0,1,2,0,4,0,0,7,10,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,252,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,277,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,279,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,            data = new double[subMatrix.length][nCols];,2,0,1,2,4,0,0,0,0,7,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,            for (int i = 0; i < data.length; ++i) {,2,1,1,1,3,0,0,0,0,10,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,294,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,6,0,0,11,68,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,527,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,543,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,544,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,115,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,    private byte maxIter = 30;,2,0,1,0,0,1,0,2,0,9,26,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,0,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,            findEigenVectors(transformer.getQ().getData());,0,0,1,3,6,0,11,0,0,24,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,        final int rows = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,193,        final int columns = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,195,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,            for (int j = i + 1; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,224,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,        if (cachedD == null) {,2,1,1,1,3,0,0,0,0,7,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,12,1,0,1,3,3,0,0,0,17,50,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",2,2,1,3,8,0,6,0,0,15,71,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,259,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,555,        transformer = new TriDiagonalTransformer(matrix);,6,0,0,1,2,3,0,2,0,12,49,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,558,    },6,0,0,0,1,0,4,0,0,11,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,567,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,568,        final int n = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,570,        imagEigenvalues = new double[n];,2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,572,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,577,        e[n - 1] = 0;,6,1,1,1,2,0,0,0,0,10,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,580,        double maxAbsoluteValue = 0;,8,4,0,0,0,0,0,0,0,12,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,581,        for (int i = 0; i < n; i++) {,4,0,0,1,3,0,0,0,0,4,29,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,0,0,3,7,0,0,0,0,4,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,4,0,1,3,7,1,0,0,0,7,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,590,        if (maxAbsoluteValue != 0) {,6,2,0,1,3,1,0,0,0,9,28,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,591,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,79,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,8,2,1,3,7,0,16,0,0,31,65,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,601,        for (int j = 0; j < n; j++) {,10,1,0,1,3,0,6,2,0,20,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,612,                if (m != j) {,10,2,0,1,3,0,0,0,0,13,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,672,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,675,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,681,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,693,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,8,3,1,2,4,0,4,0,0,23,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,700,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,4,0,0,4,30,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,709,        for (int i = 0; i < n; i++) {,12,2,1,1,3,0,4,0,0,22,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,710,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,106,"                            final String separator, final NumberFormat format) {",6,0,0,0,2,3,4,4,0,17,52,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,108,        this.suffix      = suffix;,10,0,0,0,0,0,4,0,0,16,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,331,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,337,        if (yInt < 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,10,2,0,1,2,1,4,0,0,17,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,16,0,0,21,55,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,264,        if (o == null) {,10,1,1,1,3,0,8,2,0,28,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,352,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,6,0,0,2,4,0,4,0,0,11,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,353,        final FitnessFunction fitfun = new FitnessFunction();,0,0,0,1,2,0,0,0,0,3,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,354,        final double[] guess = fitfun.encode(getStartPoint());,2,0,0,3,6,0,16,0,0,19,54,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,356,        dimension = guess.length;,6,0,0,0,0,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,357,        initializeCMA(guess);,0,0,0,1,2,0,4,0,0,4,21,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,358,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,359,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,360,"        push(fitnessHistory, bestValue);",2,0,0,1,2,0,6,0,0,10,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,361,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",0,0,0,1,3,0,0,0,0,4,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,363,        PointValuePair lastResult = null;,2,0,0,0,0,0,0,2,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,368,            for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,370,"                RealMatrix arz = randn1(dimension, lambda);",2,0,0,1,2,0,6,2,0,10,43,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,371,"                RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,372,                double[] fitness = new double[lambda];,2,0,1,2,4,0,0,0,0,4,38,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,374,                for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,375,                    RealMatrix arxk = null;,2,0,0,0,0,0,0,2,0,4,23,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,376,                    for (int i = 0; i < checkFeasableCount+1; i++) {,8,2,0,1,3,0,0,0,0,11,48,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,377,                        if (diagonalOnly <= 0) {,2,1,0,1,3,0,0,0,0,3,24,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,384,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,6,2,0,3,7,0,8,0,0,16,70,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,390,"                    copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,392,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,1,3,6,0,10,0,0,15,63,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,395,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,398,                int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,39,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,400,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,0,0,2,0,6,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,401,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",2,0,0,2,4,0,12,2,0,16,72,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,402,                xmean = bestArx.multiply(weights);,2,0,0,1,2,0,12,0,0,15,34,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,403,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",4,0,0,2,4,0,12,2,0,19,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,404,                RealMatrix zmean = bestArz.multiply(weights);,2,0,0,1,2,0,0,0,0,2,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,405,"                boolean hsig = updateEvolutionPaths(zmean, xold);",18,0,0,1,2,0,12,0,0,31,49,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,406,                if (diagonalOnly <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,412,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",10,4,0,3,6,0,8,0,0,23,61,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,413,                double bestFitness = fitness[arindex[0]];,2,0,1,2,4,0,0,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,414,                double worstFitness = fitness[arindex[arindex.length-1]];,4,0,1,2,4,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,415,                if (bestValue > bestFitness) {,6,1,0,1,3,0,2,0,0,10,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,416,                    bestValue = bestFitness;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,417,                    lastResult = optimum;,16,5,0,0,0,0,4,0,0,26,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,418,                    optimum = new PointValuePair(,8,1,1,0,1,0,4,2,0,25,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,421,                    if (getConvergenceChecker() != null && lastResult != null) {,0,0,0,2,5,0,0,0,0,7,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,422,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",2,0,0,3,7,0,10,0,0,12,73,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,429,                if (stopFitness != 0) { // only if stopFitness is defined,2,1,0,1,3,0,0,0,0,3,57,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,434,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,435,                double[] pcCol = pc.getColumn(0);,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,436,                for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,437,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",0,0,0,6,13,0,0,0,0,19,68,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,438,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,444,                for (int i = 0; i < dimension; i++) {,10,1,1,1,3,0,0,4,0,18,37,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,445,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,4,2,1,2,5,0,0,0,0,10,38,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,449,                double historyBest = min(fitnessHistory);,2,0,0,1,2,0,4,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,450,                double historyWorst = max(fitnessHistory);,8,0,0,1,2,0,10,0,0,19,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,451,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",4,2,1,1,3,0,0,0,0,10,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,455,                if (iterations > fitnessHistory.length &&,6,2,0,0,1,0,0,0,0,8,41,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,460,                if (max(diagD)/min(diagD) > 1e7) {,0,2,0,3,7,0,8,0,0,10,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,464,                if (getConvergenceChecker() != null) {,0,1,0,2,5,0,2,0,0,4,38,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,465,                    PointValuePair current =,12,1,0,0,0,0,0,2,0,16,24,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,468,                    if (lastResult != null &&,0,0,0,0,1,0,0,0,0,1,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,472,                    lastResult = current;,4,0,0,0,0,0,0,0,0,5,21,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,475,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,478,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,483,"                push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,484,                fitfun.setValueRange(worstFitness-bestFitness);,4,1,0,1,2,0,4,0,0,9,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,485,                if (generateStatistics) {,6,1,1,1,3,0,0,0,0,12,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,492,        return optimum;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,553,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,561,        if (lambda <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,565,        double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,0,0,0,0,6,52,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,566,        for (int i = 0; i < guess.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,567,            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];,4,2,1,5,10,1,0,0,0,15,87,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,568,            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;,4,2,1,5,10,0,0,0,0,15,74,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,570,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",8,0,0,1,2,0,0,8,0,18,65,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,571,        sigma = max(insigma); // overall standard deviation,6,1,0,1,2,0,0,0,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,574,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,575,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,576,        stopTolFun = 1e-12;,2,0,0,0,0,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,577,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,580,        mu = lambda / 2; // number of parents/points for recombination,4,1,0,0,0,0,0,0,0,6,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,581,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,582,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,72,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,583,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,584,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,585,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,586,"            double w = weights.getEntry(i, 0);",2,1,0,1,2,0,10,0,0,13,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,587,            sumw += w;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,588,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,590,        weights = weights.scalarMultiply(1. / sumw);,0,0,0,1,2,0,0,0,0,3,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,591,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,594,        cc = (4. + mueff / dimension) /,12,4,0,1,2,0,0,0,0,18,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,596,        cs = (mueff + 2.) / (dimension + mueff + 3.);,12,3,0,2,4,0,8,0,0,24,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,597,"        damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /",10,8,0,1,5,1,8,0,0,28,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,602,        ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);,8,5,0,3,6,0,0,0,0,14,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,603,"        ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /",48,19,0,1,3,0,4,0,0,73,61,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,605,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",6,3,0,2,4,0,10,0,0,20,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,606,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",0,0,0,2,4,0,0,0,0,6,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,607,        chiN = Math.sqrt(dimension) *,6,1,0,1,2,1,8,0,0,17,29,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,610,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective,8,1,0,1,2,1,6,0,0,17,63,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,612,        diagD = insigma.scalarMultiply(1. / sigma);,0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,613,        diagC = square(diagD);,2,0,0,1,2,0,4,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,614,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",18,9,0,1,2,0,4,0,0,34,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,615,"        ps = zeros(dimension, 1); // B defines the coordinate system",0,0,0,1,2,0,0,0,0,3,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,616,        normps = ps.getFrobeniusNorm();,8,4,1,1,2,1,0,0,0,21,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,618,"        B = eye(dimension, dimension);",2,0,0,1,2,0,6,0,0,9,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,619,"        D = ones(dimension, 1); // diagonal D defines the scaling",4,0,0,1,2,0,4,0,0,10,57,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,620,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",0,0,0,3,6,0,4,0,0,4,55,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,621,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,2,1,0,5,10,0,0,0,0,3,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,622,        historySize = 10 + (int) (3. * 10. * dimension / lambda);,6,3,0,2,4,0,0,0,0,10,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,623,        fitnessHistory = new double[historySize]; // history of fitness values,2,0,1,1,2,0,0,0,0,5,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,624,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,625,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,627,    },2,0,0,0,1,0,0,0,0,3,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,638,        ps = ps.scalarMultiply(1. - cs).add(,6,1,0,1,3,0,6,0,0,13,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,641,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,642,        boolean hsig = normps /,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,645,        pc = pc.scalarMultiply(1. - cc);,4,1,0,1,2,0,4,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,646,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,647,            pc = pc.add(xmean.subtract(xold).scalarMultiply(,4,1,1,1,4,0,0,0,0,9,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,650,        return hsig;,10,1,0,0,0,1,0,0,0,13,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,805,        for (int i = vals.length-1; i > 0; i--) {,2,0,1,1,3,0,0,0,0,7,41,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,806,            vals[i] = vals[i-1];,26,6,1,2,4,0,0,0,0,34,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,808,        vals[0] = val;,0,0,0,1,2,0,0,0,0,3,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,809,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,818,        DoubleIndex[] dis = new DoubleIndex[doubles.length];,6,0,0,2,4,0,4,4,0,14,52,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,819,        for (int i = 0; i < doubles.length; i++) {,0,0,0,1,3,0,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,820,"            dis[i] = new DoubleIndex(doubles[i], i);",0,0,0,3,6,0,0,0,0,9,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,822,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,823,        int[] indices = new int[doubles.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,824,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,825,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,827,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1025,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,4,0,0,6,12,3,8,0,0,15,71,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1026,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,1,2,5,0,4,0,0,17,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1027,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1028,"                d[r][c] = Math.log(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,37,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1031,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1040,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1041,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1042,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1043,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",6,1,1,4,8,0,12,0,0,26,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1046,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1054,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,1,6,12,0,0,0,0,6,71,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1055,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1056,            for (int c = 0; c < m.getColumnDimension(); c++) {,40,11,0,2,5,1,4,0,0,58,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1057,"                double e = m.getEntry(r, c);",18,5,0,1,2,0,8,0,0,32,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1058,                d[r][c] = e * e;,4,1,1,2,4,0,0,0,0,12,16,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1061,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1070,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1071,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1072,            for (int c = 0; c < m.getColumnDimension(); c++) {,16,2,0,2,5,0,4,0,0,24,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1073,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",6,1,0,4,8,1,0,0,0,8,46,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1076,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1100,        double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,0,4,0,0,10,60,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1101,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1102,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1103,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,1,4,8,0,6,0,0,17,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1106,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,2,6,0,13,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1146,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1147,            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,6,0,1,6,12,1,10,2,0,23,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1148,            for (int i = 0; i < m.getRowDimension(); i++) {,10,1,0,2,5,1,4,0,0,17,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1149,"                d[i][i] = m.getEntry(i, 0);",0,0,1,3,6,0,6,0,0,13,27,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1151,"            return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1170,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1171,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",4,1,0,2,4,0,4,0,0,9,43,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1173,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1181,        double[][] d = new double[n][m];,2,0,1,4,8,0,0,2,0,9,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1182,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,2,0,12,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1183,"            Arrays.fill(d[r], 1.0);",12,2,0,2,4,1,6,2,0,24,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1185,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1194,        double[][] d = new double[n][m];,2,0,1,4,8,0,12,0,0,18,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1195,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,8,0,0,18,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1196,            if (r < m) {,4,1,0,1,3,0,0,0,0,5,12,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1197,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1200,"        return new Array2DRowRealMatrix(d, false);",8,1,0,1,2,1,0,0,0,10,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1209,"        return new Array2DRowRealMatrix(n, m);",8,1,0,1,2,1,0,2,0,11,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1219,        int rd = mat.getRowDimension();,2,0,0,1,2,0,4,0,0,6,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1220,        int cd = mat.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,34,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1221,        double[][] d = new double[n * rd][m * cd];,12,2,0,4,8,0,0,0,0,15,42,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1222,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1223,            for (int c = 0; c < m * cd; c++) {,12,2,1,1,3,1,4,4,0,33,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1224,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1227,"        return new Array2DRowRealMatrix(d, false);",4,2,0,1,2,1,10,2,0,20,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1237,        int size = (int) ((end - start) / step + 1);,8,3,0,3,6,0,0,0,0,11,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1238,        double[][] d = new double[size][1];,2,0,1,4,8,0,0,0,0,4,35,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1239,        double value = start;,8,0,0,0,0,0,0,0,0,9,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1240,        for (int r = 0; r < size; r++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1241,            d[r][0] = value;,0,0,0,2,4,0,0,2,0,2,16,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1242,            value += step;,10,1,0,0,0,0,0,0,0,13,14,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1244,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1252,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1253,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1254,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,8,0,0,16,50,5,0.06667,0,0,-1
