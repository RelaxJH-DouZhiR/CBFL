dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,8,3,0,1,2,0,0,0,0,12,37,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,        if (q2 < maxDenominator) {,6,1,0,1,3,0,0,0,0,8,26,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,    },8,2,0,0,1,0,0,0,0,10,1,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,34,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,        double r0 = value;,2,0,0,0,0,0,0,0,0,3,18,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,        long a0 = (long) FastMath.floor(r0);,2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,        if (a0 > overflow) {,4,2,0,1,3,0,10,0,0,17,20,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,        long p0 = 1;,12,2,0,0,0,2,2,0,0,18,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,        long q0 = 0;,4,0,1,0,0,0,6,2,0,15,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,        long p1 = a0;,16,2,1,0,0,0,2,0,0,26,13,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,        long q1 = 1;,6,0,0,0,0,0,0,0,0,7,12,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,295,        int n = 0;,6,0,0,0,0,0,0,0,0,8,10,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,296,        boolean stop = false;,0,0,0,0,0,0,0,0,0,0,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,298,            ++n;,14,1,0,0,0,3,4,0,0,23,4,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,299,            final double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,34,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,300,            final long a1 = (long) FastMath.floor(r1);,0,0,0,2,4,0,0,0,0,6,42,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,301,            p2 = (a1 * p1) + p0;,10,2,0,1,2,3,0,0,0,16,20,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,302,            q2 = (a1 * q1) + q0;,0,0,0,1,2,0,0,0,0,3,20,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,303,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,309,            final double convergent = (double) p2 / (double) q2;,2,0,0,2,4,0,0,0,0,3,52,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,310,            if ((n < maxIterations) &&,4,1,1,1,3,0,6,0,0,15,26,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,313,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,314,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,315,                q0 = q1;,6,1,0,0,0,0,0,0,0,7,8,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,316,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,317,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,318,                r0 = r1;,2,0,1,0,0,0,2,0,0,9,8,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,320,                stop = true;,6,0,0,0,0,0,0,0,0,9,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,322,        } while (!stop);,0,0,0,1,3,0,0,0,0,4,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,324,        if (n >= maxIterations) {,2,0,0,1,3,0,2,0,0,5,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3352,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.07273,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,768,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,801,        return numerator.intValue();,0,0,0,1,2,1,4,0,0,4,28,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3338,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3342,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,14,4,0,1,3,0,0,0,0,20,46,3,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3346,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3347,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3351,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3355,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3024,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,0,0,0,2,4,1,0,0,0,7,83,4,0.0404,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,220,                p0 = p1;,10,1,0,0,0,0,2,0,0,15,8,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,221,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,222,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,223,                q1 = q2;,8,0,0,0,0,2,6,0,0,17,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,224,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,225,                r0 = r1;,14,4,0,0,0,0,6,0,0,26,8,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,366,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,374,        return numerator;,2,1,0,0,0,1,0,0,0,3,17,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,370,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,371,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,372,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,8,2,0,13,41,9,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,1,0,1,2,1,4,0,0,13,100,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,1,2,4,0,0,0,0,11,87,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",6,1,0,1,2,0,0,2,0,9,84,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,8,0,0,11,78,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,46,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,75,"    CONSTRAINT(""constraint""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,76,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",12,2,0,2,4,0,0,0,0,16,112,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,77,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",18,1,1,5,10,2,0,6,0,34,290,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,79,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",6,0,0,3,6,0,2,0,0,9,263,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,80,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,81,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,1,0,1,2,0,0,0,0,7,72,9,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,82,"    CROSSOVER_RATE(""crossover rate ({0})""),",4,0,0,3,6,3,0,0,0,8,39,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,83,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0,0,0,3,6,0,0,0,0,9,109,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,84,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,85,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,86,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,87,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,88,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",18,2,0,3,6,2,0,2,0,25,52,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,89,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,90,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,91,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,92,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0,0,0,2,4,0,0,0,0,6,88,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,93,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,94,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,95,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,1,0,1,2,0,4,0,0,8,64,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,96,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,97,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,98,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,6,0,0,9,65,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,99,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,100,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,101,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,102,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,103,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,104,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,105,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,106,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,1,0,12,24,0,0,0,0,7,175,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,107,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",4,0,0,3,6,0,0,0,0,5,85,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,108,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,109,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,110,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,111,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,112,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,113,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,114,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,115,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,116,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,117,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0,0,0,2,4,0,0,0,0,6,62,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,118,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,119,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,120,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,4,0,0,7,64,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,121,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,122,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,123,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,124,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,125,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,126,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,127,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,128,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",4,0,0,3,6,0,0,0,0,6,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,129,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,130,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,132,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,133,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,134,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,135,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,136,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,137,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,138,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",0,0,0,3,6,0,0,0,0,9,117,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,139,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,140,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",4,0,0,2,4,3,0,0,0,8,50,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,141,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,142,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,143,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,144,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,145,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",8,1,0,3,6,1,0,0,0,11,72,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,146,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",4,0,0,2,4,0,0,0,0,6,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,147,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,148,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,149,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,150,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",10,2,0,26,52,0,0,0,0,14,165,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,151,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,6,0,0,9,41,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,152,"    ITERATIONS(""iterations""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,153,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,154,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,155,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,156,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,157,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,158,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0,0,0,5,10,0,0,0,0,15,111,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,159,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,160,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,161,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,162,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",4,0,0,3,6,0,0,0,0,5,71,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,163,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,164,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,165,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,166,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,167,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,168,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0,0,0,2,4,0,0,0,0,6,92,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,169,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,1,2,4,0,0,0,0,8,55,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,170,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,171,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,172,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0,0,0,3,6,0,0,0,0,9,79,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,173,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,174,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,175,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",14,2,0,3,6,0,0,0,0,18,82,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,176,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,177,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,178,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,179,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,180,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,181,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,182,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",12,8,0,2,4,0,0,0,0,20,81,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,183,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,184,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,185,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,186,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,187,"    NORM(""Norm ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,188,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,189,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,190,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",10,2,0,5,10,0,0,0,0,13,93,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,191,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,192,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,4,0,0,7,88,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,193,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,194,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,195,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,161,        return numberOfSuccesses;,6,0,0,0,0,1,0,0,0,7,25,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,170,        return populationSize;,0,0,0,0,0,1,0,0,0,1,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,179,        return sampleSize;,2,0,0,0,0,1,0,0,0,2,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,2,0,1,1,2,1,4,0,0,13,77,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,128,    private static final double LN_HI_PREC_COEF[][] = {,12,4,0,2,5,1,0,0,0,18,51,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,141,    private static final double SINE_TABLE_A[] =,2,0,1,1,2,3,0,0,0,12,44,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,0,4,0,0,6,126,9,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3429,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3497,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,63,"        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);",0,0,0,2,4,0,0,0,0,6,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,84,        super(rng);,0,0,0,1,2,0,0,0,0,3,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,45,    private double numericalVariance = Double.NaN;,0,0,0,0,0,0,0,0,0,0,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,47,    private boolean numericalVarianceIsCalculated = false;,12,1,0,0,0,3,0,0,0,18,54,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,86,        if (populationSize <= 0) {,2,1,0,1,3,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,90,        if (numberOfSuccesses < 0) {,2,0,0,1,3,3,0,0,0,5,28,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,94,        if (sampleSize < 0) {,2,1,1,1,3,0,0,0,0,8,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,99,        if (numberOfSuccesses > populationSize) {,2,1,0,1,3,0,0,0,0,3,41,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,103,        if (sampleSize > populationSize) {,4,1,0,1,3,0,0,0,0,5,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,108,        this.numberOfSuccesses = numberOfSuccesses;,4,0,0,0,0,0,0,0,0,5,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,109,        this.populationSize = populationSize;,4,0,0,0,0,0,0,0,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,110,        this.sampleSize = sampleSize;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,111,    },18,6,0,0,1,3,10,0,0,38,1,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,47,    @Deprecated,14,4,0,0,0,0,10,0,0,29,11,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,71,    protected AbstractIntegerDistribution(RandomGenerator rng) {,2,1,0,1,3,0,4,0,0,7,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,72,        random = rng;,4,1,1,0,0,0,10,0,0,20,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,73,    },4,1,1,0,1,1,0,0,0,10,1,12,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,100,        final int r = (k + w - 1) / w;,14,4,0,1,2,3,0,0,0,21,30,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,101,        this.v      = new int[r];,4,0,1,1,2,0,0,0,0,7,25,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,102,        this.index  = 0;,2,0,1,0,0,0,0,0,0,8,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,108,        i1   = new int[r];,4,0,0,1,2,1,0,4,0,9,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,109,        i2   = new int[r];,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,111,        for (int j = 0; j < r; ++j) {,14,2,0,1,3,0,0,0,0,17,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,115,            i2[j]   = (j + m2)    % r;,14,4,1,2,4,3,4,0,0,36,26,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,122,    },2,1,0,0,1,0,0,0,0,3,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,156,            return;,12,1,0,0,0,4,0,0,0,17,7,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,0,0,2,4,0,18,0,0,29,65,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,161,        if (seed.length < v.length) {,8,1,0,1,3,0,0,0,0,9,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,1,1,3,0,0,0,0,25,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,1,0,7,14,1,8,0,0,16,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,41,        nextGaussian = Double.NaN;,14,1,1,0,0,0,0,2,0,23,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,195,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,196,    },0,0,0,0,1,0,6,0,0,6,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,132,    public RandomDataGenerator() {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,119,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,122,    private RandomGenerator secRand = null;,2,0,0,0,0,1,0,2,0,5,39,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,114,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,115,        delegate = new RandomDataGenerator();,2,0,0,1,2,0,0,2,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6134,    private FastMathLiteralArrays() {},2,0,0,2,4,1,0,0,0,3,34,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,29,    private static final double[] EXP_INT_A = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,1535,    private static final double[] EXP_INT_B = new double[] {,6,0,0,2,5,4,0,0,0,10,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,5103,    private static final double[][] LN_MANT = new double[][] {,2,0,0,4,9,3,0,0,0,5,58,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6142,        return EXP_INT_A.clone();,2,0,0,1,2,1,0,0,0,2,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6166,        return EXP_FRAC_B.clone();,4,1,0,1,2,2,4,0,0,10,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3723,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3755,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3756,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3758,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3826,        CodyWaite(double xa) {,4,0,0,1,3,0,0,0,0,4,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3829,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3835,                double a = -k * 1.570796251296997;,8,1,0,0,0,0,0,0,0,10,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3836,                remA = xa + a;,14,3,0,0,0,0,4,0,0,24,14,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3837,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3839,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3840,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3841,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3842,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3844,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3845,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3846,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3847,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3849,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3850,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3856,                --k;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3857,            },2,0,0,0,1,0,6,0,0,9,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3859,            this.finalK = k;,8,0,0,0,0,0,0,4,0,14,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3860,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3861,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3862,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3868,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3874,            return finalRemA;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3880,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3795,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3809,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3811,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,359,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,371,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,372,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,1,0,0,0,2,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,374,        long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back,4,0,0,1,2,0,6,0,0,10,96,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,375,        xl = xl & MASK_30BITS; // Drop low order bits,2,0,0,0,0,0,0,0,0,3,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,376,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,393,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0,0,0,2,4,0,0,0,0,6,42,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",4,0,1,1,2,0,0,0,0,9,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",10,0,1,1,2,0,0,0,0,15,67,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",0,0,0,3,6,0,0,0,0,9,57,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,0,0,0,1,2,0,0,0,0,3,49,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,0,0,0,1,2,0,0,0,0,3,53,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,0,0,0,1,2,1,0,0,0,4,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));",4,0,1,2,4,0,6,0,0,15,31,3,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,        if (Double.isInfinite(lower) && (lower < 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,                   final Object attribute) {,0,0,0,0,2,0,0,0,0,2,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,        this.cut       = cut;,8,0,0,0,0,0,6,0,0,17,21,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,        this.plus      = plus;,2,0,0,0,0,0,0,0,0,2,22,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,        this.minus     = minus;,4,0,0,0,0,0,8,0,0,12,23,9,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,        this.parent    = null;,2,0,0,0,0,0,0,0,0,4,22,6,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,        this.attribute = attribute;,16,1,0,0,0,0,8,0,0,28,27,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,        plus.parent    = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,        minus.parent   = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);",12,4,0,1,2,0,6,0,0,23,35,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {",0,0,0,1,3,0,0,0,0,4,69,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,        this.location = location;,4,0,0,0,0,0,14,0,0,19,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,44,        this.direct   = direct;,0,0,0,0,0,0,0,0,0,0,23,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,74,"        return new SubOrientedPoint(this, null);",0,0,0,1,2,1,0,0,0,4,40,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,                                    final Region<T> remainingRegion) {,4,0,0,0,2,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,51,        this.hyperplane      = hyperplane;,4,0,0,0,0,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,52,        this.remainingRegion = remainingRegion;,0,0,0,0,0,0,0,0,0,0,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,53,    },0,0,0,0,1,0,8,0,0,8,1,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,65,    public Vector1D(double x) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,66,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,67,    },6,2,0,0,1,0,0,0,0,10,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,36,    public static final Vector1D ZERO = new Vector1D(0.0);,6,0,0,1,2,4,4,4,0,18,54,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,39,    public static final Vector1D ONE  = new Vector1D(1.0);,0,0,0,1,2,0,0,0,0,3,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,43,    public static final Vector1D NaN = new Vector1D(Double.NaN);,2,0,0,1,2,0,0,0,0,2,60,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,47,    public static final Vector1D POSITIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,51,    public static final Vector1D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,128,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,67,    protected AbstractRegion(final BSPTree<S> tree) {,0,0,0,1,3,0,0,0,0,4,49,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,68,        this.tree = tree;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,69,    },8,0,0,0,1,0,0,0,0,11,1,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,128,    private static final double LN_HI_PREC_COEF[][] = {,8,2,0,2,5,3,12,0,0,28,51,1,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,160,    private static final double SINE_TABLE_B[] =,14,2,0,1,2,1,0,0,0,17,44,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,1,0,0,1,46,11,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,0,0,0,0,3,54,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,93,    public BSPTree(final Object attribute) {,0,0,0,1,3,0,0,0,0,4,40,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,94,        cut    = null;,6,0,0,0,0,0,0,0,0,6,14,5,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,95,        plus   = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,96,        minus  = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,97,        parent = null;,2,0,0,0,0,0,6,0,0,9,14,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,98,        this.attribute = attribute;,0,0,0,0,0,0,0,0,0,0,27,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,44,"    public SubLine(final Line line, final IntervalsSet remainingRegion) {",6,0,0,1,3,3,0,4,0,13,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,45,        this.line            = line;,2,0,0,0,0,1,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,46,        this.remainingRegion = remainingRegion;,4,0,0,0,0,0,0,0,0,5,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,47,    },2,0,0,0,1,0,6,0,0,9,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,896,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,897,        final double a1High     = ca1 - (ca1 - a1);,8,2,1,1,2,1,2,0,0,26,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,898,        final double a1Low      = a1 - a1High;,16,3,0,0,0,1,0,0,0,21,38,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,899,        final double cb1        = SPLIT_FACTOR * b1;,10,2,0,0,0,1,4,0,0,17,44,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,900,        final double b1High     = cb1 - (cb1 - b1);,2,1,1,1,2,0,0,0,0,8,43,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,901,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,904,        final double prod1High  = a1 * b1;,10,2,1,0,0,1,0,0,0,17,34,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,905,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,908,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,909,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,8,0,0,19,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,910,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,911,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,912,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,913,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,916,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,917,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,920,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,921,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,922,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,14,4,0,3,6,4,0,0,0,22,86,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,926,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,928,        if (Double.isNaN(result)) {,4,0,0,2,5,0,6,0,0,11,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,934,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,976,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,977,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,978,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,979,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,980,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,981,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,984,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,985,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,988,        final double ca2        = SPLIT_FACTOR * a2;,8,1,0,0,0,4,0,0,0,13,44,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,989,        final double a2High     = ca2 - (ca2 - a2);,10,3,0,1,2,1,0,0,0,14,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,990,        final double a2Low      = a2 - a2High;,2,1,0,0,0,0,0,0,0,3,38,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,991,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,992,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,993,        final double b2Low      = b2 - b2High;,8,1,0,0,0,0,0,0,0,10,38,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,996,        final double prod2High  = a2 * b2;,2,0,0,0,0,0,0,0,0,3,34,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,997,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1000,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1001,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1002,        final double a3Low      = a3 - a3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1003,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1004,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1005,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1008,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1009,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,8,0,3,6,1,4,0,0,38,110,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1012,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1013,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1014,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,18,5,0,3,6,1,0,0,0,26,86,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1017,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1018,        final double s123Prime  = s123High - prod3High;,8,1,0,0,0,1,0,0,0,11,47,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1019,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1023,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1025,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1031,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,96,        this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,97,        this.y = y;,0,0,0,0,0,0,0,0,0,0,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,98,        this.z = z;,4,0,0,0,0,0,6,0,0,11,11,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,99,    },2,0,0,0,1,0,4,0,0,7,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,137,"    public Vector3D(double a, Vector3D u) {",14,1,0,1,3,1,0,2,0,19,39,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,138,        this.x = a * u.x;,8,1,1,0,0,0,0,0,0,21,17,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,139,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",12,1,0,1,2,0,8,0,0,22,58,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,71,    public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",0,0,0,1,3,0,0,0,0,4,87,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,55,"        reset(p1, p2);",2,0,0,1,2,0,6,0,0,8,14,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,74,        final Vector3D delta = p2.subtract(p1);,2,0,0,1,2,1,6,2,0,11,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,75,        final double norm2 = delta.getNormSq();,2,0,0,1,2,1,4,0,0,7,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,81,    },0,0,1,0,1,0,4,0,0,6,1,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2664,            if (y < 0 || 1 / y < 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2665,                return -Math.PI * F_1_2;,6,1,1,0,0,1,0,0,0,13,24,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2660,            if (y > 0 || 1 / y > 0) {,6,5,0,1,3,0,0,0,0,11,25,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3587,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,200,            return null;,2,0,0,0,0,2,0,0,0,3,12,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,198,        final double d = sin * other.cos - other.sin * cos;,14,3,0,0,0,1,0,0,0,18,51,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,199,        if (FastMath.abs(d) < 1.0e-10) {,0,1,0,2,5,0,6,0,0,7,32,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,181,        Vector2D p2 = (Vector2D) point;,4,0,0,1,2,0,0,4,0,8,31,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,182,        return new Vector1D(cos * p2.getX() + sin * p2.getY());,4,3,0,3,6,1,8,2,0,17,55,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0,0,0,2,4,0,0,0,0,6,65,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2276,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2330,"                return cosQ(xa, xb);",2,0,0,1,2,1,6,0,0,8,20,3,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2582,        if (x != x || y != y) {,8,3,0,1,3,0,0,0,0,11,23,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2586,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2612,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2624,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2636,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2646,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2659,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3574,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3576,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3580,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3581,            final int expY = getExponent(y);,10,2,1,1,2,1,4,2,0,31,32,3,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3582,            if (expX > expY + 27) {,0,0,0,1,3,0,0,0,0,4,23,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3585,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3685,        return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,9,69,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,81,"    public Line(final Vector2D p1, final Vector2D p2) {",6,0,0,1,3,3,0,4,0,13,51,2,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,82,"        reset(p1, p2);",0,0,0,1,2,0,6,0,0,6,14,5,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,83,    },4,0,0,0,1,0,0,0,0,5,1,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,129,        final double dx = p2.getX() - p1.getX();,2,1,0,2,4,1,8,0,0,12,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,130,        final double dy = p2.getY() - p1.getY();,2,1,0,2,4,1,8,0,0,12,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,131,"        final double d = FastMath.hypot(dx, dy);",2,0,0,1,2,1,8,0,0,11,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,132,        if (d == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,138,"            angle        = FastMath.PI + FastMath.atan2(-dy, -dx);",10,1,0,1,2,0,4,0,0,18,54,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,139,            cos          = FastMath.cos(angle);,2,0,0,1,2,0,6,0,0,9,35,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,140,            sin          = FastMath.sin(angle);,2,0,0,1,2,0,6,0,0,9,35,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,141,            originOffset = (p2.getX() * p1.getY() - p1.getX() * p2.getY()) / d;,0,0,0,5,10,0,0,0,0,15,67,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,143,    },2,1,0,0,1,0,0,0,0,3,1,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1680,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1682,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1683,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1684,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1685,        p = p * x2 + -0.16666666666666666;,8,2,0,0,0,0,0,0,0,13,34,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1688,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1690,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1700,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1702,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1703,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1704,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1705,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1706,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1708,        return p;,4,0,0,0,0,1,0,0,0,5,9,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1719,        int idx = (int) ((xa * 8.0) + 0.5);,6,4,0,3,6,0,0,0,0,10,35,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1720,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1723,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1724,        final double sintB = SINE_TABLE_B[idx];,8,1,1,1,2,1,0,0,0,14,39,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1725,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1726,        final double costB = COSINE_TABLE_B[idx];,8,0,1,1,2,1,4,0,0,18,41,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1729,        double sinEpsA = epsilon;,6,1,0,0,0,0,0,0,0,7,25,13,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1730,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1731,        final double cosEpsA = 1.0;,6,1,0,0,0,1,0,0,0,8,27,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1732,        final double cosEpsB = polyCosine(epsilon);,4,0,0,1,2,1,0,2,0,7,43,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1735,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1736,        double temp2 = (sinEpsA + temp) - temp;,10,2,0,1,2,0,0,0,0,12,39,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1737,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1738,        sinEpsA = temp2;,4,0,0,0,0,0,6,0,0,12,16,1,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1764,        double a = 0;,0,1,0,0,0,0,4,0,0,5,13,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1765,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1767,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1768,        double c = a + t;,8,3,1,0,0,0,0,0,0,20,17,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1769,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1770,        a = c;,8,0,0,0,0,0,0,0,0,11,6,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1771,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1773,        t = costA * sinEpsA;,10,1,0,0,0,0,0,0,0,13,20,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1774,        c = a + t;,8,1,0,0,0,0,0,0,0,11,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1775,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1776,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1777,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1779,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1794,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1821,        if (xb != 0.0) {,4,1,1,1,3,1,0,0,0,10,16,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1822,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1824,            c = a + t;,2,0,0,0,0,0,0,0,0,3,10,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1825,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1826,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1827,            b = b + d;,0,0,1,0,0,0,4,0,0,6,10,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1830,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1832,        return result;,6,1,0,0,0,1,14,0,0,21,14,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1843,        final double pi2a = 1.5707963267948966;,6,0,0,0,0,1,0,0,0,9,39,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1844,        final double pi2b = 6.123233995736766E-17;,12,1,0,0,0,0,18,0,0,31,42,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1846,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1847,        double b = -(a - pi2a + xa);,2,0,0,1,2,1,4,0,0,7,28,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1848,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1850,"        return sinQ(a, b);",2,0,1,1,2,1,0,0,0,5,18,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2228,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,344,            Complex c = (Complex)other;,0,0,0,1,2,0,0,0,0,3,27,4,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,340,        if (this == other) {,4,0,0,1,3,0,0,0,0,5,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,99,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,100,        this.imaginary = imaginary;,0,0,0,0,0,0,0,0,0,0,27,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,2,0,0,2,4,0,4,0,0,7,54,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,103,        isInfinite = !isNaN &&,6,1,0,0,0,1,0,0,0,8,22,6,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,59,"    public static final Complex I = new Complex(0.0, 1.0);",2,1,0,1,2,0,0,0,0,3,54,6,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,62,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",16,7,0,1,2,3,0,4,0,30,70,1,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,65,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,67,"    public static final Complex ONE = new Complex(1.0, 0.0);",0,0,0,1,2,0,0,0,0,3,56,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,69,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0,0,0,1,2,0,0,2,0,3,57,5,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,89,"        this(real, 0.0);",2,0,0,1,2,0,4,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,116,        if (isNaN) {,12,2,0,1,3,0,0,0,0,15,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,0,0,0,0,0,0,0,0,0,0,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0,0,0,0,1,0,0,0,0,1,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,0,0,0,1,3,0,0,0,0,4,26,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,0,0,0,2,4,0,0,0,0,6,56,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,0,0,0,0,0,0,0,0,0,0,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,0,0,0,3,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,0,0,0,1,3,0,0,0,0,4,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,49,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,78,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,0,0,0,2,4,0,0,0,0,6,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,0,0,0,0,0,0,0,0,0,0,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,0,0,1,3,0,0,0,0,4,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,0,0,0,3,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0,0,0,3,6,0,0,0,0,9,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",0,0,0,1,3,0,0,0,0,4,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,0,0,0,1,2,0,0,0,0,3,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,0,0,0,5,10,0,0,0,0,15,91,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,0,2,4,0,0,0,0,6,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",8,3,0,1,2,0,4,0,0,16,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,1,1,2,0,0,0,0,6,42,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,16,1,0,1,3,0,0,0,0,19,42,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,13,43,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,0,2,4,1,14,0,0,17,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,6,2,0,0,0,0,0,0,0,8,8,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,4,1,0,1,3,0,0,0,0,7,25,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,8,0,0,15,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,50,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,0,3,6,0,0,0,0,9,27,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,2,4,0,0,0,0,9,29,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,1,2,4,0,0,0,0,9,20,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,12,0,0,2,4,2,2,2,0,19,49,0,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0,0,0,3,7,0,0,0,0,10,42,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,1,1,0,0,0,0,0,0,9,6,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,2,0,1,3,0,8,0,0,14,21,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,0,0,0,5,10,0,0,0,0,15,70,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,8,4,1,4,8,1,0,0,0,26,61,2,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,6,1,1,0,0,0,8,0,0,21,15,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,0,0,0,0,0,0,0,0,0,0,15,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,10,2,0,1,3,0,0,0,0,14,30,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,6,1,0,3,7,0,0,0,0,8,41,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,8,1,0,0,0,3,0,0,0,13,10,1,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,8,2,1,1,2,0,0,2,0,15,17,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,0,0,0,0,0,0,0,0,0,0,12,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,8,2,1,1,2,0,4,0,0,18,17,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,28,12,0,0,0,0,0,0,0,42,12,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,8,2,1,1,2,0,0,2,0,15,31,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,0,0,0,2,4,0,0,0,0,6,47,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,6,2,1,1,2,0,0,0,0,11,31,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,12,3,0,0,0,0,0,0,0,16,14,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,12,1,0,1,3,0,0,0,0,15,32,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,12,4,1,4,8,1,0,4,0,32,36,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,6,3,1,4,8,0,0,0,0,22,32,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,0,0,0,1,3,0,0,0,0,4,25,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,0,0,0,1,2,0,0,0,0,3,24,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,2,0,1,1,2,0,0,0,0,7,9,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,2,1,1,2,5,0,0,0,0,7,29,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,6,0,0,0,0,0,0,0,0,8,6,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,6,1,1,1,2,0,0,0,0,13,23,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,4,8,0,0,0,0,13,18,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,4,1,1,2,4,1,0,0,0,8,46,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,2,4,0,0,0,0,7,14,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,0,0,0,3,6,0,0,0,0,9,25,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,18,4,0,1,3,0,0,0,0,23,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,6,0,0,0,0,0,0,0,0,8,9,5,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,0,2,4,0,0,0,0,6,16,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,0,0,8,20,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,0,0,0,0,0,0,0,0,0,0,18,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,86,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,2,0,1,1,2,0,0,0,0,7,17,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,4,1,1,1,2,0,0,0,0,8,15,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,6,1,0,2,4,0,0,0,0,8,41,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,0,1,1,1,2,0,0,0,0,8,25,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,8,2,1,1,2,0,8,0,0,23,24,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,12,2,0,1,3,0,0,0,0,15,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,2,0,1,1,2,1,0,0,0,7,25,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,6,2,1,1,2,0,0,4,0,22,18,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,12,2,0,0,0,0,0,0,0,16,18,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,14,2,0,1,3,0,0,0,0,18,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,4,0,1,2,4,1,0,0,0,9,42,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,0,0,5,10,0,0,0,0,15,37,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",2,2,0,1,2,1,20,2,0,27,41,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",2,0,0,1,2,1,8,0,0,11,41,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,        if (Double.isNaN(nextGaussian)) {,2,0,0,2,5,0,0,0,0,3,33,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,8,2,0,16,39,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,        } else {,4,0,0,0,2,0,0,0,0,5,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,118,        return random;,0,0,0,0,0,1,0,0,0,1,14,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,            for (int i = 0; i < init.length; i++) {,12,1,0,1,3,0,0,4,0,19,39,1,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,                if (inputSigma[i] > uB[i] - lB[i]) {,2,3,1,4,9,0,0,0,0,17,36,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1184,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1185,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1188,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1189,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1190,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0,0,0,2,4,0,0,0,0,6,69,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,                double ya = lnCoef_last[0];,2,0,0,1,2,1,0,0,0,3,27,2,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1194,                double yb = lnCoef_last[1];,0,0,0,1,2,0,0,0,0,3,27,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,                    aa = ya * xa;,14,1,0,0,0,0,0,0,0,16,13,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,6,0,0,0,0,18,0,0,39,33,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,                    tmp = aa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,24,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1202,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,                    aa = ya + lnCoef_i[0];,4,1,1,1,2,0,0,0,0,8,22,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,                    ab = yb + lnCoef_i[1];,10,4,1,1,2,0,0,0,0,20,22,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1211,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1216,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1217,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1220,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1221,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1223,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,        final int  low  = next(26);,10,1,0,1,2,1,2,2,0,16,27,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,            if (data instanceof Sigma) {,2,0,0,1,3,0,0,2,0,4,28,7,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,                inputSigma = ((Sigma) data).getSigma();,4,0,0,3,6,0,2,2,0,9,39,8,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,539,            if (data instanceof PopulationSize) {,0,0,0,1,3,0,0,0,0,4,37,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,                lambda = ((PopulationSize) data).getPopulationSize();,4,0,0,3,6,0,2,2,0,9,53,8,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,                continue;,4,0,0,0,0,0,0,2,0,6,9,7,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,545,        checkParameters();,0,0,0,1,2,0,0,0,0,3,18,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,552,        final double[] init = getStartPoint();,0,0,0,2,4,0,0,0,0,6,38,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,        final double[] lB = getLowerBound();,12,1,0,2,4,1,2,0,0,17,36,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,        final double[] uB = getUpperBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,        if (inputSigma != null) {,6,2,0,1,3,0,6,0,0,15,25,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,            if (inputSigma.length != init.length) {,14,4,0,1,3,0,0,0,0,18,39,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,            return sigma.clone();,0,0,1,1,2,1,14,0,0,19,21,1,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,            return lambda;,2,0,0,0,0,1,0,0,0,2,14,5,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,398,                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,428,"                updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,0,0,0,3,52,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,703,        double negccov = 0;,8,1,0,0,0,0,0,0,0,10,19,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,704,        if (ccov1 + ccovmu > 0) {,14,5,1,1,3,0,6,0,0,29,25,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,705,"            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",6,1,1,2,4,1,10,2,0,23,62,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,707,            final RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,52,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,710,            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);,10,2,0,1,2,0,0,0,0,12,49,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,711,            oldFac += 1 - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,29,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,712,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,714,                negccov = (1 - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,39,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,718,                final double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,720,                final double negalphaold = 0.5;,10,8,0,0,0,1,0,0,0,20,31,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,722,                final int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,1,4,0,0,7,46,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,723,"                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",2,0,0,2,4,0,12,2,0,16,78,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,724,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,14,2,0,3,6,0,0,0,0,16,51,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,725,                final int[] idxnorms = sortedIndices(arnorms.getRow(0));,12,1,0,3,6,1,6,0,0,21,56,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,726,"                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,1,6,2,0,11,66,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,727,                final int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,728,"                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,1,6,2,0,11,69,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,729,"                arnorms = divide(arnormsReverse, arnormsSorted);",0,0,0,1,2,0,0,0,0,3,48,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,730,                final int[] idxInv = inverse(idxnorms);,2,0,0,2,4,1,4,0,0,7,39,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,731,"                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,1,6,2,0,11,61,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,733,                final double negcovMax = (1 - negminresidualvariance) /,10,3,0,1,2,1,0,0,0,15,55,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,735,                if (negccov > negcovMax) {,0,0,0,1,3,0,0,0,0,4,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,738,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",14,1,0,2,4,0,10,0,0,28,57,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,739,                final RealMatrix artmp = BD.multiply(arzneg);,2,0,0,1,2,1,6,2,0,11,45,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,740,                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());,2,0,0,4,8,1,14,2,0,19,82,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,741,                oldFac += negalphaold * negccov;,18,4,0,0,0,0,0,0,0,24,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,742,                C = C.scalarMultiply(oldFac),0,0,0,1,2,0,8,0,0,8,28,9,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,749,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,758,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,759,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,767,        if (ccov1 + ccovmu + negccov > 0 &&,8,3,0,0,1,0,0,0,0,13,35,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,770,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,772,            final EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,1,0,4,0,9,57,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,773,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,774,            D = eig.getD();,2,0,0,1,2,0,4,0,0,7,15,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,775,            diagD = diag(D);,8,0,0,1,2,1,6,0,0,16,16,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,776,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,786,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,791,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,792,            diagD = sqrt(diagD); // D contains standard deviations now,2,0,0,1,2,0,4,0,0,7,58,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,793,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",2,0,0,4,8,0,12,0,0,15,65,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,795,    },2,1,0,0,1,0,0,0,0,3,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1041,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1042,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1043,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1044,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1047,"        return new Array2DRowRealMatrix(d, false);",2,2,0,1,2,1,0,0,0,4,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1071,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1072,        for (int r = 0; r < m.getRowDimension(); r++) {,14,2,0,2,5,0,4,0,0,23,47,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1073,            for (int c = 0; c < m.getColumnDimension(); c++) {,12,1,0,2,5,0,4,0,0,19,50,1,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1074,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",0,0,0,3,6,0,0,0,0,9,44,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1077,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1085,        final double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,1,4,0,0,7,59,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1086,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1087,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1088,            for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1089,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,11,24,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1091,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1093,"        return new Array2DRowRealMatrix(d, false);",8,4,0,1,2,1,10,2,0,26,42,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1272,        final int[] inverse = new int[indices.length];,16,1,0,2,4,1,0,0,0,20,46,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1273,        for (int i = 0; i < indices.length; i++) {,12,1,0,1,3,0,0,0,0,15,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1274,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1276,        return inverse;,14,4,0,0,0,1,8,0,0,27,15,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1284,        final int[] reverse = new int[indices.length];,6,0,0,2,4,1,0,0,0,7,46,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1285,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1286,            reverse[i] = indices[indices.length - i - 1];,6,1,1,2,4,0,0,0,0,14,45,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1288,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,522,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,530,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,118,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,81,    private byte maxIter = 30;,2,0,0,0,0,1,0,0,0,3,26,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,1,2,4,0,0,0,0,3,102,10,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",0,0,0,1,2,0,0,0,0,3,54,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,121,        if (isSymmetric) {,0,0,0,1,3,0,0,0,0,4,18,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,128,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,199,        if (cachedV == null) {,6,0,1,1,3,1,0,0,0,10,22,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,200,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,201,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,202,            for (int k = 0; k < m; ++k) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,203,"                cachedV.setColumnVector(k, eigenvectors[k]);",6,1,0,2,4,0,0,0,0,8,44,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,207,        return cachedV;,6,1,1,0,0,1,0,0,0,12,15,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,223,        if (cachedD == null) {,2,1,0,1,3,0,0,0,0,3,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,225,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,0,0,0,1,2,0,0,0,0,3,64,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,227,            for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,228,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,230,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",0,0,0,3,8,0,0,0,0,11,71,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,235,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,561,        transformer = new TriDiagonalTransformer(matrix);,0,0,0,1,2,0,0,0,0,3,49,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,562,        main = transformer.getMainDiagonalRef();,2,0,0,1,2,0,12,0,0,15,40,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,564,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,573,        final double[][]z = householderMatrix.clone();,2,0,0,3,6,1,4,0,0,7,46,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,578,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,587,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,596,        if (maxAbsoluteValue != 0) {,4,1,0,1,3,0,0,0,0,5,28,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,597,            for (int i=0; i < n; i++) {,6,0,0,1,3,0,0,0,0,9,27,0,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,10,2,0,3,7,0,0,0,0,12,79,1,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,602,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,607,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,608,            int its = 0;,2,0,0,0,0,0,0,0,0,2,12,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,611,                for (m = j; m < n - 1; m++) {,10,2,0,1,3,0,0,0,0,14,29,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,618,                if (m != j) {,8,1,0,1,3,0,0,0,0,10,13,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,678,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,680,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,687,            if (k != i) {,10,2,0,1,3,0,0,0,0,13,13,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,700,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,706,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,0,0,0,4,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,713,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,714,        final double[] tmp = new double[n];,0,0,0,2,4,0,0,0,0,6,35,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,716,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,717,                tmp[j] = z[j][i];,0,0,0,3,6,0,0,0,0,9,17,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,719,            eigenvectors[i] = new ArrayRealVector(tmp);,4,1,1,2,4,1,0,2,0,21,43,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,721,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,0,4,0,9,50,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,72,        cachedQ   = null;,4,0,0,0,0,0,0,2,0,7,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,74,        cachedT   = null;,4,0,1,0,0,0,0,0,0,8,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,78,    },0,0,0,0,1,0,4,0,0,5,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,98,        if (cachedQt == null) {,0,0,0,1,3,0,0,0,0,4,23,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,100,            double[][] qta = new double[m][m];,4,0,1,4,8,0,0,2,0,10,34,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,126,            qta[0][0] = 1;,6,1,1,2,4,0,0,0,0,10,14,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,4,0,0,1,2,0,6,0,0,11,45,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,131,        return cachedQt;,2,0,0,0,0,1,0,0,0,2,16,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,175,        return main;,2,0,0,0,0,1,4,0,0,6,12,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,185,        return secondary;,8,1,0,0,0,1,0,0,0,9,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,194,        final double[] z = new double[m];,10,2,1,2,4,1,0,0,0,16,33,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,195,        for (int k = 0; k < m - 1; k++) {,0,0,0,1,3,0,0,0,0,4,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,253,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,215,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",10,0,0,1,2,1,2,2,0,15,72,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,216,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,217,"            m.setEntry(i, i, diagonal[i]);",4,1,1,2,4,0,8,0,0,17,30,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,219,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,390,        final int rows = matrix.getRowDimension();,8,1,0,1,2,1,4,0,0,15,42,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,391,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,398,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,399,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,412,        return true;,0,0,0,0,0,1,8,0,0,10,12,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,439,"        return isSymmetricInternal(matrix, eps, false);",4,0,0,1,2,1,0,0,0,5,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,6,114,        return count;,8,2,1,0,0,1,0,0,0,15,13,3,14.51852,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,363,        return super.optimize(optData);,10,1,0,1,2,2,0,0,0,12,31,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,530,        super.parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,37,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,297,            sigma = s.clone();,0,0,0,1,2,0,0,0,0,3,18,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,298,        },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,327,            throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,328,            if (size <= 0) {,2,1,0,1,3,0,0,0,0,3,16,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,331,            lambda = size;,0,0,0,0,0,0,0,0,0,0,14,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,332,        },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,51,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,144,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,146,"        final RealMatrix out = createMatrix(nRows, nCols);",2,0,0,1,2,1,6,2,0,11,50,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,149,                double sum = 0;,4,0,0,0,0,1,0,0,0,5,15,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,600,"        final RealMatrix out = createMatrix(nCols, nRows);",6,0,0,1,2,1,6,2,0,15,50,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,2,2,0,12,63,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,611,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,414,            final double[] rowI = data[i];,4,0,1,2,4,2,0,4,0,14,30,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,415,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,416,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,34,    },8,2,0,0,1,0,0,0,0,11,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,606,"                out.setEntry(column, row, value);",4,3,0,1,2,0,0,0,0,7,33,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,607,            },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,81,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,6,0,0,12,33,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,115,        super.incrementEvaluationCount();,0,0,0,1,2,0,0,0,0,3,33,4,13.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,116,        return function.value(params);,0,0,0,1,2,1,6,0,0,6,30,5,13.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,106,    public MersenneTwister() {,2,0,0,1,3,1,0,0,0,3,26,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,107,        mt = new int[N];,6,1,0,1,2,0,0,0,0,8,16,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,108,        setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,109,    },2,0,0,0,1,0,0,0,0,3,1,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,144,        long longMT = seed;,8,0,0,0,0,0,2,0,0,10,19,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,146,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,151,            mt[mti]= (int) longMT;,12,3,1,2,4,0,0,0,0,26,22,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,155,    },6,1,0,0,1,0,0,0,0,7,1,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,173,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",0,0,0,2,5,0,0,0,0,7,57,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,184,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,186,            if (j >= seed.length) {,0,0,0,1,3,0,0,0,0,4,23,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,187,                j = 0;,0,0,0,0,0,0,0,0,0,0,6,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,0,0,0,4,8,0,0,0,0,12,69,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,196,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,197,            if (i >= N) {,12,2,0,1,3,0,0,0,0,15,13,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,207,    },0,0,0,0,1,0,0,0,0,1,1,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",8,3,0,7,14,0,2,0,0,13,71,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,217,    },2,0,0,0,1,1,0,0,0,3,1,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,231,        super(checker);,4,0,0,1,2,0,6,0,0,10,15,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,119,    private boolean isMinimize = true;,2,0,0,0,0,1,0,0,0,4,34,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,200,    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();,2,0,0,1,2,2,0,8,0,12,76,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,202,    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();,2,0,0,1,2,2,0,8,0,12,83,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,204,    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();,0,0,0,1,2,0,4,0,0,4,78,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,206,    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();,0,0,0,1,2,0,0,0,0,3,80,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,232,        this.maxIterations = maxIterations;,6,1,0,0,0,0,4,0,0,12,35,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,233,        this.stopFitness = stopFitness;,4,0,0,0,0,0,0,0,0,5,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,234,        this.isActiveCMA = isActiveCMA;,0,0,0,0,0,0,0,0,0,0,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,235,        this.diagonalOnly = diagonalOnly;,4,0,0,0,0,0,0,0,0,5,33,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,236,        this.checkFeasableCount = checkFeasableCount;,4,0,0,0,0,0,0,0,0,5,45,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,237,        this.random = random;,0,0,0,0,0,0,0,0,0,0,21,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,238,        this.generateStatistics = generateStatistics;,6,0,0,0,0,0,0,0,0,7,45,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,239,    },4,0,0,0,1,0,6,0,0,10,1,10,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,290,            throws NotPositiveException {,4,1,0,0,1,0,0,0,0,5,29,1,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,291,            for (int i = 0; i < s.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,292,                if (s[i] < 0) {,2,1,1,2,5,0,0,0,0,7,15,1,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3489,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,12,0,0,12,20,3,12.56522,0,0,-1
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,70,        final double[] p = getKey();,2,0,0,2,4,1,2,0,0,5,28,4,12.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,71,        return p == null ? null : p.clone();,0,0,0,1,2,1,0,0,0,4,36,4,12.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2276,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,12.04167,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,42,    },0,0,0,0,1,0,0,0,0,1,1,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,195,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,196,    },8,2,0,0,1,0,0,2,0,12,1,5,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2334,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,91,                function = ((ObjectiveFunction) data).getObjectiveFunction();,0,0,0,3,6,0,0,0,0,9,61,4,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,92,                continue;,4,0,0,0,0,3,0,0,0,7,9,1,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,45,        return function;,0,0,0,0,0,1,0,0,0,1,16,4,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2293,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2297,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2306,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2307,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2317,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,0,0,0,0,2,39,8,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2318,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2319,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2320,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2326,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2328,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2330,"                return -sinQ(xa, xb);",4,1,0,1,2,1,0,0,0,5,21,9,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2332,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2280,"                return -cosQ(xa, xb);",2,0,0,1,2,1,12,0,0,16,21,4,10.7037,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,35,    public ObjectiveFunction(MultivariateFunction f) {,4,0,0,1,3,1,0,2,0,7,50,2,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,36,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,37,    },6,1,0,0,1,0,0,0,0,8,1,4,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3808,        CodyWaite(double xa) {,0,0,0,1,3,0,0,0,0,4,22,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3811,            int k = (int)(xa * 0.6366197723675814);,8,1,0,2,4,1,0,4,0,14,39,1,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3817,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3818,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3819,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3821,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3822,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3823,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3824,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3826,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3827,                b = remA;,6,0,0,0,0,1,10,0,0,18,9,1,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3828,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3829,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3831,                if (remA > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3832,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3841,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3842,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3843,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3844,        },0,0,0,0,1,0,0,0,0,1,1,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3850,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3856,            return finalRemA;,0,0,0,0,0,1,0,0,0,1,17,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3862,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1678,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1680,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1681,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1682,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0,0,0,0,0,1,0,0,0,1,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0,0,0,1,2,0,0,0,0,3,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0,0,0,0,0,0,0,0,0,0,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,0,0,0,1,3,0,0,0,0,4,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0,0,0,2,4,0,0,0,0,6,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,383,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,384,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,6,3,1,3,6,0,0,0,0,18,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0,0,0,0,0,1,6,0,0,6,10,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,127,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,8,0,0,8,55,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,325,                    occuringEvents.add(state);,0,0,0,1,2,0,6,0,0,6,26,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,332,                final Iterator<EventState> iterator = occuringEvents.iterator();,2,0,0,1,2,1,4,4,0,11,64,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,333,                final EventState currentEvent = iterator.next();,0,0,0,1,2,0,0,0,0,3,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,334,                iterator.remove();,12,4,0,1,2,1,4,0,0,21,18,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,337,                final double eventT = currentEvent.getEventTime();,2,0,0,1,2,1,4,0,0,7,50,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,338,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,12,0,0,13,44,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,339,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,0,0,0,3,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,342,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,6,0,0,6,41,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,343,                final double[] eventY = interpolator.getInterpolatedState().clone();,2,0,0,3,6,1,6,0,0,9,68,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,346,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,42,7,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,350,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,354,                if (isLastStep) {,2,0,0,1,3,0,0,0,0,2,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,242,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,321,      this.softPreviousTime = softPreviousTime;,8,1,0,0,0,0,4,0,0,14,41,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,322,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,335,      this.softCurrentTime  = softCurrentTime;,4,0,0,0,0,0,0,0,0,5,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,336,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,317,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",2,1,0,3,6,1,12,0,0,15,77,11,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,84,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,85,        if (maximalOrder < 2) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,88,        this.maximalOrder = maximalOrder;,16,5,0,0,0,0,0,0,0,22,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,89,        this.allowed = AllowedSolution.ANY_SIDE;,10,0,0,0,0,0,0,0,0,12,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,90,    },2,0,1,0,1,1,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,124,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,201,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,277,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",8,2,0,1,2,0,10,0,0,21,60,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,278,    },2,0,0,0,1,0,0,0,0,2,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,372,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,373,"        verifyInterval(initial, upper);",0,0,0,1,2,0,6,0,0,6,31,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,237,                        BracketedUnivariateSolver<UnivariateFunction> bracketing =,0,0,0,0,0,0,0,0,0,0,58,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,239,                        root = forward ?,6,0,0,0,0,0,4,0,0,12,16,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,256,                    if ((!Double.isNaN(previousEventTime)) &&,0,1,0,2,5,0,6,0,0,8,41,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,264,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,0,6,0,0,7,45,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,266,                        pendingEventTime = root;,4,0,0,0,0,0,0,0,0,5,24,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,267,                        pendingEvent = true;,2,0,0,0,0,0,0,0,0,4,20,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,268,                        return true;,0,0,0,0,0,1,0,0,0,1,12,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,299,        return pendingEvent ?,0,0,0,0,0,1,0,0,0,1,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,317,            previousEventTime = t;,4,0,0,0,0,0,0,0,0,5,22,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,318,            g0Positive        = increasing;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,319,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",6,1,0,2,4,0,8,0,0,17,73,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,67,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,0,0,0,2,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,70,    },2,0,0,0,1,2,0,0,0,4,1,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,231,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,10,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,235,                    if (solver instanceof BracketedUnivariateSolver<?>) {,2,0,0,1,3,0,0,2,0,4,53,11,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,44,public class EventState {,2,0,0,0,1,1,0,0,0,3,25,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,209,                        interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,6,0,0,6,36,15,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,210,"                        return handler.g(t, interpolator.getInterpolatedState());",0,0,0,2,4,1,10,0,0,10,57,15,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,112,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,118,        return searchMax;,0,0,0,0,0,1,0,0,0,1,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,142,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,155,        incrementEvaluationCount();,0,0,0,1,2,0,6,0,0,6,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,156,        return function.value(point);,0,0,0,1,2,1,0,0,0,4,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,177,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,180,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,181,        searchMax = max;,0,0,0,0,0,0,0,0,0,0,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,182,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,183,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,184,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,185,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,186,    },2,0,0,0,1,1,0,0,0,3,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,193,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,12,0,0,12,40,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,196,        return doSolve();,4,2,0,1,2,1,2,0,0,8,17,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,310,            evaluations.incrementCount();,2,0,0,1,2,1,4,0,0,7,29,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,313,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,314,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,353,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,138,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",0,0,0,0,2,0,12,0,0,12,71,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,191,"            state.getEventHandler().init(t0, y0, t);",0,0,0,2,4,0,12,0,0,12,40,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,192,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,306,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,0,0,0,3,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,307,                },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,323,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,0,6,0,0,6,39,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,393,"                state.stepAccepted(currentT, currentY);",0,0,0,1,2,0,8,0,0,8,39,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,394,                isLastStep = isLastStep || state.stop();,8,0,0,1,2,0,8,0,0,17,40,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,395,            },2,0,0,0,1,0,4,0,0,7,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,125,        return handler;,2,0,0,0,0,1,0,0,0,2,15,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,321,            g0Positive = g0 >= 0;,4,1,0,0,0,0,0,0,0,7,21,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,322,            nextAction = EventHandler.Action.CONTINUE;,8,0,0,0,0,0,0,0,0,9,42,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,331,        return nextAction == EventHandler.Action.STOP;,8,1,0,0,0,1,0,0,0,9,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,130,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,136,        return relativeAccuracy;,4,0,0,0,0,1,0,0,0,5,24,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3358,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3362,        y = floor(x);,4,0,0,1,2,0,4,0,0,9,13,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3363,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,102,                      final UnivariateSolver solver) {,2,0,0,0,2,1,0,2,0,5,32,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,103,        this.handler           = handler;,0,0,0,0,0,0,0,0,0,0,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,104,        this.maxCheckInterval  = maxCheckInterval;,4,0,0,0,0,0,0,0,0,5,42,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,105,        this.convergence       = FastMath.abs(convergence);,2,0,0,1,2,0,6,0,0,9,51,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,106,        this.maxIterationCount = maxIterationCount;,0,0,0,0,0,0,0,0,0,0,43,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,107,        this.solver            = solver;,4,0,0,0,0,0,0,0,0,5,32,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,110,        t0                = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,111,        g0                = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,112,        g0Positive        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,113,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,114,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,115,        previousEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,116,        increasing        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,117,        nextAction        = EventHandler.Action.CONTINUE;,0,0,0,0,0,0,0,0,0,0,49,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,119,    },4,0,0,0,1,2,0,0,0,6,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,157,        t0 = interpolator.getPreviousTime();,0,0,0,1,2,0,0,0,0,3,36,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,158,        interpolator.setInterpolatedTime(t0);,0,0,0,1,2,0,6,0,0,6,37,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,159,"        g0 = handler.g(t0, interpolator.getInterpolatedState());",2,0,0,2,4,0,10,0,0,13,56,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,160,        if (g0 == 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,180,        g0Positive = g0 >= 0;,4,1,0,0,0,0,0,0,0,6,21,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,196,            forward = interpolator.isForward();,0,0,0,1,2,0,0,0,0,3,35,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,197,            final double t1 = interpolator.getCurrentTime();,0,0,0,1,2,0,0,0,0,3,48,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,198,            final double dt = t1 - t0;,6,1,0,0,0,1,0,0,0,8,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,199,            if (FastMath.abs(dt) < convergence) {,0,0,0,2,5,0,0,0,0,7,37,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,203,"            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));",0,0,0,4,8,0,0,0,0,12,91,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,204,            final double h = dt / n;,6,1,0,0,0,1,0,0,0,8,24,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,55,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,217,            double ta = t0;,0,0,0,0,0,0,0,0,0,0,15,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,218,            double ga = g0;,4,0,0,0,0,0,0,0,0,4,15,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,219,            for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,222,                final double tb = t0 + (i + 1) * h;,8,3,0,1,2,1,0,0,0,12,35,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,223,                interpolator.setInterpolatedTime(tb);,0,0,0,1,2,0,6,0,0,6,37,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,224,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());",2,0,0,2,4,1,10,0,0,13,69,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,227,                if (g0Positive ^ (gb >= 0)) {,4,2,0,2,5,0,0,0,0,6,29,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,277,                    ta = tb;,4,0,0,0,0,0,0,0,0,5,8,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,278,                    ga = gb;,0,0,0,0,0,0,0,0,0,0,8,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,284,            pendingEvent     = false;,2,0,0,0,0,0,0,0,0,4,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,285,            pendingEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,30,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,286,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,312,        t0 = t;,6,0,1,0,0,0,0,0,0,10,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,313,"        g0 = handler.g(t, y);",6,0,0,1,2,0,8,2,0,18,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,315,        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {,12,3,0,3,7,0,4,0,0,20,74,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,324,    },2,0,1,0,1,0,0,0,0,5,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,54,    public enum Action {,6,0,0,0,1,0,0,0,0,6,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,61,"        STOP,",0,0,0,0,0,0,0,0,0,0,5,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,70,"        RESET_STATE,",0,0,0,0,0,0,0,0,0,0,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,80,"        RESET_DERIVATIVES,",2,0,0,0,0,0,0,0,0,2,18,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,87,        CONTINUE;,2,0,0,0,0,0,0,0,0,2,9,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,4,1,1,1,3,1,0,4,0,21,55,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,94,                                               final double functionValueAccuracy) {,8,1,0,0,2,2,0,0,0,11,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,51,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,95,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,96,        this.relativeAccuracy = relativeAccuracy;,0,0,0,0,0,0,0,0,0,0,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,97,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,41,public enum AllowedSolution {,2,0,0,0,1,1,0,0,0,3,29,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,48,"    ANY_SIDE,",0,0,0,0,0,0,0,0,0,0,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,55,"    LEFT_SIDE,",4,1,0,0,0,0,0,0,0,6,10,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,62,"    RIGHT_SIDE,",0,0,0,0,0,0,0,0,0,0,11,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,68,"    BELOW_SIDE,",8,1,0,0,0,0,0,0,0,9,11,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,74,    ABOVE_SIDE;,2,0,0,0,0,0,0,0,0,2,11,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,374,        for (int i = 0; i < interpolatedState.length; ++i) {,10,1,0,1,3,0,0,0,0,12,52,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,375,            interpolatedState[i] = previousState[i] +,0,1,1,2,4,0,0,0,0,10,41,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,383,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,10,9,1,7,14,0,0,0,0,36,73,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,2274,"                return sinQ(xa, xb);",4,1,1,1,2,1,6,0,0,15,20,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,320,    if (! vectorsInitialized) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,322,      if (v == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,330,      finalizeStep();,0,0,0,1,2,0,0,0,0,3,15,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,333,      for (int i = 0; i < interpolatedState.length; ++i) {,10,1,0,1,3,0,0,0,0,12,52,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,334,          final double yDot1  = yDotK[0][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,335,          final double yDot6  = yDotK[5][i];,2,0,0,2,4,0,0,0,0,2,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,336,          final double yDot7  = yDotK[6][i];,2,0,1,2,4,1,0,0,0,14,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,337,          final double yDot8  = yDotK[7][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,338,          final double yDot9  = yDotK[8][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,339,          final double yDot10 = yDotK[9][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0,0,0,1,3,0,0,0,0,4,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,2,1,0,1,3,0,0,0,0,3,45,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,0,4,8,0,0,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",26,5,0,1,2,0,6,4,0,45,67,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },2,0,0,0,1,0,0,0,0,2,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,6,1,0,0,0,0,0,0,0,7,11,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,12,2,0,1,3,1,0,2,0,18,57,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,0,0,0,12,34,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,6,0,0,0,0,0,0,4,0,12,16,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,8,0,0,0,0,1,4,2,0,15,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,6,0,1,3,7,0,6,0,0,16,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,18,3,1,1,2,4,2,0,0,37,17,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,6,2,0,1,3,1,0,0,0,9,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,18,4,1,3,7,0,4,0,0,31,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,0,0,0,2,4,0,0,0,0,6,41,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",8,0,0,0,1,0,0,0,0,9,84,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,8,1,1,0,0,0,0,0,0,15,13,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0,0,0,2,4,0,0,0,0,6,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,0,0,0,0,2,50,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,0,0,0,2,5,0,0,0,0,7,42,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,28,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,0,2,4,0,0,0,0,6,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",4,1,1,1,2,0,6,0,0,20,54,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },8,1,0,0,1,0,0,0,0,10,1,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,1,2,2,0,2,0,8,26,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,0,0,1,1,3,0,0,0,0,5,29,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,0,0,0,3,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,        this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,379,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,870,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,878,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,880,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,881,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,0,0,0,0,9,44,0,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,882,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,883,        final double b2Low      = b2 - b2High;,16,2,0,0,0,0,0,0,0,20,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,886,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,4,0,0,3,6,1,0,2,0,7,110,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,891,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,898,        if (Double.isNaN(result)) {,18,5,1,2,5,0,14,0,0,43,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,904,        return result;,16,2,0,0,0,2,4,0,0,24,14,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,946,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,947,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,948,        final double a1Low      = a1 - a1High;,14,5,0,0,0,1,20,0,0,42,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,949,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,950,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,951,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,954,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,958,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,959,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,0,6,0,0,13,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,962,        final double b2High     = cb2 - (cb2 - b2);,2,0,0,1,2,0,0,0,0,2,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,963,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,966,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,6,0,0,16,34,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,8,0,3,6,1,0,2,0,33,110,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,970,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,971,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,973,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,974,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,978,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,982,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,988,        final double s123Prime  = s123High - prod3High;,0,0,0,0,0,0,0,0,0,0,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,16,5,1,3,6,4,0,0,0,30,87,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,995,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,1001,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,63,    public Line(final Line line) {,6,0,0,1,3,2,0,2,0,12,30,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,64,        this.direction = line.direction;,6,0,0,0,0,0,0,0,0,7,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,65,        this.zero      = line.zero;,4,1,0,0,0,0,4,0,0,9,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,66,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,77,            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,67,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,88,        return reverted;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,102,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,113,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,121,"        return new Vector3D(1.0, zero, abscissa, direction);",6,0,0,1,2,1,0,2,0,8,52,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,128,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,1,2,4,0,8,51,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,135,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,146,"        final double angle = Vector3D.angle(direction, line.direction);",6,0,0,1,2,1,6,0,0,13,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,147,        return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);,0,0,0,5,10,1,0,0,0,16,87,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,155,        return distance(p) < 1.0e-10;,0,1,0,1,2,1,4,0,0,5,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,163,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,164,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",6,0,0,2,4,1,6,4,0,18,77,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,165,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,174,"        final Vector3D normal = Vector3D.crossProduct(direction, line.direction);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,175,        final double n = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,176,        if (n < Precision.SAFE_MIN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,178,            return distance(line.zero);,6,1,0,1,2,1,4,0,0,11,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,182,        final double offset = line.zero.subtract(zero).dotProduct(normal) / n;,8,1,0,2,4,1,8,0,0,18,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,184,        return FastMath.abs(offset);,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,194,        final double cos = direction.dotProduct(line.direction);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,195,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,196,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,198,            return zero;,10,1,0,0,0,1,0,0,0,12,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,201,        final Vector3D delta0 = line.zero.subtract(zero);,10,0,0,1,2,1,4,2,0,18,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,202,        final double a        = delta0.dotProduct(direction);,2,0,0,1,2,1,6,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,203,        final double b        = delta0.dotProduct(line.direction);,6,1,1,1,2,1,4,0,0,17,58,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,205,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",18,5,0,2,4,1,0,2,0,25,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,215,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,216,        return line.contains(closest) ? closest : null;,2,0,0,1,2,1,6,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,223,"        return new SubLine(this, new IntervalsSet());",0,0,0,2,4,1,0,4,0,4,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,41,"public class Line implements Embedding<Euclidean3D, Euclidean1D> {",0,0,0,0,1,0,0,0,0,1,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,44,                                        Object ... args) {,14,1,0,0,2,0,0,2,0,18,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,45,        context = new ExceptionContext(this);,6,0,0,1,2,0,0,4,0,11,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,51,        return context;,4,0,0,0,0,1,0,0,0,5,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,63,        return context.getLocalizedMessage();,2,1,0,1,2,1,10,0,0,13,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,107,    public Vector3D(double[] v) throws DimensionMismatchException {,6,0,0,2,5,1,0,0,0,7,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,108,        if (v.length != 3) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,109,"            throw new DimensionMismatchException(v.length, 3);",10,1,0,1,2,0,0,2,0,15,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,111,        this.x = v[0];,4,0,1,1,2,0,0,0,0,11,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,112,        this.y = v[1];,2,0,1,1,2,0,0,0,0,5,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,113,        this.z = v[2];,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,124,"    public Vector3D(double alpha, double delta) {",6,0,0,1,3,1,0,0,0,7,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,125,        double cosDelta = FastMath.cos(delta);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,126,        this.x = FastMath.cos(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,127,        this.y = FastMath.sin(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,128,        this.z = FastMath.sin(delta);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",14,0,0,1,2,0,10,0,0,25,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,187,"                    double a3, Vector3D u3, double a4, Vector3D u4) {",8,0,0,0,2,0,0,4,0,12,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,188,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);",18,0,0,1,2,0,12,0,0,31,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,189,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);",18,0,0,1,2,0,12,0,0,31,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,190,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);",18,0,0,1,2,0,20,0,0,39,78,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,206,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,222,"        return new double[] { x, y, z };",0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,227,        return Euclidean3D.getInstance();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,232,        return ZERO;,2,0,0,0,0,1,0,2,0,5,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,237,        return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,243,        return FastMath.sqrt (x * x + y * y + z * z);,0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,254,"        return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",0,0,0,5,10,1,26,0,0,26,85,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,262,"        return FastMath.atan2(y, x);",0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,270,        return FastMath.asin(z / getNorm());,2,1,0,2,4,1,6,0,0,9,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,275,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,281,"        return new Vector3D(1, this, factor, (Vector3D) v);",0,0,0,2,4,1,0,0,0,7,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,292,"        return new Vector3D(1, this, -factor, (Vector3D) v);",4,0,0,2,4,1,0,4,0,9,52,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,297,        double s = getNorm();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,298,        if (s == 0) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,299,            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,4,0,0,1,2,0,0,2,0,6,88,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,301,        return scalarMultiply(1 / s);,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,321,        double threshold = 0.6 * getNorm();,2,1,0,1,2,0,2,0,0,5,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,0,0,0,9,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0,0,0,0,0,0,0,0,0,0,7,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,0,1,2,0,0,0,0,3,9,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,0,0,0,3,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,1,0,0,0,1,4,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,10,0,0,0,0,3,0,0,0,15,10,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,0,0,2,4,0,6,0,0,13,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,8,1,0,0,0,0,16,0,0,27,15,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,14,1,1,1,2,0,0,2,0,22,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0,0,0,0,0,0,0,0,0,0,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,0,0,0,0,3,25,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,796,        final double[] reciprocal = new double[getSize()];,2,0,0,3,6,1,8,0,0,11,50,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,797,"        pow(rhs, lhsOffset, -1, reciprocal, 0);",2,0,0,1,2,0,8,0,0,11,39,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,798,"        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",4,0,0,1,2,0,0,0,0,5,62,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,799,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,894,            final double inv = 1.0 / operand[operandOffset];,2,1,1,1,2,1,0,0,0,8,48,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,895,"            double xk = FastMath.pow(inv, -n);",2,0,1,1,2,1,0,0,0,9,34,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,896,            for (int i = 0; i <= order; ++i) {,8,2,0,1,3,0,8,0,0,19,34,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,897,                function[i] = xk;,2,0,1,1,2,0,0,0,0,7,17,8,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,898,                xk *= inv;,14,1,0,0,0,0,4,0,0,21,10,0,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,950,            function[0] = FastMath.sqrt(operand[operandOffset]);,0,0,1,3,6,0,4,0,0,11,52,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,951,            xk          = 0.5 / function[0];,2,1,1,1,2,0,0,0,0,6,32,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,872,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,881,        double[] function = new double[1 + order];,2,2,1,2,4,0,0,0,0,6,42,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,883,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,902,        double coefficient = n;,0,0,0,0,0,0,0,0,0,0,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,903,        for (int i = 1; i <= order; ++i) {,12,3,0,1,3,0,0,0,0,18,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,904,            function[i] *= coefficient;,2,0,1,1,2,0,0,0,0,7,27,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,905,            coefficient *= n - i;,14,2,0,0,0,2,0,0,0,19,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,909,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,12,0,0,12,64,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,911,    },2,0,0,0,1,1,8,2,0,13,1,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,947,        double[] function = new double[1 + order];,4,1,0,2,4,0,6,0,0,11,42,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,949,        if (n == 2) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,959,        final double nReciprocal = 1.0 / n;,0,0,0,0,0,0,0,0,0,0,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,960,        final double xReciprocal = 1.0 / operand[operandOffset];,0,0,0,1,2,0,0,0,0,3,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,961,        for (int i = 1; i <= order; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,962,            function[i] = xk;,0,0,1,1,2,0,4,0,0,6,17,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,963,            xk *= xReciprocal * (nReciprocal - i);,12,4,0,1,2,0,4,0,0,21,38,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,967,"        compose(operand, operandOffset, function, result, resultOffset);",4,2,1,1,2,0,12,0,0,23,64,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,969,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1615,        } else if (e < 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1622,        final int splitFactor = 0x8000001;,2,0,1,0,0,1,10,0,0,22,34,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1623,        final double cd       = splitFactor * d;,0,0,0,0,0,0,0,0,0,0,40,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1624,        final double d1High   = cd - (cd - d);,2,0,0,1,2,0,0,0,0,2,38,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1625,        final double d1Low    = d - d1High;,6,1,0,0,0,1,0,0,0,8,35,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1628,        double resultHigh = 1;,2,0,0,0,0,0,0,0,0,2,22,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1629,        double resultLow  = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1632,        double d2p     = d;,10,1,0,0,0,0,2,0,0,14,19,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1633,        double d2pHigh = d1High;,6,0,0,0,0,0,0,0,0,7,24,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1634,        double d2pLow  = d1Low;,4,0,0,0,0,0,0,0,0,4,23,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1636,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1638,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1641,                final double tmpHigh = resultHigh * d2p;,8,1,0,0,0,1,0,0,0,11,40,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1642,                final double cRH     = splitFactor * resultHigh;,0,0,0,0,0,0,0,0,0,0,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1643,                final double rHH     = cRH - (cRH - resultHigh);,0,0,0,1,2,0,0,0,0,3,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1644,                final double rHL     = resultHigh - rHH;,6,1,0,0,0,1,0,0,0,8,40,8,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,28,14,1,3,6,1,0,0,0,48,99,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1646,                resultHigh = tmpHigh;,0,0,1,0,0,0,4,0,0,6,21,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1647,                resultLow  = resultLow * d2p + tmpLow;,18,3,0,0,0,0,0,0,0,23,38,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1652,            final double tmpHigh = d2pHigh * d2p;,0,0,0,0,0,0,0,0,0,0,37,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1653,            final double cD2pH   = splitFactor * d2pHigh;,6,1,0,0,0,1,0,0,0,8,45,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,1,1,1,2,0,4,0,0,11,49,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1655,            final double d2pHL   = d2pHigh - d2pHH;,6,1,0,0,0,1,0,0,0,8,39,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,20,8,0,3,6,1,0,0,0,29,107,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1657,            final double cTmpH   = splitFactor * tmpHigh;,2,0,0,0,0,1,4,2,0,9,45,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0,0,0,1,2,0,4,0,0,4,36,7,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0,0,0,1,2,0,0,0,0,3,54,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1660,            d2p     = d2pHigh + d2pLow;,8,1,0,0,0,3,0,0,0,13,27,1,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1662,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1664,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1666,        return resultHigh + resultLow;,4,1,0,0,0,1,0,0,0,5,30,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,315,        final int vSize = valueCompiler.lowerIndirection.length;,16,2,0,0,0,2,0,0,0,20,56,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,316,        final int dSize = derivativeCompiler.lowerIndirection.length;,8,0,0,0,0,1,0,0,0,9,61,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,317,        final int[] lowerIndirection = new int[vSize + dSize];,6,1,0,2,4,1,0,0,0,8,54,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,318,"        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",0,0,0,1,2,0,0,0,0,3,80,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,319,        for (int i = 0; i < dSize; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,320,            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];,0,0,0,3,6,0,0,0,0,9,95,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,323,        return lowerIndirection;,2,0,0,0,0,1,0,0,0,2,24,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,373,                            termJ[0] += termK[0];,0,0,1,2,4,0,0,0,0,5,21,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,375,                            termK[0] = 0;,0,0,1,1,2,0,0,0,0,3,13,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,441,"                    derivedTermF[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,450,                    int[] derivedTermG = new int[term.length];,6,0,0,2,4,0,0,0,0,6,42,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,451,                    derivedTermG[0] = term[0];,0,0,0,2,4,0,0,0,0,6,26,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,452,                    derivedTermG[1] = term[1];,0,0,1,2,4,0,0,0,0,5,26,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,453,                    for (int j = 2; j < term.length; ++j) {,10,1,0,1,3,0,0,0,0,12,39,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,456,"                        derivedTermG[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,459,                        if (j == l) {,6,1,0,1,3,0,0,0,0,8,13,0,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,461,"                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",0,0,0,3,6,0,0,0,0,9,84,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,462,                            orders[parameters - 1]++;,2,1,1,1,2,0,0,0,0,6,25,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,463,"                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",2,0,1,2,4,1,10,0,0,18,78,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,466,"                    Arrays.sort(derivedTermG, 2, derivedTermG.length);",4,0,0,1,2,0,6,0,0,10,50,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,467,                    row.add(derivedTermG);,6,0,0,1,2,0,6,0,0,13,22,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,478,                        final int[] termK = row.get(k);,2,0,0,2,4,1,6,0,0,9,31,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,479,                        boolean equals = termJ.length == termK.length;,10,1,0,0,0,0,0,0,0,11,46,13,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,480,                        for (int l = 1; equals && l < termJ.length; ++l) {,0,0,0,1,3,0,0,0,0,4,50,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,483,                        if (equals) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,603,        int[] orders = new int[destP];,2,0,1,2,4,0,0,0,0,4,30,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,604,"        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",0,0,0,3,6,0,6,0,0,6,92,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,605,"        return getPartialDerivativeIndex(destP, destO, destSizes, orders);",0,0,0,1,2,1,0,0,0,4,66,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,771,        for (int i = 0; i < multIndirection.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,772,            final int[][] mappingI = multIndirection[i];,0,0,0,3,6,0,0,0,0,9,44,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,773,            double r = 0;,2,0,0,0,0,0,4,0,0,6,13,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,774,            for (int j = 0; j < mappingI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,43,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,775,                r += mappingI[j][0] *,8,2,1,2,4,1,4,2,0,22,21,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,779,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,10,29,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1712,        for (int i = 0; i < compIndirection.length; ++i) {,12,1,0,1,3,0,6,0,0,21,50,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1713,            final int[][] mappingI = compIndirection[i];,2,0,1,3,6,1,0,0,0,7,44,6,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1714,            double r = 0;,6,0,0,0,0,0,0,0,0,6,13,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1715,            for (int j = 0; j < mappingI.length; ++j) {,12,3,0,1,3,0,0,0,0,16,43,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1716,                final int[] mappingIJ = mappingI[j];,2,0,1,2,4,1,0,0,0,7,36,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1717,                double product = mappingIJ[0] * f[mappingIJ[1]];,2,1,1,3,6,0,0,0,0,9,48,9,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1718,                for (int k = 2; k < mappingIJ.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1719,                    product *= operand[operandOffset + mappingIJ[k]];,6,1,1,2,4,0,0,0,0,14,49,1,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1721,                r += product;,0,0,0,0,0,0,0,0,0,0,13,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1723,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,15,29,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,737,        for (int i = 0; i < getSize(); ++i) {,6,1,0,2,5,0,2,0,0,10,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,738,            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];,12,4,1,3,6,0,0,0,0,23,67,6,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,740,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.00813,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1760,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0068,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1757,        if (order != compiler.order) {,6,1,0,1,3,0,0,0,0,7,30,4,0.00676,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1754,        if (parameters != compiler.parameters) {,6,1,0,1,3,0,0,0,0,7,40,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,231,        return data[0];,0,0,0,1,2,1,0,0,0,4,15,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,119,"            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;",0,0,1,3,6,0,10,0,0,13,59,6,0.00463,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,117,        if (order > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00459,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0,0,0,1,2,0,0,0,0,3,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0,0,0,3,6,0,0,0,0,9,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0,0,0,2,4,0,0,0,0,6,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,8,47,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,10,2,0,2,4,1,0,0,0,14,61,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,12,4,0,2,4,0,16,0,0,34,65,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,4,2,1,1,3,0,0,0,0,15,15,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,2,0,0,2,4,2,0,0,0,3,51,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },2,1,0,0,1,0,0,0,0,3,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",14,1,1,1,2,0,0,0,0,20,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,11,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,12,1,1,1,2,0,0,0,0,17,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,2,1,2,4,0,0,0,0,15,65,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,2,0,1,1,3,0,0,2,0,9,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0,0,0,6,12,0,0,0,0,18,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0,0,0,0,1,0,0,0,0,1,88,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,4,0,0,0,1,0,0,0,0,5,37,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },6,1,0,0,1,0,0,0,0,7,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,16,0,0,16,55,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,19,41,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,8,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,14,50,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,8,1,0,0,0,3,4,0,0,16,15,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",14,1,0,2,4,0,0,0,0,17,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,0,0,1,2,0,10,0,0,13,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,18,4,0,1,2,1,2,0,0,26,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },2,0,0,0,1,0,4,0,0,7,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,1,1,2,1,6,2,0,16,50,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,10,63,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,0,0,0,0,0,1,6,0,0,6,11,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,0,0,0,0,2,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,0,0,1,2,1,2,0,0,5,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,8,1,1,1,2,1,0,0,0,13,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0,0,0,0,1,0,6,0,0,6,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,4,1,1,2,0,8,0,0,34,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,10,1,0,1,3,0,0,0,0,13,35,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,10,0,0,15,68,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,0,4,0,0,23,56,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",4,0,0,1,2,0,4,0,0,9,23,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,6,0,0,11,36,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,20,0,0,1,2,0,2,0,0,23,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",4,0,0,1,2,1,0,2,0,6,39,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",2,0,1,1,2,1,0,0,0,7,64,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },6,3,0,0,1,0,8,0,0,17,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,10,2,0,0,0,0,0,0,0,13,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",14,3,0,1,2,0,10,0,0,28,33,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },4,0,0,0,1,0,0,0,0,5,1,12,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,4,2,0,11,50,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,2,0,9,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,8,2,0,0,0,1,0,0,0,11,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,4,0,1,0,0,1,0,0,0,7,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,8,2,0,0,0,1,6,0,0,18,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,0,8,0,0,20,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0,0,0,1,4,0,0,0,0,5,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,0,0,0,0,0,0,0,0,0,0,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,4,0,0,2,5,0,2,0,0,8,23,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,12,0,0,22,29,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,0,0,0,3,6,0,0,0,0,9,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,3,1,1,2,0,0,0,0,14,85,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,0,10,0,0,12,104,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,10,1,0,1,3,1,4,0,0,17,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,16,4,0,0,0,2,8,0,0,32,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",4,3,0,1,2,1,14,0,0,22,47,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,0,0,4,22,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,8,1,0,0,1,0,0,0,0,11,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,6,1,0,0,0,1,0,0,0,8,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,0,2,4,0,0,0,0,6,102,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,8,5,0,1,3,0,0,0,0,13,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },2,1,1,0,1,0,12,0,0,19,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,6,0,1,2,4,2,2,4,0,17,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,6,0,0,1,3,0,4,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0,0,0,0,0,0,0,0,0,0,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,6,1,0,0,0,1,0,0,0,8,19,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,8,1,0,2,5,0,2,0,0,11,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0,0,0,1,2,1,0,0,0,4,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,10,0,0,17,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,4,0,1,1,3,0,0,0,0,27,27,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0,0,0,1,2,0,0,0,0,3,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,8,0,0,11,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,4,0,1,2,4,1,0,0,0,8,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,48,18,1,2,4,0,0,2,0,75,43,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },2,0,0,0,1,0,0,0,0,3,1,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,6,0,0,9,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,4,0,0,0,0,1,0,0,0,5,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,70,        random = null;,4,0,0,0,0,1,2,0,0,8,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,76,    protected AbstractRealDistribution(RandomGenerator rng) {,4,0,0,1,3,1,0,2,0,7,57,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,91,"        return probability(x0, x1);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,112,        if (x0 > x1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,157,        if (p < 0.0 || p > 1.0) {,10,4,0,1,3,0,0,0,0,14,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,158,"            throw new OutOfRangeException(p, 0, 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,161,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,162,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,163,            return lowerBound;,16,3,1,0,0,1,0,0,0,21,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,167,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,168,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,171,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,12,2,0,2,5,0,12,0,0,29,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,178,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,181,                lowerBound = -1.0;,10,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,182,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,183,                    lowerBound *= 2.0;,8,0,1,0,0,1,0,0,0,12,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,188,        if (upperBound == Double.POSITIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,189,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,192,                upperBound = 1.0;,4,0,0,0,0,0,0,0,0,5,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,194,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,206,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,211,        if (!isSupportConnected()) {,6,3,0,2,5,0,2,0,0,12,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,213,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,215,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,216,                if (cumulativeProbability(x - dx) == px) {,6,2,0,2,5,0,2,0,0,10,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,217,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,218,                    while (upperBound - lowerBound > dx) {,8,2,0,1,3,0,0,0,0,10,38,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,220,                        if (cumulativeProbability(midPoint) < px) {,10,3,0,2,5,1,8,0,0,22,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,221,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,225,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,226,                    return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,247,        randomData.reSeed(seed);,6,1,0,1,2,0,6,0,0,14,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,248,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,269,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,0,0,5,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,0,0,0,1,0,0,2,0,9,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,273,        double[] out = new double[sampleSize];,4,0,1,2,4,1,0,0,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,277,        return out;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,108,"            throw new DimensionMismatchException(covariances.length, dim);",6,0,0,1,2,0,0,2,0,8,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,113,"                throw new DimensionMismatchException(covariances[i].length, dim);",6,0,1,2,4,0,0,2,0,12,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,134,"                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",2,0,1,2,4,0,0,2,0,8,73,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,173,        return covarianceMatrix.copy();,6,1,0,1,2,1,4,0,0,12,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,180,"            throw new DimensionMismatchException(vals.length, dim);",6,0,0,1,2,0,0,2,0,8,55,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,195,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,196,        final double[] std = new double[dim];,2,0,1,2,4,1,0,0,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,197,        final double[][] s = covarianceMatrix.getData();,2,0,0,3,6,1,4,0,0,7,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,198,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,199,            std[i] = FastMath.sqrt(s[i][i]);,12,1,0,4,8,0,6,0,0,21,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,201,        return std;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,206,        final int dim = getDimension();,4,1,0,1,2,1,2,0,0,8,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,207,        final double[] normalVals = new double[dim];,2,0,1,2,4,1,0,0,0,5,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,209,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,10,0,0,10,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,210,            normalVals[i] = random.nextGaussian();,2,0,1,2,4,0,4,0,0,13,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,213,        final double[] vals = samplingMatrix.operate(normalVals);,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,215,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,216,            vals[i] += means[i];,10,2,1,2,4,0,0,0,0,23,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,219,        return vals;,6,2,0,0,0,1,0,2,0,10,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,48,        random.setSeed(seed);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,61,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,62,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",10,2,0,0,1,0,0,2,0,15,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0,0,0,4,8,0,0,0,0,12,71,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,0,0,0,0,0,0,0,0,0,0,28,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,101,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,103,            final double x = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,104,            final double y = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,0,0,2,4,1,0,0,0,3,58,2,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,107,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,108,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,109,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,6,0,0,0,0,0,0,0,0,7,22,3,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,0,0,1,0,0,0,2,0,0,5,26,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,8,2,0,0,0,4,8,0,0,22,14,1,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,8,1,0,0,0,4,0,0,0,13,17,1,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,6,0,0,1,3,0,0,2,0,8,12,7,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,8,0,0,0,0,0,2,10,0,20,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2307,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,6,1,0,0,0,3,0,0,0,10,10,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1824,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1825,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1841,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,0,0,0,0,3,39,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1842,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1844,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1845,        double b = -(a - pi2a + xa);,8,0,0,1,2,1,0,0,0,10,28,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1846,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1848,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2226,        boolean negative = false;,14,2,0,0,0,0,0,0,0,17,25,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2227,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2229,        double xb = 0.0;,6,1,1,0,0,1,0,0,0,12,16,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2232,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2233,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2239,        if (xa == 0.0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2252,        if (xa > 3294198.0) {,8,1,0,1,3,0,14,0,0,24,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2268,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2272,        switch (quadrant) {,2,0,0,1,3,0,2,2,0,6,19,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1717,        int idx = (int) ((xa * 8.0) + 0.5);,6,2,0,3,6,0,0,0,0,9,35,0,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1721,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1722,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,0,2,0,4,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1723,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1724,        final double costB = COSINE_TABLE_B[idx];,6,0,1,1,2,1,6,0,0,17,41,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1727,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1728,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1729,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1730,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1733,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1734,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1735,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1736,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1762,        double a = 0;,2,0,0,0,0,0,6,0,0,8,13,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1763,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1765,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1766,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1767,        double d = -(c - a - t);,12,2,0,1,2,0,0,0,0,15,24,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1768,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1769,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1771,        t = costA * sinEpsA;,2,0,0,0,0,0,2,0,0,4,20,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1772,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1773,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1774,        a = c;,0,0,0,0,0,0,8,0,0,8,6,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1775,        b = b + d;,10,2,0,0,0,0,0,0,0,14,10,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,6,0,0,31,68,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1819,        if (xb != 0.0) {,4,1,0,1,3,0,0,2,0,7,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1828,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1830,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1678,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1680,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1681,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1682,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1683,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1686,        p = p * x2 * x;,6,0,0,0,0,3,0,0,0,9,15,2,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1688,        return p;,6,1,1,0,0,2,0,0,0,13,9,3,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1698,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1700,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1701,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1702,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1703,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1704,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1706,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,256,        return standardDeviation * random.nextGaussian() + mean;,0,0,0,1,2,1,4,0,0,5,56,9,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,89,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,0.08654,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2332,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.07843,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2262,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2263,            quadrant = cw.getK() & 3;,4,1,0,1,2,0,4,0,0,11,25,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2264,            xa = cw.getRemA();,4,0,0,1,2,1,4,6,0,16,18,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2265,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2317,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2318,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2319,            xa = cw.getRemA();,2,0,0,1,2,0,14,0,0,17,18,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2320,            xb = cw.getRemB();,6,0,0,1,2,1,4,0,0,12,18,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2278,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.07547,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3808,        CodyWaite(double xa) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3811,            int k = (int)(xa * 0.6366197723675814);,6,2,0,2,4,0,0,0,0,8,39,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3817,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3818,                remA = xa + a;,16,5,0,0,0,0,0,0,0,22,14,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3819,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3821,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3822,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3823,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3824,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3826,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3827,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3828,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3829,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3831,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3832,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3841,            this.finalK = k;,4,0,0,0,0,0,0,0,0,5,16,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3842,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3843,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3844,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3850,            return finalK;,4,0,0,0,0,1,0,0,0,5,14,0,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3856,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3862,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,98,"        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,112,"        this(new Well19937c(), scale, shape, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,57,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,113,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,130,        super(rng);,4,0,0,1,2,1,0,0,0,5,11,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,132,        if (shape <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,136,        this.scale = scale;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,137,        this.shape = shape;,0,0,0,0,0,0,0,0,0,0,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,138,        this.solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,139,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,64,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,67,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,0,0,1,2,3,4,0,0,9,55,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.04245,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",12,0,0,1,2,2,0,2,0,17,50,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,53,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1297,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1299,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1301,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1302,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1303,            lnza = lnza * epsilon;,10,2,0,0,0,0,6,0,0,19,22,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1120,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.03396,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,50,    @Deprecated,0,0,0,0,0,0,0,0,0,0,11,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,76,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3777,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,3,0,5,10,1,12,0,0,28,79,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1242,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1244,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1322,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1323,        double d = -(c-a-lnm[0]);,10,2,1,2,4,0,0,0,0,18,25,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1325,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1327,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1328,        d = -(c - a - lnza);,14,1,0,1,2,0,0,0,0,18,20,0,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0,0,0,0,1,1,0,0,0,2,32,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,        observations      = new ArrayList<WeightedObservedPoint>();,0,0,0,1,2,0,0,0,0,3,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);",0,0,0,1,2,0,0,0,0,3,41,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0,0,1,1,3,0,0,0,0,5,12,6,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0,0,0,1,2,0,0,0,0,3,95,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,0,0,0,6,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,1,0,2,4,0,0,0,0,3,104,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,        if (rows != matrix.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,10,1,0,0,0,1,0,0,0,13,12,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",6,0,0,1,2,1,0,0,0,7,22,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",10,2,0,1,2,0,6,0,0,19,28,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0,2,1,0,1,0,0,0,0,6,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,    },2,0,0,0,1,0,0,0,0,2,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",18,1,0,0,1,0,0,0,0,20,76,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0,0,0,0,1,0,0,0,0,1,73,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,3,4,0,0,18,35,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,        this.columnSeparator   = columnSeparator;,0,0,0,0,0,0,0,0,0,0,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,        return format;,0,0,0,0,0,1,0,0,0,1,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,    public DiagonalMatrix(final double[] d) {,0,0,0,2,5,0,0,0,0,7,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,        final int dim = getRowDimension();,0,0,0,1,2,0,0,0,0,3,34,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,14,0,0,19,48,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,238,        return row == column ? data[row] : 0;,0,0,0,1,2,1,0,0,0,4,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,290,        return data == null ? 0 : data.length;,0,0,0,0,0,1,0,0,0,1,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0,0,0,1,2,1,2,0,0,2,25,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0,0,1,2,5,0,0,0,0,5,49,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,6,0,0,1,2,3,0,2,0,11,46,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,2,0,11,54,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,97,    },0,0,1,0,1,0,0,0,0,9,1,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,4,0,0,0,0,0,0,0,0,6,10,0,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,2,1,0,2,4,1,6,0,0,9,51,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,264,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,267,    },2,0,0,0,1,1,0,6,0,10,1,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,43,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,6,0,0,1,2,3,0,2,0,12,42,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,45,    },2,0,0,0,1,0,0,0,0,2,1,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,67,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,37,    public InitialGuess(double[] startPoint) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,26,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,39,    },0,0,0,0,1,0,4,0,0,4,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,47,        return init.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,231,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,6,0,0,1,2,0,4,0,0,11,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,235,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,239,        setUp();,0,0,0,1,2,0,2,0,0,2,8,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,260,        return weightMatrix.copy();,0,0,0,1,2,1,0,0,0,4,27,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,321,        final int dim = target.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,2,0,1,1,2,0,0,0,0,5,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0,0,1,2,4,0,8,0,0,13,40,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,326,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,343,            if (data instanceof Target) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,6,0,0,3,6,0,2,2,0,11,37,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,345,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,10,1,0,1,3,0,0,2,0,14,29,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,14,1,0,3,6,0,2,2,0,22,43,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,349,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,351,            if (data instanceof InitialGuess) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,6,0,0,0,0,2,0,2,0,11,9,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,6,0,1,2,5,1,4,0,0,16,38,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,49,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",6,0,0,2,4,1,16,0,0,22,109,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,502,        super.setUp();,0,0,0,1,2,0,0,0,0,3,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,508,        weightMatrixSqrt = squareRoot(getWeight());,0,0,0,2,4,0,0,0,0,6,43,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,562,            final EigenDecomposition dec = new EigenDecomposition(m);,0,0,0,1,2,0,0,0,0,3,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0,0,0,1,3,1,6,2,0,8,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0,0,0,1,3,1,0,0,0,5,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,2,1,0,1,3,1,12,2,0,19,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,4,0,0,1,3,1,6,2,0,12,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,53,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,62,"        this(max,",0,0,0,0,1,0,0,0,0,1,9,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,80,                       MaxCountExceededCallback cb) {,0,0,0,0,2,0,0,0,0,2,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,41,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,81,        if (cb == null){,0,0,0,1,3,0,0,0,0,4,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,0,0,2,4,0,0,0,0,4,65,7,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,101,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,134,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,4,0,0,1,2,0,0,0,0,4,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,631,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,4,0,1,2,4,1,0,2,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,638,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,644,        },6,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,652,"            return new Array2DRowRealMatrix(data, false);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,2,0,0,0,1,2,0,4,0,8,100,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,4,0,0,1,2,4,6,2,0,15,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,60,        return getExpectedDimension(0);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,2,0,0,1,2,1,2,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,10,1,0,1,2,1,0,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,74,        return expected.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,82,        return wrong[index];,0,0,1,1,2,1,0,0,0,4,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,89,        return expected[index];,0,0,1,1,2,1,0,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,44,                                        Object ... args) {,10,3,0,0,2,2,0,0,0,15,18,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,8,1,0,1,3,2,0,4,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1309,                        return i.hasNext();,0,0,0,1,2,1,4,0,0,4,19,15,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1314,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1315,                        return e;,6,1,1,0,0,1,0,0,0,12,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1326,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,0,0,0,1,3,1,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1258,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1264,                return v.map(function);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1270,                final Iterator<Entry> i = v.iterator();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1271,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1301,                final Iterator<Entry> i = v.sparseIterator();,2,0,0,1,2,1,10,4,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,4,0,0,1,3,1,0,4,0,9,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1334,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1341,                return v.add(w);,0,0,0,1,2,1,6,0,0,6,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1348,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1354,                return v.mapAdd(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1366,                throw new MathUnsupportedOperationException();,4,0,0,1,2,0,0,0,0,5,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1372,                return v.mapSubtract(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1384,                throw new MathUnsupportedOperationException();,4,0,1,1,2,2,0,6,0,15,46,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1390,                return v.mapMultiply(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1402,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,5,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1408,                return v.mapDivide(d);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1420,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1427,                return v.ebeMultiply(w);,8,1,0,1,2,1,6,0,0,16,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1434,                return v.ebeDivide(w);,4,0,0,1,2,1,6,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1441,                return v.dotProduct(w);,0,1,1,1,2,1,6,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1448,                return v.cosine(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1454,                return v.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1460,                return v.getL1Norm();,0,0,0,1,2,1,4,0,0,4,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1466,                return v.getLInfNorm();,8,2,0,1,2,1,4,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1473,                return v.getDistance(w);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1480,                return v.getL1Distance(w);,0,0,0,1,2,1,6,0,0,6,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1487,                return v.getLInfDistance(w);,2,0,0,1,2,2,10,0,0,14,28,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1493,                return v.unitVector();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1504,                throw new MathUnsupportedOperationException();,2,2,0,1,2,0,0,0,0,4,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1510,                return v.outerProduct(w);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1516,                return v.getEntry(index);,4,1,0,1,2,1,6,0,0,11,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1528,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,9,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1540,                throw new MathUnsupportedOperationException();,0,1,1,1,2,0,0,0,0,8,46,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1546,                return v.getDimension();,12,5,0,1,2,1,4,0,0,21,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1552,                return v.append(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1558,                return v.append(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1565,"                return v.getSubVector(index, n);",0,0,0,1,2,1,8,0,0,8,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1577,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1589,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1595,                return v.toArray();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1601,                return v.isNaN();,0,0,0,1,2,1,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1607,                return v.isInfinite();,6,1,0,1,2,1,4,0,0,12,22,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1614,"                return v.combine(a, b, y);",4,0,0,1,2,1,22,4,0,31,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1626,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1159,    @Deprecated,18,3,0,0,0,0,0,0,0,21,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,100,    },0,0,0,0,1,0,14,0,0,14,1,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,166,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,177,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,178,        if (d != n) {,14,2,0,1,3,0,0,0,0,18,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,179,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,190,        if (index < 0 ||,8,3,0,0,1,0,0,4,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,4,2,0,10,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,208,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,209,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",6,0,0,0,1,0,0,2,0,8,63,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,213,        if ((end < 0) || (end >= dim)) {,10,3,1,3,7,1,8,2,0,28,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",6,0,0,0,1,0,0,2,0,8,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,217,        if (end < start) {,6,1,0,1,3,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",4,0,0,0,1,0,0,2,0,6,81,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,222,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,234,        checkVectorDimensions(v);,4,0,0,1,2,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,235,        RealVector result = v.copy();,2,0,0,1,2,0,12,2,0,16,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,236,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,8,4,0,14,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,237,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,238,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,239,            final int index = e.getIndex();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",2,1,0,3,6,1,16,0,0,20,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,241,        },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,242,        return result;,8,0,0,0,0,1,0,2,0,11,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,255,        checkVectorDimensions(v);,6,1,0,1,2,0,4,0,0,11,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,256,        RealVector result = v.mapMultiply(-1d);,4,0,0,1,2,0,8,2,0,16,39,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,257,        Iterator<Entry> it = iterator();,10,1,0,1,2,0,2,4,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,258,        while (it.hasNext()) {,0,0,1,2,5,0,4,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,259,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,260,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,263,        return result;,12,0,0,0,0,2,0,0,0,14,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,274,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,285,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,288,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,307,        checkVectorDimensions(v);,16,3,0,1,2,0,4,0,0,25,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,308,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,309,        final int n = getDimension();,4,0,0,1,2,1,8,2,0,15,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,310,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,311,            d += getEntry(i) * v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,313,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,329,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,330,        final double vNorm = v.getNorm();,2,0,0,1,2,1,6,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,332,        if (norm == 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,336,        return dotProduct(v) / (norm * vNorm);,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,396,        checkVectorDimensions(v);,4,1,0,1,2,0,4,0,0,9,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,397,        double d = 0;,6,3,0,0,0,0,8,0,0,17,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,398,        Iterator<Entry> it = iterator();,10,0,0,1,2,0,2,4,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,399,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,400,            final Entry e = it.next();,10,2,0,1,2,1,4,2,0,19,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,4,2,0,3,6,1,18,0,0,25,60,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,402,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,403,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,404,        return FastMath.sqrt(d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,418,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,419,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,420,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,421,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,422,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,423,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,424,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,425,        return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,439,        double norm = 0;,12,3,0,0,0,0,0,0,0,17,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,440,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,441,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,442,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,443,            norm += FastMath.abs(e.getValue());,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,444,        },4,0,1,0,1,0,6,0,0,13,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,445,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,459,        double norm = 0;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,460,        Iterator<Entry> it = iterator();,8,1,0,1,2,1,2,4,0,16,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,461,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,462,            final Entry e = it.next();,4,1,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,464,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,465,        return norm;,2,0,0,0,0,1,6,0,0,8,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,481,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,482,        double d = 0;,4,1,1,0,0,0,0,0,0,14,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,483,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,484,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,485,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,487,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,488,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,507,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,0,2,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,508,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,509,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,510,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,511,            final Entry e = it.next();,2,0,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,513,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,514,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,524,        int minIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,525,        double minValue = Double.POSITIVE_INFINITY;,8,0,0,0,0,0,0,0,0,9,43,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,526,        Iterator<Entry> iterator = iterator();,4,0,0,1,2,0,4,0,0,8,38,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,527,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,528,            final Entry entry = iterator.next();,4,1,0,1,2,1,20,2,0,28,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,529,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,530,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,531,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,533,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,534,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,544,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,555,        int maxIndex    = -1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,556,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,557,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,558,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,559,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,560,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,561,                maxIndex = entry.getIndex();,2,1,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,562,                maxValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,564,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,565,        return maxIndex;,12,1,0,0,0,1,0,0,0,14,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,575,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,588,        return copy().mapMultiplyToSelf(d);,10,2,1,2,4,2,6,0,0,21,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,610,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,621,        return mapAddToSelf(-d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,632,        return copy().mapDivideToSelf(d);,4,0,0,2,4,4,6,6,0,19,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,6,0,0,7,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,653,        final int m = this.getDimension();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,654,        final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,657,"            product = new OpenMapRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,659,"            product = new Array2DRowRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,661,        for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,662,            for (int j = 0; j < n; j++) {,4,1,1,1,3,0,0,0,0,9,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,3,6,0,18,0,0,19,57,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,666,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,681,        final double norm2 = v.dotProduct(v);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,682,        if (norm2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,6,1,1,1,2,0,0,2,0,16,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,3,6,1,14,0,0,15,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,694,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,695,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,696,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,697,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,698,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,699,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,709,        int dim = getDimension();,10,2,0,1,2,0,2,0,0,15,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,710,        double[] values = new double[dim];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,711,        for (int i = 0; i < dim; i++) {,10,1,0,1,3,0,8,0,0,21,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,712,            values[i] = getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,714,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,725,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,726,        if (norm == 0) {,4,2,0,1,3,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,729,        return mapDivide(norm);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,739,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,740,        if (norm == 0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,743,        mapDivideToSelf(getNorm());,6,1,0,2,4,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,744,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,767,        return new SparseEntryIterator();,2,0,0,1,2,2,0,2,0,5,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,781,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,782,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,827,        return copy().mapToSelf(function);,0,0,0,2,4,1,6,0,0,6,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,844,        Iterator<Entry> it = iterator();,18,1,0,1,2,0,2,4,0,26,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,845,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,846,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,847,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,848,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,849,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,867,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,884,        checkVectorDimensions(y);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,885,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,886,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,887,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,888,"            setEntry(i, a * xi + b * yi);",10,3,0,1,2,0,4,0,0,17,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,890,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,904,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,905,"        visitor.start(dim, 0, dim - 1);",6,2,0,1,2,0,6,0,0,14,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,906,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,907,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,909,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,928,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,929,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,930,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,931,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,933,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,949,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,970,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,984,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,985,"        visitor.start(dim, 0, dim - 1);",6,1,0,1,2,1,10,0,0,18,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,986,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,14,0,0,14,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,989,        return visitor.end();,8,1,0,1,2,1,4,0,0,14,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1008,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1009,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1010,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1013,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1029,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1050,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1125,        throw new MathUnsupportedOperationException();,12,2,1,1,2,0,10,2,0,30,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1138,        throw new MathUnsupportedOperationException();,10,2,0,1,2,1,4,0,0,18,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,2,0,0,1,3,1,0,2,0,4,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1059,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1060,            setIndex(0);,6,1,0,1,2,0,0,0,0,8,12,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1061,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1069,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1078,"            setEntry(getIndex(), value);",0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1079,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1087,            return index;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1096,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1097,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,2,0,0,0,1,0,0,2,0,4,39,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1634,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1646,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,52,                                             Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,53,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,54,"        context.addMessage(pattern, args);",2,1,0,1,2,0,8,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,55,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,59,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,65,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,71,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,10,0,0,1,4,1,10,4,0,26,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,606,"                out.setEntry(column, row, value);",8,1,1,1,2,0,18,0,0,32,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,67,        throws NotStrictlyPositiveException {,4,2,0,0,1,0,8,0,0,15,37,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,69,            throw new NotStrictlyPositiveException(rowDimension);,6,0,0,1,2,0,6,0,0,14,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,72,            throw new NotStrictlyPositiveException(columnDimension);,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,79,"        MatrixUtils.checkAdditionCompatible(this, m);",6,0,0,1,2,3,6,0,0,15,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,82,        final int columnCount = getColumnDimension();,6,2,1,1,2,1,2,0,0,17,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,84,        for (int row = 0; row < rowCount; ++row) {,0,0,1,1,3,0,0,0,0,7,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,98,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,99,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,101,        for (int row = 0; row < rowCount; ++row) {,6,0,0,1,3,1,2,0,0,9,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,107,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,112,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,115,        for (int row = 0; row < rowCount; ++row) {,14,2,0,1,3,1,0,0,0,18,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,116,            for (int col = 0; col < columnCount; ++col) {,12,1,0,1,3,0,0,0,0,16,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,117,"                out.setEntry(row, col, getEntry(row, col) + d);",4,1,0,2,4,0,14,0,0,20,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,126,        final int rowCount    = getRowDimension();,12,1,0,1,2,0,0,0,0,15,42,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,127,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,129,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,130,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,131,"                out.setEntry(row, col, getEntry(row, col) * d);",2,1,0,2,4,0,14,0,0,17,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,135,        return out;,2,0,1,0,0,1,0,0,0,8,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",4,0,0,1,2,0,6,0,0,11,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,145,        final int nSum  = getColumnDimension();,8,1,0,1,2,1,2,0,0,12,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,147,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,150,                for (int i = 0; i < nSum; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,163,        return m.multiply(this);,2,0,0,1,2,1,12,0,0,15,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,169,        if (p < 0) {,2,1,0,1,3,0,4,0,0,7,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,173,        if (!isSquare()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",4,0,1,3,6,0,4,2,0,13,76,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,177,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,1,6,0,0,6,68,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,181,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,182,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,185,        final int power = p - 1;,4,1,0,0,0,1,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,2,0,0,3,6,1,8,0,0,11,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,4,1,0,1,2,1,0,8,0,14,69,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,196,        int maxI = -1;,26,2,1,0,0,0,0,0,0,36,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,199,            if (binaryRepresentation[i] == '1') {,0,1,1,2,5,0,0,0,0,6,37,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,200,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,201,                nonZeroPositions.add(pos);,2,0,0,1,2,0,0,0,0,2,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,204,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,205,                    maxI = pos;,4,0,0,0,0,0,0,0,0,5,11,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,4,1,0,2,4,0,0,4,0,9,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,211,        results[0] = this.copy();,0,0,1,2,4,0,2,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,213,        for (int i = 1; i <= maxI; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,214,            results[i] = results[i-1].multiply(results[i-1]);,6,2,1,4,8,0,2,0,0,24,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,217,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,219,        for (Integer i : nonZeroPositions) {,4,0,0,1,3,0,0,2,0,6,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,220,            result = result.multiply(results[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,221,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,223,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,230,        for (int i = 0; i < data.length; ++i) {,0,1,0,1,3,0,8,0,0,9,39,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,231,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,232,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,233,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,237,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,8,1,0,1,4,1,2,2,0,14,63,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,310,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,312,        for (int i = startRow; i <= endRow; ++i) {,16,2,0,1,3,0,0,0,0,20,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,313,            for (int j = startColumn; j <= endColumn; ++j) {,10,1,0,1,3,0,0,0,0,12,48,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,318,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,8,0,0,8,69,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,327,        final RealMatrix subMatrix =,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,4,1,0,1,4,0,0,0,0,5,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,339,        return subMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,349,        final int rowsCount    = endRow + 1 - startRow;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,350,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0,0,0,4,9,0,0,0,0,13,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,388,        if ((destination.length < selectedRows.length) ||,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0,0,0,1,3,0,0,0,0,4,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,394,        for (int i = 0; i < selectedRows.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,395,            final double[] destinationI = destination[i];,8,1,1,2,4,1,0,0,0,14,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,396,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,4,8,0,2,0,0,15,64,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,400,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,406,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,20,0,0,20,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,407,        final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,408,        if (nRows == 0) {,10,4,1,1,3,0,8,0,0,30,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,4,0,0,1,2,0,0,2,0,6,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,412,        final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,413,        if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,417,        for (int r = 1; r < nRows; ++r) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,418,            if (subMatrix[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",22,1,1,2,4,0,0,2,0,34,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,423,"        MatrixUtils.checkRowIndex(this, row);",14,5,0,1,2,0,6,0,0,26,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,424,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",4,2,0,1,2,0,8,0,0,14,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,428,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,429,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,433,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,437,"        MatrixUtils.checkRowIndex(this, row);",2,1,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,438,        final int nCols = getColumnDimension();,8,2,0,1,2,1,2,0,0,14,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,439,"        final RealMatrix out = createMatrix(1, nCols);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,440,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,441,"            out.setEntry(0, i, getEntry(row, i));",4,0,0,2,4,0,12,0,0,17,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,444,        return out;,4,0,0,0,0,1,0,0,0,4,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,450,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,451,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,452,        if ((matrix.getRowDimension() != 1) ||,14,5,0,2,5,0,0,0,0,20,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,1,0,1,3,0,16,2,0,19,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,458,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,459,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,470,"            out.setEntry(i, 0, getEntry(i, column));",4,1,0,2,4,0,0,0,0,5,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,473,        return out;,8,0,0,0,0,5,2,0,0,15,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,479,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,480,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,481,        if ((matrix.getRowDimension() != nRows) ||,8,2,1,2,5,0,4,0,0,17,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",2,0,0,1,3,0,0,0,0,3,68,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,487,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,2,4,0,12,0,0,12,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,490,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,495,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,501,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,502,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,503,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",6,1,0,1,3,0,4,2,0,14,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,507,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0,0,0,3,6,0,0,0,0,9,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,0,2,4,0,0,0,0,6,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,14,3,1,0,0,1,0,0,0,22,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0,0,0,1,3,0,0,0,0,4,83,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,4,3,0,0,0,0,0,0,0,7,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0,0,1,0,0,0,2,0,0,7,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,4,1,0,1,2,0,8,4,0,18,54,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,        super(null); // No custom convergence criterion.,0,0,0,1,2,0,0,0,0,3,48,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,12,2,0,0,0,0,0,0,0,15,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,        this.orthoTolerance = orthoTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },10,4,0,0,1,1,0,0,0,15,1,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,16,5,0,0,0,0,0,0,0,22,13,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,14,2,0,1,2,4,4,0,0,23,24,1,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,    },2,2,0,0,1,0,0,0,0,4,1,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,20,8,0,2,4,2,6,0,0,35,51,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,        final int dim = weight.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,2,0,0,2,5,0,12,2,0,17,38,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,        if (max <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,    },4,1,0,0,1,0,10,2,0,20,1,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",16,1,0,0,1,0,0,0,0,17,73,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,8,0,0,8,44,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,4,2,0,0,10,47,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0,1,1,0,0,1,6,0,0,14,10,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0,0,1,0,1,0,0,0,0,7,37,9,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0,0,0,0,1,0,0,0,0,1,1,7,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },2,0,0,0,1,3,0,0,0,5,1,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,0,0,0,1,76,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,138,        this.rowSeparator      = rowSeparator;,0,0,0,0,0,0,0,0,0,0,38,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,14,3,0,0,0,0,0,0,0,19,32,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0,0,1,0,1,0,4,0,0,6,1,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,6,0,0,1,2,0,0,2,0,9,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,48,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,47,    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {,0,0,0,1,3,0,0,0,0,4,59,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());",0,0,0,2,4,0,0,0,0,6,56,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,2,1,0,1,3,0,0,0,0,3,16,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,85,        maxCountCallback = cb;,0,0,0,0,0,0,0,0,0,0,22,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,50,        super(checker);,2,0,0,1,2,0,6,0,0,8,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,51,    },8,1,0,0,1,0,0,0,0,10,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,206,    private static class MaxIterCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,54,"        return fit(maxEval, new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,79,"        addObservedPoint(1.0, x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,102,        observations.add(observed);,2,0,0,1,2,0,6,0,0,9,27,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,112,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0,0,0,3,6,1,8,2,0,10,76,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,119,        observations.clear();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,180,        return optimum.getPointRef();,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,4,0,0,0,1,1,0,2,0,7,66,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,62,        super.incrementEvaluationCount();,2,0,0,1,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,63,        return model.value(params);,2,0,0,1,2,1,6,0,0,8,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,88,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,90,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,92,        return super.optimize(optData);,4,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,101,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,110,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,119,        return target.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,136,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,137,            if (data instanceof ModelFunction) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,138,                model = ((ModelFunction) data).getModelFunction();,6,0,0,3,6,0,6,2,0,15,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,139,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,141,            if (data instanceof Target) {,4,1,0,1,3,0,0,0,0,5,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,142,                target = ((Target) data).getTarget();,6,0,0,3,6,0,16,4,0,27,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,143,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,145,            if (data instanceof Weight) {,4,0,0,1,3,0,0,2,0,6,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,146,                weightMatrix = ((Weight) data).getWeight();,4,0,0,3,6,0,2,2,0,9,43,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,147,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,159,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,160,"            throw new DimensionMismatchException(target.length,",4,0,0,0,1,0,0,2,0,6,51,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,35,public abstract class MultivariateVectorOptimizer,2,0,0,0,0,2,0,0,0,4,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,66,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,68,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,70,        return super.optimize(optData);,4,1,1,1,2,1,0,0,0,8,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,86,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,87,            if (data instanceof InitialGuess) {,2,0,0,1,3,0,0,2,0,4,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,88,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,89,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,91,            if (data instanceof SimpleBounds) {,18,5,0,1,3,0,4,4,0,32,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,92,                final SimpleBounds bounds = (SimpleBounds) data;,0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,93,                lowerBound = bounds.getLower();,2,0,0,1,2,0,4,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,94,                upperBound = bounds.getUpper();,4,0,0,1,2,1,4,0,0,10,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,95,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,106,        return start == null ? null : start.clone();,2,1,0,1,2,1,4,0,0,7,44,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,112,        return lowerBound == null ? null : lowerBound.clone();,2,1,0,1,2,1,4,0,0,7,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,118,        return upperBound == null ? null : upperBound.clone();,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,125,        if (start != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,126,            final int dim = start.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,127,            if (lowerBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,128,                if (lowerBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,129,"                    throw new DimensionMismatchException(lowerBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,131,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,132,                    final double v = start[i];,2,0,1,1,2,1,0,0,0,7,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,133,                    final double lo = lowerBound[i];,2,0,1,1,2,1,0,0,0,7,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,134,                    if (v < lo) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,135,"                        throw new NumberIsTooSmallException(v, lo, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,139,            if (upperBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,140,                if (upperBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,141,"                    throw new DimensionMismatchException(upperBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,143,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,144,                    final double v = start[i];,4,0,1,1,2,1,0,0,0,10,26,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,145,                    final double hi = upperBound[i];,4,0,1,1,2,1,0,0,0,12,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,146,                    if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,147,"                        throw new NumberIsTooLargeException(v, hi, true);",6,0,0,1,2,0,0,2,0,9,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,60,        return evaluations.getMaximalCount();,2,0,0,1,2,1,6,2,0,10,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,72,        return evaluations.getCount();,4,0,0,1,2,1,10,0,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,81,        return iterations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,93,        return iterations.getCount();,0,0,0,1,2,1,10,0,0,10,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,102,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,123,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,125,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,126,        iterations.resetCount();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,128,        return doOptimize();,2,1,0,1,2,1,2,0,0,5,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,147,        evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,158,        iterations.incrementCount();,0,0,0,1,2,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,175,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,176,            if (data instanceof MaxEval) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,177,                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());,2,0,0,4,8,0,6,2,0,10,59,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,178,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,180,            if (data instanceof MaxIter) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,181,                iterations.setMaximalCount(((MaxIter) data).getMaxIter());,0,0,0,4,8,0,0,0,0,12,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,182,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,66,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,220,                        final double[][] jacobian = new double[observations.size()][];,2,0,0,5,10,1,4,0,0,7,62,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,221,                        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,222,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,223,"                            jacobian[i++] = f.gradient(observed.getX(), point);",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,224,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,225,                        return jacobian;,2,0,0,0,0,1,8,0,0,10,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,184,    private class TheoreticalValuesFunction {,2,0,1,0,1,1,4,0,0,11,41,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,203,                        final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,204,                        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,205,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,206,"                            values[i++] = f.value(observed.getX(), point);",2,0,1,3,6,0,10,0,0,16,46,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,207,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,209,                        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,45,        return model;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,45,        return jacobian;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,353,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,366,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,368,        long xl = Double.doubleToLongBits(d);,10,2,0,1,2,0,6,0,0,18,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,369,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,370,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,379,        return Math.sqrt(a);,0,0,0,1,2,1,14,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,387,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,388,          return x;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,396,      if (x > 20) {,6,1,0,1,3,0,2,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,397,          if (x >= LOG_MAX_VALUE) {,6,0,0,1,3,0,0,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,399,              final double t = exp(0.5 * x);,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,400,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,402,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,404,      } else if (x < -20) {,2,1,0,1,4,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,405,          if (x <= -LOG_MAX_VALUE) {,14,3,0,1,3,0,0,0,0,20,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,407,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,8,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,408,              return (0.5 * t) * t;,4,2,0,1,2,1,0,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,410,              return 0.5 * exp(-x);,2,1,0,1,2,1,2,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,414,      final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,415,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,416,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,418,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,420,      double ya = hiPrec[0] + hiPrec[1];,0,0,1,2,4,0,0,0,0,10,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,0,0,3,6,1,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,423,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,424,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,425,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,428,      double recip = 1.0/ya;,4,1,1,0,0,0,0,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,429,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,430,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,431,      double recipb = recip - recipa;,2,0,0,0,0,0,0,0,0,3,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,436,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,439,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,440,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,441,      ya = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,442,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,443,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,444,      ya = temp;,6,1,0,0,0,0,0,0,0,8,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,446,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,447,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,448,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,456,      boolean negate = false;,4,0,0,0,0,1,6,0,0,12,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,457,      if (x != x) {,4,1,0,1,3,0,2,0,0,8,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,458,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,466,      if (x > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,467,          if (x >= LOG_MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,469,              final double t = exp(0.5 * x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,470,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,472,              return 0.5 * exp(x);,8,1,0,1,2,1,18,0,0,27,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,474,      } else if (x < -20) {,4,3,0,1,4,0,0,0,0,8,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,475,          if (x <= -LOG_MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,477,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,2,0,0,9,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,478,              return (-0.5 * t) * t;,4,2,0,1,2,1,0,0,0,7,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,480,              return -0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,484,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,485,          return x;,4,0,0,0,0,2,0,0,0,5,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,488,      if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,489,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,490,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,495,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,496,          double hiPrec[] = new double[2];,2,0,0,2,4,0,8,0,0,10,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,497,"          exp(x, 0.0, hiPrec);",8,3,0,1,2,0,6,0,0,17,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,499,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,10,1,0,3,6,0,0,0,0,13,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,502,          double temp = ya * HEX_40000000;,14,2,0,0,0,0,0,0,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,503,          double yaa = ya + temp - temp;,2,0,0,0,0,0,10,0,0,13,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,504,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,507,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,508,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,509,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,510,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,515,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,517,          recipa = -recipa;,12,2,1,0,0,0,0,0,0,20,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,518,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,521,          temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,522,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,523,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,524,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,525,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,526,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,528,          result = ya + yb;,14,1,0,0,0,0,0,0,0,16,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,529,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,530,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,532,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,533,"          expm1(x, hiPrec);",8,2,0,1,2,0,0,0,0,10,17,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,535,          double ya = hiPrec[0] + hiPrec[1];,8,1,0,2,4,0,0,0,0,10,34,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,4,0,0,4,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,539,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,540,          double denomr = 1.0 / denom;,8,1,0,0,0,0,8,0,0,17,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,541,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,542,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,543,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,544,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,545,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,547,          temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,548,          double za = denom + temp - temp;,4,1,0,0,0,0,4,0,0,10,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,549,          double zb = denom - za;,18,4,0,0,0,0,0,0,0,23,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,554,          rb += yb*denomr;                        // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,558,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,559,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,560,          ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,561,          temp = ya + rb;,8,1,0,0,0,0,0,0,0,11,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,562,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,0,5,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,563,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,565,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,566,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,569,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,570,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,573,      return result;,0,0,0,0,0,1,6,0,0,7,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,581,      boolean negate = false;,10,1,1,0,0,1,0,0,0,18,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,583,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,584,          return x;,4,3,0,0,0,1,20,0,0,27,9,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,593,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,594,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,597,      if (x < -20) {,6,2,1,1,3,0,0,0,0,14,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,598,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,601,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,602,          return x;,8,1,0,0,0,1,0,0,0,9,9,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,605,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,606,          x = -x;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,607,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,611,      if (x >= 0.5) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,612,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,614,"          exp(x*2.0, 0.0, hiPrec);",2,0,0,1,2,1,0,8,0,11,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,616,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,28,10,1,3,6,0,0,0,0,46,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,620,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,621,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,622,          double temp = na + yb;,10,1,0,0,0,0,0,0,0,12,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,623,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,624,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,627,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,628,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,629,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,630,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,631,          da = temp;,6,1,0,0,0,0,0,0,0,8,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,633,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,634,          double daa = da + temp - temp;,8,2,1,0,0,0,4,0,0,23,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,635,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,638,          double ratio = na/da;,8,3,0,0,0,0,0,0,0,11,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,639,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,640,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,641,          double ratiob = ratio - ratioa;,8,2,0,0,0,0,4,0,0,14,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,647,          ratiob += nb / da;,8,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,649,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,651,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,652,      },6,0,0,0,1,1,0,0,0,7,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,654,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,656,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,658,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,20,9,0,3,6,0,0,0,0,30,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,662,          double na = ya;,8,0,0,0,0,0,0,0,0,9,15,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,663,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,666,          double da = 2.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,667,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,668,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,669,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,670,          da = temp;,6,1,0,0,0,0,16,0,0,24,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,672,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,673,          double daa = da + temp - temp;,6,1,0,0,0,0,0,0,0,8,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,674,          double dab = da - daa;,8,1,0,0,0,0,0,0,0,11,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,677,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,678,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,679,          double ratioa = ratio + temp - temp;,16,3,0,0,0,0,6,0,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,680,          double ratiob = ratio - ratioa;,14,2,1,0,0,0,0,0,0,19,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,686,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,688,          ratiob += -db * na / da / da;,12,3,0,0,0,0,0,0,0,19,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,690,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,693,      if (negate) {,0,0,0,1,3,0,4,0,0,4,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,694,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,697,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,713,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,714,        if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,715,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,716,            a = -a;,2,0,0,0,0,0,2,0,0,5,7,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,720,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,723,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,724,            if (a > 0.097) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,8,16,0,0,0,0,24,212,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,726,            } else if (a > 0.036) {,12,2,0,1,4,0,0,0,0,17,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,42,13,1,6,12,0,0,0,0,58,160,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,728,            } else if (a > 0.0036) {,10,2,0,1,4,0,0,0,0,13,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,735,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,743,        boolean negative = false;,8,1,1,0,0,0,0,0,0,13,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,744,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,745,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,746,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,750,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,1,3,6,0,4,0,0,18,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,753,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,754,            if (a > 0.087) {,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,756,            } else if (a > 0.031) {,4,2,0,1,4,0,0,0,0,6,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,0,0,0,42,109,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,758,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,12,5,0,2,4,0,0,2,0,20,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,765,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,87,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,91,4,0.0,0,0,-1
