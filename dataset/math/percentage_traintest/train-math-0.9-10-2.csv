dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,8,3,0,1,2,0,0,0,0,12,37,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0,0,1,1,3,0,0,0,0,5,12,6,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,14,2,0,1,2,2,0,8,0,26,55,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);",10,3,0,1,2,0,0,0,0,13,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,3,2,4,0,19,55,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,        for (int i = 1; i < getHeight(); i++) {,2,0,1,2,5,1,0,0,0,9,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,          columnLabels.remove((int) columnsToDrop.get(i));,20,10,1,3,6,0,4,0,0,46,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,2,0,0,2,32,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,    },16,1,1,0,1,0,20,2,0,46,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,        if (o == null) {,8,1,0,1,3,3,0,0,0,12,16,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,    },4,0,0,0,1,0,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",2,0,0,0,1,3,0,0,0,5,75,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,        if (data == null) {,6,3,0,1,3,0,8,0,0,17,19,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,16,0,0,27,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,6,0,1,4,9,0,0,0,0,9,77,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,        if (nextAction == EventHandler.Action.RESET_STATE) {,12,1,0,1,3,0,0,4,0,18,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {",2,1,0,2,5,0,6,0,0,9,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,                return nextX;,2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,        final double[] x = new double[maximalOrder + 1];,2,0,0,2,4,0,0,0,0,2,48,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,        x[1] = getStartValue();,4,0,0,2,4,0,6,0,0,11,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,        if (isNaN) {,12,3,0,1,3,1,10,0,0,26,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,            if (hiPrec != null) {,8,4,0,1,3,0,14,0,0,28,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,                return isNaN;,10,0,0,0,0,1,0,2,0,14,13,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,            return INF;,12,1,0,0,0,1,0,0,0,14,11,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,            double denominator = d * q + c;,8,3,0,0,0,0,4,0,0,16,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,",8,1,0,1,3,1,0,0,0,10,58,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,        if (divisor.isInfinite() && !isInfinite()) {,10,2,0,3,7,0,0,0,0,13,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,        final double d = divisor.getImaginary();,6,0,0,1,2,1,4,0,0,12,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);",10,1,0,1,2,1,10,0,0,22,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,        if (o == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,16,1,0,1,3,0,10,4,0,33,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,8,1,1,0,0,0,0,0,0,13,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,8,2,0,0,0,0,0,0,0,10,31,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",8,0,0,1,3,2,0,2,0,12,58,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,            return NaN;,16,7,0,0,0,1,4,0,0,27,11,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,                return result;,2,0,1,0,0,2,0,0,0,7,14,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,6,1,0,0,0,0,6,0,0,13,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",8,3,0,1,3,1,6,0,0,18,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,4,0,0,0,0,0,0,0,0,4,44,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",2,1,0,2,4,1,6,0,0,9,60,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,                x0 = x1;,6,1,0,0,0,4,2,0,0,13,8,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,22,1,0,1,3,0,8,0,0,34,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,        },6,3,0,0,1,0,0,0,0,10,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,        super(absoluteAccuracy);,2,1,0,1,2,0,0,0,0,3,24,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,        this.method = method;,8,0,0,0,0,0,0,0,0,12,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,1,2,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,        final double rtol = getRelativeAccuracy();,2,1,1,1,2,0,4,0,0,15,42,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,22,7,0,4,8,2,0,0,0,31,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,308,        return real;,2,0,0,0,0,1,0,0,0,2,12,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,1,2,1,0,0,0,4,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,20,2,0,2,4,0,0,0,0,24,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,8,0,0,0,1,7,0,4,0,19,30,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,2,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,0,0,0,3,37,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,21,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",6,0,0,1,2,0,0,0,0,7,37,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,2,10,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,6,3,0,2,4,0,4,0,0,14,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,1,0,2,4,3,12,0,0,18,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,6,0,0,2,5,0,0,0,0,6,49,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,6,5,0,2,4,0,0,0,0,11,62,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,6,0,0,14,63,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,4,1,1,2,5,0,0,0,0,15,46,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,4,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,4,0,0,20,26,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",24,3,0,1,2,0,0,0,0,28,72,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,2,0,0,0,1,1,6,4,0,13,56,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,10,0,0,0,0,1,2,2,0,15,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,8,1,0,0,0,0,30,2,0,43,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,8,1,0,0,0,0,0,0,0,10,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,0,0,0,2,4,0,0,2,0,2,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,            a = lo;,0,0,0,0,0,0,6,0,0,6,7,9,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,0,0,0,0,0,0,0,0,6,10,5,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,2,0,0,0,0,0,0,0,0,3,10,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,4,0,0,1,3,0,4,8,0,16,25,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,6,4,0,1,2,0,14,0,0,24,42,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",6,0,0,2,4,0,14,0,0,21,77,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",2,0,0,1,2,0,6,0,0,8,40,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,8,1,1,4,8,2,0,0,0,16,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,2,0,1,4,8,1,0,0,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,10,1,0,1,3,0,0,0,0,13,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,8,1,1,2,4,1,4,2,0,30,38,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,3,1,1,3,0,4,0,0,32,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",16,7,0,1,2,1,4,0,0,27,48,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,0,0,0,0,3,101,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,2,0,2,1,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,16,3,0,0,0,0,0,0,0,20,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,4,0,0,5,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,2,0,0,0,0,0,0,0,0,3,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,4,0,0,0,0,1,6,2,0,13,13,4,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,9,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,10,4,0,0,1,0,0,0,0,15,20,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",2,0,0,1,2,0,0,0,0,3,55,6,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,4,0,0,0,0,1,2,2,0,10,13,3,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,2,0,0,0,0,0,0,0,0,2,7,4,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",2,0,0,1,2,0,10,0,0,13,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,12,2,0,1,2,0,8,4,0,27,71,3,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,2,2,1,2,5,0,0,0,0,8,15,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",2,1,0,1,2,1,12,0,0,15,40,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,4,0,0,0,0,1,10,0,0,15,15,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,28,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,2,1,0,1,3,0,0,0,0,3,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,4,0,0,0,0,0,0,0,0,5,30,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,12,4,0,1,2,0,0,0,0,17,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,18,5,0,1,2,0,0,0,0,24,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,12,4,0,1,2,0,0,0,0,17,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,4,9,0,12,0,0,14,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0,0,0,0,0,0,0,2,0,3,6,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,4,0,0,0,0,1,0,0,0,5,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,                throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,10,2,0,0,0,0,0,0,0,14,33,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,6,0,0,0,0,1,0,0,0,6,26,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,293,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,2,1,1,1,2,1,6,0,0,14,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,6,2,0,14,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,188,"                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",8,4,0,3,6,0,12,0,0,25,67,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,7,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,6,2,1,1,3,1,4,0,0,26,23,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,12,4,0,2,5,0,0,0,0,17,65,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,133,                return 1;,6,1,0,0,0,1,4,0,0,12,9,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,135,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",4,0,0,1,2,1,10,0,0,15,38,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,4,8,0,24,0,0,29,100,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,2,1,1,3,6,0,0,0,0,14,38,14,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,3,7,0,10,0,0,10,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,444,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,0,0,1,2,1,8,0,0,11,35,8,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,57,        throw new UnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,42,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",6,0,0,1,2,0,6,0,0,12,52,13,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,6,4,0,2,4,1,0,0,0,10,36,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,16,4,0,1,3,1,0,0,0,22,33,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,219,                    if ((Math.abs(root - ta) <= convergence) &&,6,3,0,2,5,0,4,0,0,13,43,10,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,2,2,0,1,4,0,10,0,0,15,45,4,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,4,4,1,3,7,0,0,0,0,14,45,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,12,4,0,1,3,0,8,0,0,25,22,3,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,6,0,0,1,2,1,0,2,0,9,47,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,6,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,4,0,0,2,4,4,2,0,0,10,51,1,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,2,30,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,6,2,1,1,2,0,4,0,0,17,42,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,4,0,0,3,6,0,4,0,0,8,64,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,2,0,0,0,0,0,0,0,0,2,20,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,2,1,1,4,8,0,0,0,0,12,43,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
