dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
