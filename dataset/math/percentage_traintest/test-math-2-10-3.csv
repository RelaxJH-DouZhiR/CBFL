dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);",0,0,0,2,4,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,        secondary = new double[m - 1];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,        final int r = (k + w - 1) / w;,0,0,0,1,2,0,0,0,0,3,30,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,4,1,0,0,0,0,8,0,0,14,16,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,2,1,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,109,        i2   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,10,4,1,1,2,0,0,0,0,17,18,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,8,6,1,2,4,0,0,0,0,27,26,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,4,1,0,1,2,0,0,0,0,5,14,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,    },4,1,0,0,1,0,12,0,0,17,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0,0,0,1,3,0,4,0,0,4,19,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0,0,0,0,0,0,0,0,0,0,13,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,0,2,5,0,0,0,0,7,93,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,34,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,0,0,0,1,3,0,0,0,0,4,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,0,0,0,1,2,0,0,0,0,3,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
