dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/FastMath,22,1349,            final double xpb = -(xpa - 1 - x);,0,0,0,1,2,0,0,0,0,3,34,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1351,            final double[] hiPrec = new double[2];,2,0,0,2,4,1,0,0,0,3,38,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1352,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,74,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1359,            final double fx1 = xpb / xpa;,8,1,0,0,0,0,0,0,0,11,29,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1360,            final double epsilon = 0.5 * fx1 + 1;,4,2,0,0,0,1,0,0,0,7,37,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,65,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",6,0,0,0,1,0,0,0,0,6,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,86,"        this(new Well19937c(), numeratorDegreesOfFreedom,",2,0,0,1,3,0,0,2,0,4,49,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,108,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,49,    private double numericalVariance = Double.NaN;,28,3,0,0,0,2,10,0,0,44,46,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,51,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,110,        if (numeratorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,37,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,114,        if (denominatorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,39,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,118,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,119,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,120,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,0,2,4,0,0,0,0,6,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,205,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,604,                ret = x * c;,6,1,0,0,0,0,0,0,0,8,12,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3306,        if (x != x) { // NaN,6,1,0,1,3,0,0,2,0,9,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3314,        y = (long) x;,6,0,0,1,2,0,0,0,0,8,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3315,        if (x < 0 && y != x) {,24,9,0,1,3,0,6,0,0,39,22,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3319,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3323,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,572,            double p = INV_GAMMA1P_M1_P6;,4,0,0,0,0,0,0,0,0,4,29,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,573,            p = INV_GAMMA1P_M1_P5 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,574,            p = INV_GAMMA1P_M1_P4 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,575,            p = INV_GAMMA1P_M1_P3 + t * p;,8,3,0,0,0,0,14,0,0,26,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,576,            p = INV_GAMMA1P_M1_P2 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,577,            p = INV_GAMMA1P_M1_P1 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,578,            p = INV_GAMMA1P_M1_P0 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,580,            double q = INV_GAMMA1P_M1_Q4;,0,0,0,0,0,0,0,0,0,0,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,581,            q = INV_GAMMA1P_M1_Q3 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,582,            q = INV_GAMMA1P_M1_Q2 + t * q;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,583,            q = INV_GAMMA1P_M1_Q1 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,584,            q = 1.0 + t * q;,4,1,0,0,0,0,0,0,0,5,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,586,            double c = INV_GAMMA1P_M1_C13 + (p / q) * t;,10,3,0,1,2,0,0,0,0,13,44,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,587,            c = INV_GAMMA1P_M1_C12 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,588,            c = INV_GAMMA1P_M1_C11 + t * c;,8,2,0,0,0,0,0,0,0,12,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,589,            c = INV_GAMMA1P_M1_C10 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,590,            c = INV_GAMMA1P_M1_C9 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,591,            c = INV_GAMMA1P_M1_C8 + t * c;,12,2,0,0,0,0,0,0,0,15,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,10,0,0,10,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,1,68,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,12,3,0,0,2,0,0,0,0,15,12,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,4,1,0,0,0,0,0,0,0,6,6,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,12,1,0,0,0,4,0,0,0,18,16,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,12,2,0,0,0,0,0,0,0,16,22,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,6,0,0,1,2,4,4,0,0,13,30,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,73,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,104,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,251,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,178,                        d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,179,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,182,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,237,                        b = x;,0,0,0,0,0,0,0,0,0,0,6,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,166,                        p = -p;,6,0,0,0,0,0,0,0,0,9,7,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,45,                                    final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,48,    },2,1,0,0,1,1,10,0,0,14,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,135,        if (!isMinim) {,4,0,0,1,3,0,0,0,0,4,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,138,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,139,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,141,        UnivariatePointValuePair previous = null;,4,0,0,0,0,1,6,4,0,15,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,142,        UnivariatePointValuePair current,2,0,0,0,0,0,0,2,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,145,        int iter = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,147,            final double m = 0.5 * (a + b);,6,2,0,1,2,1,0,0,0,9,31,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,148,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,0,0,0,1,2,0,0,0,0,3,76,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,149,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,152,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,153,            if (!stop) {,0,0,0,1,3,0,0,0,0,4,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,154,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,155,                double q = 0;,6,0,0,0,0,0,0,2,0,8,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,156,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,157,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,159,                if (FastMath.abs(e) > tol1) { // Fit parabola.,0,0,0,2,5,0,0,0,0,7,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0,0,0,0,0,0,0,0,0,0,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0,0,0,0,0,0,0,0,0,0,13,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,0,2,5,0,0,0,0,7,93,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,34,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,24,2,0,1,2,0,6,0,0,35,13,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3250,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3254,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3258,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,12,1,0,1,2,0,0,4,0,19,12,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,3,4,2,0,25,52,1,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,65,        this.throwable = throwable;,0,0,0,0,0,0,0,0,0,0,27,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,6,1,0,1,2,0,0,0,0,7,46,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,4,0,0,2,4,0,0,4,0,9,43,3,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },2,0,0,0,1,0,0,2,0,4,1,9,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,0,2,4,0,10,0,0,13,46,0,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,3,0,0,0,5,50,2,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,44,            for (Object o : array) {,0,0,0,1,3,0,4,0,0,4,24,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },2,0,0,0,1,0,0,0,0,2,1,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,1,0,5,10,0,6,0,0,12,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",8,4,1,2,4,0,0,0,0,14,74,5,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,3,0,1,2,0,0,0,0,7,41,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,0,0,1,2,0,0,0,0,8,95,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,1,0,1,2,0,4,0,0,8,60,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,3,0,0,0,15,54,1,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",6,0,0,4,8,0,0,4,0,10,108,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",14,3,0,1,2,0,2,0,0,21,89,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,0,0,1,2,0,0,0,0,8,100,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,1,0,0,0,3,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,8,0,0,11,84,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,0,0,2,4,0,2,0,0,6,78,7,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,4,2,0,9,72,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0,0,0,3,6,0,0,0,0,9,39,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",4,0,0,1,2,0,0,0,0,5,94,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",14,3,0,1,2,0,0,0,0,19,49,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",8,4,0,5,10,0,0,0,0,13,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",4,0,0,2,4,0,0,0,0,5,88,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,1,3,6,0,6,0,0,13,35,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",6,0,0,1,2,0,0,2,0,11,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",4,0,0,1,2,0,0,0,0,5,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",10,1,0,3,6,3,0,0,0,15,77,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",6,1,0,3,6,0,0,0,0,8,85,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,6,0,0,6,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,12,1,0,1,2,0,0,0,0,15,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,2,2,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,2,0,13,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,0,0,0,1,3,0,0,0,0,4,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,0,0,0,1,2,0,0,0,0,3,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,1,2,5,0,2,0,0,8,38,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,513,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",2,0,0,2,5,3,6,0,0,11,28,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,6,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,2,0,0,0,0,0,2,0,0,5,20,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,4,0,0,0,0,0,0,2,0,6,22,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,14,2,0,3,7,1,0,0,0,18,83,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,4,1,0,1,3,0,0,0,0,5,23,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,6,1,0,0,0,0,0,0,16,11,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,0,2,4,1,10,0,0,14,63,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",2,0,0,1,2,1,8,0,0,11,46,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,10,3,0,0,0,1,0,0,0,14,33,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",2,0,0,1,2,1,8,0,0,11,48,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,103,                if (cmp == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,105,                } else if (cmp < 0) {,0,0,0,1,4,0,0,0,0,5,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,4,1,1,1,2,0,0,4,0,15,45,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,153,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,165,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,167,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,169,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,12,0,0,14,55,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,175,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,1,8,0,0,11,56,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,181,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,2,0,0,0,0,1,0,2,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,446,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,2,1,1,2,5,0,0,0,0,8,38,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",4,2,0,2,4,0,16,0,0,22,96,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,4,1,0,2,5,3,6,0,0,14,46,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,6,0,1,0,0,0,0,0,0,9,13,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",2,0,0,1,2,0,12,0,0,15,40,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,471,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,486,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,529,        return getWidth() - 1;,0,0,0,1,2,1,0,0,0,4,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,62,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,69,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,6,3,0,2,4,0,8,0,0,18,68,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,70,    },4,2,0,0,1,0,0,0,0,6,1,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,88,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,89,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,90,        } else if (x < y) {,8,2,1,1,4,0,0,0,0,13,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,264,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,300,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,301,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,304,        if (xInt < 0) {,4,3,1,1,3,0,0,0,0,16,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,305,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,307,        if (yInt < 0) {,2,1,1,1,3,0,0,0,0,6,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,311,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,313,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,4,0,0,9,49,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,235,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,10,47,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,4,0,0,4,25,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,43,        return getDefaultNumberFormat(Locale.getDefault());,14,3,0,2,4,1,6,0,0,23,51,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,53,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,59,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,379,"        checkRowIndex(m, row);",8,2,1,1,2,1,6,0,0,24,22,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,380,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,381,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,391,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,396,    },2,0,0,0,1,0,0,2,0,5,1,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,406,        if (column < 0 || column >= m.getColumnDimension()) {,10,3,0,2,5,0,4,2,0,22,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,410,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,56,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,58,    },6,1,1,0,1,1,0,0,0,10,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,255,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,303,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,61,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,62,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,65,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,43,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,46,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,87,    },4,0,0,0,1,1,0,0,0,6,1,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,103,"    public ArrayRealVector(double[] d, boolean copyArray) {",12,0,0,2,5,1,4,2,0,20,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,104,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,107,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,42,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,601,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,713,        return data.clone();,2,0,0,1,2,1,4,0,0,7,20,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,743,        if (data.length != n) {,6,1,1,1,3,0,0,0,0,13,23,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,746,    },6,1,1,0,1,0,0,0,0,10,1,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,38,public class ArrayRealVector extends RealVector implements Serializable {,0,0,0,0,1,0,0,0,0,1,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",10,0,0,0,1,0,0,2,0,12,76,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,133,                            final NumberFormat format) {,12,2,0,0,2,1,4,2,0,23,28,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,137,        this.rowSuffix         = rowSuffix;,6,0,0,0,0,0,0,0,0,8,35,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,138,        this.rowSeparator      = rowSeparator;,10,0,0,0,0,1,0,0,0,12,38,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,143,    },10,5,1,0,1,0,0,0,0,20,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,207,        return format;,10,0,0,0,0,1,0,2,0,13,14,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,1,0,1,2,0,4,2,0,12,64,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,109,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,112,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,113,        this.format      = format;,10,3,0,0,0,0,0,0,0,14,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,28,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,31,"    MAXIMIZE,",2,1,1,0,0,0,0,0,0,10,9,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,34,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,197,        if (tableau.getNumArtificialVariables() == 0) {,4,2,0,2,5,0,8,0,0,14,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,215,        final SimplexTableau tableau =,2,0,0,0,0,1,0,2,0,5,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,223,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,89,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,96,        return function;,2,0,0,0,0,1,0,0,0,2,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,103,        return Collections.unmodifiableCollection(linearConstraints);,2,0,0,1,2,1,6,2,0,11,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,141,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,58,"        this(new ArrayRealVector(coefficients), constantTerm);",0,0,0,2,4,0,0,0,0,6,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",6,0,0,1,3,1,0,2,0,9,78,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,67,        this.constantTerm = constantTerm;,0,0,0,0,0,0,0,0,0,0,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,75,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,83,        return constantTerm;,10,1,0,0,0,1,0,0,0,13,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,82,    },2,0,0,0,1,0,2,2,0,6,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,100,        this.coefficients = coefficients;,10,0,0,0,0,1,0,0,0,12,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,168,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,184,        return value;,4,1,0,0,0,1,6,0,0,11,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,139,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,89,    private final List<String> columnLabels = new ArrayList<String>();,2,0,0,1,2,2,0,8,0,12,66,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,140,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,141,        this.constraints            = normalizeConstraints(constraints);,12,2,0,1,2,1,4,0,0,21,64,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,142,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,143,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,144,        this.maxUlps                = maxUlps;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,145,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,4,1,1,2,4,0,6,0,0,17,66,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,147,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,149,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,151,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,8,1,0,1,2,0,2,0,0,12,60,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,152,        initializeColumnLabels();,0,0,0,1,2,0,2,0,0,2,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,153,    },10,2,1,0,1,0,0,0,0,17,1,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,159,      if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,162,"      columnLabels.add(""Z"");",0,0,0,1,2,0,4,0,0,5,22,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,163,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,10,1,0,2,5,0,2,0,0,15,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,164,"        columnLabels.add(""x"" + i);",6,2,1,1,2,0,4,0,0,18,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,166,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,169,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,172,      for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,175,"      columnLabels.add(""RHS"");",2,0,1,1,2,0,4,0,0,12,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,186,        int width = numDecisionVariables + numSlackVariables +,4,1,1,0,0,0,0,0,0,10,54,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,188,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,0,0,0,1,2,0,0,0,0,3,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,0,0,1,1,2,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.9,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,                growTable();,0,0,0,1,2,0,0,0,0,3,12,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,        final int oldLength      = states.length;,0,0,0,0,0,0,0,0,0,0,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,        final int[] oldKeys      = keys;,16,5,0,1,2,0,0,0,0,21,32,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,        final double[] oldValues = values;,2,0,0,1,2,0,0,2,0,4,34,13,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,        final byte[] oldStates   = states;,0,0,0,1,2,0,0,0,0,3,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0,0,0,0,0,0,0,0,0,0,52,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,        final int[] newKeys = new int[newLength];,2,0,1,2,4,1,0,0,0,5,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,        final double[] newValues = new double[newLength];,0,0,0,2,4,0,0,0,0,6,49,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,        final byte[] newStates = new byte[newLength];,4,0,1,2,4,4,0,0,0,10,45,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,        final int newMask = newLength - 1;,0,0,0,0,0,0,0,0,0,0,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,        for (int i = 0; i < oldLength; ++i) {,8,1,0,1,3,0,0,0,0,10,37,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,            if (oldStates[i] == FULL) {,0,0,0,2,5,0,0,0,0,7,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,                final int key = oldKeys[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,447,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",8,1,0,1,2,0,0,0,0,10,71,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,448,                newKeys[index]   = key;,0,0,0,1,2,0,0,0,0,3,23,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,449,                newValues[index] = oldValues[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,450,                newStates[index] = FULL;,0,0,0,1,2,0,0,0,0,3,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,454,        mask   = newMask;,0,0,0,0,0,0,0,0,0,0,17,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,455,        keys   = newKeys;,2,0,0,0,0,0,0,0,0,3,17,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,456,        values = newValues;,8,0,0,0,0,0,0,0,0,11,19,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,457,        states = newStates;,4,0,0,0,0,0,0,0,0,5,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,459,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,179,    public OpenMapRealVector(OpenMapRealVector v) {,0,0,0,1,3,0,12,0,0,12,47,10,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,180,        virtualSize = v.getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,4,2,0,2,4,0,0,0,0,6,53,6,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,182,        epsilon = v.epsilon;,2,0,0,0,0,0,0,0,0,3,20,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,183,    },0,0,0,0,1,0,0,0,0,1,1,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,591,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,0,0,0,8,40,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,207,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,208,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,209,"        if (containsKey(key, index)) {",0,0,0,2,5,0,0,0,0,7,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,208,        return entries;,0,0,0,0,0,1,0,0,0,1,15,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,130,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0,0,0,1,3,0,0,0,0,4,68,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,131,        final int length = source.keys.length;,0,0,0,0,0,0,0,0,0,0,38,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,132,        keys = new int[length];,8,1,1,1,2,1,0,0,0,13,23,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,133,"        System.arraycopy(source.keys, 0, keys, 0, length);",2,0,0,1,2,0,6,0,0,8,50,5,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,134,        values = new double[length];,4,0,0,1,2,0,0,2,0,7,28,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,135,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,136,        states = new byte[length];,2,0,1,1,2,0,0,0,0,5,26,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,137,"        System.arraycopy(source.states, 0, states, 0, length);",8,1,0,1,2,0,8,0,0,17,54,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,138,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,139,        size  = source.size;,12,4,0,0,0,0,0,0,0,17,20,9,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,140,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,141,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,526,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,529,            if (current < 0) {,2,1,0,1,3,0,4,0,0,7,18,1,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,532,            return keys[current];,2,0,0,1,2,2,4,0,0,7,21,4,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,274,            return changeIndexSign(index);,0,0,0,1,2,1,0,0,0,4,30,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,332,        return -index - 1;,2,1,0,0,0,1,0,0,0,4,18,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,411,            index = changeIndexSign(index);,6,0,0,1,2,0,4,0,0,12,31,3,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,412,            previous = values[index];,2,0,1,1,2,0,0,0,0,7,25,6,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,413,            newMapping = false;,2,0,0,0,0,0,0,0,0,3,19,2,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,176,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,177,        if (d != n) {,2,0,0,1,3,0,0,0,0,2,13,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,273,        } else if (states[index] == FULL && keys[index] == key) {,4,3,1,3,8,0,4,0,0,19,57,3,0.3913,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,238,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,37,public class OpenIntToDoubleHashMap implements Serializable {,2,1,1,0,1,0,0,0,0,9,61,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,495,        private Iterator() {,0,0,0,1,3,0,0,0,0,4,20,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,498,            referenceCount = count;,12,1,0,0,0,0,0,0,0,14,23,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,501,            next = -1;,4,0,0,0,0,0,4,0,0,11,10,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,503,                advance();,8,0,0,1,2,0,2,0,0,10,10,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,506,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,508,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,481,    public class Iterator {,2,0,0,0,1,1,0,0,0,3,23,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,515,            return next >= 0;,0,0,0,0,0,1,0,0,0,1,17,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,543,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,546,            if (current < 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,549,            return values[current];,0,0,1,1,2,1,0,0,0,4,23,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,560,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,565,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,569,                while (states[++next] != FULL) {,6,1,1,2,5,0,0,0,0,15,32,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,577,            },2,0,1,0,1,0,0,0,0,7,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,572,            } catch (ArrayIndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,44,7,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,573,                next = -2;,2,0,0,0,0,0,0,0,0,4,10,8,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,574,                if (current < 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,579,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,183,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,184,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,343,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,1,1,2,0,0,4,0,17,52,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,351,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,354,        return res;,2,0,0,0,0,1,0,0,0,3,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,34,public class OpenMapRealVector extends SparseRealVector,2,0,0,0,0,1,0,2,0,5,55,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,589,        if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,590,"            entries.put(index, value);",4,0,0,1,2,0,0,0,0,5,26,8,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,594,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,588,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.26471,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,449,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.25714,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,342,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,177,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,178,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,179,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,382,        return (key != 0 || states[index] == FULL) && keys[index] == key;,6,5,1,3,6,1,0,0,0,19,65,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,448,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.23077,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,194,    },2,0,0,0,1,1,0,2,0,5,1,3,0.2093,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,140,"                entries.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,9,0.18,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,189,        if (index < 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,256,"        return findInsertionIndex(keys, states, key, mask);",0,0,0,1,2,1,0,0,0,4,51,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,269,        final int hash = hashOf(key);,2,0,0,1,2,1,4,0,0,7,29,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,270,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,271,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,272,            return index;,18,3,1,0,0,2,6,0,0,39,13,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,407,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,408,        double previous = missingEntries;,2,0,0,0,0,0,0,0,0,2,33,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,409,        boolean newMapping = true;,2,0,0,0,0,0,0,0,0,3,26,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,410,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,415,        keys[index]   = key;,0,0,0,1,2,0,0,0,0,3,20,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,416,        states[index] = FULL;,2,0,1,1,2,0,0,0,0,7,21,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,417,        values[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,418,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,419,            ++size;,2,0,0,0,0,0,0,0,0,3,7,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,420,            if (shouldGrowTable()) {,8,1,0,2,5,0,2,0,0,12,24,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,423,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,425,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,466,        return size > (mask + 1) * LOAD_FACTOR;,8,3,0,1,2,1,0,0,0,11,39,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,475,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,476,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,123,"        this(values, DEFAULT_ZERO_TOLERANCE);",4,0,0,1,2,0,0,0,0,4,37,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,133,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,134,        virtualSize = values.length;,2,0,0,0,0,0,0,0,0,3,28,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,135,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,0,0,2,0,8,42,0,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,136,        this.epsilon = epsilon;,6,2,1,0,0,0,0,0,0,18,23,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,137,        for (int key = 0; key < values.length; key++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,138,            double value = values[key];,2,0,0,1,2,0,0,0,0,3,27,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,139,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,401,        return virtualSize;,2,0,0,0,0,1,0,0,0,2,19,4,0.12676,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,100,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",4,0,0,1,2,0,0,0,0,4,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,117,                                  final double missingEntries) {,2,0,0,0,2,1,0,0,0,3,30,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,118,        final int capacity = computeCapacity(expectedSize);,8,3,0,1,2,2,4,0,0,17,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,119,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,120,        values = new double[capacity];,0,0,0,1,2,0,0,0,0,3,30,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,121,        states = new byte[capacity];,2,0,1,1,2,0,0,0,0,5,28,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,122,        this.missingEntries = missingEntries;,0,0,0,0,0,0,0,0,0,0,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,123,        mask   = capacity - 1;,4,1,0,0,0,0,0,0,0,6,22,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,150,        if (expectedSize == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,153,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,154,        final int powerOfTwo = Integer.highestOneBit(capacity);,2,0,0,1,2,1,6,0,0,9,55,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,155,        if (powerOfTwo == capacity) {,6,1,0,1,3,3,0,0,0,10,29,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,156,            return capacity;,8,1,0,0,0,1,4,0,0,14,16,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,3,49,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,126,    private static final double LN_HI_PREC_COEF[][] = {,2,2,1,2,5,0,0,0,0,13,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,6,0,0,6,44,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,158,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,177,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,196,    private static final double COSINE_TABLE_B[] =,6,2,1,1,2,6,0,0,0,23,46,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,216,    private static final double TANGENT_TABLE_A[] =,8,1,0,1,2,4,8,0,0,21,47,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3334,        if (x != x) { // NaN,2,0,1,1,3,0,4,0,0,9,20,0,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3343,        if (x < 0 && y != x) {,10,6,0,1,3,0,0,0,0,16,22,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3347,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3366,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3367,            return y;,4,1,0,0,0,1,6,0,0,11,9,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,1049,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,6,0,10,64,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,220,        return FastMath.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SparseRealVector,29,25,public abstract class SparseRealVector extends RealVector {},0,0,0,1,2,0,0,0,0,3,60,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0,0,0,0,1,0,0,0,0,1,54,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,147,            double n = numeratorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,4,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,148,            double m = denominatorDegreesOfFreedom;,4,0,0,0,0,0,4,0,0,8,39,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",0,0,0,2,5,0,0,0,0,7,49,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {",0,0,0,1,3,0,0,0,0,4,51,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,50,        if (trials < 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,54,        if (p < 0 || p > 1) {,6,1,0,1,3,0,0,0,0,8,21,12,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,58,        probabilityOfSuccess = p;,4,0,0,0,0,0,0,0,0,5,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,59,        numberOfTrials = trials;,4,0,0,0,0,0,0,0,0,5,24,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,60,    },2,1,0,0,1,0,0,0,0,3,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,144,        if (x <= 0) {,8,0,0,1,3,2,0,4,0,15,13,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,154,        return ret;,8,0,1,0,0,2,0,0,0,12,11,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,104,            double k = FastMath.sqrt((1.0 - p) / p);,6,2,0,2,4,0,4,0,0,12,40,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,105,            double tmp = mu - k * sigma;,4,1,0,0,0,1,6,2,0,14,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,106,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,107,                lower = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,109,            k = 1.0 / k;,0,0,0,0,0,0,0,0,0,0,12,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,110,            tmp = mu + k * sigma;,6,2,0,0,0,0,4,0,0,12,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,111,            if (tmp < upper) {,6,0,0,1,3,0,0,0,0,8,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,112,                upper = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,138,                        m = n / 2.0;,8,0,0,0,0,0,0,0,0,9,12,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,139,                        ret = (m * (b - m) * x) /,6,1,1,2,4,0,0,0,0,15,25,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,133,            int xm = (lower + upper) / 2;,6,2,0,1,2,0,0,0,0,8,29,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,134,            if (xm < lower || xm > upper) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,143,            double pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,6,45,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,200,        double result = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,201,        result = cumulativeProbability(argument);,6,1,0,1,2,0,0,0,0,8,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,128,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0,0,0,3,8,0,0,0,0,1,43,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,1,2,0,0,5,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,154,            ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -,6,1,0,4,9,0,6,4,0,17,72,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,137,                    if (n % 2 == 0) { // even,0,0,0,1,3,0,0,0,0,4,25,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,142,                        m = (n - 1.0) / 2.0;,0,0,0,1,2,0,0,0,0,3,20,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,143,                        ret = -((a + m) * (a + b + m) * x) /,0,0,0,3,6,0,0,0,0,9,36,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,146,                    return ret;,2,0,0,0,0,1,0,0,0,2,11,13,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,151,                    return 1.0;,2,0,0,0,0,1,0,0,0,2,11,7,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,1,2,4,0,2,0,0,11,45,6,0.0678,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,50,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,1,2,1,0,2,0,5,68,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,120,        if (Double.isNaN(x) ||,0,4,0,1,3,0,6,0,0,10,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,205,        return ret;,12,2,1,0,0,1,4,0,0,22,11,3,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,68,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",16,3,0,0,1,0,2,0,0,21,60,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,70,    },2,0,0,0,1,0,6,0,0,8,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,88,        throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,52,    private double numericalVariance = Double.NaN;,2,0,0,0,0,0,0,0,0,3,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,55,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,89,        if (numeratorDegreesOfFreedom <= 0) {,4,1,0,1,3,1,0,0,0,6,37,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,93,        if (denominatorDegreesOfFreedom <= 0) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,97,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,98,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,99,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,108,        double yMax = computeObjectiveValue(max);,2,0,0,1,2,0,4,0,0,6,41,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,99,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,100,        final double sigma = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,59,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,101,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,103,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,116,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,132,        while (lower + 1 < upper) {,4,2,0,1,3,0,0,0,0,6,27,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0,0,0,2,4,0,0,0,0,6,52,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,830,                if (hiPrec != null) {,6,4,0,1,3,0,0,0,0,10,21,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,834,                return 0.0;,4,1,0,0,0,1,0,0,0,5,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,139,            if (chebyshevApplies) {,22,2,0,1,3,0,0,0,0,27,23,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,190,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,191,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,79,        int lower = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,80,        if (p == 0.0) {,12,1,0,1,3,0,8,0,0,22,15,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,83,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,88,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,92,        int upper = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,93,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,138,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,156,"        double x = UnivariateSolverUtils.solve(toSolve,",0,0,0,0,1,0,0,0,0,1,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,61,"        this(max,",2,0,0,0,1,0,0,0,0,2,9,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,78,                       MaxCountExceededCallback cb) {,6,0,0,0,2,3,0,2,0,11,30,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,40,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,79,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,80,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,91,        maximalCount = max;,8,2,0,0,0,0,0,0,0,11,19,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,150,        if (++count > maximalCount) {,8,1,0,1,3,0,0,0,0,11,29,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,153,    },4,1,0,0,1,0,0,0,0,7,1,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,160,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,62,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,73,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,76,        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);,4,0,0,1,2,1,0,4,0,9,66,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",4,0,0,1,2,1,10,0,0,14,57,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,336,        if (lower >= upper) {,6,1,0,1,3,0,0,0,0,8,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,355,"        verifyInterval(initial, upper);",10,1,0,1,2,0,6,0,0,18,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,53,        super(absoluteAccuracy);,0,0,0,1,2,0,0,0,0,3,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,83,        double min = getMin();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,84,        double max = getMax();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,85,        final double initial = getStartValue();,2,0,0,1,2,1,2,0,0,5,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,86,        final double functionValueAccuracy = getFunctionValueAccuracy();,4,0,0,1,2,1,2,0,0,7,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,88,"        verifySequence(min, initial, max);",0,0,0,1,2,0,0,0,0,3,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,91,        double yInitial = computeObjectiveValue(initial);,0,0,0,1,2,0,0,0,0,3,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,92,        if (FastMath.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,97,        double yMin = computeObjectiveValue(min);,2,0,0,1,2,0,4,0,0,6,41,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,98,        if (FastMath.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,103,        if (yInitial * yMin < 0) {,16,6,0,1,3,3,0,0,0,26,26,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,0,0,0,2,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,92,                                               final double functionValueAccuracy) {,2,0,0,0,2,1,0,0,0,3,37,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,49,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,93,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,94,        this.relativeAccuracy = relativeAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,95,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,116,        return searchMax;,2,0,0,0,0,1,6,0,0,8,17,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,122,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,173,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,177,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,178,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,179,        function = f;,8,1,0,0,0,0,6,0,0,17,13,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,187,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,12,0,0,12,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,190,        return doSolve();,0,0,0,1,2,1,0,0,0,4,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,268,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,269,    },4,1,1,0,1,0,0,0,0,10,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,294,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,297,        },2,0,0,0,1,0,0,0,0,3,1,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,0,0,0,0,0,1,4,0,0,4,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,0,0,0,1,2,0,0,0,0,3,72,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",0,0,0,1,2,0,0,0,0,3,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,6,0,0,6,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,78,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,        w      = plane.w;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);",0,0,0,1,2,0,0,0,0,3,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());",0,0,0,2,4,1,0,0,0,7,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,92,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,0,0,0,2,4,0,0,0,0,6,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,0,0,3,7,0,0,0,0,10,52,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,0,0,0,3,6,0,0,0,0,9,91,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,        public FacetsContributionVisitor() {,0,0,0,1,3,0,0,0,0,4,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0,0,0,2,4,0,0,0,0,6,74,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,            columnsToDrop.add(col);,0,0,0,1,2,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,14,2,0,1,2,2,0,8,0,26,55,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);",10,3,0,1,2,0,0,0,0,13,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,0,0,2,5,0,0,0,0,7,50,4,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,3,2,4,0,19,55,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,          int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,        for (int i = 1; i < getHeight(); i++) {,2,0,1,2,5,1,0,0,0,9,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,          int col = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,0,0,0,2,5,0,0,0,0,7,53,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,          columnLabels.remove((int) columnsToDrop.get(i));,20,10,1,3,6,0,4,0,0,46,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,2,0,0,2,32,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,    },16,1,1,0,1,0,20,2,0,46,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,        if (o == null) {,8,1,0,1,3,3,0,0,0,12,16,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,    },4,0,0,0,1,0,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",2,0,0,0,1,3,0,0,0,5,75,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,        if (data == null) {,6,3,0,1,3,0,8,0,0,17,19,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,16,0,0,27,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,        } else {,8,0,0,0,2,0,0,0,0,8,8,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,    },10,3,0,0,1,0,8,0,0,22,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,    },4,0,0,0,1,0,0,4,0,10,1,0,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,            doIteration(tableau);,4,1,0,1,2,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);",4,0,0,1,2,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,55,        super(copyArray ? ((point == null) ? null :,0,0,0,1,4,0,0,0,0,5,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,59,    },8,1,0,0,1,0,0,0,0,10,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,43,        key = k;,16,1,0,0,0,0,0,0,0,19,8,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,44,        value = v;,0,0,0,0,0,0,0,0,0,0,10,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,45,    },6,0,0,0,1,0,0,0,0,7,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,                return null;,2,0,0,0,0,1,0,0,0,2,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,10,1,0,1,2,0,10,2,0,23,72,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,0,0,0,1,2,0,0,0,0,3,92,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,401,      Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,403,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",4,1,0,1,2,0,4,0,0,10,45,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,405,          if (colIndex < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,409,          Integer basicRow = getBasicRow(colIndex);,10,1,0,1,2,0,10,2,0,24,41,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,410,          if (basicRow != null && basicRow == 0) {,4,3,0,1,3,0,10,0,0,17,40,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,415,          } else if (basicRows.contains(basicRow)) {,4,0,0,2,6,0,0,2,0,6,42,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,420,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,10,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,421,              coefficients[i] =,12,1,0,1,2,0,0,0,0,16,17,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,426,"      return new PointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,66,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",4,1,0,2,4,1,4,2,0,12,81,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,448,        if (v instanceof ArrayRealVector) {,0,1,1,1,3,0,0,0,0,5,35,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,449,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,450,            checkVectorDimensions(vData.length);,0,0,0,1,2,0,0,0,0,3,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,451,            double dot = 0;,4,0,0,0,0,0,0,0,0,5,15,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,452,            for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,453,                dot += data[i] * vData[i];,2,1,1,2,4,0,0,0,0,12,26,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,455,            return dot;,2,0,0,0,0,1,0,0,0,2,11,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,173,        while (!tableau.isOptimal()) {,2,0,0,2,5,0,4,4,0,12,30,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,16,0,0,17,82,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,201,        return tableau.getSolution();,2,0,0,1,2,1,16,0,0,19,29,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,116,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,196,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,198,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,4,0,0,5,30,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,312,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,313,"            final double entry = getEntry(i, col);",4,1,0,1,2,1,10,0,0,16,38,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,315,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,328,        if (getNumObjectiveFunctions() == 1) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,439,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,3,0,0,0,10,38,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,440,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,442,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,456,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",4,1,0,1,3,0,16,0,0,21,65,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,458,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,127,        if (++iterations > maxIterations) {,6,1,0,1,3,0,4,0,0,13,35,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,130,    },2,0,0,0,1,0,0,0,0,2,1,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,70,        double minValue = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,71,        Integer minPos = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,73,"            final double entry = tableau.getEntry(0, i);",8,0,0,1,2,2,6,0,0,16,44,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,0,0,2,5,0,0,0,0,7,56,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,75,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,79,        return minPos;,14,4,0,0,0,2,4,0,0,23,14,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,0,0,2,4,0,0,0,0,2,63,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",8,1,0,2,5,0,0,2,0,11,50,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",2,0,0,1,2,1,10,0,0,13,62,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,101,                } else if (cmp < 0) {,2,1,0,1,4,0,0,0,0,3,21,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,102,                    minRatio = ratio;,8,1,1,0,0,0,8,0,0,24,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,103,                    minRatioPositions = new ArrayList<Integer>();,6,1,0,1,2,1,0,0,0,8,45,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,109,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,137,        incrementIterationsCounter();,2,0,0,1,2,0,2,0,0,5,29,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,139,        Integer pivotCol = getPivotColumn(tableau);,4,0,0,1,2,0,4,2,0,10,43,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,1,0,1,2,0,0,0,0,3,50,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,0,0,0,3,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,150,        for (int i = 0; i < tableau.getHeight(); i++) {,8,1,0,2,5,3,4,0,0,17,47,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,151,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,152,"                double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,0,8,0,0,10,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,153,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,0,0,0,3,45,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,92,            return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,309,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,6,1,0,2,6,3,8,2,0,20,62,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,0,2,4,0,8,0,0,12,73,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,508,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,516,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,115,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,0,0,0,7,28,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,117,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,118,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,120,        return 1;,0,0,1,0,0,1,0,0,0,10,9,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,165,"        columnLabels.add(""s"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,473,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,4,0,0,4,41,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,89,        return goal;,2,1,1,0,0,1,0,0,0,7,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,96,        return function;,6,0,1,0,0,1,10,2,0,27,16,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,103,        return Collections.unmodifiableCollection(linearConstraints);,0,0,0,1,2,1,6,0,0,6,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,141,        this.goal              = goalType;,0,0,0,0,0,0,0,0,0,0,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",8,0,0,1,2,0,0,0,0,9,36,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,52,    },0,0,0,0,1,0,8,0,0,8,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,169,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,195,        solvePhase1(tableau);,2,0,0,1,2,3,4,0,0,9,21,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,89,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,90,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,91,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,94,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,465,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,482,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,500,        return getNumObjectiveFunctions() + numDecisionVariables;,2,1,0,1,2,1,2,0,0,5,57,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,254,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,3,0,0,0,7,52,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,275,    private static final long PI_O_4_BITS[] = new long[] {,4,0,0,2,5,0,0,0,0,5,54,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3002,        return (x < 0l) ? -x : x;,10,4,0,1,2,1,0,0,0,16,25,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,71,    },0,0,1,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,301,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,302,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,305,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,306,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,308,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,6,2,0,2,4,1,12,0,0,22,55,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,265,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,63,    public ArrayRealVector(int size) {,6,0,0,1,3,1,0,0,0,7,34,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,64,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,316,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,16,2,0,20,35,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,317,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,318,            final int dim = vData.length;,6,0,1,0,0,1,0,0,0,12,29,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,319,            checkVectorDimensions(dim);,0,0,0,1,2,0,0,0,0,3,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,320,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,321,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,322,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,323,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,12,35,9,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,325,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,623,        return data[index];,4,0,0,1,2,1,8,0,0,12,19,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,478,"        return new ArrayRealVector(getRow(row), false);",0,0,1,2,4,1,4,2,0,12,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,483,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,484,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,485,        if (vector.getDimension() != nCols) {,0,0,0,2,5,0,0,0,0,7,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,489,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,516,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,517,        for (int i = 0; i < nCols; ++i) {,16,2,0,1,3,0,0,0,0,21,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,521,        return out;,2,0,0,0,0,1,0,2,0,4,11,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,102,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,103,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,106,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,763,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,766,    },0,0,0,0,1,0,2,0,0,2,1,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,27,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,134,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,84,    private final List<String> columnLabels = new ArrayList<String>();,0,0,0,1,2,0,0,0,0,3,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,135,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,136,        this.constraints            = normalizeConstraints(constraints);,2,0,0,1,2,0,4,0,0,7,64,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,137,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,138,        this.epsilon                = epsilon;,6,0,0,0,0,0,0,0,0,8,38,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,139,        this.maxUlps                = maxUlps;,0,0,0,0,0,0,0,0,0,0,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,0,0,0,2,4,0,0,0,0,6,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,6,1,0,1,2,0,2,0,0,10,73,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,8,1,0,1,2,0,2,0,0,12,72,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,18,3,0,1,2,0,2,0,0,24,60,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,147,        initializeColumnLabels();,2,0,0,1,2,0,0,0,0,4,25,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,154,      if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,157,"      columnLabels.add(""Z"");",4,1,1,1,2,1,4,0,0,15,22,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,159,"        columnLabels.add(""x"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,161,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,170,"      columnLabels.add(""RHS"");",0,0,0,1,2,0,4,0,0,5,24,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,171,    },2,0,0,0,1,0,2,0,0,5,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,181,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,183,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,0,0,1,2,0,0,4,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,187,        if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,2,1,0,2,4,0,2,0,0,5,55,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",2,0,0,1,2,0,8,0,0,11,51,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,192,        RealVector objectiveCoefficients =,0,0,0,0,0,0,0,0,0,0,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,4,8,0,10,0,0,12,72,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,195,"        matrix.setEntry(zIndex, width - 1,",2,1,0,0,1,0,6,0,0,9,34,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,198,        if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,204,        int slackVar = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,205,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,206,        for (int i = 0; i < constraints.size(); i++) {,6,1,0,2,5,0,4,0,0,12,46,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,207,            LinearConstraint constraint = constraints.get(i);,6,0,0,1,2,0,6,2,0,15,49,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,208,            int row = getNumObjectiveFunctions() + i;,4,1,0,1,2,0,2,0,0,7,41,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,211,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,0,5,10,0,0,0,0,15,76,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,214,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,220,"            matrix.setEntry(row, width - 1, constraint.getValue());",10,2,0,2,4,0,10,0,0,24,55,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,223,            if (constraint.getRelationship() == Relationship.LEQ) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,230,            if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,238,        return matrix;,2,0,0,0,0,1,0,0,0,2,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,247,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,248,        for (LinearConstraint constraint : originalConstraints) {,4,0,0,1,3,0,0,2,0,6,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,249,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,251,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,260,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,274,        return this.numArtificialVariables > 0 ? 2 : 1;,2,1,0,0,0,1,0,0,0,3,47,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,283,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,284,        for (final LinearConstraint constraint : constraints) {,4,0,0,1,3,1,0,2,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,285,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,286,                ++count;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,289,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,374,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,375,    },2,1,1,0,1,1,0,0,0,12,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,539,        return f.getCoefficients().getDimension();,8,2,1,2,4,1,6,0,0,22,42,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,547,        return numSlackVariables;,2,0,0,0,0,1,0,0,0,2,25,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,555,        return numArtificialVariables;,0,0,0,0,0,1,0,0,0,1,30,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,44,    },2,0,0,0,1,0,0,0,0,2,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,34,"    GEQ("">="");",4,1,1,1,2,1,2,0,0,14,10,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,58,public abstract class RealVector {,0,0,0,0,1,0,0,0,0,1,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,82,    },8,2,0,0,1,1,0,0,0,11,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,168,        return coefficients;,4,1,0,0,0,1,6,0,0,11,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,111,                bestChromosome = chromosome;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,113,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,0,0,0,2,4,0,0,0,0,6,59,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,1.23077,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,464,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,473,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,475,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,0,0,3,6,0,0,0,0,8,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,478,          double temp = ya * HEX_40000000;,4,1,1,0,0,0,8,0,0,19,32,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,479,          double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,483,          double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,484,          temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,486,          double recipb = recip - recipa;,8,2,0,0,0,0,0,0,0,11,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,24,9,0,1,2,0,0,0,0,35,76,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,491,          recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,493,          recipa = -recipa;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,494,          recipb = -recipb;,0,0,0,0,0,0,10,0,0,10,17,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,498,          yb += -(temp - ya - recipa);,2,0,0,1,2,0,0,0,0,3,28,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,499,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,500,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,502,          ya = temp;,2,0,1,0,0,0,0,0,0,11,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,504,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,505,          result *= 0.5;,2,0,0,0,0,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,506,      },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,396,      if (x < -20) {,2,2,0,1,3,0,10,0,0,14,14,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,400,      double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,401,      if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,415,      temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,416,      double recipa = recip + temp - temp;,2,1,0,0,0,0,0,0,0,3,36,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,422,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,425,      temp = ya + recipa;,10,1,0,0,0,0,4,0,0,16,19,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,428,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,432,      double result = ya + yb;,0,0,0,0,0,0,0,0,0,0,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,434,      return result;,2,0,0,0,0,4,0,0,0,5,14,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,460,      if (x == 0) {,2,0,0,1,3,0,0,0,0,3,13,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,2,0,1,1,2,0,0,0,0,7,58,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,826,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,864,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,866,            if (intVal > 709) {,10,1,0,1,3,0,0,0,0,12,19,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,922,            result = tempC*z + tempB + tempA;,2,0,0,0,0,0,2,0,0,5,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3754,    private static class ExpFracTable {,10,4,0,0,1,0,4,0,0,19,35,8,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3787,        },0,0,0,0,1,0,0,0,0,1,1,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,4,0,0,3,6,0,0,0,0,5,50,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,8,0,1,1,2,1,0,4,0,16,64,3,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,0,0,1,2,0,0,0,0,5,55,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,900,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,902,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,903,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,16,5,0,0,0,0,0,0,0,22,82,0,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,917,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0,0,0,1,2,0,0,0,0,3,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0,0,0,1,3,0,0,0,0,4,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0,0,0,1,2,0,0,0,0,3,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0,0,0,0,1,0,0,0,0,1,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0,0,0,2,4,0,0,0,0,6,50,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0,0,0,2,4,0,0,0,0,6,51,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,0,0,3,6,0,0,0,0,9,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0,0,0,0,0,0,0,0,0,0,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,105,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,108,        if (goalType == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,111,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,116,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,117,        evaluations.resetCount();,2,0,0,1,2,0,4,0,0,7,25,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,120,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,121,        goal = goalType;,0,0,0,0,0,0,0,0,0,0,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,122,        start = startPoint.clone();,4,0,0,1,2,0,4,0,0,10,27,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,125,        return doOptimize();,2,0,0,1,2,1,2,0,0,5,20,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,139,        return start.clone();,0,0,0,1,2,1,4,0,0,4,21,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,235,        final double[] lowerBound = getLowerBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,236,        final double[] upperBound = getUpperBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,239,"        setup(lowerBound, upperBound);",2,0,0,1,2,0,6,0,0,9,30,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2384,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2386,        double[] init = getStartPoint();,2,0,0,2,4,0,2,0,0,4,32,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2387,        final int dimension = init.length;,6,1,1,0,0,1,0,0,0,14,34,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2390,        if (dimension < MINIMUM_PROBLEM_DIMENSION) {,6,2,0,1,3,0,8,0,0,16,44,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2466,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,72,        return lowerBound.clone();,0,0,1,1,2,1,4,0,0,9,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,79,        return upperBound.clone();,2,2,1,1,2,1,4,0,0,17,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,120,        if (lower == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,128,        if (upper == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,138,"        return super.optimize(maxEval, f, goalType, startPoint);",10,0,0,1,2,1,0,0,0,10,56,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,91,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,160,    },2,0,0,0,1,3,0,0,0,5,1,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,106,        if (upper != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,39,    public SimpleScalarValueChecker() {},2,0,0,2,4,1,0,0,0,3,36,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,52,    public AbstractConvergenceChecker() {,2,0,0,1,3,1,0,0,0,3,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,55,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,14,2,0,19,46,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,30,"    MAXIMIZE,",2,0,1,0,0,0,0,0,0,12,9,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,60,        this(new SimpleScalarValueChecker());,0,0,0,2,4,0,0,2,0,2,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,65,    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {,8,0,0,1,3,1,0,4,0,14,93,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,44,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,66,        this.checker = checker;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,67,    },4,1,1,0,1,0,0,0,0,16,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,211,"        this(numberOfInterpolationPoints,",0,0,0,0,1,0,0,0,0,1,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,226,                           double stoppingTrustRegionRadius) {,0,0,0,0,2,0,0,0,0,2,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,227,        this.numberOfInterpolationPoints = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,0,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,228,        this.initialTrustRegionRadius = initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,229,        this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;,2,0,0,0,0,0,0,0,0,2,59,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,230,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,59,    protected BaseAbstractMultivariateSimpleBoundsOptimizer() {},0,0,0,2,4,0,0,0,0,6,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,93,        final int dim = startPoint.length;,6,0,0,0,0,1,0,0,0,7,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,94,        if (lower != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,61,"        this(max,",2,0,0,0,1,0,0,0,0,3,9,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,78,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,40,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,79,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,80,        maxCountCallback = cb;,6,0,1,0,0,0,0,0,0,12,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,62,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,0,0,4,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,57,                              final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,58,        this.point = copyArray ?,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,61,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,68,        return (point == null) ? null : point.clone();,0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,77,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,52,"        super(relativeThreshold, absoluteThreshold);",4,0,0,1,2,0,0,0,0,4,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,75,        final double p = previous.getValue();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,76,        final double c = current.getValue();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,77,        final double difference = FastMath.abs(p - c);,6,1,0,1,2,1,4,0,0,12,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,78,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",0,0,0,3,6,0,0,0,0,9,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,79,        return difference <= size * getRelativeThreshold() ||,6,4,0,1,2,1,2,0,0,12,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,34,public class SimpleScalarValueChecker,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,64,                                      final double absoluteThreshold) {,2,0,0,0,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,65,        this.relativeThreshold = relativeThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,66,        this.absoluteThreshold = absoluteThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,73,        return relativeThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,80,        return absoluteThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,71,        return evaluations.getMaximalCount();,2,1,1,1,2,1,4,0,0,16,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,81,        return checker;,4,0,0,0,0,1,6,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,95,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,96,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,0,4,2,0,6,50,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,106,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,109,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,112,            throw new NullArgumentException();,0,0,0,1,2,0,10,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2479,"            super(PATH_IS_EXPLORED + "" "" + BOBYQAOptimizer.caller(3));",2,1,0,2,4,0,4,2,0,10,58,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2480,        },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,246,"        return new RealPointValuePair(currentBest.getDataRef(),",0,0,0,1,3,1,4,2,0,6,55,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,303,                if (lowerDifference.getEntry(j) >= ZERO) {,2,1,0,2,5,0,6,0,0,9,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,304,"                    currentBest.setEntry(j, lowerBound[j]);",0,0,1,2,4,0,6,0,0,10,39,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,305,"                    lowerDifference.setEntry(j, ZERO);",0,0,0,1,2,0,8,0,0,8,34,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,306,"                    upperDifference.setEntry(j, boundDiff);",2,0,0,1,2,1,8,8,0,19,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,308,"                    currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,309,"                    lowerDifference.setEntry(j, -initialTrustRegionRadius);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,311,                    final double deltaOne = upperBound[j] - currentBest.getEntry(j);,0,0,0,2,4,0,0,0,0,6,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",10,0,0,1,2,0,0,0,0,10,76,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,117,    this.fsal      = fsal;,0,0,0,0,0,0,0,0,0,0,22,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,    this.c         = c;,4,0,0,0,0,0,0,0,0,4,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,    this.a         = a;,8,1,0,0,0,0,0,0,0,10,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,    this.b         = b;,6,0,0,0,0,0,0,0,0,7,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,121,    this.prototype = prototype;,0,0,0,0,0,0,0,0,0,0,27,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,123,    exp = -1.0 / getOrder();,0,0,0,1,2,0,0,0,0,3,24,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,    setSafety(0.9);,6,0,0,1,2,0,0,0,0,6,15,2,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,    setMinReduction(0.2);,12,1,0,1,2,0,0,0,0,16,21,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,128,    setMaxGrowth(10.0);,0,0,0,1,2,0,0,0,0,3,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,130,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,110,    super(name);,6,0,0,1,2,0,4,0,0,11,12,3,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0,0,0,1,2,0,0,0,0,3,83,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,112,    resetInternalState();,0,0,0,1,2,0,0,0,0,3,21,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,114,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,157,      minStep     = FastMath.abs(minimalStep);,2,0,0,1,2,0,6,0,0,9,40,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,158,      maxStep     = FastMath.abs(maximalStep);,2,1,0,1,2,0,6,0,0,10,40,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,159,      initialStep = -1;,8,0,0,0,0,2,4,0,0,16,17,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,161,      scalAbsoluteTolerance = absoluteTolerance;,4,0,0,0,0,0,0,0,0,5,42,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,162,      scalRelativeTolerance = relativeTolerance;,6,4,0,0,0,0,10,0,0,20,42,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,163,      vecAbsoluteTolerance  = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,164,      vecRelativeTolerance  = null;,2,0,0,0,0,0,4,2,0,8,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,166,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,827,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,829,            if (intVal > 746) {,4,2,0,1,3,0,0,0,0,6,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,847,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,2,1,1,2,0,6,0,0,21,71,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,862,            intVal = -intVal;,2,1,0,0,0,0,0,0,0,3,17,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,98,            return primaryMapper.getDimension();,0,0,0,1,2,1,0,0,0,4,36,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,258,    double yOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,259,    double yDotOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,260,    for (int j = 0; j < scale.length; ++j) {,12,1,0,1,3,0,0,0,0,14,40,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,261,      ratio         = y0[j] / scale[j];,2,1,1,2,4,0,0,0,0,12,33,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,262,      yOnScale2    += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,263,      ratio         = yDot0[j] / scale[j];,4,1,0,2,4,0,6,0,0,11,36,1,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,264,      yDotOnScale2 += ratio * ratio;,0,0,0,0,0,0,0,0,0,0,30,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,267,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,0,0,0,3,6,0,0,0,0,9,64,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,269,    if (! forward) {,2,0,0,1,3,0,0,0,0,3,16,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,274,    for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,275,      y1[j] = y0[j] + h * yDot0[j];,2,1,0,3,6,0,4,0,0,7,29,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,277,"    computeDerivatives(t0 + h, y1, yDot1);",4,1,0,1,2,0,6,0,0,11,38,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,280,    double yDDotOnScale = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,281,    for (int j = 0; j < scale.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,282,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,0,0,0,4,8,0,0,0,0,12,49,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,283,      yDDotOnScale += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,285,    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;,4,1,0,1,2,0,14,0,0,20,47,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,289,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);",4,0,0,2,4,2,0,0,0,7,79,0,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,290,    final double h1 = (maxInv2 < 1.0e-15) ?,4,1,1,1,2,1,0,0,0,12,39,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,293,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);",0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,294,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0",6,0,0,2,4,0,0,0,0,7,95,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,295,    if (h < getMinStep()) {,2,1,0,2,5,0,2,0,0,5,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,298,    if (h > getMaxStep()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,301,    if (! forward) {,0,0,0,1,3,0,4,0,0,4,16,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,305,    return h;,2,0,0,0,0,1,0,0,0,2,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,362,    return minStep;,8,2,0,0,0,1,8,0,0,18,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,369,    return maxStep;,10,4,0,0,0,1,14,0,0,28,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,218,        if (y.length != equations.getDimension()) {,4,1,0,2,5,0,4,0,0,9,43,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,223,        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);,0,0,0,1,2,0,0,0,0,3,81,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,224,        expandableODE.setTime(t0);,0,0,0,1,2,0,6,0,0,6,26,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,225,        expandableODE.setPrimaryState(y0);,6,1,0,1,2,1,6,0,0,14,34,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,228,"        integrate(expandableODE, t);",6,3,0,1,2,0,16,0,0,25,28,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,233,        if (firstTime) {,2,0,0,1,3,0,0,0,0,2,16,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,234,          final double[] scale = new double[mainSetDimension];,2,0,1,2,4,1,0,0,0,5,52,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,235,          if (vecAbsoluteTolerance == null) {,2,1,0,1,3,0,4,0,0,7,35,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,244,"          hNew = initializeStep(forward, getOrder(), scale,",2,0,0,1,3,0,8,0,0,11,49,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,246,          firstTime = false;,4,0,0,0,0,0,0,2,0,7,18,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,249,        stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.01724,1,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,254,          for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,255,            double sum = a[k-1][0] * yDotK[0][j];,4,2,1,4,8,0,0,0,0,12,37,13,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,256,            for (int l = 1; l < k; ++l) {,8,1,0,1,3,0,0,0,0,10,29,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,257,              sum += a[k-1][l] * yDotK[l][j];,0,0,0,4,8,0,0,0,0,12,31,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,259,            yTmp[j] = y[j] + stepSize * sum;,4,2,1,2,4,0,0,0,0,15,32,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,262,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",0,0,0,3,6,0,0,0,0,9,66,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,266,    },6,0,0,0,1,1,0,0,0,7,1,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,116,"        primaryMapper.insertEquationData(primaryStateDot, yDot);",20,4,1,1,2,2,8,0,0,39,56,1,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,119,        for (final SecondaryComponent component : components) {,4,0,0,1,3,1,0,2,0,7,55,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,126,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,181,        currentState     = null;,2,1,0,0,0,0,10,0,0,14,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,182,        primaryMapper    = null;,4,0,0,0,0,0,0,0,0,5,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,183,        secondaryMappers = null;,2,0,0,0,0,0,0,0,0,3,24,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,184,        allocateInterpolatedArrays(-1);,0,0,0,1,2,0,0,0,0,3,31,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,248,    globalPreviousTime    = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,249,    globalCurrentTime     = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,250,    softPreviousTime      = Double.NaN;,8,2,0,0,0,0,6,0,0,17,35,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,251,    softCurrentTime       = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,252,    h                     = Double.NaN;,0,0,0,0,0,0,0,0,0,0,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,253,    interpolatedTime      = Double.NaN;,0,0,0,0,0,0,0,0,0,0,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,254,    currentState          = y;,4,0,0,0,0,0,0,0,0,5,26,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,255,    finalized             = false;,2,0,0,0,0,0,0,0,0,4,30,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,256,    this.forward          = isForward;,4,0,0,0,0,0,0,0,0,5,34,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,257,    this.dirtyState       = true;,2,0,0,0,0,0,0,0,0,4,29,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,258,    this.primaryMapper    = primary;,4,0,0,0,0,0,0,0,0,5,32,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,259,    this.secondaryMappers = secondary.clone();,6,0,0,1,2,1,4,4,0,16,42,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,260,    allocateInterpolatedArrays(y.length);,6,0,0,1,2,1,8,2,0,17,37,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,262,  },4,0,0,0,1,2,0,4,0,10,1,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,85,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,87,    if (interpolator.currentState != null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,97,      previousState = null;,6,1,1,0,0,0,0,0,0,10,21,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,98,      yDotK = null;,2,0,0,0,0,0,0,0,0,3,13,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,103,    integrator = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,105,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,134,"    reinitialize(y, forward, primaryMapper, secondaryMappers);",0,0,0,1,2,0,0,0,0,3,58,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,135,    this.previousState = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,136,    this.yDotK = yDotArray;,4,0,0,0,0,0,0,0,0,5,23,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,137,    this.integrator = rkIntegrator;,4,0,0,0,0,0,0,2,0,7,31,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,138,  },8,1,0,0,1,0,0,0,0,10,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,294,                nbPoints = end - start;,0,0,0,0,0,0,0,0,0,0,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,295,"                System.arraycopy(x, start, x, 0, nbPoints);",0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,                signChangeIndex -= start;,8,1,0,0,0,0,8,0,0,18,25,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,260,                    if (signChangeIndex - start >= end - signChangeIndex) {,0,0,0,1,3,0,0,0,0,4,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,                    nextX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,19,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,            if ((nbPoints > 2) && (end - start != nbPoints)) {,8,0,0,3,7,1,0,0,0,10,50,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,299,            } else  if (nbPoints == x.length) {,0,0,0,1,4,0,0,0,0,5,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",36,6,0,1,2,3,10,0,0,57,89,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,317,            x[signChangeIndex] = nextX;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,318,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,319,            y[signChangeIndex] = nextY;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,320,            ++nbPoints;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,323,            if (nextY * yA <= 0) {,22,6,0,1,3,0,20,0,0,48,22,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,325,                xB = nextX;,4,0,0,0,0,0,0,0,0,5,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,326,                yB = nextY;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,327,                absYB = FastMath.abs(yB);,8,3,0,1,2,0,16,0,0,28,25,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,328,                ++agingA;,8,2,0,0,0,0,12,0,0,22,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,329,                agingB = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,343,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,172,            nbPoints        = 2;,8,1,0,0,0,0,0,0,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,195,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,198,        double xA    = x[signChangeIndex - 1];,0,0,0,1,2,0,0,0,0,3,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,200,        double absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,8,32,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,201,        int agingA   = 0;,4,1,0,0,0,0,4,0,0,10,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,202,        double xB    = x[signChangeIndex];,2,0,1,1,2,0,0,0,0,7,34,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,205,        int agingB   = 0;,14,4,0,0,0,0,0,0,0,20,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,211,            final double xTol = getAbsoluteAccuracy() +,2,1,0,1,2,1,2,0,0,6,43,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",2,0,0,6,13,1,0,0,0,3,87,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,233,            if (agingA >= MAXIMAL_AGING) {,2,0,0,1,3,3,0,0,0,5,30,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,236,            } else if (agingB >= MAXIMAL_AGING) {,8,2,0,1,4,0,0,0,0,13,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,241,                targetY = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,246,            int start = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,251,"                System.arraycopy(x, start, tmpX, start, end - start);",0,0,0,1,2,0,0,0,0,3,53,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,252,"                nextX = guessX(targetY, tmpX, y, start, end);",2,0,0,1,2,0,12,0,0,15,45,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,254,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,3,0,3,7,0,6,0,0,13,51,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,283,            final double nextY = computeObjectiveValue(nextX);,2,0,0,1,2,1,4,0,0,7,50,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,365,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,6,0,0,19,39,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,366,            final int delta = i + 1 - start;,0,0,0,0,0,0,0,0,0,0,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,367,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,0,0,0,7,14,0,0,0,0,21,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,373,        double x0 = 0;,10,1,0,0,0,0,0,0,0,13,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,374,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,378,        return x0;,2,0,0,0,0,1,0,0,0,2,10,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,134,        return relativeAccuracy;,10,2,0,0,0,2,0,0,0,14,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,146,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,6,0,0,6,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,148,        x[0] = getMin();,8,1,1,2,4,0,2,0,0,15,16,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,149,        x[1] = getStartValue();,18,7,1,2,4,0,2,0,0,35,23,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,150,        x[2] = getMax();,2,0,0,2,4,0,0,0,0,2,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,151,"        verifySequence(x[0], x[1], x[2]);",2,1,0,4,8,0,0,0,0,3,33,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,154,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,155,"        if (Precision.equals(y[1], 0.0, 1)) {",4,0,1,3,7,1,4,2,0,13,37,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,161,        y[0] = computeObjectiveValue(x[0]);,0,0,1,3,6,0,2,0,0,7,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,169,        if (y[0] * y[1] < 0) {,2,0,0,3,7,0,0,2,0,4,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,257,        if (o == null) {,6,3,0,1,3,0,0,0,0,10,16,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,116,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,122,        return searchStart;,0,0,0,0,0,1,0,0,0,1,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,153,        incrementEvaluationCount();,0,0,0,1,2,0,0,0,0,3,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,173,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,177,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,178,        searchStart = startValue;,2,0,0,0,0,0,2,2,0,6,25,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,179,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,181,        evaluations.resetCount();,0,0,0,1,2,0,0,0,0,3,25,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,187,"        setup(maxEval, f, min, max, startValue);",2,0,0,1,2,1,0,0,0,3,40,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,190,        return doSolve();,0,0,0,1,2,1,2,0,0,2,17,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,64,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,294,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,297,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,79,    public Mean() {,0,0,0,1,3,0,0,0,0,4,15,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,80,        incMoment = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,81,        moment = new FirstMoment();,2,0,0,1,2,0,0,2,0,5,27,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,97,    public Variance() {,0,0,0,1,3,0,0,0,0,4,19,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,98,        moment = new SecondMoment();,2,0,0,1,2,0,0,2,0,5,28,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,99,    },2,0,0,0,1,0,0,0,0,3,1,9,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,184,        return true;,16,3,0,0,0,1,0,0,0,22,12,3,0.00909,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,163,        if (values == null) {,2,0,0,1,3,0,6,0,0,8,21,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,167,        if (begin < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,171,        if (length < 0) {,4,0,0,1,3,0,0,0,0,5,17,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,175,        if (begin + length > values.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,180,        if (length == 0 && !allowEmpty) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,56,    public Sum() {,4,0,0,1,3,0,0,0,0,4,14,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,57,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,58,        value = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,59,    },8,1,0,0,1,0,0,0,0,11,1,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,75,    protected SecondMoment moment = null;,0,0,0,0,0,0,0,0,0,0,37,4,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,84,    protected boolean incMoment = true;,8,0,0,0,0,1,0,0,0,11,35,1,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,91,    private boolean isBiasCorrected = true;,2,0,0,0,0,1,0,0,0,4,39,2,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.00662,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,60,        super();,4,0,0,1,2,0,0,0,0,5,8,11,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,61,        m2 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,62,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,79,    public FirstMoment() {,0,0,0,1,3,0,0,0,0,4,22,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,80,        n = 0;,14,3,0,0,0,1,10,0,0,29,6,3,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,81,        m1 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,16,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,82,        dev = Double.NaN;,8,1,1,0,0,0,0,0,0,15,17,1,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,83,        nDev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,18,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,84,    },2,3,1,0,1,1,0,0,0,10,1,7,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,35,public abstract class AbstractStorelessUnivariateStatistic,0,0,0,0,0,0,0,0,0,0,58,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,39,public abstract class AbstractUnivariateStatistic,2,0,0,0,0,2,0,0,0,4,49,1,0.00578,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,2,0,0,0,0,2,0,0,0,5,71,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,115,    private static final double LN_QUICK_COEF[][] = {,4,0,1,2,5,3,0,0,0,14,49,1,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,256,    private static final long RECIP_2PI[] = new long[] {,12,3,0,2,5,3,0,0,0,18,52,1,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",0,0,0,2,4,1,0,0,0,7,81,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,0,0,0,1,2,0,0,0,0,3,72,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",0,0,0,1,2,0,0,0,0,3,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,0,0,0,1,2,0,0,0,0,3,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,        tableau.dropPhase1Objective();,4,1,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,        while (!tableau.isOptimal()) {,2,0,0,2,5,2,4,0,0,9,30,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,70,        double minValue = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,71,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,1,0,3,7,0,2,2,0,15,83,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,73,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,1,0,2,5,0,10,0,0,11,56,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,                minValue = entry;,2,0,0,0,0,0,0,0,0,2,17,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,79,        return minPos;,2,0,0,0,0,1,4,0,0,7,14,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,10,1,0,1,2,0,0,8,0,20,59,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,8,1,1,3,7,2,10,0,0,25,80,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",16,2,0,2,4,0,8,0,0,28,63,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",14,0,0,1,2,4,0,0,0,18,62,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,101,                } else if (cmp < 0) {,8,4,1,1,4,0,0,0,0,23,21,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,102,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,103,                    minRatioPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,109,        if (minRatioPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,36,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,0,0,0,4,32,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,137,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,139,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,150,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,151,            if (i != pivotRow) {,6,1,0,1,3,0,0,0,0,8,20,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,152,"                double multiplier = tableau.getEntry(i, pivotCol);",4,0,0,1,2,1,14,2,0,21,50,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,153,"                tableau.subtractRow(i, pivotRow, multiplier);",4,0,0,1,2,0,10,0,0,14,45,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,312,        for (int i = 0; i < getHeight(); i++) {,10,1,0,2,5,0,2,0,0,15,39,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,313,"            final double entry = getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",4,2,0,3,7,3,8,0,0,17,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,315,                row = i;,10,3,0,0,0,1,2,0,0,17,8,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,328,        if (getNumObjectiveFunctions() == 1) {,0,1,0,2,5,0,6,0,0,7,38,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,437,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,13,38,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,438,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,454,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",0,0,0,1,3,0,12,0,0,12,65,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,456,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,68,            return -1;,4,7,1,0,0,1,0,0,0,27,10,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,285,            yInt = SGN_MASK - yInt;,8,1,0,0,0,0,0,2,0,12,23,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,1,2,4,0,8,0,0,20,69,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",4,1,0,2,4,0,8,0,0,15,73,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,506,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,514,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,91,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,8,0,0,8,28,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,93,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,94,            return -1;,2,0,0,0,0,2,4,0,0,8,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,96,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,73,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,74,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,79,        this.maxIterations = maxIterations;,6,0,0,0,0,0,0,0,0,8,35,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,110,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,111,        this.linearConstraints = constraints;,6,0,0,0,0,0,0,0,0,7,37,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,112,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,113,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,115,        iterations  = 0;,2,0,1,0,0,0,4,0,0,11,16,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,118,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",6,0,0,1,2,3,0,0,0,9,36,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",4,0,0,1,3,0,0,0,0,4,63,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,60,        this.epsilon = epsilon;,8,0,0,0,0,0,0,0,0,10,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,169,        if (tableau.getNumArtificialVariables() == 0) {,4,1,0,2,5,0,0,0,0,5,47,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,191,        solvePhase1(tableau);,2,0,0,1,2,0,8,0,0,10,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",4,1,0,2,5,0,14,0,0,19,50,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,471,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,65,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,66,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,67,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,70,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,241,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,463,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,480,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,0,0,0,4,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0,0,0,0,0,0,0,0,0,0,71,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,128,    private static final double LN_HI_PREC_COEF[][] = {,12,3,0,2,5,0,0,0,0,15,51,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,0,0,0,0,2,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",8,0,0,2,4,3,0,0,0,12,126,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3005,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,277,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,278,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,281,        if (xInt < 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,282,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,6,0,0,16,23,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,284,        if (yInt < 0) {,4,2,1,1,3,0,0,0,0,14,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,478,"        return new ArrayRealVector(getRow(row), false);",2,0,0,2,4,1,4,2,0,9,47,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,483,"        MatrixUtils.checkRowIndex(this, row);",6,1,0,1,2,0,0,0,0,7,37,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,485,        if (vector.getDimension() != nCols) {,2,0,0,2,5,0,4,0,0,7,37,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,489,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,18,0,0,18,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,515,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,516,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,517,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,518,"            out[i] = getEntry(row, i);",2,0,1,2,4,0,6,0,0,13,26,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,521,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,64,    },0,0,1,0,1,0,0,0,0,3,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,315,        if (v instanceof ArrayRealVector) {,2,0,1,1,3,0,0,2,0,7,35,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,316,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,317,            final int dim = vData.length;,2,1,0,0,0,0,0,0,0,4,29,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,318,            checkVectorDimensions(dim);,2,0,0,1,2,0,4,0,0,6,27,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,319,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,320,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,322,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,324,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,622,        return data[index];,0,0,1,1,2,1,0,0,0,4,19,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,265,"        return new LinearConstraint(constraint.getCoefficients(),",8,1,0,1,3,1,4,2,0,17,57,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,102,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,105,        data = copyArray ? d.clone() :  d;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,762,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,765,    },0,0,0,0,1,0,6,0,0,6,1,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,295,        return data[row][column];,4,0,1,2,4,3,2,0,0,20,25,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,58,public abstract class RealVector {,6,1,0,0,1,2,6,0,0,15,34,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,57,        if (columnDimension < 1) {,2,0,0,1,3,0,0,0,0,3,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,42,52,public abstract class RealLinearOperator {,2,1,0,0,1,0,0,0,0,3,42,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,83,    public ArrayRealVector(double[] d) {,20,3,1,2,5,1,0,0,0,35,36,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",8,0,0,1,3,1,0,2,0,12,57,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,198,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,373,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,374,            data[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,376,        return this;,4,1,0,0,0,1,6,0,0,11,12,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,628,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,57,    },2,0,0,0,1,0,6,0,0,8,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,254,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",2,0,0,1,2,0,8,0,0,10,48,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,2,0,1,2,0,0,0,0,12,64,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,109,        this.separator   = separator;,10,1,1,0,0,0,0,0,0,16,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,110,        trimmedPrefix    = prefix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,111,        trimmedSuffix    = suffix.trim();,4,1,0,1,2,0,6,0,0,14,33,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,112,        trimmedSeparator = separator.trim();,4,0,0,1,2,0,0,0,0,5,36,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,162,        return getInstance(Locale.getDefault());,2,0,0,2,4,3,6,2,0,12,40,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,367,"        checkRowIndex(m, row);",6,1,0,1,2,0,6,0,0,14,22,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,369,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,379,        if (row < 0 ||,2,0,0,0,1,0,6,0,0,9,14,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,394,        if (column < 0 || column >= m.getColumnDimension()) {,0,0,0,2,5,0,4,0,0,4,53,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,58,"        this(new ArrayRealVector(coefficients), constantTerm);",4,0,0,2,4,0,0,2,0,6,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0,0,0,1,3,0,0,0,0,4,78,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,67,        this.constantTerm = constantTerm;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,75,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,83,        return constantTerm;,0,0,0,0,0,1,0,0,0,1,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,27,public enum GoalType implements Serializable {,12,2,1,0,1,1,0,2,0,20,46,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,81,"        this(new ArrayRealVector(coefficients), relationship, value);",14,0,0,2,4,0,8,2,0,25,61,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,101,        this.relationship = relationship;,10,0,0,0,0,0,8,0,0,20,33,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,102,        this.value        = value;,10,2,1,0,0,0,6,0,0,21,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,168,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,184,        return value;,2,0,0,0,0,1,0,2,0,4,13,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,42,    private Relationship(String stringValue) {,2,0,0,1,3,0,0,0,0,3,42,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,31,"    LEQ(""<=""),",2,0,0,1,2,0,0,0,0,3,10,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,34,"    GEQ("">="");",0,0,0,1,2,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,134,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,84,    private final List<String> columnLabels = new ArrayList<String>();,6,0,0,1,2,2,0,10,0,18,66,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,135,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,136,        this.constraints            = normalizeConstraints(constraints);,2,0,0,1,2,0,4,0,0,7,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,137,        this.restrictToNonNegative  = restrictToNonNegative;,0,0,0,0,0,0,0,0,0,0,52,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,138,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,139,        this.maxUlps                = maxUlps;,4,0,0,0,0,0,0,0,0,5,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,2,1,0,2,4,0,6,0,0,10,66,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,8,1,0,1,2,0,2,0,0,12,60,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,147,        initializeColumnLabels();,0,0,0,1,2,0,2,0,0,2,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,154,      if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,157,"      columnLabels.add(""Z"");",0,0,0,1,2,0,0,0,0,3,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,159,"        columnLabels.add(""x"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,161,      if (!restrictToNonNegative) {,2,0,1,1,3,0,0,0,0,7,29,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,170,"      columnLabels.add(""RHS"");",6,1,0,1,2,0,4,0,0,12,24,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,171,    },4,1,0,0,1,0,0,0,0,5,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,181,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,183,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,1,1,1,2,0,0,4,0,18,70,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,187,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,8,2,0,2,4,1,2,0,0,13,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",2,0,0,1,2,0,8,0,0,11,51,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,192,        RealVector objectiveCoefficients =,2,0,0,0,0,0,0,2,0,4,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",6,1,1,4,8,0,12,0,0,22,72,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,195,"        matrix.setEntry(zIndex, width - 1,",0,0,0,0,1,0,0,0,0,1,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,198,        if (!restrictToNonNegative) {,4,1,0,1,3,0,0,0,0,6,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,204,        int slackVar = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,205,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,206,        for (int i = 0; i < constraints.size(); i++) {,6,1,0,2,5,0,6,0,0,14,46,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",0,0,0,1,2,1,0,0,0,4,42,4,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,        checkEmpty();,6,2,0,1,2,3,18,0,0,29,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,        this.geoMeanImpl = geoMeanImpl;,2,0,0,0,0,3,0,0,0,5,31,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,579,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,        checkEmpty();,4,0,0,1,2,0,2,0,0,7,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,636,        this.varianceImpl = varianceImpl;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,    },2,0,0,0,1,1,6,0,0,9,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,84,        value += FastMath.log(d);,0,0,0,1,2,0,0,0,0,3,25,4,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,        n++;,4,0,1,0,0,1,0,0,0,10,4,3,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,    },2,0,0,0,1,3,0,0,0,5,1,2,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,        sumImpl.increment(value);,4,0,0,1,2,0,0,0,0,5,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,151,        sumsqImpl.increment(value);,0,0,0,1,2,0,6,0,0,6,27,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,152,        minImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,153,        maxImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,154,        sumLogImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,155,        secondMoment.increment(value);,0,0,0,1,2,0,0,0,0,3,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,167,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,168,    },4,0,0,0,1,1,6,4,0,16,1,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,76,        if (d > value || Double.isNaN(value)) {,0,0,0,2,5,0,0,0,0,7,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,77,            value = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,79,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,76,        if (d < value || Double.isNaN(value)) {,4,2,0,2,5,0,6,0,0,12,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,77,            value = d;,6,0,0,0,0,0,0,0,0,7,10,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,79,        n++;,20,1,1,0,0,0,0,0,0,25,4,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,76,        value += d;,0,0,0,0,0,0,0,0,0,0,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,77,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,78,    },10,1,0,0,1,0,0,0,0,13,1,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,75,        value += d * d;,0,0,0,0,0,0,0,0,0,0,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,76,        n++;,6,0,0,0,0,2,0,4,0,12,4,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,77,    },2,0,0,0,1,0,6,0,0,8,1,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,102,        if (n == 0) {,6,1,0,1,3,0,0,0,0,7,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,103,            m1 = 0.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,105,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,106,        double n0 = n;,6,0,0,0,0,0,4,0,0,11,14,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,107,        dev = d - m1;,6,1,0,0,0,0,0,0,0,8,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,108,        nDev = dev / n0;,0,0,0,0,0,0,0,0,0,0,16,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,109,        m1 += nDev;,4,0,0,0,0,0,0,0,0,5,11,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,110,    },0,0,0,0,1,0,0,0,0,1,1,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,80,        if (n < 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,81,            m1 = m2 = 0.0;,0,0,0,0,0,0,0,0,0,0,14,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,83,        super.increment(d);,4,0,0,1,2,0,0,0,0,4,19,5,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,84,        m2 += ((double) n - 1) * dev * nDev;,0,0,0,2,4,0,0,0,0,6,36,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,85,    },10,1,0,0,1,0,2,2,0,16,1,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1269,            lnza = -0.16624882440418567;,4,2,0,0,0,0,14,0,0,20,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1274,            lnza = lnza * epsilon + 1.0;,4,0,0,0,0,0,0,0,0,4,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1275,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3791,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3804,            } else if (LOAD_RESOURCES) {,0,0,0,1,4,0,0,0,0,5,28,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,0,0,1,2,0,4,0,0,8,45,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3809,        },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,0,0,0,0,10,73,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,0,0,0,0,12,89,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1216,        double lnzb = 0.0;,8,1,0,0,0,0,0,0,0,10,18,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1218,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1295,        double d = -(c-a-lnm[0]);,12,2,1,2,4,1,0,0,0,18,25,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1297,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1299,        c = a + lnza;,8,1,0,0,0,0,0,0,0,10,13,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1300,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1301,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1302,        b = b + d;,2,0,0,0,0,0,0,0,0,3,10,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1304,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1305,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1307,        b = b + d;,2,0,1,0,0,1,0,0,0,7,10,6,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1309,        c = a + lnm[1];,10,2,1,1,2,2,0,0,0,17,15,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1310,        d = -(c - a - lnm[1]);,4,0,0,2,4,0,0,0,0,5,22,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1311,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1312,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1316,        a = c;,4,0,1,0,0,0,0,0,0,7,6,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1319,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1324,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,6174,        return LN_MANT;,0,0,0,0,0,1,0,0,0,1,15,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,123,    public SummaryStatistics() {,2,0,0,1,3,1,0,0,0,3,28,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,67,    protected long n = 0;,8,1,0,0,0,1,0,0,0,10,21,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,70,    protected SecondMoment secondMoment = new SecondMoment();,2,0,0,1,2,1,0,4,0,7,57,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,73,    protected Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,30,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,76,    protected SumOfSquares sumsq = new SumOfSquares();,2,0,0,1,2,1,0,4,0,7,50,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,79,    protected Min min = new Min();,4,2,0,1,2,1,0,4,0,11,30,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,82,    protected Max max = new Max();,2,0,0,1,2,1,0,4,0,7,30,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,85,    protected SumOfLogs sumLog = new SumOfLogs();,4,0,0,1,2,1,0,4,0,10,45,0,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,88,    protected GeometricMean geoMean = new GeometricMean(sumLog);,4,0,0,1,2,1,0,4,0,9,60,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,91,    protected Mean mean = new Mean(secondMoment);,4,0,0,1,2,1,0,4,0,9,45,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,94,    protected Variance variance = new Variance(secondMoment);,16,3,0,1,2,1,0,6,0,27,57,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,0,0,0,0,0,1,0,0,0,1,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,            nbPoints        = 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,6,0,1,4,9,0,0,0,0,9,77,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,        if (nextAction == EventHandler.Action.RESET_STATE) {,12,1,0,1,3,0,0,4,0,18,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,        pendingEvent      = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {",2,1,0,2,5,0,6,0,0,9,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,                return nextX;,2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,        final double[] x = new double[maximalOrder + 1];,2,0,0,2,4,0,0,0,0,2,48,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,        x[1] = getStartValue();,4,0,0,2,4,0,6,0,0,11,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,        x[2] = getMax();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);",0,0,0,4,8,0,0,0,0,12,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,        y[1] = computeObjectiveValue(x[1]);,0,0,1,3,6,0,8,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,        y[0] = computeObjectiveValue(x[0]);,0,0,0,3,6,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,        if (y[0] * y[1] < 0) {,0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,        final double[] tmpX = new double[x.length];,6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,        double xA    = x[signChangeIndex - 1];,4,2,1,1,2,0,8,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,        double absYA = FastMath.abs(yA);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,        int agingA   = 0;,4,0,0,0,0,1,0,8,0,13,17,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,        int agingB   = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,            final double xTol = getAbsoluteAccuracy() +,6,2,0,1,2,1,2,0,0,11,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",0,0,0,6,13,0,0,0,0,19,87,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,233,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,236,            } else if (agingB >= MAXIMAL_AGING) {,0,0,0,1,4,0,0,0,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,                targetY = 0;,6,0,0,0,0,0,0,0,0,8,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,            int start = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);",8,2,0,1,2,0,12,0,0,22,53,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,252,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,254,                if (!((nextX > xA) && (nextX < xB))) {,0,0,0,4,9,0,0,0,0,13,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,0,0,3,7,0,0,0,0,5,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,            final double nextY = computeObjectiveValue(nextX);,12,1,0,1,2,1,4,0,0,18,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,365,        for (int i = start; i < end - 1; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,            final int delta = i + 1 - start;,2,0,0,0,0,0,0,0,0,4,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,367,            for (int j = end - 1; j > i; --j) {,32,11,0,1,3,1,18,0,0,63,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,30,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,373,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,374,        for (int j = end - 1; j >= start; --j) {,10,2,0,1,3,0,0,2,0,16,40,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,378,        return x0;,6,1,0,0,0,1,0,0,0,8,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,385,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,386,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,232,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,128,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,0,0,0,1,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,131,    },6,1,0,0,1,0,8,0,0,15,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,304,                    occuringEvents.add(state);,6,2,0,1,2,0,10,0,0,19,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,311,                final Iterator<EventState> iterator = occuringEvents.iterator();,0,0,0,1,2,0,0,0,0,3,64,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,312,                final EventState currentEvent = iterator.next();,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,313,                iterator.remove();,2,1,0,1,2,0,16,0,0,20,18,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,316,                final double eventT = currentEvent.getEventTime();,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,317,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,318,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,0,0,0,3,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,321,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,6,0,0,6,41,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,322,                final double[] eventY = interpolator.getInterpolatedState();,4,0,0,2,4,1,4,0,0,9,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,323,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,324,                isLastStep = currentEvent.stop();,0,0,0,1,2,0,0,0,0,3,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,327,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,331,                if (isLastStep) {,2,1,0,1,3,0,4,0,0,8,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,296,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",6,1,0,3,6,3,16,2,0,28,77,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,320,      this.softPreviousTime = softPreviousTime;,0,0,0,0,0,0,0,0,0,0,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,321,  },2,0,0,0,1,0,0,0,0,2,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,334,      this.softCurrentTime  = softCurrentTime;,0,0,0,0,0,0,0,0,0,0,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,335,  },4,1,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,82,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,83,        if (maximalOrder < 2) {,4,1,0,1,3,0,0,0,0,6,23,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,86,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,87,        this.allowed = AllowedSolution.ANY_SIDE;,10,0,1,0,0,0,10,0,0,25,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,122,        return searchStart;,2,0,0,0,0,2,6,0,0,9,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",4,0,0,2,4,1,6,0,0,11,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,355,"        verifyInterval(initial, upper);",4,0,0,1,2,0,0,0,0,5,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,356,    },12,6,1,0,1,1,8,0,0,33,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,227,                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =,2,0,0,0,0,0,0,4,0,6,66,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,229,                        root = forward ?,4,0,0,0,0,0,0,0,0,5,16,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,246,                    if ((!Double.isNaN(previousEventTime)) &&,0,1,0,2,5,0,6,0,0,8,41,8,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,254,                    } else if (Double.isNaN(previousEventTime) ||,0,0,0,1,4,0,0,0,0,5,45,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,256,                        pendingEventTime = root;,4,1,0,0,0,1,0,0,0,6,24,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,257,                        pendingEvent = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,258,                        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,285,        return pendingEvent ?,2,0,0,0,0,1,0,0,0,2,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,303,            previousEventTime = t;,4,0,0,0,0,0,0,0,0,5,22,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,304,            g0Positive        = increasing;,8,0,0,0,0,0,0,4,0,14,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,305,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",6,1,0,2,4,0,8,0,0,17,73,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,8,0,0,10,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,221,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,225,                    if (solver instanceof BracketedUnivariateRealSolver<?>) {,0,0,0,1,3,0,0,0,0,4,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,307,            g0Positive = g0 >= 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,308,            nextAction = EventHandler.Action.CONTINUE;,10,0,1,0,0,0,0,0,0,16,42,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,317,        return nextAction == EventHandler.Action.STOP;,8,1,0,0,0,1,0,0,0,9,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,44,public class EventState {,2,0,0,0,1,1,4,0,0,7,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,202,                    interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,6,0,0,6,36,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,203,"                    return handler.g(t, interpolator.getInterpolatedState());",2,0,0,2,4,1,14,0,0,17,57,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,139,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",6,0,0,0,2,0,4,2,0,12,71,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,285,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,6,0,0,6,38,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,286,                },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,302,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,0,6,0,0,6,39,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,306,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,362,"                state.stepAccepted(currentT, currentY);",0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,363,                isLastStep = isLastStep || state.stop();,4,1,0,1,2,0,4,0,0,10,40,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,364,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3370,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,116,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,134,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,173,        MathUtils.checkNotNull(f);,2,0,0,1,2,0,0,0,0,2,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,177,        searchMax = max;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,178,        searchStart = startValue;,0,0,0,0,0,0,0,0,0,0,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,179,        function = f;,10,2,0,0,0,0,0,0,0,15,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,182,    },6,1,0,0,1,0,0,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,187,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,0,0,0,3,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,190,        return doSolve();,0,0,0,1,2,1,2,0,0,2,17,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,294,            evaluations.incrementCount();,2,0,0,1,2,0,4,0,0,6,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,297,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,336,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,340,    },2,0,0,0,1,2,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,53,    public enum Action {,0,0,0,0,1,0,0,0,0,1,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,60,"        STOP,",2,0,0,0,0,0,0,0,0,2,5,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,69,"        RESET_STATE,",6,1,0,0,0,0,4,0,0,11,12,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,79,"        RESET_DERIVATIVES,",2,0,0,0,0,0,0,0,0,2,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,86,        CONTINUE;,2,0,0,0,0,0,0,0,0,2,9,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,102,                      final UnivariateRealSolver solver) {,2,0,0,0,2,1,0,2,0,5,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,103,        this.handler           = handler;,8,0,0,0,0,0,0,0,0,10,33,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,104,        this.maxCheckInterval  = maxCheckInterval;,4,0,0,0,0,0,0,0,0,5,42,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,105,        this.convergence       = FastMath.abs(convergence);,2,0,0,1,2,0,6,0,0,9,51,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,106,        this.maxIterationCount = maxIterationCount;,10,2,0,0,0,0,0,0,0,14,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,107,        this.solver            = solver;,4,0,0,0,0,0,0,0,0,5,32,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,110,        t0                = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,111,        g0                = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,112,        g0Positive        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,113,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,114,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,115,        previousEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,116,        increasing        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,117,        nextAction        = EventHandler.Action.CONTINUE;,8,0,0,0,0,0,0,0,0,9,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,119,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,154,        t0 = interpolator.getPreviousTime();,2,0,0,1,2,0,4,0,0,7,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,8,0,0,8,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",2,2,0,2,4,0,26,0,0,30,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,8,0,0,1,2,1,6,0,0,15,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,2,0,0,1,2,0,4,0,0,7,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,4,1,1,1,3,0,0,0,0,10,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,                double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,14,2,0,1,3,0,0,0,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,6,1,0,1,2,1,6,0,0,14,24,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,2,0,4,0,10,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",2,0,0,3,6,3,0,0,0,5,76,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,        if (p == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,2,1,0,2,4,1,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,0,0,1,3,0,0,2,0,4,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,        final int power = p - 1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,                nonZeroPositions.add(pos);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,24,8,0,0,0,1,0,0,0,34,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,8,2,0,2,4,1,0,4,0,15,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,        results[0] = this.copy();,12,2,1,2,4,1,0,2,0,20,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,        for (int i = 1; i <= maxI; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,            results[i] = results[i-1].multiply(results[i-1]);,0,0,0,4,8,0,0,0,0,12,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,        for (Integer i : nonZeroPositions) {,10,5,1,1,3,0,0,2,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,0,2,4,1,6,0,0,9,37,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,4,0,0,6,12,0,0,0,0,4,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,        for (int i = 0; i < data.length; ++i) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,6,1,0,2,4,0,6,0,0,13,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,18,2,0,1,3,0,0,0,0,21,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,0,0,0,13,49,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,0,0,0,1,3,0,0,0,0,4,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,        if (isNaN) {,12,3,0,1,3,1,10,0,0,26,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,            if (hiPrec != null) {,8,4,0,1,3,0,14,0,0,28,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,                return isNaN;,10,0,0,0,0,1,0,2,0,14,13,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,            return INF;,12,1,0,0,0,1,0,0,0,14,11,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,276,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,            double denominator = d * q + c;,8,3,0,0,0,0,4,0,0,16,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,",8,1,0,1,3,1,0,0,0,10,58,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,122,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,        if (divisor.isInfinite() && !isInfinite()) {,10,2,0,3,7,0,0,0,0,13,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,267,        final double c = divisor.getReal();,0,0,0,1,2,0,0,0,0,3,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,        final double d = divisor.getImaginary();,6,0,0,1,2,1,4,0,0,12,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);",10,1,0,1,2,1,10,0,0,22,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,        if (o == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,2,0,0,2,5,1,0,0,0,3,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,        if (x == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,4,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,164,"        return createComplex(real + addend.getReal(),",0,0,0,1,3,1,0,0,0,5,45,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,        if (y == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,    private static final long[] FACTORIALS = new long[] {,8,2,1,2,5,0,0,0,0,16,53,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,379,        return isNaN;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,750,        if (isNaN) {,6,0,0,1,3,0,0,0,0,7,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,        if (y == 0.0) {,8,1,0,1,3,1,0,0,0,10,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2973,        if (x !=x || y != y) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,159,        MathUtils.checkNotNull(addend);,0,0,0,1,2,0,0,0,0,3,31,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,160,        if (isNaN || addend.isNaN) {,24,6,0,1,3,4,12,0,0,47,28,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,492,        MathUtils.checkNotNull(subtrahend);,14,3,0,1,2,3,0,0,0,20,35,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,493,        if (isNaN || subtrahend.isNaN) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,425,        if (Double.isInfinite(real) ||,2,0,0,1,3,0,0,0,0,2,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,121,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,118,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,421,        MathUtils.checkNotNull(factor);,4,3,0,1,2,0,6,0,0,13,31,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,422,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,12,61,3,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,327,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,328,            if (c.isNaN) {,22,2,0,1,3,0,0,0,0,26,14,1,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,326,        if (other instanceof Complex){,4,0,0,1,3,0,0,2,0,6,30,3,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,392,        return isInfinite;,4,0,0,0,0,1,0,0,0,5,18,12,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,99,"    public Complex(double real, double imaginary) {",0,0,0,1,3,0,0,0,0,4,47,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,100,        this.real = real;,8,0,0,0,0,0,10,0,0,19,17,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,101,        this.imaginary = imaginary;,0,0,0,0,0,0,0,0,0,0,27,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,103,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,4,1,0,2,4,0,12,4,0,21,54,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,104,        isInfinite = !isNaN &&,10,1,1,0,0,0,0,0,0,16,22,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,106,        isZero = real == 0 && imaginary == 0;,14,6,0,0,0,0,0,2,0,23,37,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,58,"    public static final Complex I = new Complex(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,54,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,22,70,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,2,0,0,0,4,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0,0,0,1,2,0,0,0,0,3,57,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,323,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,1,0,0,0,3,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,110,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,2,62,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,233,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,235,            FACT[i] = FACT[i-1] * i;,6,3,1,2,4,0,6,0,0,22,24,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,238,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,239,        double recip[] = new double[2];,4,1,0,2,4,0,0,0,0,7,31,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,242,        for (i = 0; i < 750; i++) {,4,1,1,1,3,0,0,0,0,10,27,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,0,0,2,4,0,0,0,0,2,32,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,251,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,0,2,4,0,0,0,0,9,34,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,2,0,0,1,3,0,4,2,0,8,47,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,257,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,10,1,1,2,4,0,0,0,0,19,29,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,263,        for (i = 0; i < LN_MANT.length; i++) {,14,1,0,1,3,1,0,2,0,20,38,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,265,            LN_MANT[i] = slowLog(d);,8,2,0,2,4,0,4,0,0,15,24,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,269,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1012,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1013,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1014,        final double facts[] = new double[2];,6,0,0,2,4,2,0,2,0,10,37,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1015,        final double as[] = new double[2];,2,0,0,2,4,1,4,2,0,9,34,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1016,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1017,        ys[0] = ys[1] = 0.0;,12,9,1,2,4,0,0,0,0,28,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1021,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1022,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1024,"            split(FACT[i], as);",2,0,1,2,4,0,4,0,0,10,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1028,            ys[0] = as[0];,2,0,0,2,4,0,0,0,0,2,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1029,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1032,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1033,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1034,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,3,18,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1037,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1046,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1047,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1048,            split[0] = (d + a) - a;,2,0,0,2,4,3,0,0,0,5,23,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1049,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1050,        } else {,10,1,0,0,2,0,0,0,0,12,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1062,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1063,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1066,            double z = c * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1067,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1071,            a[0] = (c + z - c) * HEX_40000000;,10,4,1,2,4,0,4,0,0,30,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1082,        ans[0] = a[0] * b[0];,2,1,0,3,6,0,2,0,0,5,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1095,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1096,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1098,        resplit(ans);,8,0,0,1,2,0,6,0,0,15,13,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1121,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1123,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1128,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1132,            result[1] = 0.0;,6,2,0,1,2,0,0,0,0,9,16,10,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1136,        resplit(result);,2,0,0,1,2,0,4,0,0,7,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1138,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1143,            err = err * (result[0] + result[1]);,2,0,0,3,6,0,6,0,0,9,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1145,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,16,1,0,1,3,0,10,4,0,33,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,8,1,1,0,0,0,0,0,0,13,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,8,2,0,0,0,0,0,0,0,10,31,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",8,0,0,1,3,2,0,2,0,12,58,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,            return NaN;,16,7,0,0,0,1,4,0,0,27,11,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,                return result;,2,0,1,0,0,2,0,0,0,7,14,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,            double result = x*y;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,            double invx = 1.0/x;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,6,1,0,0,0,0,6,0,0,13,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2982,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,273,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",8,3,0,1,3,1,6,0,0,18,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,4,0,0,0,0,0,0,0,0,4,44,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0,1,0,0,0,0,4,0,0,5,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1433,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1434,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1435,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,260,        if (divisor.isInfinite() && !isInfinite()) {,2,0,0,3,7,0,0,0,0,2,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,264,        final double c = divisor.getReal();,2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,265,        final double d = divisor.getImaginary();,14,1,0,1,2,2,6,0,0,24,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,267,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,0,0,3,7,0,0,0,0,10,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,419,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,        if (o == null) {,16,2,0,1,3,0,0,0,0,20,16,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1375,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1376,        double lnzb = 0.0;,6,1,0,0,0,1,0,0,0,8,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1378,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1452,        double a = LN_2_A*exp;,6,1,1,0,0,3,0,0,0,14,22,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1453,        double b = 0.0;,0,0,0,0,0,0,6,0,0,6,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1454,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1455,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1456,        a = c;,4,3,0,0,0,0,0,0,0,7,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1457,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1459,        c = a + lnza;,16,3,0,0,0,0,0,0,0,22,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1460,        d = -(c - a - lnza);,2,0,0,1,2,1,4,0,0,7,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1461,        a = c;,10,5,0,0,0,0,0,0,0,16,6,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1462,        b = b + d;,2,0,0,0,0,1,4,0,0,7,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1464,        c = a + LN_2_B*exp;,2,0,0,0,0,0,0,0,0,3,19,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1465,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1466,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1467,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1469,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1470,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1471,        a = c;,6,3,1,0,0,0,4,0,0,15,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1472,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1474,        c = a + lnzb;,12,2,0,0,0,0,14,0,0,33,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1475,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1476,        a = c;,2,1,0,0,0,0,0,0,0,3,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1477,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1479,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,7,21,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1484,        return a + b;,4,3,0,0,0,1,0,0,0,7,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,750,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,0,0,0,8,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,132,            double q = imaginary / real;,6,1,0,0,0,0,0,0,0,7,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,4,3,0,2,4,1,10,0,0,17,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1292,        int exp = (int)(bits >> 52)-1023;,18,5,0,2,4,0,0,0,0,24,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1314,        if (exp == -1 || exp == 0) {,2,0,0,1,3,0,8,0,0,11,28,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,129,            if (real == 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1269,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1283,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1266,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,162,"        return createComplex(real + addend.getReal(),",8,0,0,1,3,3,0,0,0,11,45,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2977,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,746,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2973,        if (x !=x || y != y) {,8,3,0,1,3,0,10,0,0,21,22,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,428,"        return createComplex(real * factor.real - imaginary * factor.imaginary,",16,5,1,0,1,1,2,0,0,36,71,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,493,"        return createComplex(real - subtrahend.getReal(),",0,0,0,1,3,1,0,0,0,5,49,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,157,        MathUtils.checkNotNull(addend);,0,0,0,1,2,0,6,0,0,6,31,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,158,        if (isNaN || addend.isNaN) {,0,0,0,1,3,0,0,0,0,4,28,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,488,        MathUtils.checkNotNull(subtrahend);,0,0,0,1,2,0,0,0,0,3,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,489,        if (isNaN || subtrahend.isNaN) {,6,1,0,1,3,0,0,0,0,7,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,421,        if (Double.isInfinite(real) ||,10,2,0,1,3,0,18,0,0,31,30,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,364,        return real;,0,0,0,0,0,1,0,0,0,1,12,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,355,        return imaginary;,6,1,0,0,0,2,0,0,0,8,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,122,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,119,        if (isInfinite()) {,0,0,0,2,5,0,0,0,0,7,19,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,302,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,116,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,417,        MathUtils.checkNotNull(factor);,0,0,0,1,2,0,6,0,0,6,31,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,418,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,327,                return (real == c.real) && (imaginary == c.imaginary);,12,3,0,2,4,1,0,0,0,15,54,8,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,323,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,324,            if (c.isNaN) {,6,0,0,1,3,1,0,0,0,7,14,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,322,        if (other instanceof Complex){,2,0,0,1,3,0,0,2,0,4,30,5,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,388,        return isInfinite;,0,0,0,0,0,1,4,0,0,5,18,5,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,99,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,100,        this.imaginary = imaginary;,4,0,0,0,0,0,4,0,0,9,27,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,2,1,0,2,4,0,12,0,0,16,54,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,103,        isInfinite = !isNaN &&,8,0,0,0,0,2,0,0,0,10,22,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,58,"    public static final Complex I = new Complex(0.0, 1.0);",2,0,0,1,2,3,0,4,0,9,54,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",10,0,0,1,2,3,0,4,0,17,70,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",10,0,0,1,2,3,0,4,0,17,98,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,3,0,4,0,9,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",2,0,0,1,2,3,0,4,0,9,57,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,319,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,98,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,110,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,162,    private static final double COSINE_TABLE_B[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,168,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,3,0,0,0,7,63,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,192,    private static final long PI_O_4_BITS[] = new long[] {,4,1,0,2,5,0,0,0,0,5,54,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",8,1,0,1,3,4,0,0,0,14,61,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,233,        FACT[0] = 1.0;,4,3,1,1,2,0,0,0,0,11,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,234,        for (i = 1; i < FACT.length; i++) {,10,1,0,1,3,0,0,0,0,13,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,238,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,239,        double recip[] = new double[2];,2,0,1,2,4,0,0,0,0,7,31,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,242,        for (i = 0; i < 750; i++) {,8,2,0,1,3,1,0,0,0,11,27,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,243,"            expint(i, tmp);",0,0,0,1,2,0,6,0,0,6,15,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,6,0,0,6,28,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,250,                EXP_INT_TABLE_A[750-i] = recip[0];,6,4,1,2,4,0,0,0,0,16,34,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,3,0,1,3,0,4,0,0,19,47,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,2,4,0,0,0,0,7,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,263,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,265,            LN_MANT[i] = slowLog(d);,0,0,1,2,4,0,14,0,0,19,24,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,270,    },0,0,0,0,1,0,8,0,0,8,1,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1014,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1015,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1016,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0,0,0,5,10,0,0,0,0,15,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0,0,0,1,2,0,0,0,0,3,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,0,0,0,0,0,0,0,0,0,0,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0,0,0,2,4,0,0,0,0,6,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,241,        return new Iterator();,8,1,1,1,2,1,0,2,0,18,22,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,40,public class OpenIntToDoubleHashMap implements Serializable {,6,0,0,0,1,1,8,2,0,18,61,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,498,        private Iterator() {,2,0,0,1,3,1,0,0,0,3,20,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,501,            referenceCount = count;,0,0,0,0,0,0,0,0,0,0,23,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,504,            next = -1;,4,0,0,0,0,0,0,0,0,6,10,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,506,                advance();,0,0,0,1,2,0,0,0,0,3,10,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,509,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,511,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,484,    public class Iterator {,10,0,0,0,1,3,0,0,0,13,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,518,            return next >= 0;,2,0,0,0,0,1,4,2,0,8,17,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,546,            if (referenceCount != count) {,8,5,0,1,3,0,4,0,0,17,30,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,549,            if (current < 0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,552,            return values[current];,2,0,1,1,2,4,0,0,0,9,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,563,            if (referenceCount != count) {,0,0,0,1,3,0,0,0,0,4,30,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,568,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,572,                while (states[++next] != FULL) {,4,1,1,2,5,0,0,0,0,8,32,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,580,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,582,        },0,0,0,0,1,0,2,0,0,2,1,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,479,        checkIndex(index);,0,0,1,1,2,0,4,0,0,13,18,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,480,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,180,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,181,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,182,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,385,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0,0,0,3,6,1,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,76,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,103,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",8,0,0,1,2,0,4,0,0,13,44,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,120,                                  final double missingEntries) {,18,4,0,0,2,1,18,0,0,42,30,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,121,        final int capacity = computeCapacity(expectedSize);,2,0,0,1,2,1,4,0,0,7,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,122,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,123,        values = new double[capacity];,2,0,1,1,2,0,0,0,0,5,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,124,        states = new byte[capacity];,4,0,1,1,2,0,0,0,0,7,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,125,        this.missingEntries = missingEntries;,4,0,0,0,0,0,0,0,0,5,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,126,        mask   = capacity - 1;,0,0,1,0,0,0,0,0,0,7,22,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,153,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,156,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,157,        final int powerOfTwo = Integer.highestOneBit(capacity);,2,0,0,1,2,1,6,0,0,9,55,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,158,        if (powerOfTwo == capacity) {,4,1,0,1,3,0,0,0,0,5,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,159,            return capacity;,2,0,0,0,0,1,0,0,0,2,16,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,259,"        return findInsertionIndex(keys, states, key, mask);",2,2,0,1,2,1,16,0,0,21,51,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,272,        final int hash = hashOf(key);,2,0,0,1,2,1,4,0,0,7,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,273,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,274,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,275,            return index;,2,0,0,0,0,1,6,0,0,8,13,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,410,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,411,        double previous = missingEntries;,0,0,0,0,0,0,0,0,0,0,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,412,        boolean newMapping = true;,0,0,0,0,0,0,0,0,0,0,26,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,413,        if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,418,        keys[index]   = key;,2,0,1,1,2,0,0,0,0,7,20,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,419,        states[index] = FULL;,2,0,1,1,2,0,0,0,0,7,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,420,        values[index] = value;,0,0,0,1,2,0,0,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,421,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,422,            ++size;,2,0,0,0,0,0,0,0,0,3,7,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,423,            if (shouldGrowTable()) {,2,0,0,2,5,0,2,0,0,5,24,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,426,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,428,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,469,        return size > (mask + 1) * LOAD_FACTOR;,10,4,0,1,2,1,0,0,0,14,39,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,478,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,479,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3757,            return y;,16,6,0,0,0,1,4,0,0,27,9,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,220,        return FastMath.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,422,        return virtualSize;,2,0,0,0,0,1,0,0,0,2,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3724,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3728,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3732,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3733,        if (x < 0 && y != x) {,8,3,0,1,3,0,0,0,0,12,22,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3737,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3741,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3751,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3755,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3756,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,4,1,0,2,4,0,0,0,0,5,66,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,4,0,0,0,8,66,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,98,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,3,0,0,0,5,61,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,110,    private static final double LN_SPLIT_COEF[][] = {,4,1,1,2,5,3,0,0,0,13,49,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,143,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,153,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,4,0,0,9,60,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,156,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,159,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,192,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",6,3,0,1,3,3,0,0,0,13,61,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,233,        FACT[0] = 1.0;,6,1,0,1,2,0,0,0,0,8,14,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,238,        double tmp[] = new double[2];,6,1,0,2,4,0,0,0,0,8,29,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,239,        double recip[] = new double[2];,2,0,0,2,4,0,6,0,0,8,31,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,243,"            expint(i, tmp);",0,0,0,1,2,0,6,0,0,6,15,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,0,0,0,0,10,32,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,250,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,251,                EXP_INT_TABLE_B[750-i] = recip[1];,4,1,1,2,4,2,0,0,0,19,34,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,8,3,1,2,4,1,0,0,0,19,29,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,1,2,4,0,0,0,0,9,29,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,263,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,265,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,269,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,270,    },8,1,1,0,1,1,6,2,0,23,1,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1014,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1015,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1016,"        split(x, xs);",2,0,0,1,2,0,6,0,0,8,13,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1020,"            splitMult(xs, ys, as);",0,0,1,1,2,0,0,0,0,5,22,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1021,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1022,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1024,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1028,            ys[0] = as[0];,4,0,1,2,4,0,0,0,0,10,14,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1032,        if (result != null) {,4,2,0,1,3,0,6,0,0,12,21,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1033,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1034,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1037,        return ys[0] + ys[1];,2,0,0,2,4,1,0,2,0,4,21,13,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1046,        if (d < 8e298 && d > -8e298) {,0,0,1,1,3,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,0,0,0,0,0,1,0,0,0,1,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",2,1,0,2,4,1,6,0,0,9,60,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,                x0 = x1;,6,1,0,0,0,4,2,0,0,13,8,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,                f0 = f1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,22,1,0,1,3,0,8,0,0,34,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,            x1 = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,            f1 = fx;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,        },6,3,0,0,1,0,0,0,0,10,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,        super(absoluteAccuracy);,2,1,0,1,2,0,0,0,0,3,24,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,        this.method = method;,8,0,0,0,0,0,0,0,0,12,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,1,2,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,150,        final double atol = getAbsoluteAccuracy();,0,0,0,1,2,0,0,0,0,3,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,        final double rtol = getRelativeAccuracy();,2,1,1,1,2,0,4,0,0,15,42,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,22,7,0,4,8,2,0,0,0,31,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,            if (fx == 0.0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,134,        return relativeAccuracy;,4,0,0,0,0,2,0,0,0,5,24,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,283,    },2,0,1,0,1,0,0,0,0,6,1,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,2,0,0,2,4,4,6,0,0,11,61,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3925,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3929,            return b;,14,2,0,0,0,2,0,0,0,18,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0,0,0,1,2,0,10,0,0,10,67,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,116,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,2,0,2,31,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,117,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,131,        double x1 = getMax();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,132,        double f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,133,        double f1 = computeObjectiveValue(x1);,4,2,0,1,2,0,10,0,0,16,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,141,        if (f1 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,41,public enum AllowedSolution {,12,3,0,0,1,0,0,0,0,15,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,48,"    ANY_SIDE,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,55,"    LEFT_SIDE,",4,1,0,0,0,0,4,0,0,10,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,62,"    RIGHT_SIDE,",6,1,1,0,0,0,0,0,0,9,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,68,"    BELOW_SIDE,",12,1,0,0,0,0,0,0,0,14,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,74,    ABOVE_SIDE;,12,2,0,0,0,1,6,0,0,22,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,256,    protected enum Method {,2,1,0,0,1,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,262,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,265,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,268,        PEGASUS;,4,0,0,0,0,0,0,2,0,6,8,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,308,        final double fLo = function.value(lower);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,371,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,374,"        verifyInterval(lower, upper);",4,1,0,1,2,0,10,0,0,15,29,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,375,"        if (!isBracketing(function, lower, upper)) {",0,0,0,2,5,0,10,0,0,12,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,1,6,0,0,9,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,1,2,4,0,0,0,0,11,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,1,4,0,0,7,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,110,    private static final double LN_SPLIT_COEF[][] = {,12,1,1,2,5,0,0,0,0,19,49,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,130,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,156,    private static final double SINE_TABLE_B[] = new double[14];,4,0,0,2,4,0,0,0,0,4,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,10,0,0,10,62,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,168,    private static final double TANGENT_TABLE_B[] = new double[14];,6,0,0,2,4,0,0,0,0,8,63,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,171,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,5,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,233,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,235,            FACT[i] = FACT[i-1] * i;,2,1,0,2,4,0,0,0,0,3,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,238,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,5,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,239,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,243,"            expint(i, tmp);",4,1,0,1,2,0,6,2,0,13,15,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,251,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,8,0,0,21,47,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,0,2,4,0,0,0,0,2,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,1,2,4,0,0,0,0,14,29,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,263,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,0,0,4,8,0,0,0,0,5,79,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,265,            LN_MANT[i] = slowLog(d);,6,2,1,2,4,0,8,0,0,22,24,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1012,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1014,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1015,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1016,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1020,"            splitMult(xs, ys, as);",6,1,0,1,2,4,0,0,0,11,22,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1021,            ys[0] = as[0];,0,1,1,2,4,0,0,0,0,5,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1022,            ys[1] = as[1];,6,5,1,2,4,0,0,0,0,26,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1024,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1025,"            splitReciprocal(as, facts);",2,0,0,1,2,0,6,0,0,8,27,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1027,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,8,0,0,10,24,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1028,            ys[0] = as[0];,2,0,1,2,4,0,0,0,0,7,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1032,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1033,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1034,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1037,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,13,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1046,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1047,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1048,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1049,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1055,    },2,0,0,0,1,0,0,0,0,3,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1062,        final double c = a[0] + a[1];,1,1,1,2,4,0,0,0,0,6,29,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1063,        final double d = -(c - a[0] - a[1]);,4,6,1,3,6,1,0,0,0,26,36,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1066,            double z = c * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1067,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,1,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1069,        } else {,4,0,0,0,2,0,0,2,0,7,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1070,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1071,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1072,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1082,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1086,        resplit(ans);,2,0,0,1,2,1,4,0,0,7,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1095,        ans[0] = a[0] + b[0];,8,1,0,3,6,0,0,0,0,10,21,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1096,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1098,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1121,        final double a = 1.0 - b;,0,0,0,0,0,0,0,0,0,0,25,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1123,        if (in[0] == 0.0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1128,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1132,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1136,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1138,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1143,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1145,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1156,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1157,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1160,"        split(a[0], xs);",2,2,0,2,4,0,0,0,0,4,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1161,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1164,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1165,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1168,"        split(b[1], ys);",6,2,1,2,4,0,10,0,0,21,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1169,"        splitMult(xs, ys, zs);",4,3,0,1,2,0,0,0,0,7,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1171,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1173,        result[0] = tmp;,0,0,0,1,2,0,4,0,0,4,16,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1174,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,1,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1176,        result[0] = tmp;,2,1,1,1,2,0,0,0,0,8,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1179,"        split(a[1], xs);",0,1,1,2,4,0,4,0,0,11,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1180,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1183,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1185,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1186,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,8,2,0,5,10,0,0,0,0,10,50,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,134,        return relativeAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,283,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,    },4,0,0,0,1,3,0,4,0,13,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3925,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3929,            return b;,4,0,0,0,0,1,0,0,0,4,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,117,"        return super.solve(maxEval, f, min, max, startValue);",0,0,0,1,2,1,0,0,0,4,53,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,        double x1 = getMax();,2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,132,        double f0 = computeObjectiveValue(x0);,4,0,1,1,2,1,4,0,0,13,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,133,        double f1 = computeObjectiveValue(x1);,0,0,0,1,2,0,0,0,0,3,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,141,        if (f1 == 0.0) {,6,5,0,1,3,0,0,0,0,11,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",2,0,0,1,2,1,18,0,0,21,67,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,308,        final double fLo = function.value(lower);,2,1,0,1,2,0,2,0,0,7,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,371,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,374,"        verifyInterval(lower, upper);",0,0,0,1,2,0,0,0,0,3,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,375,"        if (!isBracketing(function, lower, upper)) {",4,1,0,2,5,0,8,0,0,14,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,41,public enum AllowedSolution {,4,0,0,0,1,1,0,0,0,5,29,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,48,"    ANY_SIDE,",12,3,0,0,0,0,4,0,0,20,9,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,55,"    LEFT_SIDE,",0,0,0,0,0,0,0,0,0,0,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,62,"    RIGHT_SIDE,",10,2,0,0,0,0,4,0,0,16,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,68,"    BELOW_SIDE,",0,0,0,0,0,0,0,0,0,0,11,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,74,    ABOVE_SIDE;,4,0,0,0,0,0,10,2,0,16,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,250,    protected enum Method {,0,0,0,0,1,0,0,0,0,1,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,256,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,259,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,262,        PEGASUS;,0,0,0,0,0,0,0,0,0,0,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,4,0,0,2,4,0,0,0,0,5,65,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,0,0,2,4,1,0,8,0,15,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,98,    private static final double FACT[] = new double[20];,6,0,0,2,4,4,4,0,0,15,52,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,110,    private static final double LN_SPLIT_COEF[][] = {,8,1,0,2,5,0,0,0,0,11,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,6,0,0,6,60,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,159,    private static final double COSINE_TABLE_A[] = new double[14];,14,0,0,2,4,4,4,4,0,28,62,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,3,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,168,    private static final double TANGENT_TABLE_B[] = new double[14];,10,4,1,2,4,0,8,0,0,28,63,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,171,    private static final long RECIP_2PI[] = new long[] {,10,1,0,2,5,3,0,0,0,15,52,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,233,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,238,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,239,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,242,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,8,2,0,2,4,1,0,0,0,11,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,12,3,1,2,4,0,0,0,0,22,32,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,1,0,2,4,0,6,0,0,7,34,9,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,257,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,2,4,0,0,0,0,7,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,263,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,10,6,0,4,8,0,4,0,0,20,79,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,265,            LN_MANT[i] = slowLog(d);,0,0,1,2,4,0,4,0,0,9,24,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1014,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1015,        final double as[] = new double[2];,6,3,0,2,4,1,12,0,0,22,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1016,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1019,        for (int i = 19; i >= 0; i--) {,2,0,0,1,3,3,0,0,0,5,31,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1021,            ys[0] = as[0];,0,0,1,2,4,0,4,0,0,9,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1022,            ys[1] = as[1];,0,1,1,2,4,0,6,0,0,13,14,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1024,"            split(FACT[i], as);",2,0,0,2,4,0,0,0,0,3,19,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1027,"            splitAdd(ys, facts, as);",2,1,0,1,2,0,6,0,0,9,24,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1028,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1029,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1032,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1033,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1034,            result[1] = ys[1];,4,1,0,2,4,1,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1037,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1046,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1047,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1048,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1049,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1062,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1063,        final double d = -(c - a[0] - a[1]);,2,0,0,3,6,3,0,0,0,5,36,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1066,            double z = c * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1067,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1068,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1071,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1082,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1095,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1096,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1098,        resplit(ans);,0,0,1,1,2,0,4,0,0,6,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1121,        final double a = 1.0 - b;,2,0,1,0,0,1,0,2,0,9,25,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1123,        if (in[0] == 0.0) {,2,1,1,2,5,0,0,0,0,6,19,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1128,        result[0] = a / in[0];,6,1,0,2,4,1,0,0,0,8,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1132,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1136,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1138,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1143,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1145,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1156,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1157,        final double zs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,0,0,0,0,2,0,0,0,0,2,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
