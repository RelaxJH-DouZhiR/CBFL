dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0,0,0,3,6,0,0,0,0,9,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,                int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0,-1
