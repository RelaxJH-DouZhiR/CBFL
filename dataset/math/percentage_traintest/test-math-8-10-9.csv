dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1475,                    tType = -4;,16,3,0,0,0,0,0,0,0,22,11,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1476,                    double s = 0.25 * dMin;,0,0,0,0,0,0,6,0,0,6,23,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1479,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1503,                    a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1504,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,2,0,1,1,3,0,6,0,0,12,60,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1518,                    a2 = cnst3 * a2;,0,0,0,0,0,0,0,0,0,0,16,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1521,                    if (a2 < cnst1) {,6,0,0,1,3,0,2,0,0,9,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1522,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,8,3,0,3,6,0,0,0,0,11,41,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1524,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1027,                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);,0,0,0,5,10,0,0,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1028,                    double s = work[k - 3] * (work[k - 5] / t);,0,0,0,3,6,0,0,0,0,9,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1029,                    if (s <= t) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1030,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,4,0,0,5,10,0,0,0,0,5,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1034,                    t = work[k - 7] + (s + work[k - 5]);,2,0,0,3,6,0,0,0,0,2,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1035,                    work[k - 3] *= work[k - 7] / t;,0,0,0,2,4,0,0,2,0,2,31,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1036,                    work[k - 7]  = t;,0,0,0,1,2,0,8,0,0,8,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1356,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,193,        this.main      = main.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,194,        this.secondary = secondary.clone();,2,0,0,1,2,0,4,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,195,        transformer    = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,3,1,1,3,0,0,0,0,20,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,205,        decompose();,4,0,0,1,2,1,6,4,0,17,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,644,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,0,2,4,0,0,0,0,6,56,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,645,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,0,0,0,3,6,0,0,0,0,9,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,646,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,647,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,0,0,0,3,6,0,0,0,0,9,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,648,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,649,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,8,3,0,2,4,1,0,0,0,12,76,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,650,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,652,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,12,4,1,3,6,1,0,0,0,22,67,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,655,"                ldlTDecomposition(lambda, begin, n);",0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,658,                processGeneralBlock(n);,8,2,0,1,2,0,4,0,0,15,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,661,                if (chooseLeft) {,2,0,0,1,3,0,0,0,0,2,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,827,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,828,        for (int i = 0; i < n - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,829,            final int fourI = 4 * i;,0,0,0,0,0,0,0,0,0,0,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,830,            final double ei = work[fourI + 2];,4,6,1,1,2,1,0,0,0,28,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,831,            sumOffDiag += ei;,4,0,0,0,0,0,0,0,0,5,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,834,        if (sumOffDiag == 0) {,6,2,0,1,3,0,0,0,0,8,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,840,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,4,0,0,4,22,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,843,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,846,        tType = 0;,0,0,1,0,0,0,4,0,0,8,10,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,847,        dMin1 = 0;,12,1,0,0,0,0,0,0,0,15,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,848,        dMin2 = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,849,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,850,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,851,        dN2   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,852,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,855,        int i0 = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,856,        int n0 = n;,0,0,0,0,0,0,12,0,0,12,11,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,857,        while (n0 > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,860,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,0,0,0,2,4,0,0,0,0,6,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,861,            sigmaLow = 0;,2,1,1,0,0,0,0,0,0,8,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,864,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,865,            double offDiagMax = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,866,            double diagMax    = work[4 * n0 - 4];,16,4,1,1,2,0,0,0,0,24,37,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,867,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,868,            i0 = 0;,2,0,0,0,0,0,0,0,0,3,7,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,869,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,870,                if (work[i + 2] <= 0) {,4,4,1,2,5,0,0,0,0,10,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,874,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,10,0,0,16,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,875,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0,0,0,2,4,0,0,0,0,6,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,876,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,878,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,879,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,881,            work[4 * n0 - 2] = offDiagMin;,12,1,0,1,2,0,0,0,0,16,30,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,884,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,886,            pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,887,            int maxIter = 30 * (n0 - i0);,8,6,0,1,2,0,4,0,0,19,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,888,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,889,                if (k >= maxIter) {,4,1,0,1,3,0,0,0,0,5,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,894,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,895,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,899,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0,0,0,2,5,0,0,0,0,7,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,927,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,929,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,937,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,938,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,941,            double d = work[4 * (n - 1) + pingPong];,16,4,1,2,4,0,0,0,0,27,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,942,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,943,                if (work[i + 2] <= TOLERANCE_2 * d) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,947,                    d *= work[i] / (d + work[i + 2]);,0,0,0,3,6,0,4,0,0,4,33,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,952,            d = work[pingPong];,2,0,1,1,2,0,0,0,0,7,19,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,953,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,0,0,0,1,3,0,0,0,0,4,51,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,954,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,955,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,956,                if (work[i] <= TOLERANCE_2 * d) {,4,2,1,2,5,0,0,0,0,10,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,961,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,6,4,1,3,8,0,0,0,0,16,58,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,963,                    final double tmp = work[i + 2] / work[j];,4,2,1,2,4,1,0,0,0,13,41,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,964,                    work[j + 2] = work[i] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,965,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,966,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,971,            work[4 * n - 3 - pingPong] = d;,6,3,1,1,2,0,0,0,0,12,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,974,            pingPong = 1 - pingPong;,4,1,0,0,0,0,0,0,0,6,24,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,978,    },2,0,0,0,1,1,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,993,        g = 0.0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,996,        int deflatedEnd = end;,8,1,1,0,0,1,0,0,0,14,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,997,        for (boolean deflating = true; deflating;) {,6,0,0,1,3,0,6,0,0,14,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,999,            if (start >= deflatedEnd) {,4,1,0,1,3,0,8,0,0,13,27,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1001,                return deflatedEnd;,4,3,0,0,0,1,0,0,0,8,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1004,            final int k = 4 * deflatedEnd + pingPong - 1;,14,6,0,0,0,2,0,0,0,22,45,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1006,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1012,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,8,6,1,2,4,0,0,0,0,19,73,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1013,                deflatedEnd -= 1;,8,0,0,0,0,0,0,0,0,11,17,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1015,            } else if ((start == deflatedEnd - 2) ||,0,0,0,1,4,0,0,0,0,5,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1020,                if (work[k - 3] > work[k - 7]) {,0,1,0,3,7,0,12,0,0,13,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1026,                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {,6,4,1,3,7,0,0,0,0,14,46,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1038,                work[4 * deflatedEnd - 8] = sigma + work[k - 7];,6,4,1,2,4,0,0,0,0,15,48,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1039,                work[4 * deflatedEnd - 4] = sigma + work[k - 3];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1040,                deflatedEnd -= 2;,2,0,0,0,0,0,0,0,0,3,17,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1044,                deflating = false;,2,0,0,0,0,0,0,0,0,4,18,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1048,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1050,        final int l = 4 * deflatedEnd + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1053,        if ((dMin <= 0) || (deflatedEnd < end)) {,0,0,0,3,7,0,0,0,0,10,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1054,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1067,        if ((dMin < 0) ||,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1072,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1075,            for (boolean loop = true; loop;) {,6,0,0,1,3,1,8,0,0,16,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1078,"                dqds(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,25,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1081,                if ((dMin >= 0) && (dMin1 > 0)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1083,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1084,                    return deflatedEnd;,2,0,0,0,0,1,0,0,0,2,19,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1119,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1121,        return deflatedEnd;,4,0,0,0,0,4,0,0,0,7,19,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1133,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,8,3,0,4,9,0,0,0,0,11,58,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1146,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1158,        final int lowerStart = 4 * main.length;,6,0,0,0,0,0,0,0,0,7,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1159,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1160,        double lower = Double.POSITIVE_INFINITY;,6,0,1,0,0,0,4,0,0,12,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1161,        double upper = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1162,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1163,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1164,"            upper = Math.max(upper, work[upperStart + index +i]);",0,0,0,2,4,0,0,0,0,6,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1168,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",6,0,0,3,6,1,16,0,0,24,64,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1169,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,2,0,0,1,2,0,0,0,0,3,62,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1170,        final double absoluteTolerance = 4 * minPivot;,4,1,0,0,0,1,0,0,0,6,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1171,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1173,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,20,73,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1176,        double left  = lower - margin;,0,0,0,0,0,0,0,0,0,0,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1177,        double right = upper + margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1178,        for (int i = 0; i < maxIter; ++i) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1180,            final double range = right - left;,4,1,0,0,0,0,0,0,0,5,34,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1181,            if ((range < absoluteTolerance) ||,10,3,1,1,3,0,0,2,0,20,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1184,                break;,6,3,1,0,0,1,0,0,0,14,6,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1187,            final double middle = 0.5 * (left + right);,8,2,0,1,2,1,0,0,0,13,43,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1188,"            if (countEigenValues(middle, index, n) >= 1) {",6,1,0,2,5,0,0,0,0,8,46,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1189,                right = middle;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1191,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1195,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1198,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1199,        right = upper + margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1200,        for (int i = 0; i < maxIter; ++i) {,14,1,0,1,3,0,6,0,0,24,35,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1202,            final double range = right - left;,10,1,0,0,0,1,0,0,0,14,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1203,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1206,                break;,6,1,0,0,0,0,0,0,0,8,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1209,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1210,"            if (countEigenValues(middle, index, n) >= n) {",2,1,0,2,5,0,8,0,0,11,46,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1211,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1213,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1217,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1219,"        return new double[] { lower, upper };",0,0,0,2,4,1,0,0,0,7,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1231,        double ratio = main[index] - t;,0,0,0,1,2,0,0,0,0,3,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1232,        int count = (ratio > 0) ? 0 : 1;,4,1,0,1,2,0,0,0,0,5,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1233,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1234,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,0,0,0,2,4,0,0,0,0,6,70,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1235,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1236,                ++count;,4,1,1,0,0,0,0,0,0,8,8,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1239,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1254,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1255,        work[0] = Math.abs(di);,2,0,1,2,4,0,12,0,0,18,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1256,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1257,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1258,            final double eiM1  = secondary[index + i - 1];,0,0,0,1,2,0,0,0,0,3,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1259,            final double ratio = eiM1 / di;,0,0,0,0,0,0,0,0,0,0,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1260,            work[fourI - 2] = ratio * ratio * Math.abs(di);,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1261,            di = (main[index + i] - lambda) - eiM1 * ratio;,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1262,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1264,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1274,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1275,        double d = work[4 * start + pingPong] - tau;,10,3,1,1,2,1,2,0,0,18,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1276,        dMin = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1277,        dMin1 = -work[4 * start + pingPong];,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1279,        if (pingPong == 0) {,10,5,0,1,3,1,0,0,0,16,20,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1280,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,22,8,0,2,5,0,0,0,0,31,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1289,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0,0,0,2,5,0,0,0,0,7,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1300,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1301,        dMin2 = dMin;,12,1,0,0,0,0,0,0,0,16,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1302,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1303,        int j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1304,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1305,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,2,1,0,5,10,0,0,0,0,3,56,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1306,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1307,"        dMin = Math.min(dMin, dN1);",8,1,0,1,2,0,8,0,0,19,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1309,        dMin1 = dMin;,8,0,0,0,0,0,0,0,0,10,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1310,        j4 = j4 + 4;,4,1,0,0,0,0,0,0,0,6,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1311,        j4p2 = j4 + 2 * pingPong - 1;,2,1,1,0,0,0,0,0,0,12,29,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1312,        work[j4 - 2] = dN1 + work[j4p2];,8,3,1,2,4,0,4,2,0,25,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1313,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,8,4,1,5,10,0,8,0,0,33,56,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1314,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,2,0,0,3,6,3,0,0,0,5,49,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1315,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1317,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1318,        work[4 * end - pingPong - 1] = eMin;,6,3,1,1,2,0,0,0,0,12,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1320,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1331,        eMin = work[4 * start + pingPong + 4];,4,0,0,1,2,0,4,0,0,8,38,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1332,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1333,        dMin = d;,8,0,0,0,0,0,0,0,0,10,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1335,        if (pingPong == 0) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1336,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0,0,0,2,5,0,0,0,0,7,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1337,                work[j4 - 2] = d + work[j4 - 1];,6,3,1,2,4,0,0,0,0,14,32,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1338,                if (work[j4 - 2] == 0.0) {,38,11,1,2,5,8,0,0,0,60,26,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1343,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1345,                    final double tmp = work[j4 + 1] / work[j4 - 2];,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1346,                    work[j4] = work[j4 - 1] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1347,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1348,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1352,"                dMin = Math.min(dMin, d);",2,0,0,1,2,0,8,0,0,11,25,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1353,"                eMin = Math.min(eMin, work[j4]);",6,1,1,2,4,0,6,0,0,18,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1378,        dN2   = d;,4,0,0,0,0,0,0,0,0,5,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1379,        dMin2 = dMin;,2,0,0,0,0,0,0,0,0,3,13,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1380,        int j4 = 4 * (end - 2) - pingPong - 1;,8,4,0,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1381,        int j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1382,        work[j4 - 2] = dN2 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1383,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1388,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1390,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,49,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1391,            work[j4] = work[j4p2] * tmp;,2,1,1,2,4,0,0,0,0,12,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1392,            dN1 = dN2 * tmp;,12,3,0,0,0,0,0,0,0,16,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1393,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1397,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1399,        dMin1 = dMin;,8,1,0,0,0,0,4,2,0,17,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1400,        j4 = j4 + 4;,12,3,0,0,0,0,0,0,0,16,12,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1401,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1402,        work[j4 - 2] = dN1 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1403,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1408,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,66,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1410,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,20,49,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1411,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1412,            dN = dN1 * tmp;,0,0,1,0,0,0,0,0,0,3,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1413,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1417,"        dMin = Math.min(dMin, dN);",0,0,0,1,2,0,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1419,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1420,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1433,        final double cnst1 = 0.563;,0,0,0,0,0,0,0,0,0,0,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1434,        final double cnst2 = 1.010;,0,0,0,0,0,0,0,0,0,0,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1435,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1439,        if (dMin <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1445,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1446,        switch (deflated) {,6,0,0,1,3,0,4,0,0,11,19,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1449,            if (dMin == dN || dMin == dN1) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1451,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,0,0,0,4,8,0,0,0,0,12,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1452,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,10,4,1,4,8,0,8,0,0,31,62,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1453,                double a2 = work[nn - 7] + work[nn - 5];,6,3,1,2,4,0,0,0,0,13,40,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1455,                if (dMin == dN && dMin1 == dN1) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1457,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0,0,0,0,0,0,0,0,0,0,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1458,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,0,0,0,4,8,0,0,0,0,12,89,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1459,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1460,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",14,4,0,2,4,0,4,0,0,24,52,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1461,                        tType = -2;,2,0,0,0,0,0,0,0,0,4,11,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1473,                } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1527,            } else if (dMin == dN2) {,4,1,0,1,4,0,0,0,0,5,25,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1673,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1683,        if (shift < sigma) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1684,            sigmaLow += shift;,0,0,0,0,0,0,0,0,0,0,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1685,            final double t = sigma + sigmaLow;,6,1,0,0,0,1,0,0,0,8,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1686,            sigmaLow -= t - sigma;,8,1,1,0,0,1,0,0,0,15,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1687,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1688,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1689,            final double t = sigma + shift;,6,1,1,0,0,1,0,0,0,13,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1690,            sigmaLow += sigma - (t - shift);,8,2,0,1,2,0,0,0,0,11,32,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1691,            sigma = t;,8,1,0,0,0,0,0,0,0,10,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1693,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,312,        return realEigenvalues.clone();,2,1,0,1,2,1,0,0,0,3,31,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1751,                r = i;,10,1,0,0,0,0,0,0,0,13,6,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1752,                minG = absG;,0,0,0,0,0,0,0,0,0,0,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1770,            z *= -work[6 * i - 1];,4,2,1,1,2,0,0,0,0,10,22,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1771,            eigenvector[i] = z;,0,0,0,1,2,0,0,0,0,3,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1772,            n2 += z * z;,8,1,0,0,0,0,0,0,0,11,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,30,public abstract class CompositeFormat extends Format {,2,0,0,0,1,2,0,2,0,6,54,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,55,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1700,        final int m = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1701,        eigenvectors = new ArrayRealVector[m];,2,0,1,1,2,0,0,2,0,7,38,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1704,        final double[] d = new double[m];,8,1,1,2,4,1,0,0,0,12,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1705,        final double[] l = new double[m - 1];,4,1,0,2,4,1,0,0,0,6,37,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0,0,0,4,8,0,0,0,0,12,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0,0,0,1,3,0,0,0,0,4,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0,0,0,0,0,0,8,0,0,8,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0,0,0,1,2,0,0,0,0,3,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0,0,0,3,6,0,0,0,0,9,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,4,0,0,0,0,1,0,2,0,7,7,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,0,0,0,6,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",10,3,1,2,4,0,6,0,0,23,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,880,            work[4 * n0 - 2] = offDiagMin;,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,6,2,0,1,2,0,0,0,0,8,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,887,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,0,0,0,1,3,0,4,0,0,4,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,894,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0,0,0,2,5,0,0,0,0,7,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,6,3,1,2,5,0,0,0,0,11,37,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,6,0,0,13,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,12,8,1,1,3,0,12,0,0,43,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,0,0,0,2,5,0,0,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0,0,0,3,8,0,0,0,0,11,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,8,2,1,2,4,1,0,0,0,19,41,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,965,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,2,1,1,1,2,0,0,0,0,8,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,973,            pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,977,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,0,0,0,0,0,0,0,0,0,0,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,0,0,0,0,0,0,0,7,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,2,1,0,1,3,0,0,0,0,3,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,10,6,0,0,0,1,0,0,0,18,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,2,0,1,2,4,1,0,0,0,5,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,2,0,0,0,0,0,0,0,0,3,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },8,5,0,0,1,0,0,0,0,14,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,6,3,1,0,0,3,0,0,0,21,45,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,10,3,0,3,7,0,0,0,0,14,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1053,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,25,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1083,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1118,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,4,5,1,4,9,0,0,0,0,15,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1145,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,10,1,0,0,0,0,0,0,0,12,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,16,2,0,1,3,0,0,0,0,19,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,8,1,0,0,0,1,0,0,0,12,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,19,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,14,1,0,0,0,2,0,4,0,23,30,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,6,0,0,12,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1183,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,2,0,2,5,0,17,0,0,23,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,0,0,0,0,0,0,0,0,7,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1205,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,10,2,0,1,2,2,0,4,0,18,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",0,0,0,2,5,0,0,0,0,7,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,0,0,0,0,0,0,0,0,0,0,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1216,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,0,0,0,1,2,0,0,0,0,3,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1232,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,4,0,0,0,0,4,0,0,0,7,13,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1254,        work[0] = Math.abs(di);,0,0,1,2,4,0,6,0,0,9,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,6,2,1,1,2,1,0,0,0,11,46,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,12,1,0,0,0,2,4,0,0,19,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,6,2,1,2,4,0,6,0,0,17,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,2,0,2,4,0,0,0,0,15,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1261,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1263,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,12,4,1,1,2,0,0,0,0,20,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,8,3,1,1,2,0,0,0,0,13,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1280,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,2,1,0,0,0,0,0,0,0,3,18,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",6,0,0,1,2,0,8,0,0,16,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",4,0,1,2,4,1,6,0,0,16,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,14,5,0,2,5,0,0,4,0,24,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1289,                work[j4 - 3] = d + work[j4];,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,12,2,0,0,0,0,0,0,0,16,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1292,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",12,2,1,2,4,0,6,0,0,24,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,8,3,0,0,0,0,0,0,0,11,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,12,5,1,5,10,0,0,0,0,30,56,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,0,0,0,3,6,0,0,0,0,9,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",4,0,1,1,2,0,8,0,0,18,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,8,3,1,1,2,0,0,0,0,15,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },8,3,0,0,1,0,10,0,0,22,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,10,4,1,2,4,1,0,0,0,19,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,4,0,0,0,0,0,0,0,0,6,9,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",4,0,1,2,4,0,6,0,0,16,32,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,8,0,0,13,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,10,3,0,0,0,0,0,0,0,14,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1387,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,1,6,0,0,23,49,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,6,1,0,0,0,0,0,0,0,8,16,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1392,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",6,1,0,1,2,0,8,0,0,16,27,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1399,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,10,4,1,2,5,0,0,0,0,16,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,4,0,0,0,19,49,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1410,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,8,1,0,0,0,0,0,0,0,10,15,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,2,0,0,1,2,1,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1419,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,4,0,0,0,0,1,0,0,0,6,27,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,4,1,1,0,0,1,0,0,0,11,27,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1444,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,6,3,1,4,8,0,14,0,0,27,62,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,0,0,0,2,4,0,0,2,0,2,40,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0,0,0,0,0,0,0,0,0,0,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",0,0,0,2,4,0,0,0,0,6,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1460,                        tType = -2;,0,0,0,0,0,0,0,0,0,0,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1472,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,6,1,0,1,4,0,0,0,0,7,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1672,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1682,        if (shift < sigma) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,4,0,0,0,0,0,0,0,0,5,18,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1684,            final double t = sigma + sigmaLow;,0,0,0,0,0,0,0,0,0,0,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,0,0,0,0,0,0,0,0,0,0,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,30,public abstract class CompositeFormat extends Format {,0,0,0,0,1,0,0,0,0,1,54,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,0,0,0,3,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,55,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,118,        this.prefix      = prefix;,4,0,1,0,0,0,0,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,119,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,120,        this.separator   = separator;,4,0,0,0,0,0,2,0,0,7,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,2,0,0,2,4,4,4,6,0,15,60,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,44,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,603,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,604,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0,0,0,1,2,0,0,0,0,3,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,2,2,0,12,63,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,616,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,160,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",6,1,0,1,2,1,0,0,0,8,63,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,482,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,483,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,484,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,6,0,1,2,0,8,0,0,27,58,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,485,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,486,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,487,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,488,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,491,        return visitor.end();,2,2,1,1,2,1,4,0,0,13,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,611,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,612,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,55,        throws IllegalArgumentException {,0,0,0,0,1,0,0,0,0,1,33,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,56,        if (rowDimension <= 0 ) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,61,        if (columnDimension <= 0) {,2,0,0,1,3,0,0,0,0,4,27,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,66,        lu = null;,4,0,0,0,0,0,0,0,0,6,10,0,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,76,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,77,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",4,1,0,3,8,0,0,0,0,6,63,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,6,0,0,1,2,0,14,0,0,22,37,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,190,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,77,    public ArrayRealVector(double[] d) {,14,0,0,2,5,3,0,6,0,24,36,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,79,    },0,0,0,0,1,0,4,0,0,4,1,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,54,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,854,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1157,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,43,    protected AbstractRealMatrix() {,6,0,0,1,3,3,0,4,0,14,32,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,44,        lu = null;,0,0,0,0,0,0,0,2,0,2,10,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,45,    },0,0,1,0,1,0,0,0,0,4,1,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,118,        this.prefix      = prefix;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,119,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,121,        trimmedPrefix    = prefix.trim();,6,0,0,1,2,0,4,0,0,12,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,122,        trimmedSuffix    = suffix.trim();,8,0,0,1,2,3,10,2,0,24,33,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,123,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,124,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,125,    },6,0,0,0,1,0,0,0,0,8,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,31,public abstract class CompositeFormat extends Format {,10,3,0,0,1,0,0,0,0,15,54,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,4,1,0,1,2,0,0,0,0,5,57,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,55,        nf.setMaximumFractionDigits(2);,4,0,1,1,2,1,4,0,0,14,31,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,56,        return nf;,4,0,0,0,0,2,0,2,0,7,10,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,94,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,95,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,314,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,315,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,320,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,325,            final int nRows = subMatrix.length;,10,1,0,0,0,0,10,0,0,23,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,330,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,331,            if (nCols == 0) {,4,0,1,1,3,1,2,0,0,12,17,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,334,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,335,            for (int i = 0; i < data.length; ++i) {,22,2,0,1,3,1,6,0,0,34,39,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,336,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,0,3,6,0,0,0,0,5,64,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,343,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,347,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,354,            return data[row][column];,0,0,0,2,4,1,0,0,0,7,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,372,        },12,1,0,0,1,0,0,0,0,15,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,404,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,0,0,4,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,622,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,30,public final class MathUtils {,2,0,0,0,1,2,6,0,0,10,30,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,473,    private static final long[] factorials = new long[] ,10,3,0,2,4,1,8,2,0,25,51,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,367,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,368,            return 0;,0,0,0,0,0,1,2,0,0,2,9,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,369,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",0,0,0,3,6,1,0,0,0,10,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,168,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,176,        return relationship;,0,0,0,0,0,1,0,0,0,1,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,184,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,31,"    LEQ(""<=""),",2,0,0,1,2,0,0,0,0,3,10,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,104,                   final double epsilon) {,2,0,0,0,2,1,0,0,0,3,23,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,105,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,106,        this.constraints            = constraints;,8,1,0,0,0,3,14,0,0,27,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,107,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,108,        this.epsilon                = epsilon;,0,0,0,0,0,0,0,0,0,0,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,0,0,0,2,4,0,0,0,0,6,82,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,114,        this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));,8,1,0,2,4,0,2,2,0,14,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,115,        initialize();,0,0,0,1,2,0,2,0,0,2,13,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,4,0,0,1,2,0,2,8,0,14,64,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,127,        int width = numDecisionVariables + numSlackVariables +,8,1,0,0,0,0,0,0,0,10,54,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,129,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,130,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,133,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,136,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,6,2,1,2,4,0,8,0,0,19,55,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,137,        matrix[zIndex][zIndex] = maximize ? 1 : -1;,2,0,0,2,4,0,0,0,0,2,43,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,138,        RealVector objectiveCoefficients =,6,0,0,0,0,0,0,2,0,9,34,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,140,"            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",0,0,0,4,8,0,0,0,0,12,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,141,            matrix[zIndex][width - 1] =,0,0,0,2,4,0,0,0,0,6,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,144,                if (!restrictToNonNegative) {,6,1,0,1,3,0,0,0,0,8,29,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,150,                int slackVar = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,151,                int artificialVar = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,152,                for (int i = 0; i < constraints.size(); i++) {,0,0,0,2,5,0,0,0,0,7,46,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,153,                    LinearConstraint constraint = constraints.get(i);,4,0,0,1,2,0,6,2,0,14,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,154,                    int row = getNumObjectiveFunctions() + i;,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,157,"                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",2,0,1,4,8,0,8,0,0,14,66,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,160,                    if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,166,                    matrix[row][width - 1] = constraint.getValue();,2,1,1,3,6,0,4,0,0,12,47,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,169,                    if (constraint.getRelationship() == Relationship.LEQ) {,0,0,0,2,5,0,0,0,0,7,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,176,                    if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,183,                return matrix;,16,2,0,0,0,4,0,0,0,23,14,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,190,        return f.getCoefficients().getDimension();,0,0,0,2,4,1,6,0,0,6,42,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,198,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,4,2,1,1,2,0,0,8,0,23,70,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,199,        for (LinearConstraint constraint : constraints) {,4,0,0,1,3,0,0,2,0,6,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,200,            normalized.add(normalize(constraint));,0,0,0,2,4,0,0,0,0,6,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,201,        },2,1,0,0,1,0,0,0,0,3,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,202,        return normalized;,0,0,0,0,0,1,0,0,0,1,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,211,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,4,0,0,5,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,        double[][] matrix = new double[height][width];,0,0,0,4,8,0,0,0,0,12,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,321,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,0,0,0,2,4,0,0,0,0,6,79,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,0,0,0,2,4,0,0,0,0,6,63,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,32,2,0,38,70,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,0,0,2,4,1,0,0,0,7,70,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,10,2,0,0,0,1,6,0,0,19,79,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,10,0,0,0,0,0,0,4,0,15,20,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,86,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,83,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,16,3,0,2,5,0,0,2,0,23,46,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,4,8,0,0,31,83,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",4,2,0,3,7,0,0,0,0,7,66,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,10,1,0,1,2,0,4,0,0,17,37,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,367,"        if (equals(x, y, eps)) {",4,1,0,2,5,0,8,0,0,13,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,369,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,42,        this(DEFAULT_EPSILON);,0,0,0,1,2,0,0,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,43,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,59,        double minValue = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,60,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,16,0,0,25,83,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",4,0,0,3,7,0,8,0,0,12,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,64,                minPos = i;,4,0,0,0,0,0,0,0,0,6,11,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,67,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,77,        double minRatio = Double.MAX_VALUE;,2,0,0,0,0,0,0,0,0,2,35,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,78,        Integer minRatioPos = null;,2,0,0,0,0,0,10,2,0,14,27,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,0,0,0,3,7,0,0,0,0,10,80,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",8,2,0,2,4,0,10,0,0,20,57,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",4,2,1,3,7,0,14,0,0,24,69,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,82,"                double ratio = rhs / tableau.getEntry(i, col);",2,0,0,1,2,0,0,0,0,3,46,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,83,                if (ratio < minRatio) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,84,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,85,                    minRatioPos = i; ,0,0,0,0,0,0,0,0,0,0,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,89,        return minRatioPos;,2,0,0,0,0,1,0,0,0,2,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,104,        Integer pivotCol = getPivotColumn(tableau);,2,0,0,1,2,0,4,2,0,8,43,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",8,1,0,1,2,0,6,2,0,18,50,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,106,        if (pivotRow == null) {,4,1,0,1,3,1,4,0,0,10,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,112,"        tableau.divideRow(pivotRow, pivotVal);",16,1,0,1,2,3,14,0,0,38,38,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,115,        for (int i = 0; i < tableau.getHeight(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,116,            if (i != pivotRow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,117,"                double multiplier = tableau.getEntry(i, pivotCol);",0,0,0,1,2,0,0,0,0,3,50,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,167,        if (tableau.getNumArtificialVariables() == 0) {,0,0,0,2,5,0,0,0,0,7,47,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,185,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,61,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,4,0,0,4,41,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,67,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,86,        if (++iterations > maxIterations) {,6,1,0,1,3,3,0,0,0,11,35,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,89,    },4,0,1,0,1,0,0,0,0,20,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,98,        this.f                     = f;,4,0,0,0,0,0,0,0,0,5,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,99,        this.constraints           = constraints;,4,0,0,0,0,0,0,0,0,5,41,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,100,        this.goalType              = goalType;,4,0,0,0,0,0,0,0,0,5,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,101,        this.restrictToNonNegative = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,103,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,106,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,307,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,370,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,371,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",5,2,0,2,4,1,16,0,0,24,77,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,497,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,339,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,342,        return new ArrayRealVector(out);,0,0,0,1,2,1,0,0,0,4,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,134,            matrix[0][0] = -1;,0,0,0,2,4,0,0,0,0,6,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,0,0,0,3,6,0,0,0,0,9,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,2,1,1,3,6,0,2,0,0,11,65,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,8,2,0,2,4,0,4,0,0,15,69,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,250,"            subtractRow(0, row, 1.0);",0,0,0,1,2,0,4,0,0,4,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,441,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0,0,0,1,2,1,0,0,0,4,77,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,449,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,3,8,0,12,0,0,13,63,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,354,            return data[row][column];,0,0,0,2,4,1,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,372,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,473,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",8,3,1,3,6,1,10,0,0,24,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,273,"        return getBasicRow(col, true);",0,0,0,1,2,1,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,291,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,293,        for (int i = start; i < getHeight(); i++) {,8,1,0,2,5,0,2,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,294,"            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {",14,5,0,4,9,3,12,0,0,36,72,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,295,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,300,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,387,        for (int j = 0; j < getWidth(); j++) {,6,2,1,2,5,0,2,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,388,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",4,0,0,1,3,0,0,0,0,4,65,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,398,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,406,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,415,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,83,81,"        this(new ArrayRealVector(coefficients), relationship, value);",8,0,0,2,4,0,0,2,0,11,61,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,83,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,0,0,0,0,6,36,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,79,    },2,0,0,0,1,1,6,2,0,11,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,854,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1157,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,43,    protected AbstractRealMatrix() {,2,1,0,1,3,0,0,0,0,3,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,44,        lu = null;,2,0,0,0,0,0,2,0,0,6,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,45,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,95,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,0,0,0,1,2,0,4,0,0,4,47,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,0,0,0,0,0,0,0,0,0,0,27,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,2,0,1,2,4,0,0,0,0,7,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,2,1,0,1,3,0,0,0,0,3,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,2,0,0,2,4,1,0,0,0,3,71,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,0,0,0,1,3,0,0,0,0,4,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",4,0,0,1,2,0,8,0,0,12,58,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,6,6,0,1,2,0,16,0,0,28,27,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,5,35,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,0,0,0,2,5,0,0,0,0,7,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,4,0,0,2,6,0,0,0,0,5,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,8,2,0,0,0,1,0,0,0,11,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,6,0,0,1,2,0,0,0,0,6,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,4,1,0,1,3,0,4,0,0,10,13,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,2,0,1,0,0,0,2,0,0,6,23,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,56,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,8,3,0,1,3,0,0,0,0,12,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,72,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,88,        return standardDeviation;,0,0,0,0,0,1,0,0,0,1,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,8,2,0,1,4,1,0,0,0,13,40,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,4,1,0,1,3,0,2,0,0,7,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,85,162,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,0,0,0,2,4,0,0,0,0,6,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0,0,0,2,4,0,0,0,0,6,63,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",0,0,0,1,3,0,0,0,0,4,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,2,0,0,1,3,0,0,0,0,3,49,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,8,2,0,0,0,0,8,0,0,19,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,0,0,0,0,0,0,0,2,0,2,15,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,4,0,0,1,3,0,0,0,0,4,22,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,2,1,0,0,0,0,0,0,0,3,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,4,1,0,1,3,0,0,0,0,5,18,14,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,8,0,1,0,0,0,0,0,0,14,12,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,0,0,0,1,2,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,34,8,1,0,0,5,24,8,0,98,13,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,4,0,0,0,0,1,0,0,0,5,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,2,0,1,3,6,0,4,2,0,18,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,0,0,0,1,2,0,6,0,0,6,36,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,2,0,0,1,3,3,0,0,0,5,33,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,0,0,3,6,0,0,0,0,9,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,36,10,0,1,2,1,0,0,0,50,66,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,6,1,0,1,3,0,0,0,0,8,52,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,2,0,0,0,0,3,0,0,0,5,39,2,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,0,0,0,0,3,55,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,2,0,0,0,0,0,0,0,0,3,21,2,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,2,1,0,0,0,0,0,0,0,4,21,11,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,8,2,0,1,3,0,0,0,0,11,37,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,8,2,0,2,4,3,4,0,0,18,31,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,6,1,0,0,0,0,0,0,0,7,39,9,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,0,0,0,0,0,0,8,0,0,8,19,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,59,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,0,2,4,0,0,0,0,6,75,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,25,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,0,0,0,0,0,0,0,0,0,0,26,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,4,0,0,10,43,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,33,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,6,0,1,2,4,1,0,0,0,13,30,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,16,3,0,1,3,0,0,0,0,22,37,1,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,6,1,0,2,4,1,4,0,0,12,30,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,0,0,0,1,2,0,0,0,0,3,25,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,2,0,0,0,0,1,0,0,0,3,23,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,0,0,0,2,5,0,0,0,0,7,37,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,1,1,2,0,0,0,0,5,10,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,88,        return new DenseRealMatrix(data);,2,0,0,1,2,1,0,2,0,4,33,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",2,1,0,3,6,0,4,0,0,7,72,7,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",0,1,0,1,2,0,2,0,0,4,21,7,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,6,1,1,0,0,0,0,0,0,17,23,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,156,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,164,        int index = 0;,6,0,0,0,0,0,0,0,0,7,14,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,13,52,0,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",12,1,0,1,3,1,0,0,0,16,64,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,173,                if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,206,        final int rows         = rawData.length;,2,0,0,0,0,3,0,0,0,5,40,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,207,        final int columns      = rawData[0].length;,8,1,1,1,2,1,0,0,0,12,43,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,1,0,0,0,16,65,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,1,0,0,0,14,65,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,213,            final int length = rawData[i].length;,0,0,0,1,2,0,0,0,0,3,37,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,222,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,223,"        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {",0,0,0,1,3,0,0,0,0,4,68,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,                basicRows.add(basicRow);,0,0,0,1,2,0,0,0,0,3,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0,0,0,0,0,1,0,0,0,1,79,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,367,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,369,        } else if (x < y) {,6,0,0,1,4,0,0,0,0,6,19,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,370,          return -1;,2,0,0,0,0,1,0,2,0,4,10,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,145,                    matrix[zIndex][getSlackVariableOffset() - 1] =,0,0,0,3,6,0,0,0,0,9,46,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,161,                        matrix[row][getSlackVariableOffset() - 1] =,0,0,0,3,6,0,0,0,0,9,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,260,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,261,        for (double coefficient : coefficients.getData()) {,0,0,0,2,5,0,4,0,0,5,51,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,262,            sum -= coefficient;,0,1,0,0,0,0,6,0,0,8,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,264,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,290,        if (numArtificialVariables == 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,356,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,357,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",6,2,1,2,4,0,16,0,0,29,77,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,359,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,474,        return numArtificialVariables;,8,0,1,0,0,1,8,0,0,22,30,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,42,        this(DEFAULT_EPSILON);,0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,59,        double minValue = 0;,2,0,0,0,0,3,0,0,0,5,20,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,60,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",4,3,1,3,7,0,14,0,0,28,73,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,64,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,67,        return minPos;,4,0,0,0,0,1,0,0,0,5,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,77,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,78,        Integer minRatioPos = null;,2,0,0,0,0,0,0,2,0,4,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",4,1,0,2,4,0,0,0,0,5,57,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",0,1,0,3,7,0,14,0,0,15,69,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,82,"                double ratio = rhs / tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,83,                if (ratio < minRatio) {,6,1,0,1,3,3,0,0,0,10,23,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,84,                    minRatio = ratio;,8,1,0,0,0,0,6,0,0,17,17,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,85,                    minRatioPos = i; ,0,0,0,0,0,0,0,0,0,0,16,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,89,        return minRatioPos;,2,0,0,0,0,1,0,0,0,2,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,104,        Integer pivotCol = getPivotColumn(tableau);,6,0,0,1,2,4,4,4,0,18,43,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",2,0,0,1,2,0,6,2,0,10,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,106,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",6,0,0,1,2,0,8,0,0,15,55,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,112,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,0,0,0,3,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,115,        for (int i = 0; i < tableau.getHeight(); i++) {,20,1,0,2,5,0,4,0,0,29,47,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,116,            if (i != pivotRow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,117,"                double multiplier = tableau.getEntry(i, pivotCol);",8,0,0,1,2,1,8,0,0,18,50,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,0,0,0,3,45,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,167,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,185,        final SimplexTableau tableau =,4,0,0,0,0,1,2,4,0,11,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,61,    protected AbstractLinearOptimizer() {,0,0,0,1,3,0,0,0,0,4,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,67,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,86,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,100,        this.f                     = f;,4,0,0,0,0,0,0,0,0,5,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,101,        this.constraints           = constraints;,0,0,0,0,0,0,0,0,0,0,41,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,102,        this.goalType              = goalType;,4,0,0,0,0,0,0,0,0,5,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,103,        this.restrictToNonNegative = restrictToNonNegative;,0,0,0,0,0,0,0,0,0,0,51,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,105,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,108,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,339,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,340,            out[i] = data[i] * d;,4,3,0,2,4,0,0,0,0,8,21,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,342,        return new RealVectorImpl(out);,2,0,0,1,2,1,0,2,0,4,31,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,435,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,473,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,354,            return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,372,        },8,1,0,0,1,0,0,0,0,11,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,273,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,274,        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {,6,1,0,3,7,0,4,0,0,12,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,277,                row = i;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,283,        return row;,4,0,0,0,0,1,0,0,0,4,11,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,373,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,374,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",6,3,0,1,3,0,22,0,0,31,65,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,377,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,384,        return tableau.getColumnDimension();,0,0,0,1,2,1,0,0,0,4,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,392,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,401,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,419,        return getNumObjectiveFunctions() + numDecisionVariables;,2,1,0,1,2,1,2,0,0,5,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,87,81,"        this(new RealVectorImpl(coefficients), relationship, value);",6,0,0,2,4,1,4,0,0,11,60,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,87,82,    },2,0,0,0,1,0,6,0,0,8,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,31,public abstract class CompositeFormat extends Format {,8,0,0,0,1,5,0,2,0,16,54,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,43,    protected AbstractRealMatrix() {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,44,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,45,    },6,1,0,0,1,0,12,0,0,22,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,77,    public RealVectorImpl(double[] d) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,854,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1157,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,95,    },4,2,0,0,1,0,4,0,0,10,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,119,        this.suffix      = suffix;,4,0,1,0,0,0,0,0,0,15,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,120,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,122,        trimmedSuffix    = suffix.trim();,4,0,0,1,2,0,4,0,0,9,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,94,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,95,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,314,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,315,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,320,            if (column > 0) {,2,1,1,1,3,0,4,0,0,9,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0,0,0,3,6,0,0,0,0,9,66,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,6,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0,0,0,2,5,0,0,0,0,7,41,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",6,3,0,3,7,0,22,0,0,31,66,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,134,                return false;,10,1,0,0,0,1,0,0,0,12,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,137,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,146,        if (tableau.getNumArtificialVariables() > 0) {,4,1,0,2,5,0,4,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0,0,0,4,9,0,0,0,0,13,81,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,0,0,0,3,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,293,        int width = getWidth() - numArtificialVariables - 1;,10,2,0,1,2,0,2,0,0,14,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,294,        int height = getHeight() - 1;,2,1,0,1,2,0,2,0,0,5,29,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,295,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,296,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,10,0,0,20,34,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,297,            for (int j = 0; j < width - 1; j++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,298,"                matrix[i][j] = getEntry(i + 1, j + 1);",0,0,0,3,6,0,0,0,0,9,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,300,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",0,0,0,4,8,0,0,0,0,12,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,302,        this.tableau = new RealMatrixImpl(matrix);,2,1,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,303,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,304,    },6,1,0,0,1,0,0,0,0,8,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,61,    protected AbstractLinearOptimizer() {,0,0,0,1,3,0,6,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,1,1,2,0,0,0,0,5,41,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,63,    },6,2,0,0,1,0,8,0,0,17,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,67,        this.maxIterations = maxIterations;,8,0,0,0,0,0,0,0,0,10,35,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,86,        if (++iterations > maxIterations) {,2,0,0,1,3,0,4,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,91,    },4,1,0,0,1,0,6,0,0,11,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,100,        this.f                     = f;,0,0,0,0,0,0,0,0,0,0,31,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,101,        this.constraints           = constraints;,4,0,0,0,0,0,0,0,0,5,41,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,102,        this.goalType              = goalType;,4,3,0,0,0,0,0,0,0,8,38,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,103,        this.restrictToNonNegative = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,51,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,105,        iterations = 0;,6,0,0,0,0,0,0,0,0,8,15,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,108,        return doOptimize();,8,1,0,1,2,5,2,0,0,15,20,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,42,        this(DEFAULT_EPSILON);,8,1,0,1,2,0,8,0,0,18,22,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,51,    },0,0,1,0,1,0,6,0,0,11,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,59,        double minValue = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,60,        Integer minPos = null;,8,0,0,0,0,0,0,2,0,11,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,6,0,0,0,26,83,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",0,1,0,3,7,0,14,0,0,15,73,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,64,                minPos = i;,0,0,0,0,0,0,0,2,0,2,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,67,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,77,        double minRatio = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,35,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,78,        Integer minRatioPos = null;,2,1,0,0,0,0,0,0,0,3,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,1,2,4,0,12,0,0,18,57,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",0,1,0,3,7,0,14,0,0,15,69,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,82,"                double ratio = rhs / tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,83,                if (ratio < minRatio) {,4,1,0,1,3,0,0,0,0,5,23,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,84,                    minRatio = ratio;,0,0,0,0,0,0,0,0,0,0,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,85,                    minRatioPos = i; ,4,0,0,0,0,0,0,0,0,5,16,10,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,89,        return minRatioPos;,0,0,0,0,0,1,0,0,0,1,19,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,104,        Integer pivotCol = getPivotColumn(tableau);,2,0,0,1,2,0,4,2,0,8,43,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",12,1,0,1,2,0,8,2,0,24,50,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,106,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",0,0,0,1,2,0,0,0,0,3,55,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,112,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,115,        for (int i = 0; i < tableau.getHeight(); i++) {,10,4,1,2,5,0,4,0,0,23,47,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,116,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,117,"                double multiplier = tableau.getEntry(i, pivotCol);",0,0,0,1,2,0,0,0,0,3,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,121,    },0,0,0,0,1,0,6,0,0,6,1,19,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,167,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,185,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,290,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,357,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,12,38,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,358,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,475,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,367,"        if (equals(x, y, eps)) {",4,1,0,2,5,0,0,0,0,8,24,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,369,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,436,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,134,            matrix[0][0] = -1;,0,0,0,2,4,0,0,0,0,6,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,2,1,1,3,6,0,2,0,0,8,61,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,2,1,1,3,6,0,10,0,0,19,65,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,6,2,0,2,4,0,4,0,0,12,69,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,250,"            subtractRow(0, row, 1.0);",0,0,0,1,2,0,4,0,0,4,25,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,428,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0,0,0,1,2,1,0,0,0,4,77,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,354,            return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,372,        },2,0,0,0,1,0,0,0,0,2,1,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,273,        Integer row = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,274,        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {,6,1,0,3,7,0,4,0,0,12,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,3,7,0,12,0,0,13,56,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,276,                if (row == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,277,                    row = i;,4,0,0,0,0,0,0,0,0,5,8,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,283,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,374,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,375,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",2,0,0,1,3,0,0,0,0,3,65,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,385,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,393,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,402,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,420,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,88,81,"        this(new RealVectorImpl(coefficients), relationship, value);",6,0,0,2,4,0,0,2,0,8,60,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,88,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,30,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,473,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,43,    protected AbstractRealMatrix() {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,44,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,45,    },0,1,0,0,1,0,4,0,0,5,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,77,    public RealVectorImpl(double[] d) {,4,0,0,2,5,1,0,0,0,5,35,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,854,        return data.clone();,0,0,0,1,2,1,8,0,0,8,20,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1157,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,119,        this.suffix      = suffix;,4,2,0,0,0,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,121,        trimmedPrefix    = prefix.trim();,16,0,0,1,2,0,14,0,0,32,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",0,0,0,0,1,0,0,0,0,1,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,0,0,0,3,6,1,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0,0,0,3,7,0,0,0,0,10,59,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,2,0,0,0,0,0,4,0,0,7,10,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,2,0,0,1,3,1,2,0,0,5,14,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,14,3,0,3,6,0,0,0,0,18,46,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,1,0,0,0,1,0,0,0,6,7,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,4,1,0,0,0,0,0,2,0,7,6,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,2,0,0,1,2,3,0,4,0,10,16,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,6,3,0,1,2,1,0,0,0,10,37,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,12,7,1,1,2,0,6,0,0,35,8,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",4,0,0,1,2,1,8,2,0,15,32,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,4,0,0,1,3,0,0,0,0,5,14,10,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,6,0,0,0,0,0,0,0,0,6,21,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,14,0,0,0,0,1,0,0,0,15,23,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0,0,0,1,2,0,0,0,0,3,61,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,65,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,18,4,1,1,3,1,0,0,0,30,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,8,1,0,0,0,0,0,0,0,11,12,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,10,3,1,3,7,0,0,0,0,17,27,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,17,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.00498,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,16,5,0,1,2,1,0,0,0,23,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",2,1,0,1,2,0,4,0,0,7,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,6,0,0,1,2,1,0,0,0,6,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,0,0,0,1,3,0,4,0,0,4,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,8,1,0,3,6,1,0,0,0,10,35,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,6,2,0,1,3,1,16,2,0,29,12,0,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,427,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,        if (k == 31) {,14,1,0,1,3,1,10,0,0,27,14,3,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,445,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,2,1,1,3,0,0,0,0,17,12,7,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,16,1,0,0,1,1,4,2,0,25,44,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,2,0,0,1,3,0,0,2,0,4,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,8,1,1,1,2,1,0,0,0,29,45,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,14,6,0,1,3,0,0,0,0,21,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,12,2,0,1,3,3,0,4,0,22,13,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,8,8,0,1,3,0,0,0,0,16,13,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,75,            double n = getNumeratorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,42,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,8,0,0,1,2,0,2,0,0,11,44,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",14,4,1,2,5,0,6,0,0,27,49,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,72,        if (x <= 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,192,        return denominatorDegreesOfFreedom;,0,0,0,0,0,1,0,0,0,1,35,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,50,        super();,10,0,0,1,2,0,0,0,0,12,8,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,51,        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);,8,2,0,1,2,0,4,0,0,17,56,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,52,        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);,8,3,0,1,2,1,4,0,0,16,60,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,158,        if (degreesOfFreedom <= 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,162,        this.numeratorDegreesOfFreedom = degreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,180,        if (degreesOfFreedom <= 0.0) {,4,1,1,1,3,1,0,0,0,10,30,12,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,184,        this.denominatorDegreesOfFreedom = degreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,1,2,5,0,2,0,0,14,62,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,355,        if (isNaN() || rhs.isNaN()) {,0,0,0,3,7,0,0,0,0,10,29,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,255,                if (rhs.isNaN()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,263,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,254,                Complex rhs = (Complex)other;,4,0,0,1,2,0,0,4,0,8,29,9,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,250,        } else if (other == null) {,4,2,0,1,4,0,0,0,0,6,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,248,        if (this == other) { ,2,1,0,1,3,0,0,0,0,3,20,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,6,0,0,0,0,0,8,0,0,16,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,140,        this.result = result;,0,0,0,0,0,0,0,0,0,0,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,141,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,142,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,10,4,0,16,45,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,176,        double oldDelta = delta;,0,0,0,0,0,0,0,0,0,0,24,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,4,44,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,0,0,0,5,10,0,0,0,0,15,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,0,2,5,0,0,2,0,7,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",12,2,0,3,7,1,0,2,0,18,59,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,12,1,0,1,3,0,0,0,0,14,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,4,2,0,1,3,0,0,0,0,6,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,12,1,1,1,2,1,6,0,0,23,30,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,2,1,1,1,3,0,0,0,0,8,17,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,8,0,0,0,0,0,0,0,0,9,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },10,2,0,0,1,0,4,0,0,17,1,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,947,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,56,    protected BigDecimal data[][] = null;,0,0,0,2,4,0,0,0,0,6,37,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,1,0,1,2,0,0,0,0,3,35,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,67,    protected int parity = 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,3,0,0,0,5,23,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,76,    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);,0,0,0,1,2,0,0,0,0,3,67,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,79,    static final BigDecimal ZERO = new BigDecimal(0);,0,0,0,1,2,0,0,0,0,3,49,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,81,    static final BigDecimal ONE = new BigDecimal(1);,0,0,0,1,2,0,0,0,0,3,48,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,146,                if (d[r].length != nCols) {,6,2,1,2,5,0,2,0,0,12,27,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,141,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,142,            if (nCols == 0) {,0,0,1,1,3,0,4,0,0,9,17,6,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,145,            for (int r = 1; r < nRows; r++) {,12,1,0,1,3,3,4,4,0,27,33,1,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,150,            data = d;,8,0,0,0,0,0,0,0,0,10,9,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,152,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,153,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,130,"    public RealMatrixImpl(double[][] d, boolean copyArray) {",0,0,0,3,7,0,0,0,0,10,56,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,131,        if (copyArray) {,10,0,0,1,3,3,6,2,0,21,16,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,134,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,137,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,138,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,750,        return data[0].length;,0,0,0,1,2,1,0,0,0,4,22,4,0.01299,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,743,        return data.length;,10,0,0,0,0,2,0,0,0,11,19,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,58,    protected double data[][] = null;,2,0,0,2,4,0,2,0,0,4,33,5,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,63,    protected double lu[][] = null;,0,0,0,2,4,0,0,0,0,6,31,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,66,    protected int[] permutation = null;,4,0,0,1,2,1,4,0,0,9,35,1,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,69,    protected int parity = 1;,10,4,0,0,0,0,0,0,0,14,25,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,86,    public BigMatrixImpl() {,4,0,0,1,3,1,0,0,0,6,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,97,"    public BigMatrixImpl(int rowDimension, int columnDimension) {",0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,98,        if (rowDimension <=0 || columnDimension <=0) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,99,            throw new IllegalArgumentException,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,102,        data = new BigDecimal[rowDimension][columnDimension];,6,0,1,2,4,0,0,2,0,14,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,103,        lu = null;,10,2,0,0,0,0,0,0,0,14,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,104,    },0,0,1,0,1,0,6,0,0,10,1,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,118,    public BigMatrixImpl(BigDecimal[][] d) {,8,0,0,3,7,1,0,0,0,9,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,119,        this.copyIn(d);,4,1,0,1,2,0,0,0,0,5,15,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,120,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,121,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,140,            copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,143,                throw new NullPointerException();,8,1,0,1,2,0,0,2,0,11,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.08889,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,10,1,0,0,0,0,0,0,0,12,10,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,4,0,0,3,7,0,2,0,0,6,27,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,4,1,0,1,3,1,6,2,0,14,12,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,4,0,0,10,7,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,8,1,0,0,0,0,0,2,0,14,7,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,4,0,0,0,0,0,0,0,0,4,10,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,10,1,0,3,7,1,6,0,0,19,69,0,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,577,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,2,0,0,0,0,0,4,0,0,7,7,8,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,8,1,1,0,0,0,0,0,0,12,6,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,1,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,37,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,736,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,14,1,0,1,3,0,0,0,0,16,33,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,748,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,6,0,0,0,2,0,12,6,0,25,18,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,82,    this.measuredValue = measuredValue;,0,0,0,0,0,0,0,0,0,0,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,83,    this.ignored       = ignored;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,84,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,147,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,156,                for (int i = 0; i < parameters.length; ++i) {,0,0,0,1,3,0,0,0,0,4,45,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,157,"                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));",0,0,0,5,10,0,0,0,0,15,75,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,162,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,165,            previous = cost;,4,0,0,0,0,0,0,0,0,5,16,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,166,            updateResidualsAndCost();,6,1,0,1,2,0,0,0,0,7,25,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,591,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,10,0,1,1,2,0,0,0,0,17,37,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,6,0,0,1,2,0,0,0,0,7,35,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,6,0,0,1,2,2,4,0,0,12,32,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,726,        for (int row = 0; row < nRowB; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,727,            for (int col = 0; col < nColB; col++) {,8,1,0,1,3,0,0,0,0,10,39,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,2,0,0,3,49,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,2,1,0,1,3,0,0,0,0,3,38,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,734,            for (int i = col + 1; i < nCol; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,742,        for (int col = nCol - 1; col >= 0; col--) {,0,0,0,1,3,0,0,0,0,4,43,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,743,            for (int j = 0; j < nColB; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,744,                bp[col][j] /= lu[col][col];,0,0,0,4,8,0,0,0,0,12,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,746,            for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,0,0,5,47,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,2,2,0,0,5,14,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,847,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/EstimatedParameter,100,107,    return bound;,0,0,0,0,0,1,0,0,0,1,13,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,49,        parameters   = new ArrayList();,18,2,1,1,2,0,0,0,0,35,31,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,51,    },0,0,0,0,1,0,6,0,0,6,1,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },6,1,0,0,1,2,4,0,0,13,1,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,2,0,1,2,4,1,0,0,0,6,51,9,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",0,0,0,2,4,0,0,0,0,6,54,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,0,0,0,2,4,0,0,0,0,6,41,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,4,0,0,1,2,1,6,0,0,11,28,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,6,1,0,0,0,0,0,0,0,7,30,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,4,0,0,4,4,5,0.18182,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,0,0,0,0,0,0,0,0,0,0,25,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,10,3,0,0,0,0,0,0,0,13,24,3,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },4,0,0,0,1,0,0,0,0,4,1,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,        setAlpha(alpha);,0,0,0,1,2,0,0,0,0,3,16,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,49,        setBeta(beta);,0,0,0,1,2,0,4,0,0,4,14,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,        this.alpha = alpha;,4,0,0,0,0,0,0,0,0,5,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,    },4,1,0,0,1,0,4,2,0,11,1,6,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,        if (beta <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,        this.beta = beta;,2,1,0,0,0,0,0,0,0,3,17,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,135,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));",0,0,0,2,4,0,0,0,0,6,51,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,        super();,6,0,1,1,2,0,0,0,0,9,8,6,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,        setGamma(g);,2,0,0,1,2,0,4,0,0,6,12,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,        setDegreesOfFreedom(df);,2,1,1,1,2,0,4,0,0,11,24,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,    },8,1,0,0,1,0,0,0,0,9,1,0,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,180,        this.gamma = g;,0,0,0,0,0,0,0,0,0,0,15,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,    },6,0,0,0,1,0,0,0,0,7,1,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,4,0,0,0,0,1,0,0,0,4,13,1,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,        this(new ChiSquaredDistributionImpl(1.0));,14,2,0,2,4,1,4,0,0,22,42,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,    },8,1,1,0,1,0,0,2,0,20,1,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,        setDistribution(x);,2,0,0,1,2,0,4,2,0,8,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,2,1,0,0,0,0,0,0,0,3,21,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,    },4,0,0,0,1,0,0,0,0,5,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,6,0,0,0,0,0,0,0,0,7,40,3,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,1,0,0,0,0,0,0,0,8,31,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,18,4,0,2,5,1,6,2,0,32,53,1,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,173,                n = n + 1.0;,0,0,0,0,0,0,0,0,0,0,12,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,0,0,0,0,0,0,4,0,0,5,15,7,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,2,0,0,1,3,1,8,0,0,11,25,7,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,59,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,278,"        return chiSquareTest.chiSquare(expected, observed);",0,0,0,1,2,1,0,0,0,4,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,1,4,4,0,13,48,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,252,                    return n * (a - n);,2,1,0,1,2,1,0,0,0,3,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,235,        } else if (x == 0.0) {,12,1,1,1,4,0,0,0,0,19,22,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,237,        } else if (x < a || a < 1.0) {,12,4,0,1,4,1,0,0,0,17,30,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,0,4,4,0,13,48,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,0,0,0,1,4,1,0,0,0,6,40,4,0.14286,1,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,0,0,0,0,0,0,0,0,0,0,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,2,0,0,0,0,1,0,2,0,5,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,1,6,0,0,9,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,0,0,0,1,2,0,0,0,0,3,74,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,12,2,1,1,3,1,0,0,0,22,46,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,12,3,1,3,6,0,0,0,0,21,35,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,6,1,1,1,2,0,0,0,0,10,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,0,0,0,3,6,0,0,0,0,9,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,4,1,0,1,4,0,0,0,0,6,22,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,0,1,0,1,4,0,6,0,0,7,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,0,0,2,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",8,1,0,1,2,0,10,2,0,22,51,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,2,0,4,8,0,0,0,0,11,59,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,8,2,0,1,4,0,0,0,0,11,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,67,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,10,5,0,0,0,0,8,0,0,23,40,11,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,170,            double sum = an; // partial sum,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,0,4,0,0,6,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,0,0,0,0,0,0,0,0,0,0,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",10,1,0,1,2,0,0,0,0,12,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,4,0,0,5,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",6,3,0,5,10,1,16,2,0,27,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.33333,0,0,-1
