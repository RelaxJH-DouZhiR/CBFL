dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,209,                        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,45,        return model;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,45,        return jacobian;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,353,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,366,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,368,        long xl = Double.doubleToLongBits(d);,10,2,0,1,2,0,6,0,0,18,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,369,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,370,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,379,        return Math.sqrt(a);,0,0,0,1,2,1,14,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,387,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,388,          return x;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,396,      if (x > 20) {,6,1,0,1,3,0,2,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,397,          if (x >= LOG_MAX_VALUE) {,6,0,0,1,3,0,0,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,399,              final double t = exp(0.5 * x);,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,400,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,402,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,404,      } else if (x < -20) {,2,1,0,1,4,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,405,          if (x <= -LOG_MAX_VALUE) {,14,3,0,1,3,0,0,0,0,20,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,407,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,8,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,408,              return (0.5 * t) * t;,4,2,0,1,2,1,0,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,410,              return 0.5 * exp(-x);,2,1,0,1,2,1,2,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,414,      final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,415,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,416,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,418,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,420,      double ya = hiPrec[0] + hiPrec[1];,0,0,1,2,4,0,0,0,0,10,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,0,0,3,6,1,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,423,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,424,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,425,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,428,      double recip = 1.0/ya;,4,1,1,0,0,0,0,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,429,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,430,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,431,      double recipb = recip - recipa;,2,0,0,0,0,0,0,0,0,3,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,436,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,439,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,440,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,441,      ya = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,442,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,443,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,444,      ya = temp;,6,1,0,0,0,0,0,0,0,8,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,446,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,447,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,448,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,456,      boolean negate = false;,4,0,0,0,0,1,6,0,0,12,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,457,      if (x != x) {,4,1,0,1,3,0,2,0,0,8,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,458,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,466,      if (x > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,467,          if (x >= LOG_MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,469,              final double t = exp(0.5 * x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,470,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,472,              return 0.5 * exp(x);,8,1,0,1,2,1,18,0,0,27,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,474,      } else if (x < -20) {,4,3,0,1,4,0,0,0,0,8,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,475,          if (x <= -LOG_MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,477,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,2,0,0,9,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,478,              return (-0.5 * t) * t;,4,2,0,1,2,1,0,0,0,7,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,480,              return -0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,484,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,485,          return x;,4,0,0,0,0,2,0,0,0,5,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,488,      if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0137,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,2,0,0,0,0,3,0,0,0,5,4,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,8,1,0,0,0,1,0,0,0,11,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,26,10,0,1,3,1,0,0,0,37,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,8,1,0,0,0,1,0,0,0,11,4,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,                if (striped[q] == '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,        if (!decimalFound) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,4,0,1,0,0,0,0,0,0,16,49,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,8,3,0,0,0,0,0,0,0,12,31,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,6,1,1,1,3,0,0,0,0,12,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,6,0,0,12,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,10,0,0,0,0,0,6,0,0,19,7,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,12,3,0,1,3,0,6,0,0,23,40,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,6,0,0,6,38,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0,0,0,3,6,0,0,0,0,9,42,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,2,0,0,0,0,0,0,0,0,3,6,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,2,0,0,2,4,1,4,0,0,7,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,0,0,2,5,0,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,1,0,0,0,0,16,0,0,17,6,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,385,                    negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,386,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,394,                sciexp = -sciexp;,0,0,0,0,0,0,0,0,0,0,17,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,907,                return false;,4,0,0,0,0,6,0,10,0,19,13,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2056,            if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2059,                return NAN_STRING;,0,0,0,0,0,1,0,0,0,1,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",2,0,0,1,2,0,6,0,0,9,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,7,32,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,2,0,0,0,0,0,4,0,0,7,25,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),10,1,0,2,4,1,4,4,0,21,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,383,                if (fpexp.charAt(i) == '-'),0,0,0,2,4,0,0,0,0,6,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0,0,0,3,7,0,0,0,0,10,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0,0,0,1,2,0,0,0,0,3,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,2,0,0,1,3,0,0,0,0,2,15,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,396,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,961,            return a.sign;,4,0,0,0,0,1,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,969,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2237,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2238,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2239,                def.nans = QNAN;,0,0,0,0,0,0,6,0,0,6,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2240,                break;,6,0,1,0,0,1,8,4,0,21,6,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,500,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2218,            buffer[--q] = '-';,6,3,0,1,2,0,0,0,0,9,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,284,        return ieeeFlags;,6,1,0,0,0,1,0,0,0,7,17,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1652,            lostdigit = result.mant[0];,4,0,0,1,2,0,0,0,0,6,27,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1653,            result.shiftRight();,10,3,0,1,2,1,0,2,0,17,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1654,            result.mant[mant.length-1] = rh;,6,1,0,1,2,0,4,0,0,12,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1603,            return multiplyFast(x);,6,0,0,1,2,1,0,0,0,6,23,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1612,        Dfp result = newInstance(this);,0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1615,        if (nans != FINITE) {,4,1,1,1,3,0,0,0,0,11,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1635,        if (x < 0 || x >= RADIX) {,6,3,0,1,3,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1643,        int rh = 0;,14,5,0,0,0,0,0,0,0,20,11,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1644,        for (int i = 0; i < mant.length; i++) {,6,1,0,1,3,0,4,4,0,16,39,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1645,            final int r = mant[i] * x + rh;,0,0,0,1,2,0,0,0,0,3,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1646,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1647,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1650,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1651,        if (rh != 0) {,0,0,0,1,3,0,6,0,0,6,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);",4,0,0,1,2,1,0,4,0,9,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,536,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);",4,0,0,2,4,0,0,0,0,5,26,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,    public ArrayRealVector(double[] d) {,12,1,0,2,5,1,10,10,0,35,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,    },10,1,0,0,1,0,0,0,0,13,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,86,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,    },0,0,0,0,1,0,10,0,0,10,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,        return copyOut();,0,0,0,1,2,1,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,            data = new double[subMatrix.length][nCols];,6,1,0,2,4,1,4,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,0,1,5,10,1,2,0,0,9,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,    private byte maxIter = 30;,2,0,0,0,0,0,0,0,0,2,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,            findEigenVectors(transformer.getQ().getData());,2,0,0,3,6,3,8,0,0,13,47,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,    },4,1,0,0,1,1,0,0,0,6,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,        final int rows = matrix.getRowDimension();,6,0,0,1,2,0,0,0,0,7,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,        final int columns = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,7,0,0,0,0,0,0,0,0,7,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,            for (int j = i + 1; j < columns; ++j) {,18,2,0,1,3,1,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,            final int m = eigenvectors.length;,2,1,0,0,0,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,247,        if (cachedD == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,10,1,0,1,2,3,6,0,0,22,64,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",12,5,1,3,8,1,10,0,0,32,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,        return cachedD;,4,0,0,0,0,1,0,0,0,5,15,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,    },8,2,0,0,1,0,10,0,0,20,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,        final double[][]z = householderMatrix.clone();,10,1,0,3,6,2,4,0,0,18,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,        final int n = main.length;,2,0,0,0,0,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,570,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,580,        double maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,581,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,590,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,591,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,601,        for (int j = 0; j < n; j++) {,14,3,1,1,3,0,0,0,0,21,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,612,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,672,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,675,            for (int j = i + 1; j < n; j++) {,10,2,1,1,3,0,4,0,0,19,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,681,            if (k != i) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,693,        maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,700,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,709,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,710,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,62,    public TriDiagonalTransformer(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,71,        secondary = new double[m - 1];,6,1,0,1,2,0,6,0,0,15,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,72,        cachedQ   = null;,6,1,0,0,0,0,0,0,0,8,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,74,        cachedT   = null;,2,0,1,0,0,1,0,0,0,7,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,77,        transform();,2,0,0,1,2,1,2,0,0,5,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,78,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,86,        if (cachedQ == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,131,        return cachedQt;,4,0,1,0,0,1,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,175,        return main;,4,0,0,0,0,1,6,0,0,11,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,185,        return secondary;,10,2,0,0,0,1,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,252,        main[m - 1] = householderVectors[m - 1][m - 1];,0,0,0,3,6,0,0,0,0,9,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,106,"                            final String separator, final NumberFormat format) {",8,2,1,0,2,2,0,4,0,21,52,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,114,    },8,4,1,0,1,0,0,0,0,19,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,130,        if (data == null ||,4,2,0,0,1,0,0,0,0,6,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",12,1,0,1,2,1,2,2,0,18,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,218,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,220,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,384,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,413,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,12,0,0,12,52,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,717,        double negccov = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,718,        if (ccov1 + ccovmu > 0) {,4,2,0,1,3,0,0,2,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,719,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",2,0,0,2,4,0,10,2,0,14,56,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,721,            RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,724,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,12,1,0,1,2,0,0,0,0,14,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,725,            oldFac += 1. - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,726,            if (isActiveCMA) {,6,0,0,1,3,1,0,2,0,9,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,728,                negccov = (1. - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,730,                double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,733,                double negalphaold = 0.5; // where to make up for the variance,8,1,0,0,0,1,0,0,0,10,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,736,                int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,0,4,0,0,6,40,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,737,                RealMatrix arzneg,2,0,0,0,0,0,0,2,0,4,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,739,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,740,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,8,2,0,3,6,0,10,0,0,21,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,741,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",8,2,0,1,2,1,6,2,0,19,60,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,742,                int[] idxReverse = reverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,37,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,743,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,744,"                arnorms = divide(arnormsReverse, arnormsSorted);",2,0,0,1,2,0,6,0,0,9,48,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,745,                int[] idxInv = inverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,33,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,746,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,0,6,2,0,10,55,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,748,                double negcovMax = (1. - negminresidualvariance) /,0,0,0,1,2,0,6,0,0,6,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,750,                if (negccov > negcovMax) {,4,1,0,1,3,0,0,0,0,5,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,753,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,754,                RealMatrix artmp = BD.multiply(arzneg);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,755,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,757,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,758,                C = C.scalarMultiply(oldFac),2,0,0,1,2,0,6,0,0,9,28,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,769,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,780,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,789,        if (ccov1 + ccovmu + negccov > 0 &&,6,3,0,0,1,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,792,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,794,            EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,0,0,4,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,795,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,796,            D = eig.getD();,6,1,0,1,2,0,0,0,0,7,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,797,            diagD = diag(D);,2,0,0,1,2,0,8,0,0,11,16,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,798,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,808,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,813,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,814,            diagD = sqrt(diagD); // D contains standard deviations now,0,0,0,1,2,0,0,0,0,3,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,815,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,817,    },0,0,0,0,1,0,4,0,0,4,1,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1109,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1110,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1111,            for (int c = 0; c < m.getColumnDimension(); c++) {,10,1,0,2,5,0,10,0,0,24,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1112,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",2,1,1,4,8,2,16,0,0,28,46,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1115,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1139,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1140,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1141,            for (int c = 0; c < m.getColumnDimension(); c++) {,8,1,0,2,5,1,6,0,0,17,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1142,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",10,4,1,3,6,0,8,0,0,39,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1145,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1153,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1154,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1155,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1156,            for (int r = 0; r < m.getRowDimension(); r++) {,12,4,1,2,5,0,4,0,0,26,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1157,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,16,0,0,19,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1159,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1161,"        return new Array2DRowRealMatrix(d, false);",6,2,1,1,2,1,0,2,0,20,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1338,        int[] inverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1339,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1340,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1342,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1350,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1351,        for (int i = 0; i < indices.length; i++) {,14,2,1,1,3,0,0,0,0,22,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1352,            reverse[i] = indices[indices.length - i - 1];,6,1,1,2,4,0,0,0,0,14,45,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1354,        return reverse;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,2974,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,267,    },6,0,0,0,1,0,0,0,0,7,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,331,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,337,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,4,2,0,2,4,1,12,0,0,20,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,233,        if (mti >= N) { // generate N words at one time,20,3,0,1,3,0,8,0,0,33,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,234,            int mtNext = mt[0];,4,0,1,1,2,0,0,0,0,6,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,235,            for (int k = 0; k < N - M; ++k) {,10,2,0,1,3,0,0,0,0,13,33,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,237,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,241,            for (int k = N - M; k < N - 1; ++k) {,12,3,0,1,3,0,0,0,0,16,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,4,0,0,33,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,6,3,1,3,6,1,4,0,0,17,49,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,5,1,4,8,0,0,0,0,20,51,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,250,            mti = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,253,        y = mt[mti++];,4,0,1,1,2,0,0,0,0,8,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,256,        y ^=  y >>> 11;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,258,        y ^= (y <<  15) & 0xefc60000;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,259,        y ^=  y >>> 18;,4,1,0,0,0,0,0,0,0,6,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,261,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,85,        final long high = ((long) next(26)) << 26;,6,0,0,3,6,0,4,0,0,11,42,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,86,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,87,        return (high | low) * 0x1.0p-52d;,2,0,0,1,2,1,0,0,0,2,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,99,        if (Double.isNaN(nextGaussian)) {,14,5,0,2,5,1,6,0,0,26,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,101,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,102,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,103,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,105,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,106,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,107,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,109,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,110,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,113,        return random;,16,6,0,0,0,1,0,0,0,23,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,67,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,18,3,0,1,2,3,4,2,0,32,95,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,4,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,82,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,84,        for (int row = 0; row < rowCount; ++row) {,12,5,0,1,3,0,0,0,0,18,42,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,98,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,99,        final int columnCount = getColumnDimension();,12,0,0,1,2,2,2,2,0,19,45,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,36,4,1,1,3,1,4,4,0,56,31,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,2,0,2,0,10,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,66,        msgPatterns    = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,46,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,8,5,1,2,4,1,0,0,0,24,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },2,1,0,0,1,0,0,0,0,3,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,10,1,0,1,2,0,6,0,0,19,25,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,1,0,2,4,1,10,0,0,20,46,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,368,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,369,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,370,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,1,1,1,2,0,0,0,0,11,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,3,0,1,2,0,4,0,0,11,54,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,5,0,2,4,0,0,0,0,11,87,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",10,3,0,1,2,3,0,0,0,17,131,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,1,1,2,0,0,0,0,18,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,4,0,0,4,55,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,0,0,0,5,78,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,2,263,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",8,1,0,1,2,0,0,0,0,10,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,0,5,10,0,6,0,0,11,71,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,8,0,0,8,51,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,1,0,3,6,0,0,0,0,10,81,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,2,0,1,2,0,8,0,0,18,53,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,102,"    EVALUATION(""evaluation""), /* keep */",4,0,0,1,2,3,0,6,0,14,36,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,1,0,0,0,6,175,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,4,0,0,10,73,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,4,0,0,4,62,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",6,1,0,1,2,0,2,0,0,10,54,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",4,1,1,4,8,1,4,0,0,15,56,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",10,1,0,2,4,0,0,0,0,13,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,0,0,0,0,5,59,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,2,0,3,67,10,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,129,    @Deprecated,4,0,0,0,0,0,0,0,0,5,11,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,131,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",10,3,0,2,4,1,0,0,0,15,103,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0,0,0,3,6,0,0,0,0,9,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,                int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);",16,6,0,1,2,4,26,4,0,58,48,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,                int[] idxInv = inverse(idxnorms);,8,1,1,2,4,1,4,0,0,18,33,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",0,0,0,1,2,0,0,0,0,3,55,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,                double negcovMax = (1. - negminresidualvariance) /,8,2,0,1,2,1,12,2,0,25,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,                if (negccov > negcovMax) {,6,1,0,1,3,1,0,0,0,8,26,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,                RealMatrix artmp = BD.multiply(arzneg);,6,0,0,1,2,0,14,2,0,22,39,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,                C = C.scalarMultiply(oldFac),12,0,0,1,2,1,6,0,0,20,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,            } else {,2,1,0,0,2,0,0,0,0,3,8,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,    },2,0,1,0,1,0,0,0,0,7,1,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,        if (ccov1 + ccovmu + negccov > 0 &&,2,0,0,0,1,0,0,0,0,2,35,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,            EigenDecomposition eig = new EigenDecomposition(C);,10,1,0,1,2,0,0,4,0,16,51,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",8,0,0,1,2,0,4,0,0,15,66,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,            D = eig.getD();,0,0,0,1,2,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,            diagD = diag(D);,10,2,0,1,2,1,6,0,0,19,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,            if (min(diagD) <= 0) {,2,1,0,2,5,1,6,0,0,10,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,            if (max(diagD) > 1e14 * min(diagD)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,            diagC = diag(C);,4,0,0,1,2,0,4,0,0,9,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,            diagD = sqrt(diagD); // D contains standard deviations now,6,0,0,1,2,0,4,0,0,12,58,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,        for (int r = 0; r < m.getRowDimension(); r++) {,6,2,0,2,5,0,8,0,0,19,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,8,0,0,16,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,        for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,            for (int r = 0; r < m.getRowDimension(); r++) {,18,2,0,2,5,1,4,0,0,27,47,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,            d[0][c] = sum;,2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,        int[] inverse = new int[indices.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,            inverse[indices[i]] = i;,2,0,1,2,4,0,4,0,0,13,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,            reverse[i] = indices[indices.length - i - 1];,0,0,0,2,4,0,0,0,0,6,45,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,        final int nRows = getRowDimension();,4,0,0,1,2,0,0,0,0,4,36,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);",2,0,1,1,2,0,6,0,0,13,37,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);",0,0,0,2,4,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,        secondary = new double[m - 1];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,6,1,1,1,2,1,6,0,0,20,45,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,131,        return cachedQt;,0,0,0,0,0,1,0,0,0,1,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,175,        return main;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,        return secondary;,4,0,0,0,0,4,4,2,0,13,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,        final int m = householderVectors.length;,2,0,1,0,0,0,0,0,0,5,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,    public ArrayRealVector(double[] d) {,12,2,0,2,5,1,0,0,0,16,36,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,        data = d.clone();,2,0,0,1,2,3,0,0,0,5,17,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,130,        if (data == null ||,0,0,0,0,1,0,0,0,0,1,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);",8,2,1,2,4,0,6,0,0,21,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,        return m;,4,0,0,0,0,4,0,0,0,7,9,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,2,1,0,1,0,0,0,0,17,75,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,        copyIn(d);,2,0,0,1,2,0,4,0,0,7,10,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,252,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,277,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,279,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,            data = new double[subMatrix.length][nCols];,2,0,1,2,4,0,0,0,0,7,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,            for (int i = 0; i < data.length; ++i) {,2,1,1,1,3,0,0,0,0,10,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,294,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,6,0,0,11,68,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,527,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,543,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,544,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,115,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,    private byte maxIter = 30;,2,0,1,0,0,1,0,2,0,9,26,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,0,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,            findEigenVectors(transformer.getQ().getData());,0,0,1,3,6,0,11,0,0,24,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,        final int rows = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,193,        final int columns = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,195,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,            for (int j = i + 1; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,224,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,        if (cachedD == null) {,2,1,1,1,3,0,0,0,0,7,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,12,1,0,1,3,3,0,0,0,17,50,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",2,2,1,3,8,0,6,0,0,15,71,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,259,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,555,        transformer = new TriDiagonalTransformer(matrix);,6,0,0,1,2,3,0,2,0,12,49,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,558,    },6,0,0,0,1,0,4,0,0,11,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,567,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,568,        final int n = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,570,        imagEigenvalues = new double[n];,2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,572,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,577,        e[n - 1] = 0;,6,1,1,1,2,0,0,0,0,10,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,580,        double maxAbsoluteValue = 0;,8,4,0,0,0,0,0,0,0,12,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,581,        for (int i = 0; i < n; i++) {,4,0,0,1,3,0,0,0,0,4,29,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,0,0,3,7,0,0,0,0,4,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,4,0,1,3,7,1,0,0,0,7,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,590,        if (maxAbsoluteValue != 0) {,6,2,0,1,3,1,0,0,0,9,28,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,591,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,79,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,8,2,1,3,7,0,16,0,0,31,65,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,601,        for (int j = 0; j < n; j++) {,10,1,0,1,3,0,6,2,0,20,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,612,                if (m != j) {,10,2,0,1,3,0,0,0,0,13,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,672,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,675,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,681,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,693,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,8,3,1,2,4,0,4,0,0,23,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,700,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,4,0,0,4,30,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,709,        for (int i = 0; i < n; i++) {,12,2,1,1,3,0,4,0,0,22,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,710,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,106,"                            final String separator, final NumberFormat format) {",6,0,0,0,2,3,4,4,0,17,52,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,108,        this.suffix      = suffix;,10,0,0,0,0,0,4,0,0,16,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,331,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,337,        if (yInt < 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,10,2,0,1,2,1,4,0,0,17,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,16,0,0,21,55,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,264,        if (o == null) {,10,1,1,1,3,0,8,2,0,28,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,352,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,6,0,0,2,4,0,4,0,0,11,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,353,        final FitnessFunction fitfun = new FitnessFunction();,0,0,0,1,2,0,0,0,0,3,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,354,        final double[] guess = fitfun.encode(getStartPoint());,2,0,0,3,6,0,16,0,0,19,54,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,356,        dimension = guess.length;,6,0,0,0,0,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,357,        initializeCMA(guess);,0,0,0,1,2,0,4,0,0,4,21,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,358,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,359,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,360,"        push(fitnessHistory, bestValue);",2,0,0,1,2,0,6,0,0,10,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,361,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",0,0,0,1,3,0,0,0,0,4,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,363,        PointValuePair lastResult = null;,2,0,0,0,0,0,0,2,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,368,            for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,370,"                RealMatrix arz = randn1(dimension, lambda);",2,0,0,1,2,0,6,2,0,10,43,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,371,"                RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,372,                double[] fitness = new double[lambda];,2,0,1,2,4,0,0,0,0,4,38,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,374,                for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,375,                    RealMatrix arxk = null;,2,0,0,0,0,0,0,2,0,4,23,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,376,                    for (int i = 0; i < checkFeasableCount+1; i++) {,8,2,0,1,3,0,0,0,0,11,48,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,377,                        if (diagonalOnly <= 0) {,2,1,0,1,3,0,0,0,0,3,24,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,384,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,6,2,0,3,7,0,8,0,0,16,70,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,390,"                    copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,392,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,1,3,6,0,10,0,0,15,63,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,395,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,398,                int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,39,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,400,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,0,0,2,0,6,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,401,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",2,0,0,2,4,0,12,2,0,16,72,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,402,                xmean = bestArx.multiply(weights);,2,0,0,1,2,0,12,0,0,15,34,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,403,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",4,0,0,2,4,0,12,2,0,19,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,404,                RealMatrix zmean = bestArz.multiply(weights);,2,0,0,1,2,0,0,0,0,2,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,405,"                boolean hsig = updateEvolutionPaths(zmean, xold);",18,0,0,1,2,0,12,0,0,31,49,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,406,                if (diagonalOnly <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,412,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",10,4,0,3,6,0,8,0,0,23,61,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,413,                double bestFitness = fitness[arindex[0]];,2,0,1,2,4,0,0,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,414,                double worstFitness = fitness[arindex[arindex.length-1]];,4,0,1,2,4,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,415,                if (bestValue > bestFitness) {,6,1,0,1,3,0,2,0,0,10,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,416,                    bestValue = bestFitness;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,417,                    lastResult = optimum;,16,5,0,0,0,0,4,0,0,26,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,418,                    optimum = new PointValuePair(,8,1,1,0,1,0,4,2,0,25,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,421,                    if (getConvergenceChecker() != null && lastResult != null) {,0,0,0,2,5,0,0,0,0,7,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,422,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",2,0,0,3,7,0,10,0,0,12,73,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,429,                if (stopFitness != 0) { // only if stopFitness is defined,2,1,0,1,3,0,0,0,0,3,57,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,434,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,435,                double[] pcCol = pc.getColumn(0);,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,436,                for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,437,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",0,0,0,6,13,0,0,0,0,19,68,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,438,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,444,                for (int i = 0; i < dimension; i++) {,10,1,1,1,3,0,0,4,0,18,37,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,445,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,4,2,1,2,5,0,0,0,0,10,38,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,449,                double historyBest = min(fitnessHistory);,2,0,0,1,2,0,4,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,450,                double historyWorst = max(fitnessHistory);,8,0,0,1,2,0,10,0,0,19,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,451,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",4,2,1,1,3,0,0,0,0,10,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,455,                if (iterations > fitnessHistory.length &&,6,2,0,0,1,0,0,0,0,8,41,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,460,                if (max(diagD)/min(diagD) > 1e7) {,0,2,0,3,7,0,8,0,0,10,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,464,                if (getConvergenceChecker() != null) {,0,1,0,2,5,0,2,0,0,4,38,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,465,                    PointValuePair current =,12,1,0,0,0,0,0,2,0,16,24,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,468,                    if (lastResult != null &&,0,0,0,0,1,0,0,0,0,1,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,472,                    lastResult = current;,4,0,0,0,0,0,0,0,0,5,21,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,475,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,478,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,483,"                push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,484,                fitfun.setValueRange(worstFitness-bestFitness);,4,1,0,1,2,0,4,0,0,9,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,485,                if (generateStatistics) {,6,1,1,1,3,0,0,0,0,12,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,492,        return optimum;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,553,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,561,        if (lambda <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,565,        double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,0,0,0,0,6,52,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,566,        for (int i = 0; i < guess.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,567,            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];,4,2,1,5,10,1,0,0,0,15,87,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,568,            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;,4,2,1,5,10,0,0,0,0,15,74,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,570,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",8,0,0,1,2,0,0,8,0,18,65,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,62,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,63,        if (rowDimension < 1) {,4,1,0,1,3,3,0,0,0,8,23,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,66,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,56,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,58,    },2,0,0,0,1,0,0,0,0,2,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0,0,0,1,2,1,0,0,0,4,63,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,246,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,303,        data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,139,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,158,    private static final double SINE_TABLE_B[] =,2,1,1,1,2,0,0,0,0,8,44,6,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,177,    private static final double COSINE_TABLE_A[] =,2,0,1,1,2,0,0,0,0,5,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,196,    private static final double COSINE_TABLE_B[] =,4,0,0,1,2,3,0,0,0,8,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,275,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,0,0,10,54,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,4,0,0,4,61,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,506,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,509,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,512,        return out;,8,1,0,0,0,2,0,0,0,10,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,117,    },6,0,0,0,1,0,8,0,0,15,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,389,"        checkRowIndex(m, row);",0,0,0,1,2,0,6,0,0,6,22,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,391,    },0,0,0,0,1,0,6,0,0,6,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,407,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,418,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,51,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,53,    protected AbstractRealMatrix() {},2,0,1,2,4,1,0,0,0,8,33,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,44,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,4,0,17,95,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,47,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,6,1,0,2,4,0,6,0,0,14,55,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,21,53,public abstract class RealLinearOperator {,2,0,1,0,1,0,0,0,0,5,42,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,76,    },2,0,0,0,1,1,0,0,0,3,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,271,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,275,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,280,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,281,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,3,64,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,286,        } else {,2,0,0,0,2,0,8,0,0,11,8,10,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,290,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,526,"        setSubMatrix(in, 0, 0);",2,0,1,1,2,0,0,0,0,5,23,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,133,                            final NumberFormat format) {,2,1,0,0,2,1,12,2,0,18,28,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,143,    },6,1,0,0,1,1,0,0,0,8,1,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,264,        if (o == null) {,12,2,0,1,3,0,0,0,0,15,16,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,56,        return nf;,6,2,0,0,0,1,0,0,0,8,10,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1046,        public Entry() {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1047,            setIndex(0);,6,1,0,1,2,0,2,0,0,10,12,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1048,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1056,            return getEntry(getIndex());,4,1,1,2,4,4,8,0,0,23,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1065,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1066,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1074,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1083,            this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1084,        },2,0,0,0,1,0,4,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,100,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,166,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,177,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,178,        if (d != n) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,179,"            throw new DimensionMismatchException(d, n);",6,2,1,1,2,0,0,2,0,19,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,190,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,207,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,208,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,209,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0,0,0,0,1,0,0,0,0,1,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,212,        if ((end < 0) || (end >= dim)) {,6,3,0,3,7,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,213,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",2,1,1,0,1,0,0,0,0,7,61,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,216,        if (end < start) {,6,1,0,1,3,0,0,0,0,9,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,218,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,1,1,0,1,0,0,0,0,8,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,233,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,234,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,235,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,236,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,237,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,238,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,239,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,240,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,241,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,254,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,255,        RealVector result = v.mapMultiply(-1d);,2,0,0,1,2,0,4,2,0,9,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,256,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,257,        while (it.hasNext()) {,2,1,0,2,5,0,4,0,0,7,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,258,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,259,            final int index = e.getIndex();,2,0,0,1,2,1,12,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,260,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,261,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,262,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,273,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,284,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,285,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,287,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,306,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,307,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,308,        final int n = getDimension();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,309,        for (int i = 0; i < n; i++) {,6,1,0,1,3,0,0,0,0,8,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,        final int r = (k + w - 1) / w;,0,0,0,1,2,0,0,0,0,3,30,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,4,1,0,0,0,0,8,0,0,14,16,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,2,1,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,109,        i2   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,10,4,1,1,2,0,0,0,0,17,18,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,8,6,1,2,4,0,0,0,0,27,26,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,4,1,0,1,2,0,0,0,0,5,14,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,    },4,1,0,0,1,0,12,0,0,17,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0,0,0,1,3,0,4,0,0,4,19,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,161,        if (seed.length < v.length) {,4,1,0,1,3,0,0,0,0,5,29,9,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,163,                final long l = v[i - seed.length];,10,1,1,1,2,1,4,0,0,18,34,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,39,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,170,    },10,2,0,0,1,0,0,2,0,14,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,6,0,0,14,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,165,        nextGaussian = Double.NaN;,0,0,0,0,0,0,0,0,0,0,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,128,    public RandomDataGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,115,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,118,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,129,    },0,0,0,0,1,0,4,0,0,4,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,108,    public RandomDataImpl() {,22,7,1,1,3,2,2,0,0,39,25,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,109,        delegate = new RandomDataGenerator();,0,0,0,1,2,0,0,0,0,3,37,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,110,    },4,1,0,0,1,0,0,0,0,5,1,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,55,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,70,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,71,        random = rng;,10,1,0,0,0,0,0,0,0,13,13,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,253,            final int n = (int) FastMath.floor(x - 1.5);,0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,254,            double prod = 1.0;,2,0,0,0,0,0,4,0,0,7,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,255,            for (int i = 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,256,                prod *= x - i;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,258,            return logGamma1p(x - (n + 1)) + FastMath.log(prod);,0,0,0,3,6,1,0,0,0,10,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,602,                ret = (t / x) * ((c - 0.5) - 0.5);,0,0,0,3,6,0,0,0,0,9,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,4,0,0,1,2,0,0,0,0,5,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1365,            return y * x;,4,1,1,0,0,1,4,0,0,13,13,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,64,"        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,65,    },16,2,0,0,1,0,0,0,0,20,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,77,"        this(new  Well19937c(), lower, upper, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,58,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,252,        } else if (x <= 8.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,95,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,96,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,102,        this.lower = lower;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,103,        this.upper = upper;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,104,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1348,            final double xpa = 1 + x;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1349,            final double xpb = -(xpa - 1 - x);,0,0,0,1,2,0,0,0,0,3,34,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1351,            final double[] hiPrec = new double[2];,2,0,0,2,4,1,0,0,0,3,38,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1352,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,74,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1359,            final double fx1 = xpb / xpa;,8,1,0,0,0,0,0,0,0,11,29,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1360,            final double epsilon = 0.5 * fx1 + 1;,4,2,0,0,0,1,0,0,0,7,37,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,65,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",6,0,0,0,1,0,0,0,0,6,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,86,"        this(new Well19937c(), numeratorDegreesOfFreedom,",2,0,0,1,3,0,0,2,0,4,49,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,108,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,49,    private double numericalVariance = Double.NaN;,28,3,0,0,0,2,10,0,0,44,46,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,51,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,110,        if (numeratorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,37,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,114,        if (denominatorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,39,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,118,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,119,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,120,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,0,2,4,0,0,0,0,6,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,205,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,604,                ret = x * c;,6,1,0,0,0,0,0,0,0,8,12,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3306,        if (x != x) { // NaN,6,1,0,1,3,0,0,2,0,9,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,10,0,0,10,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,1,68,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,73,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,104,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,251,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,178,                        d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,179,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,182,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0,0,0,0,0,0,0,0,0,0,13,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,0,2,5,0,0,0,0,7,93,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,34,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,24,2,0,1,2,0,6,0,0,35,13,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3250,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3254,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3258,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,12,1,0,1,2,0,0,4,0,19,12,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,3,4,2,0,25,52,1,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,65,        this.throwable = throwable;,0,0,0,0,0,0,0,0,0,0,27,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,6,1,0,1,2,0,0,0,0,7,46,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,4,0,0,2,4,0,0,4,0,9,43,3,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },2,0,0,0,1,0,0,2,0,4,1,9,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,0,2,4,0,10,0,0,13,46,0,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,3,0,0,0,5,50,2,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,44,            for (Object o : array) {,0,0,0,1,3,0,4,0,0,4,24,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },2,0,0,0,1,0,0,0,0,2,1,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,1,0,5,10,0,6,0,0,12,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",8,4,1,2,4,0,0,0,0,14,74,5,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,3,0,1,2,0,0,0,0,7,41,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,0,0,1,2,0,0,0,0,8,95,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,1,0,1,2,0,4,0,0,8,60,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,3,0,0,0,15,54,1,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",6,0,0,4,8,0,0,4,0,10,108,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",14,3,0,1,2,0,2,0,0,21,89,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,0,0,1,2,0,0,0,0,8,100,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,1,0,0,0,3,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,8,0,0,11,84,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,0,0,2,4,0,2,0,0,6,78,7,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,4,2,0,9,72,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0,0,0,3,6,0,0,0,0,9,39,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",4,0,0,1,2,0,0,0,0,5,94,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",14,3,0,1,2,0,0,0,0,19,49,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",8,4,0,5,10,0,0,0,0,13,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",4,0,0,2,4,0,0,0,0,5,88,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,6,0,0,6,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,0,0,0,1,3,0,0,0,0,4,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,0,0,0,1,2,0,0,0,0,3,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,1,2,5,0,2,0,0,8,38,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,513,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",2,0,0,2,5,3,6,0,0,11,28,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,6,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,2,0,0,0,0,0,2,0,0,5,20,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,4,0,0,0,0,0,0,2,0,6,22,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,14,2,0,3,7,1,0,0,0,18,83,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,4,1,0,1,3,0,0,0,0,5,23,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,6,1,0,0,0,0,0,0,16,11,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,0,2,4,1,10,0,0,14,63,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",2,0,0,1,2,1,8,0,0,11,46,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,10,3,0,0,0,1,0,0,0,14,33,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",2,0,0,1,2,1,8,0,0,11,48,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,103,                if (cmp == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,105,                } else if (cmp < 0) {,0,0,0,1,4,0,0,0,0,5,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,4,1,1,1,2,0,0,4,0,15,45,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,153,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,165,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,167,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,169,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,12,0,0,14,55,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,175,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,1,8,0,0,11,56,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,181,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,2,0,0,0,0,1,0,2,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,446,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,2,1,1,2,5,0,0,0,0,8,38,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",4,2,0,2,4,0,16,0,0,22,96,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,4,1,0,2,5,3,6,0,0,14,46,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,6,0,1,0,0,0,0,0,0,9,13,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",2,0,0,1,2,0,12,0,0,15,40,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,471,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,486,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,529,        return getWidth() - 1;,0,0,0,1,2,1,0,0,0,4,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,62,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,69,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,6,3,0,2,4,0,8,0,0,18,68,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,70,    },4,2,0,0,1,0,0,0,0,6,1,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,88,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,89,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,90,        } else if (x < y) {,8,2,1,1,4,0,0,0,0,13,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,264,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,300,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,301,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,304,        if (xInt < 0) {,4,3,1,1,3,0,0,0,0,16,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,305,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,307,        if (yInt < 0) {,2,1,1,1,3,0,0,0,0,6,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,311,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,313,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,4,0,0,9,49,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,235,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,10,47,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,4,0,0,4,25,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,43,        return getDefaultNumberFormat(Locale.getDefault());,14,3,0,2,4,1,6,0,0,23,51,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,53,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,59,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,379,"        checkRowIndex(m, row);",8,2,1,1,2,1,6,0,0,24,22,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,380,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,381,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,391,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,396,    },2,0,0,0,1,0,0,2,0,5,1,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,406,        if (column < 0 || column >= m.getColumnDimension()) {,10,3,0,2,5,0,4,2,0,22,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,410,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,56,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,58,    },6,1,1,0,1,1,0,0,0,10,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,255,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,303,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,61,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,62,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,65,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,43,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,46,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,87,    },4,0,0,0,1,1,0,0,0,6,1,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,103,"    public ArrayRealVector(double[] d, boolean copyArray) {",12,0,0,2,5,1,4,2,0,20,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,104,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,107,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,42,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,601,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,713,        return data.clone();,2,0,0,1,2,1,4,0,0,7,20,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,743,        if (data.length != n) {,6,1,1,1,3,0,0,0,0,13,23,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,746,    },6,1,1,0,1,0,0,0,0,10,1,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,38,public class ArrayRealVector extends RealVector implements Serializable {,0,0,0,0,1,0,0,0,0,1,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",10,0,0,0,1,0,0,2,0,12,76,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,133,                            final NumberFormat format) {,12,2,0,0,2,1,4,2,0,23,28,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,137,        this.rowSuffix         = rowSuffix;,6,0,0,0,0,0,0,0,0,8,35,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,138,        this.rowSeparator      = rowSeparator;,10,0,0,0,0,1,0,0,0,12,38,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,143,    },10,5,1,0,1,0,0,0,0,20,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,207,        return format;,10,0,0,0,0,1,0,2,0,13,14,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,1,0,1,2,0,4,2,0,12,64,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,109,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,112,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,113,        this.format      = format;,10,3,0,0,0,0,0,0,0,14,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,28,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,31,"    MAXIMIZE,",2,1,1,0,0,0,0,0,0,10,9,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,34,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04,0,0,-1
