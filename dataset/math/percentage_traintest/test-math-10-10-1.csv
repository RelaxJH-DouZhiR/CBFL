dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,1,0,0,0,1,4,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,10,0,0,0,0,3,0,0,0,15,10,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,0,0,2,4,0,6,0,0,13,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,8,1,0,0,0,0,16,0,0,27,15,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,14,1,1,1,2,0,0,2,0,22,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0,0,0,0,0,0,0,0,0,0,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,0,0,0,0,3,25,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,796,        final double[] reciprocal = new double[getSize()];,2,0,0,3,6,1,8,0,0,11,50,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,797,"        pow(rhs, lhsOffset, -1, reciprocal, 0);",2,0,0,1,2,0,8,0,0,11,39,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,798,"        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",4,0,0,1,2,0,0,0,0,5,62,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,799,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,894,            final double inv = 1.0 / operand[operandOffset];,2,1,1,1,2,1,0,0,0,8,48,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,895,"            double xk = FastMath.pow(inv, -n);",2,0,1,1,2,1,0,0,0,9,34,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,896,            for (int i = 0; i <= order; ++i) {,8,2,0,1,3,0,8,0,0,19,34,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,897,                function[i] = xk;,2,0,1,1,2,0,0,0,0,7,17,8,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,898,                xk *= inv;,14,1,0,0,0,0,4,0,0,21,10,0,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,950,            function[0] = FastMath.sqrt(operand[operandOffset]);,0,0,1,3,6,0,4,0,0,11,52,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,951,            xk          = 0.5 / function[0];,2,1,1,1,2,0,0,0,0,6,32,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,872,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,881,        double[] function = new double[1 + order];,2,2,1,2,4,0,0,0,0,6,42,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,883,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,902,        double coefficient = n;,0,0,0,0,0,0,0,0,0,0,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,903,        for (int i = 1; i <= order; ++i) {,12,3,0,1,3,0,0,0,0,18,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,904,            function[i] *= coefficient;,2,0,1,1,2,0,0,0,0,7,27,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,905,            coefficient *= n - i;,14,2,0,0,0,2,0,0,0,19,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,909,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,12,0,0,12,64,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,911,    },2,0,0,0,1,1,8,2,0,13,1,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,947,        double[] function = new double[1 + order];,4,1,0,2,4,0,6,0,0,11,42,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,949,        if (n == 2) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,959,        final double nReciprocal = 1.0 / n;,0,0,0,0,0,0,0,0,0,0,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,960,        final double xReciprocal = 1.0 / operand[operandOffset];,0,0,0,1,2,0,0,0,0,3,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,961,        for (int i = 1; i <= order; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,962,            function[i] = xk;,0,0,1,1,2,0,4,0,0,6,17,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,963,            xk *= xReciprocal * (nReciprocal - i);,12,4,0,1,2,0,4,0,0,21,38,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,967,"        compose(operand, operandOffset, function, result, resultOffset);",4,2,1,1,2,0,12,0,0,23,64,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,969,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1615,        } else if (e < 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1622,        final int splitFactor = 0x8000001;,2,0,1,0,0,1,10,0,0,22,34,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1623,        final double cd       = splitFactor * d;,0,0,0,0,0,0,0,0,0,0,40,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1624,        final double d1High   = cd - (cd - d);,2,0,0,1,2,0,0,0,0,2,38,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1625,        final double d1Low    = d - d1High;,6,1,0,0,0,1,0,0,0,8,35,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1628,        double resultHigh = 1;,2,0,0,0,0,0,0,0,0,2,22,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1629,        double resultLow  = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1632,        double d2p     = d;,10,1,0,0,0,0,2,0,0,14,19,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1633,        double d2pHigh = d1High;,6,0,0,0,0,0,0,0,0,7,24,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1634,        double d2pLow  = d1Low;,4,0,0,0,0,0,0,0,0,4,23,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1636,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1638,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1641,                final double tmpHigh = resultHigh * d2p;,8,1,0,0,0,1,0,0,0,11,40,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1642,                final double cRH     = splitFactor * resultHigh;,0,0,0,0,0,0,0,0,0,0,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1643,                final double rHH     = cRH - (cRH - resultHigh);,0,0,0,1,2,0,0,0,0,3,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1644,                final double rHL     = resultHigh - rHH;,6,1,0,0,0,1,0,0,0,8,40,8,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,28,14,1,3,6,1,0,0,0,48,99,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1646,                resultHigh = tmpHigh;,0,0,1,0,0,0,4,0,0,6,21,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1647,                resultLow  = resultLow * d2p + tmpLow;,18,3,0,0,0,0,0,0,0,23,38,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1652,            final double tmpHigh = d2pHigh * d2p;,0,0,0,0,0,0,0,0,0,0,37,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1653,            final double cD2pH   = splitFactor * d2pHigh;,6,1,0,0,0,1,0,0,0,8,45,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,1,1,1,2,0,4,0,0,11,49,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1655,            final double d2pHL   = d2pHigh - d2pHH;,6,1,0,0,0,1,0,0,0,8,39,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,20,8,0,3,6,1,0,0,0,29,107,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1657,            final double cTmpH   = splitFactor * tmpHigh;,2,0,0,0,0,1,4,2,0,9,45,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0,0,0,1,2,0,4,0,0,4,36,7,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0,0,0,1,2,0,0,0,0,3,54,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1660,            d2p     = d2pHigh + d2pLow;,8,1,0,0,0,3,0,0,0,13,27,1,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1662,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1664,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1666,        return resultHigh + resultLow;,4,1,0,0,0,1,0,0,0,5,30,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,315,        final int vSize = valueCompiler.lowerIndirection.length;,16,2,0,0,0,2,0,0,0,20,56,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,316,        final int dSize = derivativeCompiler.lowerIndirection.length;,8,0,0,0,0,1,0,0,0,9,61,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,317,        final int[] lowerIndirection = new int[vSize + dSize];,6,1,0,2,4,1,0,0,0,8,54,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,318,"        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",0,0,0,1,2,0,0,0,0,3,80,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,319,        for (int i = 0; i < dSize; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,320,            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];,0,0,0,3,6,0,0,0,0,9,95,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,323,        return lowerIndirection;,2,0,0,0,0,1,0,0,0,2,24,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,373,                            termJ[0] += termK[0];,0,0,1,2,4,0,0,0,0,5,21,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,375,                            termK[0] = 0;,0,0,1,1,2,0,0,0,0,3,13,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,441,"                    derivedTermF[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,450,                    int[] derivedTermG = new int[term.length];,6,0,0,2,4,0,0,0,0,6,42,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,451,                    derivedTermG[0] = term[0];,0,0,0,2,4,0,0,0,0,6,26,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,452,                    derivedTermG[1] = term[1];,0,0,1,2,4,0,0,0,0,5,26,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,453,                    for (int j = 2; j < term.length; ++j) {,10,1,0,1,3,0,0,0,0,12,39,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,456,"                        derivedTermG[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,459,                        if (j == l) {,6,1,0,1,3,0,0,0,0,8,13,0,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,461,"                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",0,0,0,3,6,0,0,0,0,9,84,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,462,                            orders[parameters - 1]++;,2,1,1,1,2,0,0,0,0,6,25,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,463,"                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",2,0,1,2,4,1,10,0,0,18,78,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,466,"                    Arrays.sort(derivedTermG, 2, derivedTermG.length);",4,0,0,1,2,0,6,0,0,10,50,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,467,                    row.add(derivedTermG);,6,0,0,1,2,0,6,0,0,13,22,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,478,                        final int[] termK = row.get(k);,2,0,0,2,4,1,6,0,0,9,31,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,479,                        boolean equals = termJ.length == termK.length;,10,1,0,0,0,0,0,0,0,11,46,13,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,480,                        for (int l = 1; equals && l < termJ.length; ++l) {,0,0,0,1,3,0,0,0,0,4,50,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,483,                        if (equals) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,603,        int[] orders = new int[destP];,2,0,1,2,4,0,0,0,0,4,30,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,604,"        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",0,0,0,3,6,0,6,0,0,6,92,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,605,"        return getPartialDerivativeIndex(destP, destO, destSizes, orders);",0,0,0,1,2,1,0,0,0,4,66,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,771,        for (int i = 0; i < multIndirection.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,772,            final int[][] mappingI = multIndirection[i];,0,0,0,3,6,0,0,0,0,9,44,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,773,            double r = 0;,2,0,0,0,0,0,4,0,0,6,13,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,774,            for (int j = 0; j < mappingI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,43,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,775,                r += mappingI[j][0] *,8,2,1,2,4,1,4,2,0,22,21,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,779,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,10,29,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1712,        for (int i = 0; i < compIndirection.length; ++i) {,12,1,0,1,3,0,6,0,0,21,50,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1713,            final int[][] mappingI = compIndirection[i];,2,0,1,3,6,1,0,0,0,7,44,6,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1714,            double r = 0;,6,0,0,0,0,0,0,0,0,6,13,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1715,            for (int j = 0; j < mappingI.length; ++j) {,12,3,0,1,3,0,0,0,0,16,43,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1716,                final int[] mappingIJ = mappingI[j];,2,0,1,2,4,1,0,0,0,7,36,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1717,                double product = mappingIJ[0] * f[mappingIJ[1]];,2,1,1,3,6,0,0,0,0,9,48,9,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1718,                for (int k = 2; k < mappingIJ.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1719,                    product *= operand[operandOffset + mappingIJ[k]];,6,1,1,2,4,0,0,0,0,14,49,1,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1721,                r += product;,0,0,0,0,0,0,0,0,0,0,13,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1723,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,15,29,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,737,        for (int i = 0; i < getSize(); ++i) {,6,1,0,2,5,0,2,0,0,10,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,738,            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];,12,4,1,3,6,0,0,0,0,23,67,6,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,740,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.00813,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1760,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0068,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1757,        if (order != compiler.order) {,6,1,0,1,3,0,0,0,0,7,30,4,0.00676,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1754,        if (parameters != compiler.parameters) {,6,1,0,1,3,0,0,0,0,7,40,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,231,        return data[0];,0,0,0,1,2,1,0,0,0,4,15,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,119,"            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;",0,0,1,3,6,0,10,0,0,13,59,6,0.00463,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,117,        if (order > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00459,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00459,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,111,"        this(parameters, order, value);",4,0,0,1,2,0,0,0,0,5,31,4,0.00457,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,113,        if (index >= parameters) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,192,                return cache[parameters][order];,0,0,1,2,4,1,0,0,0,6,32,9,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,92,"        this(parameters, order);",4,0,0,1,2,0,0,0,0,4,24,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,93,        this.data[0] = value;,4,0,0,1,2,0,0,0,0,5,21,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,72,    private DerivativeStructure(final DSCompiler compiler) {,4,0,0,1,3,2,0,2,0,8,56,2,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,73,        this.compiler = compiler;,4,0,0,0,0,0,0,0,0,5,25,4,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,74,        this.data     = new double[compiler.getSize()];,4,0,0,2,4,3,4,4,0,22,47,1,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,75,    },0,0,1,0,1,0,6,0,0,10,1,7,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,82,"        this(DSCompiler.getCompiler(parameters, order));",0,0,0,2,4,0,8,0,0,8,48,5,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,190,            if (cache[parameters][order] != null) {,0,0,0,3,7,0,0,0,0,10,39,4,0.00446,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,243,                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];,6,4,1,6,12,0,0,0,0,23,79,8,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,266,        final int vSize = valueCompiler.derivativesIndirection.length;,8,0,0,0,0,1,0,0,0,9,62,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,267,        final int dSize = derivativeCompiler.derivativesIndirection.length;,8,0,1,0,0,1,0,0,0,14,67,3,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,268,        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];,14,4,0,4,8,0,0,0,0,19,74,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,271,        for (int i = 0; i < vSize; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,273,"            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,",0,0,0,1,3,0,0,0,0,4,60,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,279,        for (int i = 0; i < dSize; ++i) {,6,3,0,1,3,0,0,0,0,10,33,8,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,282,"            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,",4,0,1,1,3,0,4,0,0,10,65,7,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,287,            derivativesIndirection[vSize + i][parameters - 1]++;,0,0,0,2,4,0,0,0,0,6,52,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0,0,0,1,2,0,0,0,0,3,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0,0,0,3,6,0,0,0,0,9,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0,0,0,2,4,0,0,0,0,6,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,8,47,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,10,2,0,2,4,1,0,0,0,14,61,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,12,4,0,2,4,0,16,0,0,34,65,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,4,2,1,1,3,0,0,0,0,15,15,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,2,0,0,2,4,2,0,0,0,3,51,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },2,1,0,0,1,0,0,0,0,3,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",14,1,1,1,2,0,0,0,0,20,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,11,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,12,1,1,1,2,0,0,0,0,17,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,2,1,2,4,0,0,0,0,15,65,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,2,0,1,1,3,0,0,2,0,9,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0,0,0,6,12,0,0,0,0,18,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0,0,0,0,1,0,0,0,0,1,88,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,4,0,0,0,1,0,0,0,0,5,37,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },6,1,0,0,1,0,0,0,0,7,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,16,0,0,16,55,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,19,41,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,8,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,14,50,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,8,1,0,0,0,3,4,0,0,16,15,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",14,1,0,2,4,0,0,0,0,17,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,0,0,1,2,0,10,0,0,13,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,18,4,0,1,2,1,2,0,0,26,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },2,0,0,0,1,0,4,0,0,7,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,1,1,2,1,6,2,0,16,50,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,10,63,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,0,0,0,0,0,1,6,0,0,6,11,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,0,0,0,0,2,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,0,0,1,2,1,2,0,0,5,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,8,1,1,1,2,1,0,0,0,13,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0,0,0,0,1,0,6,0,0,6,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,4,1,1,2,0,8,0,0,34,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,10,1,0,1,3,0,0,0,0,13,35,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,10,0,0,15,68,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,0,4,0,0,23,56,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",4,0,0,1,2,0,4,0,0,9,23,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,6,0,0,11,36,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,20,0,0,1,2,0,2,0,0,23,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",4,0,0,1,2,1,0,2,0,6,39,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",2,0,1,1,2,1,0,0,0,7,64,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },6,3,0,0,1,0,8,0,0,17,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,10,2,0,0,0,0,0,0,0,13,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",14,3,0,1,2,0,10,0,0,28,33,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },4,0,0,0,1,0,0,0,0,5,1,12,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,4,2,0,11,50,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,2,0,9,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,8,2,0,0,0,1,0,0,0,11,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,4,0,1,0,0,1,0,0,0,7,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,8,2,0,0,0,1,6,0,0,18,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,0,8,0,0,20,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0,0,0,1,4,0,0,0,0,5,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,0,0,0,0,0,0,0,0,0,0,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,4,0,0,2,5,0,2,0,0,8,23,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,12,0,0,22,29,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,0,0,0,3,6,0,0,0,0,9,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,3,1,1,2,0,0,0,0,14,85,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,0,10,0,0,12,104,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,10,1,0,1,3,1,4,0,0,17,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,16,4,0,0,0,2,8,0,0,32,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",4,3,0,1,2,1,14,0,0,22,47,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,0,0,4,22,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,8,1,0,0,1,0,0,0,0,11,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,6,1,0,0,0,1,0,0,0,8,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,0,2,4,0,0,0,0,6,102,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,8,5,0,1,3,0,0,0,0,13,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },2,1,1,0,1,0,12,0,0,19,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,6,0,1,2,4,2,2,4,0,17,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,6,0,0,1,3,0,4,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0,0,0,0,0,0,0,0,0,0,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,6,1,0,0,0,1,0,0,0,8,19,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,8,1,0,2,5,0,2,0,0,11,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0,0,0,1,2,1,0,0,0,4,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,10,0,0,17,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,4,0,1,1,3,0,0,0,0,27,27,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0,0,0,1,2,0,0,0,0,3,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,8,0,0,11,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,4,0,1,2,4,1,0,0,0,8,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,48,18,1,2,4,0,0,2,0,75,43,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },2,0,0,0,1,0,0,0,0,3,1,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,6,0,0,9,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,4,0,0,0,0,1,0,0,0,5,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,70,        random = null;,4,0,0,0,0,1,2,0,0,8,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,76,    protected AbstractRealDistribution(RandomGenerator rng) {,4,0,0,1,3,1,0,2,0,7,57,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,91,"        return probability(x0, x1);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,112,        if (x0 > x1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,157,        if (p < 0.0 || p > 1.0) {,10,4,0,1,3,0,0,0,0,14,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,158,"            throw new OutOfRangeException(p, 0, 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,161,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,162,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,163,            return lowerBound;,16,3,1,0,0,1,0,0,0,21,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,167,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,168,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,171,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,12,2,0,2,5,0,12,0,0,29,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,178,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,181,                lowerBound = -1.0;,10,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,182,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,183,                    lowerBound *= 2.0;,8,0,1,0,0,1,0,0,0,12,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,188,        if (upperBound == Double.POSITIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,189,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,192,                upperBound = 1.0;,4,0,0,0,0,0,0,0,0,5,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,194,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,206,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,211,        if (!isSupportConnected()) {,6,3,0,2,5,0,2,0,0,12,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,213,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,215,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,216,                if (cumulativeProbability(x - dx) == px) {,6,2,0,2,5,0,2,0,0,10,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,217,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,218,                    while (upperBound - lowerBound > dx) {,8,2,0,1,3,0,0,0,0,10,38,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,220,                        if (cumulativeProbability(midPoint) < px) {,10,3,0,2,5,1,8,0,0,22,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,221,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,225,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,226,                    return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,247,        randomData.reSeed(seed);,6,1,0,1,2,0,6,0,0,14,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,248,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,269,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,0,0,5,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,0,0,0,1,0,0,2,0,9,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,273,        double[] out = new double[sampleSize];,4,0,1,2,4,1,0,0,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,277,        return out;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,108,"            throw new DimensionMismatchException(covariances.length, dim);",6,0,0,1,2,0,0,2,0,8,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,113,"                throw new DimensionMismatchException(covariances[i].length, dim);",6,0,1,2,4,0,0,2,0,12,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,134,"                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",2,0,1,2,4,0,0,2,0,8,73,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,173,        return covarianceMatrix.copy();,6,1,0,1,2,1,4,0,0,12,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,180,"            throw new DimensionMismatchException(vals.length, dim);",6,0,0,1,2,0,0,2,0,8,55,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,195,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,196,        final double[] std = new double[dim];,2,0,1,2,4,1,0,0,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,197,        final double[][] s = covarianceMatrix.getData();,2,0,0,3,6,1,4,0,0,7,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,198,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,199,            std[i] = FastMath.sqrt(s[i][i]);,12,1,0,4,8,0,6,0,0,21,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,201,        return std;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,206,        final int dim = getDimension();,4,1,0,1,2,1,2,0,0,8,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,207,        final double[] normalVals = new double[dim];,2,0,1,2,4,1,0,0,0,5,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,209,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,10,0,0,10,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,210,            normalVals[i] = random.nextGaussian();,2,0,1,2,4,0,4,0,0,13,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,213,        final double[] vals = samplingMatrix.operate(normalVals);,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,215,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,216,            vals[i] += means[i];,10,2,1,2,4,0,0,0,0,23,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,219,        return vals;,6,2,0,0,0,1,0,2,0,10,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,48,        random.setSeed(seed);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,61,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,62,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",10,2,0,0,1,0,0,2,0,15,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,65,        final double[][] out = new double[sampleSize][dimension];,0,0,0,4,8,0,0,0,0,12,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,66,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,67,            out[i] = sample();,2,0,1,2,4,0,2,12,0,21,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,69,        return out;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,38,"        super(value, 0, false);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,39,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,48,"        super(specific, value, 0, false);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,49,    },2,0,0,0,1,0,0,0,0,2,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,54,    },2,1,1,0,1,0,0,0,0,7,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,71,        this.boundIsAllowed = boundIsAllowed;,10,1,0,0,0,0,0,0,0,13,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,72,    },10,1,0,0,1,0,0,0,0,12,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,46,"        super(pattern, wrong, arguments);",12,1,0,1,2,0,0,0,0,13,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,47,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,44,                                        Object ... args) {,8,0,0,0,2,0,0,0,0,9,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,45,        dimension = expected;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",2,0,1,1,2,0,0,0,0,5,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,47,"        super(wrong, threshold, false);",4,0,0,1,2,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,48,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,49,        this.threshold = threshold;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,51,        final ExceptionContext context = getContext();,2,0,0,1,2,1,2,2,0,7,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,52,        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);,4,0,0,1,2,0,4,0,0,8,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,53,"        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,60,        return index;,2,0,0,0,0,1,0,2,0,4,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,66,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,72,        return threshold;,10,2,0,0,0,1,2,0,0,15,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,36,        super(LocalizedFormats.SINGULAR_MATRIX);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,59,"        this(0, 1);",0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",12,2,0,2,4,0,0,2,0,16,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,87,    },4,0,0,0,1,0,0,0,0,5,1,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,104,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,106,        if (sd <= 0) {,12,4,0,1,3,1,0,0,0,17,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,107,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,110,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,111,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,112,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,113,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,44,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,46,    private static final double SQRT2 = FastMath.sqrt(2.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,121,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,130,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,135,        final double x0 = x - mean;,8,1,0,0,0,1,0,0,0,10,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,136,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,137,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,8,3,0,2,4,1,4,0,0,16,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,148,        final double dev = x - mean;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,149,        if (FastMath.abs(dev) > 40 * standardDeviation) {,12,2,0,2,5,3,6,2,0,25,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,150,            return dev < 0 ? 0.0d : 1.0d;,0,0,0,0,0,1,0,0,0,1,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,152,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,6,4,0,3,6,1,4,0,0,14,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,163,"        return probability(x0, x1);",6,1,0,1,2,2,6,0,0,14,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0,0,0,4,8,0,0,0,0,12,71,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,0,0,0,0,0,0,0,0,0,0,28,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,101,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,103,            final double x = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,104,            final double y = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,0,0,2,4,1,0,0,0,3,58,2,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,107,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,108,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,109,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,6,0,0,0,0,0,0,0,0,7,22,3,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,0,0,1,0,0,0,2,0,0,5,26,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,8,2,0,0,0,4,8,0,0,22,14,1,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,8,1,0,0,0,4,0,0,0,13,17,1,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,6,0,0,1,3,0,0,2,0,8,12,7,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,8,0,0,0,0,0,2,10,0,20,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2307,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,6,1,0,0,0,3,0,0,0,10,10,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1824,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1825,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1841,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,0,0,0,0,3,39,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1842,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1844,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1845,        double b = -(a - pi2a + xa);,8,0,0,1,2,1,0,0,0,10,28,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1846,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1848,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2226,        boolean negative = false;,14,2,0,0,0,0,0,0,0,17,25,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2227,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2229,        double xb = 0.0;,6,1,1,0,0,1,0,0,0,12,16,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2232,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2233,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2239,        if (xa == 0.0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2252,        if (xa > 3294198.0) {,8,1,0,1,3,0,14,0,0,24,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2268,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2272,        switch (quadrant) {,2,0,0,1,3,0,2,2,0,6,19,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1717,        int idx = (int) ((xa * 8.0) + 0.5);,6,2,0,3,6,0,0,0,0,9,35,0,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1721,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1722,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,0,2,0,4,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1723,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1724,        final double costB = COSINE_TABLE_B[idx];,6,0,1,1,2,1,6,0,0,17,41,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1727,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1728,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1729,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1730,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1733,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1734,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1735,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1736,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1762,        double a = 0;,2,0,0,0,0,0,6,0,0,8,13,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1763,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1765,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1766,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1767,        double d = -(c - a - t);,12,2,0,1,2,0,0,0,0,15,24,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1768,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1769,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1771,        t = costA * sinEpsA;,2,0,0,0,0,0,2,0,0,4,20,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1772,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1773,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1774,        a = c;,0,0,0,0,0,0,8,0,0,8,6,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1775,        b = b + d;,10,2,0,0,0,0,0,0,0,14,10,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,6,0,0,31,68,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1819,        if (xb != 0.0) {,4,1,0,1,3,0,0,2,0,7,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1828,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1830,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1678,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1680,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1681,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1682,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1683,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1686,        p = p * x2 * x;,6,0,0,0,0,3,0,0,0,9,15,2,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1688,        return p;,6,1,1,0,0,2,0,0,0,13,9,3,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1698,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1700,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1701,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1702,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1703,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1704,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1706,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,256,        return standardDeviation * random.nextGaussian() + mean;,0,0,0,1,2,1,4,0,0,5,56,9,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,89,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,0.08654,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2332,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.07843,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2262,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2263,            quadrant = cw.getK() & 3;,4,1,0,1,2,0,4,0,0,11,25,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2264,            xa = cw.getRemA();,4,0,0,1,2,1,4,6,0,16,18,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2265,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2317,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2318,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2319,            xa = cw.getRemA();,2,0,0,1,2,0,14,0,0,17,18,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2320,            xb = cw.getRemB();,6,0,0,1,2,1,4,0,0,12,18,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2278,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.07547,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3808,        CodyWaite(double xa) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3811,            int k = (int)(xa * 0.6366197723675814);,6,2,0,2,4,0,0,0,0,8,39,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3817,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3818,                remA = xa + a;,16,5,0,0,0,0,0,0,0,22,14,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3819,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3821,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3822,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3823,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3824,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3826,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3827,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3828,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3829,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3831,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3832,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3841,            this.finalK = k;,4,0,0,0,0,0,0,0,0,5,16,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3842,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3843,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3844,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3850,            return finalK;,4,0,0,0,0,1,0,0,0,5,14,0,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3856,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3862,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,98,"        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,112,"        this(new Well19937c(), scale, shape, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,57,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,113,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,130,        super(rng);,4,0,0,1,2,1,0,0,0,5,11,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,132,        if (shape <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,136,        this.scale = scale;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,137,        this.shape = shape;,0,0,0,0,0,0,0,0,0,0,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,138,        this.solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,139,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,64,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,67,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,0,0,1,2,3,4,0,0,9,55,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.04245,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",12,0,0,1,2,2,0,2,0,17,50,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,53,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1297,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1299,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1301,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1302,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1303,            lnza = lnza * epsilon;,10,2,0,0,0,0,6,0,0,19,22,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1120,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.03396,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,50,    @Deprecated,0,0,0,0,0,0,0,0,0,0,11,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,76,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3777,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,3,0,5,10,1,12,0,0,28,79,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1242,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1244,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1322,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1323,        double d = -(c-a-lnm[0]);,10,2,1,2,4,0,0,0,0,18,25,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1325,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1327,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1328,        d = -(c - a - lnza);,14,1,0,1,2,0,0,0,0,18,20,0,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1329,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1330,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1333,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1334,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1335,        b = b + d;,12,6,0,0,0,0,0,0,0,19,10,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1337,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1338,        d = -(c - a - lnm[1]);,8,2,1,2,4,0,2,0,0,17,22,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1339,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1340,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1342,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1344,        a = c;,6,0,0,0,0,0,0,4,0,11,6,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1345,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1347,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1352,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1178,        if (exp == -1 || exp == 0) {,6,3,0,1,3,1,0,0,0,11,28,3,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1130,        if (x==0) { // Handle special case of +0/-0,2,0,0,1,3,0,0,0,0,3,43,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1133,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1147,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0,0,0,0,1,1,0,0,0,2,32,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,        observations      = new ArrayList<WeightedObservedPoint>();,0,0,0,1,2,0,0,0,0,3,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);",0,0,0,1,2,0,0,0,0,3,41,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0,0,1,1,3,0,0,0,0,5,12,6,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0,0,0,1,2,0,0,0,0,3,95,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,0,0,0,6,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,1,0,2,4,0,0,0,0,3,104,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,        if (rows != matrix.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,10,1,0,0,0,1,0,0,0,13,12,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",6,0,0,1,2,1,0,0,0,7,22,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",10,2,0,1,2,0,6,0,0,19,28,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0,2,1,0,1,0,0,0,0,6,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,    },2,0,0,0,1,0,0,0,0,2,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",18,1,0,0,1,0,0,0,0,20,76,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0,0,0,0,1,0,0,0,0,1,73,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,3,4,0,0,18,35,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,        this.columnSeparator   = columnSeparator;,0,0,0,0,0,0,0,0,0,0,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,        return format;,0,0,0,0,0,1,0,0,0,1,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,    public DiagonalMatrix(final double[] d) {,0,0,0,2,5,0,0,0,0,7,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,        final int dim = getRowDimension();,0,0,0,1,2,0,0,0,0,3,34,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,14,0,0,19,48,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,238,        return row == column ? data[row] : 0;,0,0,0,1,2,1,0,0,0,4,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,290,        return data == null ? 0 : data.length;,0,0,0,0,0,1,0,0,0,1,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0,0,0,1,2,1,2,0,0,2,25,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0,0,1,2,5,0,0,0,0,5,49,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,6,0,0,1,2,3,0,2,0,11,46,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,2,0,11,54,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,97,    },0,0,1,0,1,0,0,0,0,9,1,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,4,0,0,0,0,0,0,0,0,6,10,0,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,2,1,0,2,4,1,6,0,0,9,51,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,264,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,267,    },2,0,0,0,1,1,0,6,0,10,1,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,43,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,6,0,0,1,2,3,0,2,0,12,42,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,45,    },2,0,0,0,1,0,0,0,0,2,1,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,67,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,37,    public InitialGuess(double[] startPoint) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,26,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,39,    },0,0,0,0,1,0,4,0,0,4,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,47,        return init.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,231,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,6,0,0,1,2,0,4,0,0,11,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,235,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,239,        setUp();,0,0,0,1,2,0,2,0,0,2,8,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,260,        return weightMatrix.copy();,0,0,0,1,2,1,0,0,0,4,27,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,321,        final int dim = target.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,2,0,1,1,2,0,0,0,0,5,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0,0,1,2,4,0,8,0,0,13,40,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,326,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,343,            if (data instanceof Target) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,6,0,0,3,6,0,2,2,0,11,37,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,345,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,10,1,0,1,3,0,0,2,0,14,29,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,14,1,0,3,6,0,2,2,0,22,43,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,349,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,351,            if (data instanceof InitialGuess) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,6,0,0,0,0,2,0,2,0,11,9,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,6,0,1,2,5,1,4,0,0,16,38,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,49,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",6,0,0,2,4,1,16,0,0,22,109,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,502,        super.setUp();,0,0,0,1,2,0,0,0,0,3,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,508,        weightMatrixSqrt = squareRoot(getWeight());,0,0,0,2,4,0,0,0,0,6,43,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,562,            final EigenDecomposition dec = new EigenDecomposition(m);,0,0,0,1,2,0,0,0,0,3,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0,0,0,1,3,1,6,2,0,8,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0,0,0,1,3,1,0,0,0,5,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,2,1,0,1,3,1,12,2,0,19,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,4,0,0,1,3,1,6,2,0,12,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,53,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,62,"        this(max,",0,0,0,0,1,0,0,0,0,1,9,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,80,                       MaxCountExceededCallback cb) {,0,0,0,0,2,0,0,0,0,2,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,41,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,81,        if (cb == null){,0,0,0,1,3,0,0,0,0,4,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,0,0,2,4,0,0,0,0,4,65,7,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,101,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,134,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,4,0,0,1,2,0,0,0,0,4,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,631,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,4,0,1,2,4,1,0,2,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,638,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,644,        },6,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,652,"            return new Array2DRowRealMatrix(data, false);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,2,0,0,0,1,2,0,4,0,8,100,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,4,0,0,1,2,4,6,2,0,15,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,60,        return getExpectedDimension(0);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,2,0,0,1,2,1,2,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,10,1,0,1,2,1,0,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,74,        return expected.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,82,        return wrong[index];,0,0,1,1,2,1,0,0,0,4,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,89,        return expected[index];,0,0,1,1,2,1,0,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,44,                                        Object ... args) {,10,3,0,0,2,2,0,0,0,15,18,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,8,1,0,1,3,2,0,4,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1309,                        return i.hasNext();,0,0,0,1,2,1,4,0,0,4,19,15,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1314,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1315,                        return e;,6,1,1,0,0,1,0,0,0,12,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1326,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,0,0,0,1,3,1,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1258,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1264,                return v.map(function);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1270,                final Iterator<Entry> i = v.iterator();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1271,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1301,                final Iterator<Entry> i = v.sparseIterator();,2,0,0,1,2,1,10,4,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,4,0,0,1,3,1,0,4,0,9,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1334,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1341,                return v.add(w);,0,0,0,1,2,1,6,0,0,6,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1348,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1354,                return v.mapAdd(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1366,                throw new MathUnsupportedOperationException();,4,0,0,1,2,0,0,0,0,5,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1372,                return v.mapSubtract(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1384,                throw new MathUnsupportedOperationException();,4,0,1,1,2,2,0,6,0,15,46,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1390,                return v.mapMultiply(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1402,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,5,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1408,                return v.mapDivide(d);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1420,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1427,                return v.ebeMultiply(w);,8,1,0,1,2,1,6,0,0,16,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1434,                return v.ebeDivide(w);,4,0,0,1,2,1,6,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1441,                return v.dotProduct(w);,0,1,1,1,2,1,6,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1448,                return v.cosine(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1454,                return v.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1460,                return v.getL1Norm();,0,0,0,1,2,1,4,0,0,4,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1466,                return v.getLInfNorm();,8,2,0,1,2,1,4,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1473,                return v.getDistance(w);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1480,                return v.getL1Distance(w);,0,0,0,1,2,1,6,0,0,6,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1487,                return v.getLInfDistance(w);,2,0,0,1,2,2,10,0,0,14,28,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1493,                return v.unitVector();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1504,                throw new MathUnsupportedOperationException();,2,2,0,1,2,0,0,0,0,4,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1510,                return v.outerProduct(w);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1516,                return v.getEntry(index);,4,1,0,1,2,1,6,0,0,11,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1528,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,9,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1540,                throw new MathUnsupportedOperationException();,0,1,1,1,2,0,0,0,0,8,46,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1546,                return v.getDimension();,12,5,0,1,2,1,4,0,0,21,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1552,                return v.append(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1558,                return v.append(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1565,"                return v.getSubVector(index, n);",0,0,0,1,2,1,8,0,0,8,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1577,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1589,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1595,                return v.toArray();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1601,                return v.isNaN();,0,0,0,1,2,1,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1607,                return v.isInfinite();,6,1,0,1,2,1,4,0,0,12,22,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1614,"                return v.combine(a, b, y);",4,0,0,1,2,1,22,4,0,31,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1626,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1159,    @Deprecated,18,3,0,0,0,0,0,0,0,21,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,100,    },0,0,0,0,1,0,14,0,0,14,1,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,166,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,177,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,178,        if (d != n) {,14,2,0,1,3,0,0,0,0,18,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,179,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,190,        if (index < 0 ||,8,3,0,0,1,0,0,4,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,4,2,0,10,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,208,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,209,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",6,0,0,0,1,0,0,2,0,8,63,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,213,        if ((end < 0) || (end >= dim)) {,10,3,1,3,7,1,8,2,0,28,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",6,0,0,0,1,0,0,2,0,8,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,217,        if (end < start) {,6,1,0,1,3,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",4,0,0,0,1,0,0,2,0,6,81,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,222,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,234,        checkVectorDimensions(v);,4,0,0,1,2,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,235,        RealVector result = v.copy();,2,0,0,1,2,0,12,2,0,16,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,236,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,8,4,0,14,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,237,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,238,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,239,            final int index = e.getIndex();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",2,1,0,3,6,1,16,0,0,20,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,241,        },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,242,        return result;,8,0,0,0,0,1,0,2,0,11,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,255,        checkVectorDimensions(v);,6,1,0,1,2,0,4,0,0,11,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,256,        RealVector result = v.mapMultiply(-1d);,4,0,0,1,2,0,8,2,0,16,39,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,257,        Iterator<Entry> it = iterator();,10,1,0,1,2,0,2,4,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,258,        while (it.hasNext()) {,0,0,1,2,5,0,4,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,259,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,260,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,263,        return result;,12,0,0,0,0,2,0,0,0,14,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,274,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,285,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,288,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,307,        checkVectorDimensions(v);,16,3,0,1,2,0,4,0,0,25,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,308,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,309,        final int n = getDimension();,4,0,0,1,2,1,8,2,0,15,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,310,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,311,            d += getEntry(i) * v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,313,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,329,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,330,        final double vNorm = v.getNorm();,2,0,0,1,2,1,6,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,332,        if (norm == 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,336,        return dotProduct(v) / (norm * vNorm);,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,396,        checkVectorDimensions(v);,4,1,0,1,2,0,4,0,0,9,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,397,        double d = 0;,6,3,0,0,0,0,8,0,0,17,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,398,        Iterator<Entry> it = iterator();,10,0,0,1,2,0,2,4,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,399,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,400,            final Entry e = it.next();,10,2,0,1,2,1,4,2,0,19,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,4,2,0,3,6,1,18,0,0,25,60,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,402,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,403,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,404,        return FastMath.sqrt(d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,418,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,419,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,420,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,421,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,422,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,423,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,424,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,425,        return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,439,        double norm = 0;,12,3,0,0,0,0,0,0,0,17,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,440,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,441,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,442,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,443,            norm += FastMath.abs(e.getValue());,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,444,        },4,0,1,0,1,0,6,0,0,13,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,445,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,459,        double norm = 0;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,460,        Iterator<Entry> it = iterator();,8,1,0,1,2,1,2,4,0,16,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,461,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,462,            final Entry e = it.next();,4,1,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,464,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,465,        return norm;,2,0,0,0,0,1,6,0,0,8,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,481,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,482,        double d = 0;,4,1,1,0,0,0,0,0,0,14,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,483,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,484,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,485,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,487,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,488,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,507,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,0,2,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,508,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,509,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,510,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,511,            final Entry e = it.next();,2,0,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,513,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,514,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,524,        int minIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,525,        double minValue = Double.POSITIVE_INFINITY;,8,0,0,0,0,0,0,0,0,9,43,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,526,        Iterator<Entry> iterator = iterator();,4,0,0,1,2,0,4,0,0,8,38,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,527,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,528,            final Entry entry = iterator.next();,4,1,0,1,2,1,20,2,0,28,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,529,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,530,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,531,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,533,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,534,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,544,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,555,        int maxIndex    = -1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,556,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,557,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,558,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,559,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,560,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,561,                maxIndex = entry.getIndex();,2,1,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,562,                maxValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,564,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,565,        return maxIndex;,12,1,0,0,0,1,0,0,0,14,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,575,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,588,        return copy().mapMultiplyToSelf(d);,10,2,1,2,4,2,6,0,0,21,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,610,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,621,        return mapAddToSelf(-d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,632,        return copy().mapDivideToSelf(d);,4,0,0,2,4,4,6,6,0,19,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,6,0,0,7,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,653,        final int m = this.getDimension();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,654,        final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,657,"            product = new OpenMapRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,659,"            product = new Array2DRowRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,661,        for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,662,            for (int j = 0; j < n; j++) {,4,1,1,1,3,0,0,0,0,9,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,3,6,0,18,0,0,19,57,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,666,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,681,        final double norm2 = v.dotProduct(v);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,682,        if (norm2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,6,1,1,1,2,0,0,2,0,16,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,3,6,1,14,0,0,15,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,694,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,695,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,696,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,697,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,698,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,699,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,709,        int dim = getDimension();,10,2,0,1,2,0,2,0,0,15,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,710,        double[] values = new double[dim];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,711,        for (int i = 0; i < dim; i++) {,10,1,0,1,3,0,8,0,0,21,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,712,            values[i] = getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,714,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,725,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,726,        if (norm == 0) {,4,2,0,1,3,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,729,        return mapDivide(norm);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,739,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,740,        if (norm == 0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,743,        mapDivideToSelf(getNorm());,6,1,0,2,4,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,744,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,767,        return new SparseEntryIterator();,2,0,0,1,2,2,0,2,0,5,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,781,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,782,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,827,        return copy().mapToSelf(function);,0,0,0,2,4,1,6,0,0,6,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,844,        Iterator<Entry> it = iterator();,18,1,0,1,2,0,2,4,0,26,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,845,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,846,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,847,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,848,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,849,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,867,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,884,        checkVectorDimensions(y);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,885,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,886,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,887,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,888,"            setEntry(i, a * xi + b * yi);",10,3,0,1,2,0,4,0,0,17,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,890,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,904,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,905,"        visitor.start(dim, 0, dim - 1);",6,2,0,1,2,0,6,0,0,14,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,906,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,907,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,909,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,928,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,929,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,930,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,931,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,933,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,949,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,970,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,984,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,985,"        visitor.start(dim, 0, dim - 1);",6,1,0,1,2,1,10,0,0,18,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,986,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,14,0,0,14,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,989,        return visitor.end();,8,1,0,1,2,1,4,0,0,14,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1008,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1009,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1010,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1013,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1029,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1050,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1125,        throw new MathUnsupportedOperationException();,12,2,1,1,2,0,10,2,0,30,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1138,        throw new MathUnsupportedOperationException();,10,2,0,1,2,1,4,0,0,18,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,2,0,0,1,3,1,0,2,0,4,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1059,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1060,            setIndex(0);,6,1,0,1,2,0,0,0,0,8,12,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1061,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1069,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1078,"            setEntry(getIndex(), value);",0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1079,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1087,            return index;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1096,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1097,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,2,0,0,0,1,0,0,2,0,4,39,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1634,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1646,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,52,                                             Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,53,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,54,"        context.addMessage(pattern, args);",2,1,0,1,2,0,8,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,55,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,59,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,65,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,71,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,10,0,0,1,4,1,10,4,0,26,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,606,"                out.setEntry(column, row, value);",8,1,1,1,2,0,18,0,0,32,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,67,        throws NotStrictlyPositiveException {,4,2,0,0,1,0,8,0,0,15,37,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,69,            throw new NotStrictlyPositiveException(rowDimension);,6,0,0,1,2,0,6,0,0,14,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,72,            throw new NotStrictlyPositiveException(columnDimension);,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,79,"        MatrixUtils.checkAdditionCompatible(this, m);",6,0,0,1,2,3,6,0,0,15,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,82,        final int columnCount = getColumnDimension();,6,2,1,1,2,1,2,0,0,17,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,84,        for (int row = 0; row < rowCount; ++row) {,0,0,1,1,3,0,0,0,0,7,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,98,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,99,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,101,        for (int row = 0; row < rowCount; ++row) {,6,0,0,1,3,1,2,0,0,9,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,107,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,112,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,115,        for (int row = 0; row < rowCount; ++row) {,14,2,0,1,3,1,0,0,0,18,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,116,            for (int col = 0; col < columnCount; ++col) {,12,1,0,1,3,0,0,0,0,16,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,117,"                out.setEntry(row, col, getEntry(row, col) + d);",4,1,0,2,4,0,14,0,0,20,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,126,        final int rowCount    = getRowDimension();,12,1,0,1,2,0,0,0,0,15,42,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,127,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,129,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,130,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,131,"                out.setEntry(row, col, getEntry(row, col) * d);",2,1,0,2,4,0,14,0,0,17,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,135,        return out;,2,0,1,0,0,1,0,0,0,8,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",4,0,0,1,2,0,6,0,0,11,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,145,        final int nSum  = getColumnDimension();,8,1,0,1,2,1,2,0,0,12,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,147,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,150,                for (int i = 0; i < nSum; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,163,        return m.multiply(this);,2,0,0,1,2,1,12,0,0,15,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,169,        if (p < 0) {,2,1,0,1,3,0,4,0,0,7,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,173,        if (!isSquare()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",4,0,1,3,6,0,4,2,0,13,76,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,177,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,1,6,0,0,6,68,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,181,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,182,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,185,        final int power = p - 1;,4,1,0,0,0,1,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,2,0,0,3,6,1,8,0,0,11,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,4,1,0,1,2,1,0,8,0,14,69,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,196,        int maxI = -1;,26,2,1,0,0,0,0,0,0,36,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,199,            if (binaryRepresentation[i] == '1') {,0,1,1,2,5,0,0,0,0,6,37,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,200,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,201,                nonZeroPositions.add(pos);,2,0,0,1,2,0,0,0,0,2,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,204,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,205,                    maxI = pos;,4,0,0,0,0,0,0,0,0,5,11,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,4,1,0,2,4,0,0,4,0,9,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,211,        results[0] = this.copy();,0,0,1,2,4,0,2,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,213,        for (int i = 1; i <= maxI; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,214,            results[i] = results[i-1].multiply(results[i-1]);,6,2,1,4,8,0,2,0,0,24,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,217,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,219,        for (Integer i : nonZeroPositions) {,4,0,0,1,3,0,0,2,0,6,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,220,            result = result.multiply(results[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,221,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,223,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,230,        for (int i = 0; i < data.length; ++i) {,0,1,0,1,3,0,8,0,0,9,39,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,231,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,232,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,233,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,237,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,8,1,0,1,4,1,2,2,0,14,63,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,310,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,312,        for (int i = startRow; i <= endRow; ++i) {,16,2,0,1,3,0,0,0,0,20,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,313,            for (int j = startColumn; j <= endColumn; ++j) {,10,1,0,1,3,0,0,0,0,12,48,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,318,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,8,0,0,8,69,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,327,        final RealMatrix subMatrix =,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,4,1,0,1,4,0,0,0,0,5,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,339,        return subMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,349,        final int rowsCount    = endRow + 1 - startRow;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,350,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0,0,0,4,9,0,0,0,0,13,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,388,        if ((destination.length < selectedRows.length) ||,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0,0,0,1,3,0,0,0,0,4,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,394,        for (int i = 0; i < selectedRows.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,395,            final double[] destinationI = destination[i];,8,1,1,2,4,1,0,0,0,14,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,396,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,4,8,0,2,0,0,15,64,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,400,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,406,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,20,0,0,20,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,407,        final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,408,        if (nRows == 0) {,10,4,1,1,3,0,8,0,0,30,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,4,0,0,1,2,0,0,2,0,6,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,412,        final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,413,        if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,417,        for (int r = 1; r < nRows; ++r) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,418,            if (subMatrix[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",22,1,1,2,4,0,0,2,0,34,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,423,"        MatrixUtils.checkRowIndex(this, row);",14,5,0,1,2,0,6,0,0,26,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,424,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",4,2,0,1,2,0,8,0,0,14,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,428,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,429,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,433,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,437,"        MatrixUtils.checkRowIndex(this, row);",2,1,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,438,        final int nCols = getColumnDimension();,8,2,0,1,2,1,2,0,0,14,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,439,"        final RealMatrix out = createMatrix(1, nCols);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,440,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,441,"            out.setEntry(0, i, getEntry(row, i));",4,0,0,2,4,0,12,0,0,17,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,444,        return out;,4,0,0,0,0,1,0,0,0,4,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,450,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,451,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,452,        if ((matrix.getRowDimension() != 1) ||,14,5,0,2,5,0,0,0,0,20,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,1,0,1,3,0,16,2,0,19,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,458,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,459,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,470,"            out.setEntry(i, 0, getEntry(i, column));",4,1,0,2,4,0,0,0,0,5,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,473,        return out;,8,0,0,0,0,5,2,0,0,15,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,479,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,480,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,481,        if ((matrix.getRowDimension() != nRows) ||,8,2,1,2,5,0,4,0,0,17,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",2,0,0,1,3,0,0,0,0,3,68,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,487,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,2,4,0,12,0,0,12,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,490,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,495,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,501,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,502,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,503,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",6,1,0,1,3,0,4,2,0,14,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,507,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,508,"            setEntry(row, i, vector.getEntry(i));",4,3,0,2,4,0,12,0,0,19,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,510,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,515,"        return new ArrayRealVector(getColumn(column), false);",8,1,0,2,4,4,4,2,0,20,53,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,522,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",8,1,0,1,3,0,0,0,0,10,68,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,527,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,528,"            setEntry(i, column, vector.getEntry(i));",14,3,1,2,4,1,0,0,0,20,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,530,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,534,"        MatrixUtils.checkRowIndex(this, row);",14,3,0,1,2,0,6,0,0,25,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,537,        for (int i = 0; i < nCols; ++i) {,0,0,1,1,3,0,0,0,0,4,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,538,"            out[i] = getEntry(row, i);",4,1,1,2,4,0,6,0,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,547,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,548,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,549,        if (array.length != nCols) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,552,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,553,"            setEntry(row, i, array[i]);",0,0,1,2,4,0,6,0,0,10,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,562,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,563,"            out[i] = getEntry(i, column);",6,1,1,2,4,0,6,0,0,18,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,573,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,574,        if (array.length != nRows) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",2,0,1,1,2,1,0,0,0,7,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,580,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,585,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,586,"        setEntry(row, column, getEntry(row, column) + increment);",4,1,0,2,4,0,12,0,0,17,57,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,587,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,592,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,593,"        setEntry(row, column, getEntry(row, column) * factor);",8,3,0,2,4,0,12,0,0,25,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,594,    },6,4,0,0,1,0,20,0,0,32,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,611,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,637,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,638,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,639,        if (nRows != nCols) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,640,"            throw new NonSquareMatrixException(nRows, nCols);",18,3,0,1,2,0,0,2,0,26,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,642,        double trace = 0;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,643,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,644,"            trace += getEntry(i, i);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,646,        return trace;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,652,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,653,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,654,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,655,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,658,        final double[] out = new double[nRows];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,659,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,660,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,661,            for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,662,"                sum += getEntry(row, i) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,664,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,667,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",6,0,0,5,10,1,4,4,0,16,79,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,676,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,677,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,678,            final int nCols = getColumnDimension();,16,2,0,1,2,4,2,0,0,25,39,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,679,            if (v.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,0,2,4,0,4,2,0,8,62,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,683,            final double[] out = new double[nRows];,2,0,1,2,4,1,6,0,0,11,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,684,            for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,685,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,686,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0,0,0,3,6,0,0,0,0,9,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,0,2,4,0,0,0,0,6,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,14,3,1,0,0,1,0,0,0,22,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0,0,0,1,3,0,0,0,0,4,83,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,4,3,0,0,0,0,0,0,0,7,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0,0,1,0,0,0,2,0,0,7,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,4,1,0,1,2,0,8,4,0,18,54,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,        super(null); // No custom convergence criterion.,0,0,0,1,2,0,0,0,0,3,48,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,12,2,0,0,0,0,0,0,0,15,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,        this.orthoTolerance = orthoTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },10,4,0,0,1,1,0,0,0,15,1,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,16,5,0,0,0,0,0,0,0,22,13,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,14,2,0,1,2,4,4,0,0,23,24,1,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,    },2,2,0,0,1,0,0,0,0,4,1,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,20,8,0,2,4,2,6,0,0,35,51,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,        final int dim = weight.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,2,0,0,2,5,0,12,2,0,17,38,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,        if (max <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,    },4,1,0,0,1,0,10,2,0,20,1,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",16,1,0,0,1,0,0,0,0,17,73,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,8,0,0,8,44,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,4,2,0,0,10,47,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0,1,1,0,0,1,6,0,0,14,10,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0,0,1,0,1,0,0,0,0,7,37,9,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0,0,0,0,1,0,0,0,0,1,1,7,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },2,0,0,0,1,3,0,0,0,5,1,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,0,0,0,1,76,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,138,        this.rowSeparator      = rowSeparator;,0,0,0,0,0,0,0,0,0,0,38,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,14,3,0,0,0,0,0,0,0,19,32,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0,0,1,0,1,0,4,0,0,6,1,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,6,0,0,1,2,0,0,2,0,9,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,48,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,47,    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {,0,0,0,1,3,0,0,0,0,4,59,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());",0,0,0,2,4,0,0,0,0,6,56,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,2,1,0,1,3,0,0,0,0,3,16,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,85,        maxCountCallback = cb;,0,0,0,0,0,0,0,0,0,0,22,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,50,        super(checker);,2,0,0,1,2,0,6,0,0,8,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,51,    },8,1,0,0,1,0,0,0,0,10,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,206,    private static class MaxIterCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,54,"        return fit(maxEval, new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,79,"        addObservedPoint(1.0, x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,102,        observations.add(observed);,2,0,0,1,2,0,6,0,0,9,27,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,112,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0,0,0,3,6,1,8,2,0,10,76,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,119,        observations.clear();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,180,        return optimum.getPointRef();,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,4,0,0,0,1,1,0,2,0,7,66,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,62,        super.incrementEvaluationCount();,2,0,0,1,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,63,        return model.value(params);,2,0,0,1,2,1,6,0,0,8,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,88,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,90,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,92,        return super.optimize(optData);,4,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,101,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,110,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,119,        return target.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,136,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,137,            if (data instanceof ModelFunction) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,138,                model = ((ModelFunction) data).getModelFunction();,6,0,0,3,6,0,6,2,0,15,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,139,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,141,            if (data instanceof Target) {,4,1,0,1,3,0,0,0,0,5,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,142,                target = ((Target) data).getTarget();,6,0,0,3,6,0,16,4,0,27,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,143,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,145,            if (data instanceof Weight) {,4,0,0,1,3,0,0,2,0,6,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,146,                weightMatrix = ((Weight) data).getWeight();,4,0,0,3,6,0,2,2,0,9,43,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,147,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,159,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,160,"            throw new DimensionMismatchException(target.length,",4,0,0,0,1,0,0,2,0,6,51,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,35,public abstract class MultivariateVectorOptimizer,2,0,0,0,0,2,0,0,0,4,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,66,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,68,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,70,        return super.optimize(optData);,4,1,1,1,2,1,0,0,0,8,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,86,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,87,            if (data instanceof InitialGuess) {,2,0,0,1,3,0,0,2,0,4,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,88,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,89,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,91,            if (data instanceof SimpleBounds) {,18,5,0,1,3,0,4,4,0,32,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,92,                final SimpleBounds bounds = (SimpleBounds) data;,0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,93,                lowerBound = bounds.getLower();,2,0,0,1,2,0,4,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,94,                upperBound = bounds.getUpper();,4,0,0,1,2,1,4,0,0,10,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,95,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,106,        return start == null ? null : start.clone();,2,1,0,1,2,1,4,0,0,7,44,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,112,        return lowerBound == null ? null : lowerBound.clone();,2,1,0,1,2,1,4,0,0,7,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,118,        return upperBound == null ? null : upperBound.clone();,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,125,        if (start != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,126,            final int dim = start.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,127,            if (lowerBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,128,                if (lowerBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,129,"                    throw new DimensionMismatchException(lowerBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,131,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,132,                    final double v = start[i];,2,0,1,1,2,1,0,0,0,7,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,133,                    final double lo = lowerBound[i];,2,0,1,1,2,1,0,0,0,7,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,134,                    if (v < lo) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,135,"                        throw new NumberIsTooSmallException(v, lo, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,139,            if (upperBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,140,                if (upperBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,141,"                    throw new DimensionMismatchException(upperBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,143,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,144,                    final double v = start[i];,4,0,1,1,2,1,0,0,0,10,26,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,145,                    final double hi = upperBound[i];,4,0,1,1,2,1,0,0,0,12,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,146,                    if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,147,"                        throw new NumberIsTooLargeException(v, hi, true);",6,0,0,1,2,0,0,2,0,9,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,60,        return evaluations.getMaximalCount();,2,0,0,1,2,1,6,2,0,10,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,72,        return evaluations.getCount();,4,0,0,1,2,1,10,0,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,81,        return iterations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,93,        return iterations.getCount();,0,0,0,1,2,1,10,0,0,10,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,102,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,123,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,125,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,126,        iterations.resetCount();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,128,        return doOptimize();,2,1,0,1,2,1,2,0,0,5,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,147,        evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,158,        iterations.incrementCount();,0,0,0,1,2,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,175,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,176,            if (data instanceof MaxEval) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,177,                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());,2,0,0,4,8,0,6,2,0,10,59,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,178,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,180,            if (data instanceof MaxIter) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,181,                iterations.setMaximalCount(((MaxIter) data).getMaxIter());,0,0,0,4,8,0,0,0,0,12,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,182,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,66,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,220,                        final double[][] jacobian = new double[observations.size()][];,2,0,0,5,10,1,4,0,0,7,62,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,221,                        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,222,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,223,"                            jacobian[i++] = f.gradient(observed.getX(), point);",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,224,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,225,                        return jacobian;,2,0,0,0,0,1,8,0,0,10,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,184,    private class TheoreticalValuesFunction {,2,0,1,0,1,1,4,0,0,11,41,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,203,                        final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,204,                        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,205,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,206,"                            values[i++] = f.value(observed.getX(), point);",2,0,1,3,6,0,10,0,0,16,46,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,207,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,209,                        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,45,        return model;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,45,        return jacobian;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,353,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,366,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,368,        long xl = Double.doubleToLongBits(d);,10,2,0,1,2,0,6,0,0,18,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,369,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,370,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,379,        return Math.sqrt(a);,0,0,0,1,2,1,14,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,387,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,388,          return x;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,396,      if (x > 20) {,6,1,0,1,3,0,2,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,397,          if (x >= LOG_MAX_VALUE) {,6,0,0,1,3,0,0,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,399,              final double t = exp(0.5 * x);,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,400,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,402,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,404,      } else if (x < -20) {,2,1,0,1,4,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,405,          if (x <= -LOG_MAX_VALUE) {,14,3,0,1,3,0,0,0,0,20,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,407,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,8,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,408,              return (0.5 * t) * t;,4,2,0,1,2,1,0,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,410,              return 0.5 * exp(-x);,2,1,0,1,2,1,2,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,414,      final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,415,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,416,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,418,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,420,      double ya = hiPrec[0] + hiPrec[1];,0,0,1,2,4,0,0,0,0,10,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,0,0,3,6,1,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,423,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,424,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,425,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,428,      double recip = 1.0/ya;,4,1,1,0,0,0,0,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,429,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,430,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,431,      double recipb = recip - recipa;,2,0,0,0,0,0,0,0,0,3,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,436,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,439,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,440,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,441,      ya = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,442,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,443,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,444,      ya = temp;,6,1,0,0,0,0,0,0,0,8,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,446,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,447,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,448,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,456,      boolean negate = false;,4,0,0,0,0,1,6,0,0,12,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,457,      if (x != x) {,4,1,0,1,3,0,2,0,0,8,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,458,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,466,      if (x > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,467,          if (x >= LOG_MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,469,              final double t = exp(0.5 * x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,470,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,472,              return 0.5 * exp(x);,8,1,0,1,2,1,18,0,0,27,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,474,      } else if (x < -20) {,4,3,0,1,4,0,0,0,0,8,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,475,          if (x <= -LOG_MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,477,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,2,0,0,9,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,478,              return (-0.5 * t) * t;,4,2,0,1,2,1,0,0,0,7,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,480,              return -0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,484,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,485,          return x;,4,0,0,0,0,2,0,0,0,5,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,488,      if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,489,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,490,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,495,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,496,          double hiPrec[] = new double[2];,2,0,0,2,4,0,8,0,0,10,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,497,"          exp(x, 0.0, hiPrec);",8,3,0,1,2,0,6,0,0,17,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,499,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,10,1,0,3,6,0,0,0,0,13,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,502,          double temp = ya * HEX_40000000;,14,2,0,0,0,0,0,0,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,503,          double yaa = ya + temp - temp;,2,0,0,0,0,0,10,0,0,13,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,504,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,507,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,508,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,509,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,510,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,515,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,517,          recipa = -recipa;,12,2,1,0,0,0,0,0,0,20,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,518,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,521,          temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,522,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,523,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,524,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,525,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,526,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,528,          result = ya + yb;,14,1,0,0,0,0,0,0,0,16,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,529,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,530,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,532,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,533,"          expm1(x, hiPrec);",8,2,0,1,2,0,0,0,0,10,17,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,535,          double ya = hiPrec[0] + hiPrec[1];,8,1,0,2,4,0,0,0,0,10,34,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,4,0,0,4,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,539,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,540,          double denomr = 1.0 / denom;,8,1,0,0,0,0,8,0,0,17,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,541,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,542,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,543,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,544,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,545,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,547,          temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,548,          double za = denom + temp - temp;,4,1,0,0,0,0,4,0,0,10,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,549,          double zb = denom - za;,18,4,0,0,0,0,0,0,0,23,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,554,          rb += yb*denomr;                        // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,558,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,559,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,560,          ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,561,          temp = ya + rb;,8,1,0,0,0,0,0,0,0,11,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,562,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,0,5,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,563,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,565,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,566,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,569,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,570,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,573,      return result;,0,0,0,0,0,1,6,0,0,7,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,581,      boolean negate = false;,10,1,1,0,0,1,0,0,0,18,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,583,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,584,          return x;,4,3,0,0,0,1,20,0,0,27,9,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,593,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,594,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,597,      if (x < -20) {,6,2,1,1,3,0,0,0,0,14,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,598,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,601,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,602,          return x;,8,1,0,0,0,1,0,0,0,9,9,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,605,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,606,          x = -x;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,607,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,611,      if (x >= 0.5) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,612,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,614,"          exp(x*2.0, 0.0, hiPrec);",2,0,0,1,2,1,0,8,0,11,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,616,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,28,10,1,3,6,0,0,0,0,46,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,620,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,621,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,622,          double temp = na + yb;,10,1,0,0,0,0,0,0,0,12,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,623,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,624,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,627,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,628,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,629,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,630,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,631,          da = temp;,6,1,0,0,0,0,0,0,0,8,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,633,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,634,          double daa = da + temp - temp;,8,2,1,0,0,0,4,0,0,23,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,635,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,638,          double ratio = na/da;,8,3,0,0,0,0,0,0,0,11,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,639,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,640,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,641,          double ratiob = ratio - ratioa;,8,2,0,0,0,0,4,0,0,14,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,647,          ratiob += nb / da;,8,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,649,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,651,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,652,      },6,0,0,0,1,1,0,0,0,7,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,654,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,656,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,658,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,20,9,0,3,6,0,0,0,0,30,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,662,          double na = ya;,8,0,0,0,0,0,0,0,0,9,15,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,663,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,666,          double da = 2.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,667,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,668,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,669,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,670,          da = temp;,6,1,0,0,0,0,16,0,0,24,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,672,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,673,          double daa = da + temp - temp;,6,1,0,0,0,0,0,0,0,8,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,674,          double dab = da - daa;,8,1,0,0,0,0,0,0,0,11,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,677,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,678,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,679,          double ratioa = ratio + temp - temp;,16,3,0,0,0,0,6,0,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,680,          double ratiob = ratio - ratioa;,14,2,1,0,0,0,0,0,0,19,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,686,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,688,          ratiob += -db * na / da / da;,12,3,0,0,0,0,0,0,0,19,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,690,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,693,      if (negate) {,0,0,0,1,3,0,4,0,0,4,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,694,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,697,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,713,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,714,        if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,715,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,716,            a = -a;,2,0,0,0,0,0,2,0,0,5,7,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,720,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,723,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,724,            if (a > 0.097) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,8,16,0,0,0,0,24,212,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,726,            } else if (a > 0.036) {,12,2,0,1,4,0,0,0,0,17,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,42,13,1,6,12,0,0,0,0,58,160,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,728,            } else if (a > 0.0036) {,10,2,0,1,4,0,0,0,0,13,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,735,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,743,        boolean negative = false;,8,1,1,0,0,0,0,0,0,13,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,744,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,745,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,746,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,750,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,1,3,6,0,4,0,0,18,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,753,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,754,            if (a > 0.087) {,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,756,            } else if (a > 0.031) {,4,2,0,1,4,0,0,0,0,6,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,0,0,0,42,109,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,758,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,12,5,0,2,4,0,0,2,0,20,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,765,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,87,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,91,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",8,0,0,1,2,1,4,0,0,13,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,807,        return Math.random();,6,1,0,1,2,1,10,0,0,17,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,831,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,851,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,853,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,854,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,855,                    hiPrec[0] = 0.0;,0,0,1,1,2,0,10,0,0,13,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,856,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,858,                return 0.0;,0,0,0,0,0,1,0,2,0,2,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,861,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",16,4,0,1,2,2,8,0,0,31,79,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,864,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,865,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,866,                    hiPrec[1] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,868,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",10,1,0,1,2,0,0,0,0,12,79,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,874,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,875,                    hiPrec[0] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,876,                    hiPrec[1] /= 4.455505956692756620;,4,1,1,1,2,1,0,0,0,9,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,878,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,881,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,886,            intVal = -intVal;,2,0,0,0,0,0,0,2,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,888,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,891,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,893,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,895,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,14,3,1,1,2,0,0,2,0,25,71,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,2,1,1,2,1,0,0,0,18,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,14,3,0,1,2,1,0,0,0,19,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,923,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,927,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,0,0,2,0,17,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,934,        double tempA = intPartA * fracPartA;,2,1,1,0,0,0,0,0,0,11,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,941,        final double tempC = tempB + tempA;,6,1,0,0,0,1,4,0,0,12,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,7,0,0,0,0,0,0,0,34,63,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,946,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,949,        if (hiPrec != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,951,            hiPrec[0] = tempA;,2,0,1,1,2,0,4,0,0,10,18,6,0.0,0,0,-1
