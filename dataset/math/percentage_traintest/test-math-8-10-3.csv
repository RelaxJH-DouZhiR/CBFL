dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1255,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1256,                if (max < e) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1257,                    max = e;,32,8,0,0,0,0,0,0,0,42,8,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1261,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1269,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1270,        for (int r = 0; r < m.getRowDimension(); r++) {,10,1,0,2,5,1,10,0,0,25,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1271,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1272,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1273,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1274,                    min = e;,4,0,0,0,0,0,0,0,0,5,8,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1278,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1286,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1287,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1288,            if (max < m[r]) {,0,0,0,2,5,0,0,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1289,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1292,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1300,        double min = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1301,        for (int r = 0; r < m.length; r++) {,20,3,0,1,3,1,0,0,0,26,36,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1302,            if (min > m[r]) {,0,0,0,2,5,0,0,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1303,                min = m[r];,16,5,1,1,2,0,0,0,0,27,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1306,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1351,        double[][] d = new double[size][popSize];,4,0,1,4,8,0,0,0,0,8,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1352,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1353,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1354,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1357,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,85,public class CMAESOptimizer,2,0,0,0,0,1,0,0,0,3,27,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,72,        return evaluations.getMaximalCount();,2,0,0,1,2,1,2,0,0,5,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,82,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,95,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,98,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,99,        return function.value(point);,2,0,0,1,2,1,6,0,0,9,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,155,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,73,        final double[] p = getKey();,2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,74,        return p == null ? null : p.clone();,4,1,0,1,2,1,10,0,0,16,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,20,65,        return key;,4,0,0,0,0,1,0,0,0,4,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,20,74,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,844,"        DoubleIndex(double value, int index) {",6,0,0,1,3,0,0,0,0,6,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,845,            this.value = value;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,846,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,847,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,851,"            return Double.compare(value, o.value);",6,0,0,1,2,1,6,0,0,13,38,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,834,    private static class DoubleIndex implements Comparable<DoubleIndex> {,2,0,0,0,1,2,0,4,0,8,69,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,895,        public FitnessFunction() {,2,0,0,1,3,1,0,0,0,3,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,896,            valueRange = 1.0;,2,0,0,0,0,0,0,0,0,3,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,897,            isRepairMode = true;,2,0,0,0,0,0,0,0,0,4,20,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,898,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,905,            if (boundaries == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,930,            if (boundaries == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,947,            if (boundaries != null && isRepairMode) {,0,0,0,1,3,0,0,0,0,4,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,956,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,982,            this.valueRange = valueRange;,6,0,0,0,0,0,0,0,0,7,29,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,983,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,85,        return relativeThreshold;,0,0,0,0,0,1,0,0,0,1,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,92,        return absoluteThreshold;,2,0,1,0,0,1,0,0,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,77,        final double p = previous.getValue();,2,0,0,1,2,1,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,78,        final double c = current.getValue();,2,0,0,1,2,1,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,79,        final double difference = FastMath.abs(p - c);,6,1,0,1,2,1,4,0,0,12,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,80,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",2,0,0,3,6,1,16,0,0,19,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,81,        return difference <= size * getRelativeThreshold() ||,4,3,0,1,2,1,2,0,0,9,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,34,public class SimpleValueChecker,2,0,0,0,0,1,0,0,0,3,31,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,2,1,0,1,4,1,2,2,0,7,63,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,289,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,290,            },2,0,1,0,1,0,12,0,0,19,1,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,295,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,12,0,0,12,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,67,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,68,        if (rowDimension < 1) {,16,3,0,1,3,0,0,0,0,19,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,74,    },8,2,1,0,1,0,0,0,0,13,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,8,0,0,1,2,3,4,2,0,18,95,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,82,        final int columnCount = getColumnDimension();,22,7,0,1,2,0,0,0,0,31,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,84,        for (int row = 0; row < rowCount; ++row) {,22,3,0,1,3,0,0,0,0,27,42,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,90,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,98,        final int rowCount    = getRowDimension();,10,3,0,1,2,1,2,0,0,16,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,99,        final int columnCount = getColumnDimension();,6,2,0,1,2,2,8,0,0,18,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,101,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,102,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,113,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,115,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,62,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,63,        if (rowDimension < 1) {,4,1,0,1,3,3,0,0,0,8,23,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,66,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,56,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,58,    },2,0,0,0,1,0,0,0,0,2,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0,0,0,1,2,1,0,0,0,4,63,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,246,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,303,        data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,139,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,158,    private static final double SINE_TABLE_B[] =,2,1,1,1,2,0,0,0,0,8,44,6,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,177,    private static final double COSINE_TABLE_A[] =,2,0,1,1,2,0,0,0,0,5,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,196,    private static final double COSINE_TABLE_B[] =,4,0,0,1,2,3,0,0,0,8,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,275,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,0,0,10,54,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,4,0,0,4,61,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,506,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,509,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,512,        return out;,8,1,0,0,0,2,0,0,0,10,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,117,    },6,0,0,0,1,0,8,0,0,15,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,389,"        checkRowIndex(m, row);",0,0,0,1,2,0,6,0,0,6,22,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,391,    },0,0,0,0,1,0,6,0,0,6,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,407,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,418,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,51,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,53,    protected AbstractRealMatrix() {},2,0,1,2,4,1,0,0,0,8,33,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,44,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,4,0,17,95,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,47,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,6,1,0,2,4,0,6,0,0,14,55,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,21,53,public abstract class RealLinearOperator {,2,0,1,0,1,0,0,0,0,5,42,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,76,    },2,0,0,0,1,1,0,0,0,3,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,271,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,275,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,280,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,281,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,3,64,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,286,        } else {,2,0,0,0,2,0,8,0,0,11,8,10,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,290,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,526,"        setSubMatrix(in, 0, 0);",2,0,1,1,2,0,0,0,0,5,23,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,133,                            final NumberFormat format) {,2,1,0,0,2,1,12,2,0,18,28,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,143,    },6,1,0,0,1,1,0,0,0,8,1,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,264,        if (o == null) {,12,2,0,1,3,0,0,0,0,15,16,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,56,        return nf;,6,2,0,0,0,1,0,0,0,8,10,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1046,        public Entry() {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1047,            setIndex(0);,6,1,0,1,2,0,2,0,0,10,12,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1048,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1056,            return getEntry(getIndex());,4,1,1,2,4,4,8,0,0,23,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1065,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1066,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1074,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1083,            this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1084,        },2,0,0,0,1,0,4,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,100,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,166,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,177,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,178,        if (d != n) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,179,"            throw new DimensionMismatchException(d, n);",6,2,1,1,2,0,0,2,0,19,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,190,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,207,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,208,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,209,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0,0,0,0,1,0,0,0,0,1,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,212,        if ((end < 0) || (end >= dim)) {,6,3,0,3,7,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,213,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",2,1,1,0,1,0,0,0,0,7,61,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,216,        if (end < start) {,6,1,0,1,3,0,0,0,0,9,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,218,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,1,1,0,1,0,0,0,0,8,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,233,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,234,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,235,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,236,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,237,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,238,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,239,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,240,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,241,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,254,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,255,        RealVector result = v.mapMultiply(-1d);,2,0,0,1,2,0,4,2,0,9,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,256,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,257,        while (it.hasNext()) {,2,1,0,2,5,0,4,0,0,7,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,258,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,259,            final int index = e.getIndex();,2,0,0,1,2,1,12,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,260,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,261,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,262,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,273,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,284,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,285,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,287,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,306,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,307,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,308,        final int n = getDimension();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,309,        for (int i = 0; i < n; i++) {,6,1,0,1,3,0,0,0,0,8,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,310,            d += getEntry(i) * v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,312,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,328,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,329,        final double vNorm = v.getNorm();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,331,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,333,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,335,        return dotProduct(v) / (norm * vNorm);,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,395,        checkVectorDimensions(v);,2,0,0,1,2,0,4,0,0,7,25,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,396,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,397,        Iterator<Entry> it = iterator();,8,1,1,1,2,0,2,4,0,19,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,398,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,399,            final Entry e = it.next();,28,4,0,1,2,7,4,4,0,48,26,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,400,            final double diff = e.getValue() - v.getEntry(e.getIndex());,2,1,0,3,6,1,12,0,0,16,60,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,401,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,403,        return FastMath.sqrt(d);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,417,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,418,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,419,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,420,            final Entry e = it.next();,4,0,1,1,2,1,4,2,0,15,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,421,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,422,            sum += value * value;,4,1,1,0,0,0,0,0,0,10,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,423,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,424,        return FastMath.sqrt(sum);,0,0,0,1,2,1,12,0,0,12,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,438,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,439,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,440,        while (it.hasNext()) {,4,2,0,2,5,0,4,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,441,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,442,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,443,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,444,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,458,        double norm = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,459,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,460,        while (it.hasNext()) {,10,1,0,2,5,0,4,0,0,16,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,461,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,462,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,463,        },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,464,        return norm;,8,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,480,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,481,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,482,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,483,        while (it.hasNext()) {,2,0,0,2,5,0,0,0,0,3,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,484,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,485,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,4,1,0,4,8,0,16,0,0,23,59,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,486,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,487,        return d;,4,1,0,0,0,1,0,2,0,7,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,506,        checkVectorDimensions(v);,12,3,0,1,2,2,0,2,0,20,25,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,507,        double d = 0;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,508,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,509,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,510,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,511,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,512,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,513,        return d;,10,1,0,0,0,1,0,0,0,11,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,523,        int minIndex    = -1;,4,0,0,0,0,0,0,0,0,5,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,524,        double minValue = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,525,        Iterator<Entry> iterator = iterator();,28,9,0,1,2,0,0,0,0,38,38,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,526,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,527,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,528,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,529,                minIndex = entry.getIndex();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,530,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,532,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,533,        return minIndex;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,543,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,544,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,554,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,4,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,555,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,556,        Iterator<Entry> iterator = iterator();,8,1,0,1,2,0,2,4,0,16,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,557,        while (iterator.hasNext()) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,558,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,559,            if (entry.getValue() >= maxValue) {,22,9,0,2,5,1,4,0,0,36,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,560,                maxIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,561,                maxValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,563,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,564,        return maxIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,574,        final int maxIndex = getMaxIndex();,26,4,0,1,2,1,16,0,0,49,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,575,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,587,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,598,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,609,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,0,0,0,7,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,620,        return mapAddToSelf(-d);,2,0,0,1,2,1,2,0,0,5,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,631,        return copy().mapDivideToSelf(d);,0,0,0,2,4,1,6,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,642,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,8,2,0,10,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,652,        final int m = this.getDimension();,6,1,0,1,2,1,0,0,0,8,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,653,        final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,655,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,656,"            product = new OpenMapRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,658,"            product = new Array2DRowRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,660,        for (int i = 0; i < m; i++) {,8,1,0,1,3,0,2,2,0,14,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,661,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,662,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,3,6,0,22,0,0,23,57,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,665,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,680,        final double norm2 = v.dotProduct(v);,2,0,0,1,2,1,6,0,0,9,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,681,        if (norm2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,682,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,684,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,0,0,3,6,1,0,0,0,10,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,693,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,694,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,695,            final Entry e = it.next();,6,0,0,1,2,1,4,2,0,13,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,696,            e.setValue(value);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,697,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,698,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,708,        int dim = getDimension();,2,0,0,1,2,0,2,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,709,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,710,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,711,            values[i] = getEntry(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,713,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,724,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,725,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,726,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,8,1,0,1,2,0,6,0,0,16,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,728,        return mapDivide(norm);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,738,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,739,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,740,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,742,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,743,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,761,        return new SparseEntryIterator();,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,775,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,776,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,821,        return copy().mapToSelf(function);,6,1,0,2,4,1,6,0,0,13,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,838,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,839,        while (it.hasNext()) {,2,0,1,2,5,0,4,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,840,            final Entry e = it.next();,14,3,0,1,2,1,4,2,0,26,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,841,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,842,        },6,0,0,0,1,0,4,0,0,11,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,843,        return this;,10,2,0,0,0,1,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,861,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,878,        checkVectorDimensions(y);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,879,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,880,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,881,            final double yi = y.getEntry(i);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,882,"            setEntry(i, a * xi + b * yi);",12,4,1,1,2,0,4,0,0,24,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,884,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,898,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,899,"        visitor.start(dim, 0, dim - 1);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,900,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,901,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,903,        return visitor.end();,8,2,0,1,2,1,4,0,0,14,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,921,"        checkIndices(start, end);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,922,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,923,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,924,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,8,0,0,8,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,926,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,941,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,961,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,974,        final int dim = getDimension();,24,1,0,1,2,0,4,0,0,32,31,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,975,"        visitor.start(dim, 0, dim - 1);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,976,        for (int i = 0; i < dim; i++) {,18,4,0,1,3,0,0,0,0,23,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,977,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,14,0,0,14,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,979,        return visitor.end();,4,0,0,1,2,1,10,0,0,15,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,997,"        checkIndices(start, end);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,998,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,999,        for (int i = start; i <= end; i++) {,12,2,0,1,3,0,0,0,0,15,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1000,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,0,0,0,9,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1002,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1017,        return walkInDefaultOrder(visitor);,4,0,0,1,2,1,12,0,0,16,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1037,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1112,        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1125,        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1230,        return new RealVector() {,0,0,1,1,3,1,4,2,0,11,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1150,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,        final int r = (k + w - 1) / w;,0,0,0,1,2,0,0,0,0,3,30,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,4,1,0,0,0,0,8,0,0,14,16,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,2,1,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,109,        i2   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,10,4,1,1,2,0,0,0,0,17,18,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,8,6,1,2,4,0,0,0,0,27,26,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,4,1,0,1,2,0,0,0,0,5,14,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,    },4,1,0,0,1,0,12,0,0,17,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0,0,0,1,3,0,4,0,0,4,19,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,161,        if (seed.length < v.length) {,4,1,0,1,3,0,0,0,0,5,29,9,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,163,                final long l = v[i - seed.length];,10,1,1,1,2,1,4,0,0,18,34,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,39,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,170,    },10,2,0,0,1,0,0,2,0,14,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,6,0,0,14,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,165,        nextGaussian = Double.NaN;,0,0,0,0,0,0,0,0,0,0,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,128,    public RandomDataGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,115,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,118,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,129,    },0,0,0,0,1,0,4,0,0,4,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,108,    public RandomDataImpl() {,22,7,1,1,3,2,2,0,0,39,25,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,109,        delegate = new RandomDataGenerator();,0,0,0,1,2,0,0,0,0,3,37,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,110,    },4,1,0,0,1,0,0,0,0,5,1,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,55,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,70,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,71,        random = rng;,10,1,0,0,0,0,0,0,0,13,13,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,253,            final int n = (int) FastMath.floor(x - 1.5);,0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,254,            double prod = 1.0;,2,0,0,0,0,0,4,0,0,7,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,255,            for (int i = 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,256,                prod *= x - i;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,258,            return logGamma1p(x - (n + 1)) + FastMath.log(prod);,0,0,0,3,6,1,0,0,0,10,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,602,                ret = (t / x) * ((c - 0.5) - 0.5);,0,0,0,3,6,0,0,0,0,9,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,4,0,0,1,2,0,0,0,0,5,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1365,            return y * x;,4,1,1,0,0,1,4,0,0,13,13,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,64,"        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,65,    },16,2,0,0,1,0,0,0,0,20,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,77,"        this(new  Well19937c(), lower, upper, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,58,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,252,        } else if (x <= 8.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,95,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,96,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,102,        this.lower = lower;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,103,        this.upper = upper;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,104,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1348,            final double xpa = 1 + x;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1349,            final double xpb = -(xpa - 1 - x);,0,0,0,1,2,0,0,0,0,3,34,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1351,            final double[] hiPrec = new double[2];,2,0,0,2,4,1,0,0,0,3,38,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1352,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,74,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1359,            final double fx1 = xpb / xpa;,8,1,0,0,0,0,0,0,0,11,29,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1360,            final double epsilon = 0.5 * fx1 + 1;,4,2,0,0,0,1,0,0,0,7,37,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,65,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",6,0,0,0,1,0,0,0,0,6,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,86,"        this(new Well19937c(), numeratorDegreesOfFreedom,",2,0,0,1,3,0,0,2,0,4,49,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,108,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,49,    private double numericalVariance = Double.NaN;,28,3,0,0,0,2,10,0,0,44,46,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,51,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,110,        if (numeratorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,37,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,114,        if (denominatorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,39,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,118,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,119,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,120,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,0,2,4,0,0,0,0,6,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,205,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,604,                ret = x * c;,6,1,0,0,0,0,0,0,0,8,12,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3306,        if (x != x) { // NaN,6,1,0,1,3,0,0,2,0,9,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3314,        y = (long) x;,6,0,0,1,2,0,0,0,0,8,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3315,        if (x < 0 && y != x) {,24,9,0,1,3,0,6,0,0,39,22,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3319,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3323,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,572,            double p = INV_GAMMA1P_M1_P6;,4,0,0,0,0,0,0,0,0,4,29,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,573,            p = INV_GAMMA1P_M1_P5 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,574,            p = INV_GAMMA1P_M1_P4 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,575,            p = INV_GAMMA1P_M1_P3 + t * p;,8,3,0,0,0,0,14,0,0,26,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,576,            p = INV_GAMMA1P_M1_P2 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,577,            p = INV_GAMMA1P_M1_P1 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,578,            p = INV_GAMMA1P_M1_P0 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,580,            double q = INV_GAMMA1P_M1_Q4;,0,0,0,0,0,0,0,0,0,0,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,581,            q = INV_GAMMA1P_M1_Q3 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,582,            q = INV_GAMMA1P_M1_Q2 + t * q;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,583,            q = INV_GAMMA1P_M1_Q1 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,584,            q = 1.0 + t * q;,4,1,0,0,0,0,0,0,0,5,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,586,            double c = INV_GAMMA1P_M1_C13 + (p / q) * t;,10,3,0,1,2,0,0,0,0,13,44,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,587,            c = INV_GAMMA1P_M1_C12 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,588,            c = INV_GAMMA1P_M1_C11 + t * c;,8,2,0,0,0,0,0,0,0,12,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,589,            c = INV_GAMMA1P_M1_C10 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,590,            c = INV_GAMMA1P_M1_C9 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,591,            c = INV_GAMMA1P_M1_C8 + t * c;,12,2,0,0,0,0,0,0,0,15,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,592,            c = INV_GAMMA1P_M1_C7 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,593,            c = INV_GAMMA1P_M1_C6 + t * c;,12,3,0,0,0,0,4,0,0,21,30,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,594,            c = INV_GAMMA1P_M1_C5 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,595,            c = INV_GAMMA1P_M1_C4 + t * c;,10,3,0,0,0,0,0,0,0,14,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,596,            c = INV_GAMMA1P_M1_C3 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,597,            c = INV_GAMMA1P_M1_C2 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,598,            c = INV_GAMMA1P_M1_C1 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,599,            c = INV_GAMMA1P_M1_C0 + t * c;,8,2,0,0,0,0,8,0,0,19,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,601,            if (x > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,251,            return logGamma1p((x - 0.5) - 0.5);,2,2,0,2,4,1,2,0,0,6,35,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1338,        if (x == -1) {,12,4,0,1,3,0,0,0,0,18,14,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1342,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1346,        if (x > 1e-6 ||,0,0,0,0,1,0,0,0,0,1,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,531,        if (x < -0.5) {,2,1,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,534,        if (x > 1.5) {,10,2,0,1,3,0,0,0,0,13,14,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,539,        final double t = x <= 0.5 ? x : (x - 0.5) - 0.5;,8,3,0,1,2,1,0,0,0,12,48,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,540,        if (t < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,608,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,624,        if (x < -0.5) {,2,1,1,1,3,0,4,0,0,10,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,627,        if (x > 1.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,631,        return -FastMath.log1p(invGamma1pm1(x));,0,0,0,2,4,1,8,0,0,9,40,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1222,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1223,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1224,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1225,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1226,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1229,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1231,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1232,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0,0,0,2,4,0,0,0,0,6,71,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1236,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1237,            double yb = lnCoef_last[1];,2,0,1,1,2,0,0,0,0,4,27,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1241,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1242,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1244,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1245,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1246,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1250,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1251,                ab = yb + lnCoef_i[1];,8,2,1,1,2,0,0,0,0,13,22,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1253,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1254,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1255,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1259,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,10,0,0,10,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,1,68,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,12,3,0,0,2,0,0,0,0,15,12,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,4,1,0,0,0,0,0,0,0,6,6,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,12,1,0,0,0,4,0,0,0,18,16,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,12,2,0,0,0,0,0,0,0,16,22,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,6,0,0,1,2,4,4,0,0,13,30,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,23,114,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,266,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,274,                return,0,0,0,0,0,0,0,0,0,0,6,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,110,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,258,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,185,                        d = p / q;,6,1,0,0,0,0,0,0,0,8,10,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,186,                        u = x + d;,10,1,0,0,0,0,0,0,0,14,10,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,189,                        if (u - a < tol2 || b - u < tol2) {,18,6,1,1,3,0,4,0,0,33,35,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,201,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,305,            return a.getValue() <= b.getValue() ? a : b;,0,0,0,2,4,1,0,0,0,7,44,4,0.07692,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,173,                        p = -p;,0,0,0,0,0,0,0,0,0,0,7,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,244,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,308,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,309,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,312,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,315,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,319,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,321,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,45,                                    final double value) {,12,2,0,0,2,1,6,0,0,23,21,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,46,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,47,        this.value = value;,0,0,1,0,0,0,8,0,0,10,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,141,        if (!isMinim) {,2,0,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,144,        double fv = fx;,8,0,0,0,0,0,0,0,0,9,15,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,145,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,147,        UnivariatePointValuePair previous = null;,10,2,0,0,0,0,12,2,0,27,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,148,        UnivariatePointValuePair current,2,0,0,0,0,0,0,2,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,152,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,154,            final double m = 0.5 * (a + b);,6,2,0,1,2,1,0,0,0,9,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,155,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,6,2,0,1,2,1,6,0,0,15,76,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,156,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,159,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,160,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,161,                double p = 0;,14,1,0,0,0,0,0,0,0,17,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,162,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,163,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,164,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,73,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,104,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,251,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,178,                        d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,179,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,182,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,237,                        b = x;,0,0,0,0,0,0,0,0,0,0,6,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,166,                        p = -p;,6,0,0,0,0,0,0,0,0,9,7,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,45,                                    final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,48,    },2,1,0,0,1,1,10,0,0,14,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,135,        if (!isMinim) {,4,0,0,1,3,0,0,0,0,4,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,138,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,139,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,141,        UnivariatePointValuePair previous = null;,4,0,0,0,0,1,6,4,0,15,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,142,        UnivariatePointValuePair current,2,0,0,0,0,0,0,2,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,145,        int iter = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,147,            final double m = 0.5 * (a + b);,6,2,0,1,2,1,0,0,0,9,31,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,148,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,0,0,0,1,2,0,0,0,0,3,76,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,149,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,152,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,153,            if (!stop) {,0,0,0,1,3,0,0,0,0,4,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,154,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,155,                double q = 0;,6,0,0,0,0,0,0,2,0,8,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,156,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,157,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,159,                if (FastMath.abs(e) > tol1) { // Fit parabola.,0,0,0,2,5,0,0,0,0,7,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,160,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,161,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,12,0,0,26,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,162,                    p = (x - v) * q - (x - w) * r;,0,0,0,2,4,0,0,0,0,6,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,163,                    q = 2 * (q - r);,0,0,0,1,2,0,0,0,0,3,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,165,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,168,                        q = -q;,0,0,0,0,0,0,0,0,0,0,7,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,171,                    r = e;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,172,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,174,                    if (p > q * (a - x) &&,8,5,0,1,3,0,0,0,0,13,22,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,191,                        if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,192,                            e = b - x;,6,1,0,0,0,0,0,0,0,8,10,14,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,196,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,200,                    if (x < m) {,6,1,1,1,3,0,0,0,0,14,12,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,203,                        e = a - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,205,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,209,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,216,                    u = x + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,219,                double fu = computeObjectiveValue(u);,2,0,0,1,2,0,4,0,0,6,37,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,220,                if (!isMinim) {,10,4,1,1,3,0,0,0,0,20,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,225,                previous = current;,12,1,0,0,0,0,0,0,0,15,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,226,"                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",10,0,0,1,2,0,0,2,0,14,62,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,228,                if (checker != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,235,                if (fu <= fx) {,0,0,0,1,3,0,0,0,0,4,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,236,                    if (u < x) {,0,0,0,1,3,0,0,0,0,4,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,239,                        a = x;,14,2,0,0,0,0,0,0,0,18,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,241,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,242,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,243,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,244,                    fw = fx;,12,1,0,0,0,0,0,0,0,16,8,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,245,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,246,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,248,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,249,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,253,                    if (fu <= fw ||,4,2,0,0,1,0,0,0,0,6,15,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,255,                        v = w;,2,0,1,0,0,0,0,0,0,7,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,256,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,257,                        w = u;,4,0,0,0,0,2,0,4,0,10,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,258,                        fw = fu;,8,0,0,0,0,0,0,0,0,10,8,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,266,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,0,0,0,0,5,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,269,            ++iter;,4,0,0,0,0,1,8,0,0,14,7,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,270,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,69,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0,0,0,2,4,0,0,0,0,6,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,76,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,77,    },2,0,0,0,1,0,0,0,0,2,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,243,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,307,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0,0,0,0,0,0,0,0,0,0,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,6,1,0,0,0,1,0,0,0,8,35,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,0,0,0,0,0,0,0,0,0,0,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,8,1,0,0,0,0,2,0,0,12,13,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,14,3,0,0,0,1,0,0,0,18,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0,0,0,0,0,0,0,0,0,0,13,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,0,2,5,0,0,0,0,7,93,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,34,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,24,2,0,1,2,0,6,0,0,35,13,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3250,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3254,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3258,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,12,1,0,1,2,0,0,4,0,19,12,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,3,4,2,0,25,52,1,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,65,        this.throwable = throwable;,0,0,0,0,0,0,0,0,0,0,27,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,6,1,0,1,2,0,0,0,0,7,46,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,4,0,0,2,4,0,0,4,0,9,43,3,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },2,0,0,0,1,0,0,2,0,4,1,9,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,0,2,4,0,10,0,0,13,46,0,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,3,0,0,0,5,50,2,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,44,            for (Object o : array) {,0,0,0,1,3,0,4,0,0,4,24,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },2,0,0,0,1,0,0,0,0,2,1,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,1,0,5,10,0,6,0,0,12,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",8,4,1,2,4,0,0,0,0,14,74,5,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,3,0,1,2,0,0,0,0,7,41,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,0,0,1,2,0,0,0,0,8,95,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,1,0,1,2,0,4,0,0,8,60,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,3,0,0,0,15,54,1,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",6,0,0,4,8,0,0,4,0,10,108,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",14,3,0,1,2,0,2,0,0,21,89,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,0,0,1,2,0,0,0,0,8,100,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,1,0,0,0,3,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,8,0,0,11,84,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,0,0,2,4,0,2,0,0,6,78,7,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,4,2,0,9,72,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0,0,0,3,6,0,0,0,0,9,39,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",4,0,0,1,2,0,0,0,0,5,94,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",14,3,0,1,2,0,0,0,0,19,49,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",8,4,0,5,10,0,0,0,0,13,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",4,0,0,2,4,0,0,0,0,5,88,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,1,3,6,0,6,0,0,13,35,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",6,0,0,1,2,0,0,2,0,11,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",4,0,0,1,2,0,0,0,0,5,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",10,1,0,3,6,3,0,0,0,15,77,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",6,1,0,3,6,0,0,0,0,8,85,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,4,51,10,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",4,0,0,3,6,0,0,0,0,6,105,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",4,0,0,4,8,0,0,0,0,6,112,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0,0,0,3,6,0,0,0,0,9,72,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,4,0,0,11,41,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",4,1,1,4,8,0,0,0,0,11,56,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",14,4,0,1,2,0,0,2,0,20,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,8,0,0,11,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",10,3,1,4,8,0,0,0,0,17,132,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,162,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,6,0,0,6,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,12,1,0,1,2,0,0,0,0,15,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,2,2,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,2,0,13,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,1,2,5,0,0,0,0,7,93,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,2,0,0,0,0,0,0,0,0,3,8,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,10,1,0,1,2,0,0,0,0,13,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,238,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0,0,0,0,1,0,0,0,0,1,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,4,0,1,0,0,3,0,0,0,10,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,4,0,0,1,2,0,2,0,0,7,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,307,        long nOd = ((long) numerator) * object.denominator;,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,10,2,0,2,4,0,0,0,0,12,51,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,12,3,0,1,3,0,0,0,0,16,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,334,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,0,0,0,1,3,0,0,0,0,4,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,0,0,0,1,2,0,0,0,0,3,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,1,2,5,0,2,0,0,8,38,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,513,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",2,0,0,2,5,3,6,0,0,11,28,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,6,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,2,0,0,0,0,0,2,0,0,5,20,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,4,0,0,0,0,0,0,2,0,6,22,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,14,2,0,3,7,1,0,0,0,18,83,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,4,1,0,1,3,0,0,0,0,5,23,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,6,1,0,0,0,0,0,0,16,11,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,0,2,4,1,10,0,0,14,63,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",2,0,0,1,2,1,8,0,0,11,46,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,10,3,0,0,0,1,0,0,0,14,33,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",2,0,0,1,2,1,8,0,0,11,48,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,103,                if (cmp == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,105,                } else if (cmp < 0) {,0,0,0,1,4,0,0,0,0,5,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,4,1,1,1,2,0,0,4,0,15,45,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,153,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,165,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,167,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,169,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,12,0,0,14,55,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,175,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,1,8,0,0,11,56,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,181,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,2,0,0,0,0,1,0,2,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,446,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,2,1,1,2,5,0,0,0,0,8,38,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",4,2,0,2,4,0,16,0,0,22,96,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,4,1,0,2,5,3,6,0,0,14,46,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,6,0,1,0,0,0,0,0,0,9,13,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",2,0,0,1,2,0,12,0,0,15,40,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,471,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,486,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,529,        return getWidth() - 1;,0,0,0,1,2,1,0,0,0,4,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,62,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,69,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,6,3,0,2,4,0,8,0,0,18,68,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,70,    },4,2,0,0,1,0,0,0,0,6,1,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,88,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,89,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,90,        } else if (x < y) {,8,2,1,1,4,0,0,0,0,13,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,264,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,300,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,301,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,304,        if (xInt < 0) {,4,3,1,1,3,0,0,0,0,16,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,305,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,307,        if (yInt < 0) {,2,1,1,1,3,0,0,0,0,6,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,311,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,313,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,4,0,0,9,49,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,235,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,10,47,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,4,0,0,4,25,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,43,        return getDefaultNumberFormat(Locale.getDefault());,14,3,0,2,4,1,6,0,0,23,51,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,53,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,59,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,379,"        checkRowIndex(m, row);",8,2,1,1,2,1,6,0,0,24,22,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,380,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,381,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,391,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,396,    },2,0,0,0,1,0,0,2,0,5,1,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,406,        if (column < 0 || column >= m.getColumnDimension()) {,10,3,0,2,5,0,4,2,0,22,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,410,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,56,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,58,    },6,1,1,0,1,1,0,0,0,10,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,255,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,303,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,61,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,62,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,65,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,43,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,46,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,87,    },4,0,0,0,1,1,0,0,0,6,1,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,103,"    public ArrayRealVector(double[] d, boolean copyArray) {",12,0,0,2,5,1,4,2,0,20,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,104,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,107,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,42,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,601,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,713,        return data.clone();,2,0,0,1,2,1,4,0,0,7,20,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,743,        if (data.length != n) {,6,1,1,1,3,0,0,0,0,13,23,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,746,    },6,1,1,0,1,0,0,0,0,10,1,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,38,public class ArrayRealVector extends RealVector implements Serializable {,0,0,0,0,1,0,0,0,0,1,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",10,0,0,0,1,0,0,2,0,12,76,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,133,                            final NumberFormat format) {,12,2,0,0,2,1,4,2,0,23,28,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,137,        this.rowSuffix         = rowSuffix;,6,0,0,0,0,0,0,0,0,8,35,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,138,        this.rowSeparator      = rowSeparator;,10,0,0,0,0,1,0,0,0,12,38,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,143,    },10,5,1,0,1,0,0,0,0,20,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,207,        return format;,10,0,0,0,0,1,0,2,0,13,14,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,1,0,1,2,0,4,2,0,12,64,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,109,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,112,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,113,        this.format      = format;,10,3,0,0,0,0,0,0,0,14,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,28,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,31,"    MAXIMIZE,",2,1,1,0,0,0,0,0,0,10,9,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,34,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,197,        if (tableau.getNumArtificialVariables() == 0) {,4,2,0,2,5,0,8,0,0,14,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,215,        final SimplexTableau tableau =,2,0,0,0,0,1,0,2,0,5,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,223,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,89,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,96,        return function;,2,0,0,0,0,1,0,0,0,2,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,103,        return Collections.unmodifiableCollection(linearConstraints);,2,0,0,1,2,1,6,2,0,11,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,141,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,58,"        this(new ArrayRealVector(coefficients), constantTerm);",0,0,0,2,4,0,0,0,0,6,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",6,0,0,1,3,1,0,2,0,9,78,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,67,        this.constantTerm = constantTerm;,0,0,0,0,0,0,0,0,0,0,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,75,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,83,        return constantTerm;,10,1,0,0,0,1,0,0,0,13,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,82,    },2,0,0,0,1,0,2,2,0,6,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,100,        this.coefficients = coefficients;,10,0,0,0,0,1,0,0,0,12,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,168,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,184,        return value;,4,1,0,0,0,1,6,0,0,11,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,139,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,89,    private final List<String> columnLabels = new ArrayList<String>();,2,0,0,1,2,2,0,8,0,12,66,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,140,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,141,        this.constraints            = normalizeConstraints(constraints);,12,2,0,1,2,1,4,0,0,21,64,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,142,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,143,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,144,        this.maxUlps                = maxUlps;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,145,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,4,1,1,2,4,0,6,0,0,17,66,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,147,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,149,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,151,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,8,1,0,1,2,0,2,0,0,12,60,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,152,        initializeColumnLabels();,0,0,0,1,2,0,2,0,0,2,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,153,    },10,2,1,0,1,0,0,0,0,17,1,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,159,      if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,162,"      columnLabels.add(""Z"");",0,0,0,1,2,0,4,0,0,5,22,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,163,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,10,1,0,2,5,0,2,0,0,15,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,164,"        columnLabels.add(""x"" + i);",6,2,1,1,2,0,4,0,0,18,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,166,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,169,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,172,      for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,175,"      columnLabels.add(""RHS"");",2,0,1,1,2,0,4,0,0,12,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,186,        int width = numDecisionVariables + numSlackVariables +,4,1,1,0,0,0,0,0,0,10,54,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,188,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,189,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,0,0,1,2,0,0,4,0,10,70,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,192,        if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,195,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,0,0,0,2,4,0,0,0,0,6,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,196,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",0,0,0,1,2,0,0,0,0,3,51,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,197,        RealVector objectiveCoefficients =,2,0,0,0,0,0,4,2,0,8,34,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,199,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,4,8,0,10,0,0,12,72,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,200,"        matrix.setEntry(zIndex, width - 1,",2,1,0,0,1,0,6,0,0,9,34,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,203,        if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,209,        int slackVar = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,210,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,211,        for (int i = 0; i < constraints.size(); i++) {,8,1,0,2,5,3,4,0,0,17,46,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,212,            LinearConstraint constraint = constraints.get(i);,2,0,0,1,2,0,6,2,0,10,49,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,213,            int row = getNumObjectiveFunctions() + i;,4,1,0,1,2,0,2,0,0,7,41,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,216,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,1,5,10,0,12,0,0,14,76,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,219,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,225,"            matrix.setEntry(row, width - 1, constraint.getValue());",4,1,0,2,4,0,10,0,0,15,55,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,228,            if (constraint.getRelationship() == Relationship.LEQ) {,4,1,0,2,5,0,4,0,0,9,55,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,235,            if ((constraint.getRelationship() == Relationship.EQ) ||,4,2,0,2,5,0,4,0,0,10,56,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,243,        return matrix;,2,0,0,0,0,1,0,0,0,2,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,252,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,253,        for (LinearConstraint constraint : originalConstraints) {,4,0,0,1,3,0,0,2,0,6,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,254,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,255,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,256,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,265,        if (constraint.getValue() < 0) {,0,0,0,2,5,0,0,0,0,7,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,279,        return this.numArtificialVariables > 0 ? 2 : 1;,10,4,0,0,0,1,0,0,0,14,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,288,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,289,        for (final LinearConstraint constraint : constraints) {,6,0,1,1,3,2,0,2,0,14,55,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,290,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,291,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,293,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,294,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,381,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,382,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,389,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,10,2,1,3,7,0,4,0,0,22,67,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,390,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,391,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,0,0,2,5,0,0,0,0,7,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,395,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,478,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,495,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,552,        return f.getCoefficients().getDimension();,0,0,0,2,4,1,0,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,560,        return numSlackVariables;,8,2,0,0,0,2,10,0,0,23,25,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,568,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,62,"        super(specific, wrong, lo, hi);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,71,        return lo;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,77,        return hi;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,46,"        super(pattern, wrong, arguments);",14,2,0,1,2,0,0,0,0,16,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,54,        return argument;,12,2,0,0,0,1,0,0,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,44,                                        Object ... args) {,4,0,0,0,2,0,0,2,0,7,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,45,        context = new ExceptionContext(this);,4,0,1,1,2,0,0,2,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,51,        return context;,8,1,0,0,0,1,0,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,57,        return context.getMessage();,6,1,0,1,2,1,4,0,0,12,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,8,0,0,1,2,0,0,0,0,10,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,47,"        super(specific, 0, arguments);",10,1,0,1,2,0,0,0,0,11,30,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,44,        context = new ExceptionContext(this);,8,2,1,1,2,0,0,2,0,23,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,10,0,0,14,58,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,58,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,11,34,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,63,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,69,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,55,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,62,"        context.addMessage(pattern, args);",8,1,0,1,2,0,8,0,0,18,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,63,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,38,"        super(value, 0, false);",6,0,0,1,2,0,0,0,0,8,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,39,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,7,28,3,0.0,0,0,-1
