dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,46,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,110,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,2,62,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,16,1,0,1,3,0,10,4,0,33,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,8,1,1,0,0,0,0,0,0,13,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,8,2,0,0,0,0,0,0,0,10,31,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",8,0,0,1,3,2,0,2,0,12,58,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,            return NaN;,16,7,0,0,0,1,4,0,0,27,11,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,                return result;,2,0,1,0,0,2,0,0,0,7,14,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,            double result = x*y;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,            double invx = 1.0/x;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,6,1,0,0,0,0,6,0,0,13,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2982,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,273,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",8,3,0,1,3,1,6,0,0,18,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,4,0,0,0,0,0,0,0,0,4,44,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0,1,0,0,0,0,4,0,0,5,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1433,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1434,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1435,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,260,        if (divisor.isInfinite() && !isInfinite()) {,2,0,0,3,7,0,0,0,0,2,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,264,        final double c = divisor.getReal();,2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,265,        final double d = divisor.getImaginary();,14,1,0,1,2,2,6,0,0,24,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,267,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,0,0,3,7,0,0,0,0,10,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,419,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,        if (o == null) {,16,2,0,1,3,0,0,0,0,20,16,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1375,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1376,        double lnzb = 0.0;,6,1,0,0,0,1,0,0,0,8,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1378,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1452,        double a = LN_2_A*exp;,6,1,1,0,0,3,0,0,0,14,22,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1453,        double b = 0.0;,0,0,0,0,0,0,6,0,0,6,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1454,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1455,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1456,        a = c;,4,3,0,0,0,0,0,0,0,7,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1457,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1459,        c = a + lnza;,16,3,0,0,0,0,0,0,0,22,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1460,        d = -(c - a - lnza);,2,0,0,1,2,1,4,0,0,7,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1461,        a = c;,10,5,0,0,0,0,0,0,0,16,6,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1462,        b = b + d;,2,0,0,0,0,1,4,0,0,7,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1464,        c = a + LN_2_B*exp;,2,0,0,0,0,0,0,0,0,3,19,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1465,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1466,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1467,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1469,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1470,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1471,        a = c;,6,3,1,0,0,0,4,0,0,15,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1472,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1474,        c = a + lnzb;,12,2,0,0,0,0,14,0,0,33,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1475,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1476,        a = c;,2,1,0,0,0,0,0,0,0,3,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1477,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1479,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,7,21,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1484,        return a + b;,4,3,0,0,0,1,0,0,0,7,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,750,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,0,0,0,8,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,132,            double q = imaginary / real;,6,1,0,0,0,0,0,0,0,7,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,4,3,0,2,4,1,10,0,0,17,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1292,        int exp = (int)(bits >> 52)-1023;,18,5,0,2,4,0,0,0,0,24,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1314,        if (exp == -1 || exp == 0) {,2,0,0,1,3,0,8,0,0,11,28,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,129,            if (real == 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1269,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1283,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1266,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,162,"        return createComplex(real + addend.getReal(),",8,0,0,1,3,3,0,0,0,11,45,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2977,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,746,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,0,0,0,0,0,0,0,0,0,0,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0,0,0,2,4,0,0,0,0,6,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,241,        return new Iterator();,8,1,1,1,2,1,0,2,0,18,22,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,40,public class OpenIntToDoubleHashMap implements Serializable {,6,0,0,0,1,1,8,2,0,18,61,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,498,        private Iterator() {,2,0,0,1,3,1,0,0,0,3,20,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,501,            referenceCount = count;,0,0,0,0,0,0,0,0,0,0,23,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,504,            next = -1;,4,0,0,0,0,0,0,0,0,6,10,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,506,                advance();,0,0,0,1,2,0,0,0,0,3,10,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,509,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,511,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,484,    public class Iterator {,10,0,0,0,1,3,0,0,0,13,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,518,            return next >= 0;,2,0,0,0,0,1,4,2,0,8,17,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,546,            if (referenceCount != count) {,8,5,0,1,3,0,4,0,0,17,30,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,549,            if (current < 0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,552,            return values[current];,2,0,1,1,2,4,0,0,0,9,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,563,            if (referenceCount != count) {,0,0,0,1,3,0,0,0,0,4,30,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,568,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,572,                while (states[++next] != FULL) {,4,1,1,2,5,0,0,0,0,8,32,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,580,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,582,        },0,0,0,0,1,0,2,0,0,2,1,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,479,        checkIndex(index);,0,0,1,1,2,0,4,0,0,13,18,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,480,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,180,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,181,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,182,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,385,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0,0,0,3,6,1,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,76,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,103,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",8,0,0,1,2,0,4,0,0,13,44,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,120,                                  final double missingEntries) {,18,4,0,0,2,1,18,0,0,42,30,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,121,        final int capacity = computeCapacity(expectedSize);,2,0,0,1,2,1,4,0,0,7,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,122,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,123,        values = new double[capacity];,2,0,1,1,2,0,0,0,0,5,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,124,        states = new byte[capacity];,4,0,1,1,2,0,0,0,0,7,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,125,        this.missingEntries = missingEntries;,4,0,0,0,0,0,0,0,0,5,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,126,        mask   = capacity - 1;,0,0,1,0,0,0,0,0,0,7,22,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,153,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,156,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,0,0,0,0,0,1,0,0,0,1,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",2,1,0,2,4,1,6,0,0,9,60,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,                x0 = x1;,6,1,0,0,0,4,2,0,0,13,8,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,                f0 = f1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,22,1,0,1,3,0,8,0,0,34,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,            x1 = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,            f1 = fx;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,        },6,3,0,0,1,0,0,0,0,10,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,        super(absoluteAccuracy);,2,1,0,1,2,0,0,0,0,3,24,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,        this.method = method;,8,0,0,0,0,0,0,0,0,12,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,1,2,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,150,        final double atol = getAbsoluteAccuracy();,0,0,0,1,2,0,0,0,0,3,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,        final double rtol = getRelativeAccuracy();,2,1,1,1,2,0,4,0,0,15,42,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,22,7,0,4,8,2,0,0,0,31,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,            if (fx == 0.0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,134,        return relativeAccuracy;,4,0,0,0,0,2,0,0,0,5,24,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,283,    },2,0,1,0,1,0,0,0,0,6,1,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,2,0,0,2,4,4,6,0,0,11,61,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3925,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3929,            return b;,14,2,0,0,0,2,0,0,0,18,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0,0,0,1,2,0,10,0,0,10,67,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,116,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,2,0,2,31,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,117,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,131,        double x1 = getMax();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,132,        double f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,133,        double f1 = computeObjectiveValue(x1);,4,2,0,1,2,0,10,0,0,16,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,141,        if (f1 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,41,public enum AllowedSolution {,12,3,0,0,1,0,0,0,0,15,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,48,"    ANY_SIDE,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,55,"    LEFT_SIDE,",4,1,0,0,0,0,4,0,0,10,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,62,"    RIGHT_SIDE,",6,1,1,0,0,0,0,0,0,9,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,68,"    BELOW_SIDE,",12,1,0,0,0,0,0,0,0,14,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,74,    ABOVE_SIDE;,12,2,0,0,0,1,6,0,0,22,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,256,    protected enum Method {,2,1,0,0,1,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,262,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,265,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,268,        PEGASUS;,4,0,0,0,0,0,0,2,0,6,8,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,308,        final double fLo = function.value(lower);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,371,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,374,"        verifyInterval(lower, upper);",4,1,0,1,2,0,10,0,0,15,29,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,375,"        if (!isBracketing(function, lower, upper)) {",0,0,0,2,5,0,10,0,0,12,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,1,6,0,0,9,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,1,2,4,0,0,0,0,11,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,1,4,0,0,7,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,110,    private static final double LN_SPLIT_COEF[][] = {,12,1,1,2,5,0,0,0,0,19,49,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,130,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,156,    private static final double SINE_TABLE_B[] = new double[14];,4,0,0,2,4,0,0,0,0,4,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,10,0,0,10,62,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,168,    private static final double TANGENT_TABLE_B[] = new double[14];,6,0,0,2,4,0,0,0,0,8,63,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,171,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,5,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,233,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,235,            FACT[i] = FACT[i-1] * i;,2,1,0,2,4,0,0,0,0,3,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,238,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,5,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,239,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,243,"            expint(i, tmp);",4,1,0,1,2,0,6,2,0,13,15,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,134,        return relativeAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,283,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,    },4,0,0,0,1,3,0,4,0,13,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3925,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3929,            return b;,4,0,0,0,0,1,0,0,0,4,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,117,"        return super.solve(maxEval, f, min, max, startValue);",0,0,0,1,2,1,0,0,0,4,53,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,        double x1 = getMax();,2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,132,        double f0 = computeObjectiveValue(x0);,4,0,1,1,2,1,4,0,0,13,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,133,        double f1 = computeObjectiveValue(x1);,0,0,0,1,2,0,0,0,0,3,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,141,        if (f1 == 0.0) {,6,5,0,1,3,0,0,0,0,11,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",2,0,0,1,2,1,18,0,0,21,67,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,308,        final double fLo = function.value(lower);,2,1,0,1,2,0,2,0,0,7,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,371,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,374,"        verifyInterval(lower, upper);",0,0,0,1,2,0,0,0,0,3,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,375,"        if (!isBracketing(function, lower, upper)) {",4,1,0,2,5,0,8,0,0,14,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,41,public enum AllowedSolution {,4,0,0,0,1,1,0,0,0,5,29,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,48,"    ANY_SIDE,",12,3,0,0,0,0,4,0,0,20,9,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,55,"    LEFT_SIDE,",0,0,0,0,0,0,0,0,0,0,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,62,"    RIGHT_SIDE,",10,2,0,0,0,0,4,0,0,16,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,68,"    BELOW_SIDE,",0,0,0,0,0,0,0,0,0,0,11,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,74,    ABOVE_SIDE;,4,0,0,0,0,0,10,2,0,16,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,250,    protected enum Method {,0,0,0,0,1,0,0,0,0,1,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,256,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,259,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,262,        PEGASUS;,0,0,0,0,0,0,0,0,0,0,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,4,0,0,2,4,0,0,0,0,5,65,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,0,0,2,4,1,0,8,0,15,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,98,    private static final double FACT[] = new double[20];,6,0,0,2,4,4,4,0,0,15,52,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,110,    private static final double LN_SPLIT_COEF[][] = {,8,1,0,2,5,0,0,0,0,11,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,6,0,0,6,60,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,159,    private static final double COSINE_TABLE_A[] = new double[14];,14,0,0,2,4,4,4,4,0,28,62,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,3,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,168,    private static final double TANGENT_TABLE_B[] = new double[14];,10,4,1,2,4,0,8,0,0,28,63,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,171,    private static final long RECIP_2PI[] = new long[] {,10,1,0,2,5,3,0,0,0,15,52,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,0,0,0,0,2,0,0,0,0,2,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",16,3,0,1,3,0,0,0,0,20,39,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,12,1,0,0,0,1,6,0,0,21,17,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,12,3,1,0,0,1,0,0,0,21,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,4,0,0,0,0,0,0,2,0,6,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,10,4,0,0,0,1,12,0,0,27,34,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,0,0,0,0,7,44,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,12,3,0,1,2,1,10,0,0,27,43,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,2,2,0,12,44,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,4,0,0,1,2,1,0,0,0,5,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,4,0,1,0,0,0,0,0,0,10,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,4,0,0,0,0,0,0,0,0,5,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,2,1,0,3,6,0,4,0,0,7,86,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,4,0,0,1,2,1,0,0,0,5,48,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2448,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2449,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2450,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2451,        final double cb1        = SPLIT_FACTOR * b1;,2,0,1,0,0,0,0,0,0,6,44,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2452,        final double b1High     = cb1 - (cb1 - b1);,8,1,0,1,2,4,0,0,0,13,43,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2453,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2456,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2457,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2460,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2461,        final double a2High     = ca2 - (ca2 - a2);,12,2,0,1,2,1,0,2,0,19,43,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2462,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2463,        final double cb2        = SPLIT_FACTOR * b2;,12,2,0,0,0,1,6,0,0,22,44,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2464,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2465,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2468,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.02326,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,997,"        return new Complex(realPart, imaginaryPart);",0,0,0,1,2,1,0,0,0,4,44,4,0.01449,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,308,        return real;,2,0,0,0,0,1,0,0,0,2,12,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,299,        return imaginary;,2,0,0,0,0,1,0,0,0,2,17,4,0.00971,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,91,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,92,        this.imaginary = imaginary;,4,0,0,0,0,0,0,0,0,5,27,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,94,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,0,0,0,2,4,0,0,0,0,6,54,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,95,        isInfinite = !isNaN &&,0,0,0,0,0,0,0,0,0,0,22,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,97,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,52,"    public static final Complex I = new Complex(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,54,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,56,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,70,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,60,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,63,"    public static final Complex ONE = new Complex(1.0, 0.0);",6,1,0,1,2,0,0,0,0,7,56,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,66,"    public static final Complex ZERO = new Complex(0.0, 0.0);",2,0,0,1,2,3,0,4,0,9,57,2,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,110,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,111,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,114,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,115,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,        return nans == INFINITE;,0,0,0,0,0,1,0,0,0,1,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,0,0,0,0,0,0,0,0,0,0,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,0,0,0,0,10,26,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0,0,0,2,4,0,0,0,0,6,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0,0,0,3,6,0,0,0,0,9,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,0,0,0,1,2,0,0,0,0,3,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,        if (mantissa == 4503599627370496L) {,0,0,0,1,3,0,0,0,0,4,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,0,0,1,3,0,0,0,0,3,24,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,2,0,0,0,3,9,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,661,        return field.getTwo();,0,0,0,1,2,1,6,0,0,6,22,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,1,0,0,0,1,4,0,0,7,11,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1096,        if (mant[mant.length-1] > 1000) {,4,2,1,2,5,0,0,0,0,8,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1099,        if (mant[mant.length-1] > 100) {,10,3,1,2,5,0,0,0,0,15,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1102,        if (mant[mant.length-1] > 10) {,0,0,0,2,5,0,0,0,0,7,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,539,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",22,2,1,1,3,5,2,2,0,38,71,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,540,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,541,        this.mant    = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,542,        this.sign    = sign;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,543,        this.exp     = 0;,2,0,0,0,0,0,4,0,0,7,17,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,544,        this.nans    = nans;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,545,    },4,0,0,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,918,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,6,0,0,1,2,1,2,0,0,8,52,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2153,                    def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2154,                    def.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,16,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,393,"        return new Dfp(this, sign, nans);",14,2,0,1,2,2,2,2,0,22,33,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,383,"        return new Dfp(this, s);",2,0,0,1,2,1,0,2,0,4,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,959,        boolean changed = false;,0,0,0,0,0,0,0,0,0,0,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,961,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,965,        if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,969,        if (mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,976,        if (exp < 0) {,2,0,1,1,3,0,0,0,0,6,14,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,987,        if (exp >= mant.length) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,994,        Dfp result = newInstance(this);,8,3,0,1,2,0,2,0,0,13,31,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,995,        for (int i = 0; i < mant.length-result.exp; i++) {,22,3,0,1,3,0,0,0,0,27,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,996,            changed |= result.mant[i] != 0;,8,1,1,1,2,0,0,0,0,12,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,997,            result.mant[i] = 0;,10,1,1,1,2,0,0,0,0,15,19,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1000,        if (changed) {,0,0,0,1,3,0,0,0,0,4,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1634,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,6,0,0,1,2,0,4,0,0,12,47,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1635,            result = newInstance(getZero());,0,0,0,2,4,0,8,0,0,8,32,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1636,            result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,0,0,0,6,43,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1637,            result.nans = INFINITE;,10,0,0,0,0,0,0,0,0,12,23,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1638,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1639,            return result;,6,2,0,0,0,1,0,0,0,8,14,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2144,                if (nans == FINITE && mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2146,                    def = newInstance(getZero());,4,0,0,2,4,0,0,0,0,5,29,10,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2147,                    def.sign = (byte)(sign*oper.sign);,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2148,                    def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2151,                if (nans == FINITE && mant[mant.length-1] == 0) {,2,0,0,2,5,0,0,0,0,2,49,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2157,                if (nans == INFINITE || nans == QNAN) {,0,0,0,1,3,0,0,2,0,3,39,9,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2162,                if (nans == INFINITE || nans == SNAN) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,295,        ieeeFlags = 0;,4,3,0,0,0,0,0,0,0,8,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,296,    },14,6,1,0,1,3,0,0,0,30,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,654,        return field.getOne();,4,0,0,1,2,1,8,0,0,13,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,407,        return one;,0,0,0,0,0,1,0,0,0,1,11,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,399,            sign = -1;,16,2,0,0,0,1,0,4,0,23,10,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,423,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,485,            decimalPos = q-offset;,0,0,0,0,0,0,0,0,0,0,22,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1001,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",0,0,0,1,2,1,0,0,0,4,101,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,52,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,8,1,0,1,2,1,6,2,0,18,57,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,12,2,0,1,2,0,18,2,0,34,31,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,1,0,1,2,0,6,0,0,17,64,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,103,"                          final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,2,2,0,0,0,0,0,0,0,4,26,6,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,10,3,0,0,0,0,12,2,0,28,29,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,108,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,1,0,2,4,1,6,0,0,11,74,16,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,2,0,7,32,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,71,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,77,        msgPatterns.add(pattern);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,78,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",2,0,0,1,2,3,0,4,0,10,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,6,1,0,1,2,1,0,0,0,8,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,93,        return context.keySet();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",6,0,0,1,2,3,0,4,0,12,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,2,0,0,1,2,1,0,0,0,2,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,2,0,0,2,4,1,0,0,0,3,39,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,6,1,0,1,2,1,0,4,0,12,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,0,0,0,0,0,0,0,9,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,141,        final int len = msgPatterns.size();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,142,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,143,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,147,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,148,            if (++count < len) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
